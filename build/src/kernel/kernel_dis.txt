
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001de6 memsz 0x00001de6 flags r-x
    LOAD off    0x00003000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000004 memsz 0x00008e90 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a81  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000362  00011a84  00011a84  00002a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00200000  00200000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008e70  00200020  00200020  00003004  2**5
                  ALLOC
  4 .debug_line   00000af3  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001daa  00000000  00000000  00003af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a26  00000000  00000000  000058a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000120  00000000  00000000  000062c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000099b  00000000  00000000  000063e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00006d83  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000bd0  00000000  00000000  00006d94  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011a84 l    d  .rodata	00000000 .rodata
00200000 l    d  .data	00000000 .data
00200020 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
000102bb l     F .text	00000028 lgdt
00200020 l     O .bss	00000800 gdt_table2
00000000 l    df *ABS*	00000000 mtime.c
0001041b l     F .text	0000001f outb
00200820 l     O .bss	00000004 sys_tick
00010462 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 init.c
000104db l     F .text	0000000b list_count
000104e6 l     F .text	0000000a list_first
000104f0 l     F .text	0000000b list_last
00000000 l    df *ABS*	00000000 irq.c
00010760 l     F .text	00000007 hlt
00010767 l     F .text	00000007 cli
0001076e l     F .text	00000007 sti
00010775 l     F .text	00000028 lidt
0001079d l     F .text	0000001d inb
000107ba l     F .text	0000001f outb
00200840 l     O .bss	00000400 idt_table
000107d9 l     F .text	00000030 default_handler
00010ab0 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 klib.c
00200000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 list.c
0001129f l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011498 l     F .text	0000001d inb
000114b5 l     F .text	0000001f outb
00000000 l    df *ABS*	00000000 task.c
00011607 l     F .text	0000001b list_node_init
00011622 l     F .text	0000000b list_count
0001162d l     F .text	0000000a list_first
00200c40 l     O .bss	000000c8 task_manager
00200d20 l     O .bss	00002000 task1_stack
00202d20 l     O .bss	00002000 task2_stack
00204d20 l     O .bss	00002000 task3_stack
00206d20 l     O .bss	000000ac task2
00206de0 l     O .bss	000000ac task3
00011918 g     F .text	0000000a task_current
00011413 g     F .text	00000085 list_delete
00010de5 g     F .text	0000000b irq_enable_global
00011336 g     F .text	00000064 list_insert_last
00011922 g     F .text	0000002a task_set_ready
00010895 g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
00011882 g     F .text	00000029 task3_func
00010a1d g     F .text	0000001c handle_virtual_exception
000114d4 g     F .text	00000075 log_init
0001072a g     F .text	00000036 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00011859 g     F .text	00000029 task2_func
00010ed2 g     F .text	0000007a k_strncmp
0001093d g     F .text	0000001c handle_segment_not_present
00010cc8 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
00010841 g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
00011767 g     F .text	000000c9 tss_init
000101b3 g       .text	00000000 exception_handler_general_protection
00010991 g     F .text	0000001c handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010df0 g     F .text	0000002b pic_send_eoi
00011830 g     F .text	00000029 task1_func
00010e1b g     F .text	00000047 k_strcpy
00010e62 g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010369 g     F .text	0000006d gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
00206e90 g     O .bss	00002000 stack
00010567 g     F .text	00000163 list_test
000108cd g     F .text	0000001c handle_invalid_opcode
00010f4c g     F .text	0000003b k_strlen
00011017 g     F .text	00000064 k_memcmp
000100e2 g       .text	00000000 exception_handler_bound_range
0001190e g     F .text	0000000a get_first_task
0001015c g       .text	00000000 exception_handler_invalid_tss
00011152 g     F .text	0000014d k_vsprint
000112d7 g     F .text	0000005f list_insert_first
00010047 g       .text	00000000 exception_handler_divider
000109ad g     F .text	0000001c handle_fpu_error
00010dda g     F .text	0000000b irq_disable_global
0001196c g     F .text	00000048 sys_sched_yield
00010809 g     F .text	0000001c handle_unknown
000104fb g     F .text	00000027 kernel_init
00010fd6 g     F .text	00000041 k_memset
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010522 g     F .text	00000045 show_list
00010229 g       .text	00000000 exception_handler_machine_check
00010a80 g     F .text	00000030 irq_install
00010a01 g     F .text	0000001c handle_smd_exception
000118ab g     F .text	00000063 task1_func_init
00010d53 g     F .text	00000087 irq_disable
00010975 g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
000109c9 g     F .text	0000001c handle_alignment_check
000119df g     F .text	00000046 task_dispatch
000109e5 g     F .text	0000001c handle_machine_check
000119b4 g     F .text	0000002b task_next_run
000112b2 g     F .text	00000025 list_init
00010959 g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
0001194c g     F .text	00000020 task_set_block
000108b1 g     F .text	0000001c handle_bound_range
000101ed g       .text	00000000 exception_handler_fpu_error
00011637 g     F .text	0000001e task_switch_from_to
00010b43 g     F .text	00000185 irq_init
0001107b g     F .text	000000d7 k_itoa
00010905 g     F .text	0000001c handle_double_fault
0001043a g     F .text	00000028 handle_time
000102e3 g     F .text	00000086 segment_desc_set
000106ca g     F .text	00000060 offset_test
00010879 g     F .text	0000001c handle_breakpoint
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00011655 g     F .text	00000033 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00011a25 g     F .text	0000005c task_time_tick
000108e9 g     F .text	0000001c handle_device_unavailable
00010825 g     F .text	0000001c handle_divider
00010f87 g     F .text	0000004f k_memcpy
00011688 g     F .text	000000df task_init
000103d6 g     F .text	00000045 gdt_alloc_desc
0001139a g     F .text	00000079 list_delete_first
00010a39 g     F .text	00000047 gate_desc_set
00011549 g     F .text	000000be klog
0001085d g     F .text	0000001c handle_NMI
00010921 g     F .text	0000001c handle_invalid_tss
000104c3 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 f2 04 00 00       	call   104fb <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc 90 8e 20 00       	mov    $0x208e90,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 02 07 00 00       	jmp    1072a <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 d0 07 00 00       	call   10809 <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 cd 07 00 00       	call   10825 <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 ca 07 00 00       	call   10841 <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 c7 07 00 00       	call   1085d <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 c4 07 00 00       	call   10879 <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 c1 07 00 00       	call   10895 <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 be 07 00 00       	call   108b1 <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 bb 07 00 00       	call   108cd <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 b8 07 00 00       	call   108e9 <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 b7 07 00 00       	call   10905 <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 b6 07 00 00       	call   10921 <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 b5 07 00 00       	call   1093d <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 b4 07 00 00       	call   10959 <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 b3 07 00 00       	call   10975 <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 b2 07 00 00       	call   10991 <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 af 07 00 00       	call   109ad <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 ae 07 00 00       	call   109c9 <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 ab 07 00 00       	call   109e5 <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 a8 07 00 00       	call   10a01 <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 a5 07 00 00       	call   10a1d <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 a3 01 00 00       	call   1043a <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch
    
simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp
    sti
   102b9:	fb                   	sti    

   102ba:	c3                   	ret    

000102bb <lgdt>:

static inline void sti() {
	__asm__ __volatile__("sti");
}

static inline void lgdt(uint32_t start, uint32_t size) {
   102bb:	55                   	push   %ebp
   102bc:	89 e5                	mov    %esp,%ebp
   102be:	83 ec 10             	sub    $0x10,%esp
		uint16_t limit;
		uint16_t start15_0;
		uint16_t start31_16;
	} gdt;

	gdt.start31_16 = start >> 16;
   102c1:	8b 45 08             	mov    0x8(%ebp),%eax
   102c4:	c1 e8 10             	shr    $0x10,%eax
   102c7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   102cb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ce:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   102d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102d5:	83 e8 01             	sub    $0x1,%eax
   102d8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   102dc:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   102e0:	90                   	nop
   102e1:	c9                   	leave  
   102e2:	c3                   	ret    

000102e3 <segment_desc_set>:
#include <cpu.h>

static segment_desc_t gdt_table2[GDT_TABLE_SIZE];

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   102e3:	55                   	push   %ebp
   102e4:	89 e5                	mov    %esp,%ebp
   102e6:	83 ec 14             	sub    $0x14,%esp
   102e9:	8b 45 14             	mov    0x14(%ebp),%eax
   102ec:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table2 + (selector >> 3);
   102f0:	8b 45 08             	mov    0x8(%ebp),%eax
   102f3:	c1 f8 03             	sar    $0x3,%eax
   102f6:	c1 e0 03             	shl    $0x3,%eax
   102f9:	05 20 00 20 00       	add    $0x200020,%eax
   102fe:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   10301:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10308:	76 0f                	jbe    10319 <segment_desc_set+0x36>
		attr |= 0x8000;
   1030a:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   10310:	8b 45 10             	mov    0x10(%ebp),%eax
   10313:	c1 e8 0c             	shr    $0xc,%eax
   10316:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   10319:	8b 45 10             	mov    0x10(%ebp),%eax
   1031c:	89 c2                	mov    %eax,%edx
   1031e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10321:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   10324:	8b 45 0c             	mov    0xc(%ebp),%eax
   10327:	89 c2                	mov    %eax,%edx
   10329:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1032c:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   10330:	8b 45 0c             	mov    0xc(%ebp),%eax
   10333:	c1 e8 10             	shr    $0x10,%eax
   10336:	89 c2                	mov    %eax,%edx
   10338:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1033b:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1033e:	8b 45 10             	mov    0x10(%ebp),%eax
   10341:	c1 e8 10             	shr    $0x10,%eax
   10344:	c1 e0 08             	shl    $0x8,%eax
   10347:	66 25 00 0f          	and    $0xf00,%ax
   1034b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1034f:	89 c2                	mov    %eax,%edx
   10351:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10354:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10358:	8b 45 0c             	mov    0xc(%ebp),%eax
   1035b:	c1 e8 18             	shr    $0x18,%eax
   1035e:	89 c2                	mov    %eax,%edx
   10360:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10363:	88 50 07             	mov    %dl,0x7(%eax)
}
   10366:	90                   	nop
   10367:	c9                   	leave  
   10368:	c3                   	ret    

00010369 <gdt_init>:

void gdt_init() {
   10369:	55                   	push   %ebp
   1036a:	89 e5                	mov    %esp,%ebp
   1036c:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1036f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10376:	eb 19                	jmp    10391 <gdt_init+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   10378:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1037b:	c1 e0 03             	shl    $0x3,%eax
   1037e:	6a 00                	push   $0x0
   10380:	6a 00                	push   $0x0
   10382:	6a 00                	push   $0x0
   10384:	50                   	push   %eax
   10385:	e8 59 ff ff ff       	call   102e3 <segment_desc_set>
   1038a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1038d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10391:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10398:	7e de                	jle    10378 <gdt_init+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1039a:	68 92 c0 00 00       	push   $0xc092
   1039f:	6a ff                	push   $0xffffffff
   103a1:	6a 00                	push   $0x0
   103a3:	6a 10                	push   $0x10
   103a5:	e8 39 ff ff ff       	call   102e3 <segment_desc_set>
   103aa:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   103ad:	68 9a c0 00 00       	push   $0xc09a
   103b2:	6a ff                	push   $0xffffffff
   103b4:	6a 00                	push   $0x0
   103b6:	6a 08                	push   $0x8
   103b8:	e8 26 ff ff ff       	call   102e3 <segment_desc_set>
   103bd:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)gdt_table2, sizeof(gdt_table2));
   103c0:	b8 20 00 20 00       	mov    $0x200020,%eax
   103c5:	68 00 08 00 00       	push   $0x800
   103ca:	50                   	push   %eax
   103cb:	e8 eb fe ff ff       	call   102bb <lgdt>
   103d0:	83 c4 08             	add    $0x8,%esp

}
   103d3:	90                   	nop
   103d4:	c9                   	leave  
   103d5:	c3                   	ret    

000103d6 <gdt_alloc_desc>:

int  gdt_alloc_desc() {
   103d6:	55                   	push   %ebp
   103d7:	89 e5                	mov    %esp,%ebp
   103d9:	83 ec 10             	sub    $0x10,%esp
    int i=1;
   103dc:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    for(; i < GDT_TABLE_SIZE; i++) {
   103e3:	eb 26                	jmp    1040b <gdt_alloc_desc+0x35>
        segment_desc_t* desc = gdt_table2 + i;
   103e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103e8:	c1 e0 03             	shl    $0x3,%eax
   103eb:	05 20 00 20 00       	add    $0x200020,%eax
   103f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   103f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   103f6:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   103fa:	66 85 c0             	test   %ax,%ax
   103fd:	75 08                	jne    10407 <gdt_alloc_desc+0x31>
            return ( i * sizeof(segment_desc_t) );
   103ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10402:	c1 e0 03             	shl    $0x3,%eax
   10405:	eb 12                	jmp    10419 <gdt_alloc_desc+0x43>
    for(; i < GDT_TABLE_SIZE; i++) {
   10407:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1040b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10412:	7e d1                	jle    103e5 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   10414:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10419:	c9                   	leave  
   1041a:	c3                   	ret    

0001041b <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   1041b:	55                   	push   %ebp
   1041c:	89 e5                	mov    %esp,%ebp
   1041e:	83 ec 08             	sub    $0x8,%esp
   10421:	8b 55 08             	mov    0x8(%ebp),%edx
   10424:	8b 45 0c             	mov    0xc(%ebp),%eax
   10427:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1042b:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1042e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10432:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10436:	ee                   	out    %al,(%dx)
}
   10437:	90                   	nop
   10438:	c9                   	leave  
   10439:	c3                   	ret    

0001043a <handle_time>:


static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   1043a:	55                   	push   %ebp
   1043b:	89 e5                	mov    %esp,%ebp
   1043d:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10440:	a1 20 08 20 00       	mov    0x200820,%eax
   10445:	83 c0 01             	add    $0x1,%eax
   10448:	a3 20 08 20 00       	mov    %eax,0x200820
    pic_send_eoi(IRQ0_TIMER);
   1044d:	83 ec 0c             	sub    $0xc,%esp
   10450:	6a 20                	push   $0x20
   10452:	e8 99 09 00 00       	call   10df0 <pic_send_eoi>
   10457:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   1045a:	e8 c6 15 00 00       	call   11a25 <task_time_tick>
} 
   1045f:	90                   	nop
   10460:	c9                   	leave  
   10461:	c3                   	ret    

00010462 <pit_init>:

static void pit_init (void) {
   10462:	55                   	push   %ebp
   10463:	89 e5                	mov    %esp,%ebp
   10465:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10468:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1046f:	6a 36                	push   $0x36
   10471:	6a 43                	push   $0x43
   10473:	e8 a3 ff ff ff       	call   1041b <outb>
   10478:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   1047b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1047e:	0f b6 c0             	movzbl %al,%eax
   10481:	50                   	push   %eax
   10482:	6a 40                	push   $0x40
   10484:	e8 92 ff ff ff       	call   1041b <outb>
   10489:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   1048c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1048f:	c1 e8 08             	shr    $0x8,%eax
   10492:	0f b6 c0             	movzbl %al,%eax
   10495:	50                   	push   %eax
   10496:	6a 40                	push   $0x40
   10498:	e8 7e ff ff ff       	call   1041b <outb>
   1049d:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   104a0:	b8 86 02 01 00       	mov    $0x10286,%eax
   104a5:	83 ec 08             	sub    $0x8,%esp
   104a8:	50                   	push   %eax
   104a9:	6a 20                	push   $0x20
   104ab:	e8 d0 05 00 00       	call   10a80 <irq_install>
   104b0:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   104b3:	83 ec 0c             	sub    $0xc,%esp
   104b6:	6a 20                	push   $0x20
   104b8:	e8 0b 08 00 00       	call   10cc8 <irq_enable>
   104bd:	83 c4 10             	add    $0x10,%esp
}
   104c0:	90                   	nop
   104c1:	c9                   	leave  
   104c2:	c3                   	ret    

000104c3 <time_init>:

void time_init() {
   104c3:	55                   	push   %ebp
   104c4:	89 e5                	mov    %esp,%ebp
   104c6:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   104c9:	c7 05 20 08 20 00 00 	movl   $0x0,0x200820
   104d0:	00 00 00 

    pit_init();
   104d3:	e8 8a ff ff ff       	call   10462 <pit_init>
   104d8:	90                   	nop
   104d9:	c9                   	leave  
   104da:	c3                   	ret    

000104db <list_count>:

static inline int list_is_empty (list_t* list) {
    return list->count == 0;
}

static inline int list_count (list_t* list) {
   104db:	55                   	push   %ebp
   104dc:	89 e5                	mov    %esp,%ebp
    return list->count;
   104de:	8b 45 08             	mov    0x8(%ebp),%eax
   104e1:	8b 40 08             	mov    0x8(%eax),%eax
}
   104e4:	5d                   	pop    %ebp
   104e5:	c3                   	ret    

000104e6 <list_first>:

static inline list_node_t* list_first (list_t* list) {
   104e6:	55                   	push   %ebp
   104e7:	89 e5                	mov    %esp,%ebp
    return list->first;
   104e9:	8b 45 08             	mov    0x8(%ebp),%eax
   104ec:	8b 00                	mov    (%eax),%eax
}
   104ee:	5d                   	pop    %ebp
   104ef:	c3                   	ret    

000104f0 <list_last>:

static inline list_node_t* list_last (list_t* list) {
   104f0:	55                   	push   %ebp
   104f1:	89 e5                	mov    %esp,%ebp
    return list->last;
   104f3:	8b 45 08             	mov    0x8(%ebp),%eax
   104f6:	8b 40 04             	mov    0x4(%eax),%eax
}
   104f9:	5d                   	pop    %ebp
   104fa:	c3                   	ret    

000104fb <kernel_init>:
#include <log.h>
#include <task.h>
#include <comm/cpu_ins.h>
#include <list.h>

void kernel_init (boot_info_t * boot_info) {
   104fb:	55                   	push   %ebp
   104fc:	89 e5                	mov    %esp,%ebp
   104fe:	83 ec 08             	sub    $0x8,%esp
    log_init();
   10501:	e8 ce 0f 00 00       	call   114d4 <log_init>
    gdt_init();
   10506:	e8 5e fe ff ff       	call   10369 <gdt_init>
    irq_init();
   1050b:	e8 33 06 00 00       	call   10b43 <irq_init>
    time_init();
   10510:	e8 ae ff ff ff       	call   104c3 <time_init>
    task_manager_init();
   10515:	e8 3b 11 00 00       	call   11655 <task_manager_init>
    irq_enable_global();
   1051a:	e8 c6 08 00 00       	call   10de5 <irq_enable_global>
}
   1051f:	90                   	nop
   10520:	c9                   	leave  
   10521:	c3                   	ret    

00010522 <show_list>:


void show_list(list_t list) {
   10522:	55                   	push   %ebp
   10523:	89 e5                	mov    %esp,%ebp
   10525:	56                   	push   %esi
   10526:	53                   	push   %ebx
    klog("list: first=0x%x, last=0x%x, count=%d",
   10527:	8d 45 08             	lea    0x8(%ebp),%eax
   1052a:	50                   	push   %eax
   1052b:	e8 ab ff ff ff       	call   104db <list_count>
   10530:	83 c4 04             	add    $0x4,%esp
   10533:	89 c6                	mov    %eax,%esi
   10535:	8d 45 08             	lea    0x8(%ebp),%eax
   10538:	50                   	push   %eax
   10539:	e8 b2 ff ff ff       	call   104f0 <list_last>
   1053e:	83 c4 04             	add    $0x4,%esp
   10541:	89 c3                	mov    %eax,%ebx
   10543:	8d 45 08             	lea    0x8(%ebp),%eax
   10546:	50                   	push   %eax
   10547:	e8 9a ff ff ff       	call   104e6 <list_first>
   1054c:	83 c4 04             	add    $0x4,%esp
   1054f:	56                   	push   %esi
   10550:	53                   	push   %ebx
   10551:	50                   	push   %eax
   10552:	68 84 1a 01 00       	push   $0x11a84
   10557:	e8 ed 0f 00 00       	call   11549 <klog>
   1055c:	83 c4 10             	add    $0x10,%esp
         list_first(&list), list_last(&list), list_count(&list) );
}
   1055f:	90                   	nop
   10560:	8d 65 f8             	lea    -0x8(%ebp),%esp
   10563:	5b                   	pop    %ebx
   10564:	5e                   	pop    %esi
   10565:	5d                   	pop    %ebp
   10566:	c3                   	ret    

00010567 <list_test>:

void list_test() {
   10567:	55                   	push   %ebp
   10568:	89 e5                	mov    %esp,%ebp
   1056a:	83 ec 58             	sub    $0x58,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1056d:	83 ec 0c             	sub    $0xc,%esp
   10570:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10573:	50                   	push   %eax
   10574:	e8 39 0d 00 00       	call   112b2 <list_init>
   10579:	83 c4 10             	add    $0x10,%esp

    show_list(list);
   1057c:	83 ec 04             	sub    $0x4,%esp
   1057f:	ff 75 dc             	pushl  -0x24(%ebp)
   10582:	ff 75 d8             	pushl  -0x28(%ebp)
   10585:	ff 75 d4             	pushl  -0x2c(%ebp)
   10588:	e8 95 ff ff ff       	call   10522 <show_list>
   1058d:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10590:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10597:	eb 3f                	jmp    105d8 <list_test+0x71>
        list_node_t * node = nodes + i;
   10599:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1059c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   105a3:	8d 45 ac             	lea    -0x54(%ebp),%eax
   105a6:	01 d0                	add    %edx,%eax
   105a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   105ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
   105ae:	83 ec 04             	sub    $0x4,%esp
   105b1:	50                   	push   %eax
   105b2:	ff 75 f4             	pushl  -0xc(%ebp)
   105b5:	68 ac 1a 01 00       	push   $0x11aac
   105ba:	e8 8a 0f 00 00       	call   11549 <klog>
   105bf:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   105c2:	83 ec 08             	sub    $0x8,%esp
   105c5:	ff 75 e0             	pushl  -0x20(%ebp)
   105c8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105cb:	50                   	push   %eax
   105cc:	e8 06 0d 00 00       	call   112d7 <list_insert_first>
   105d1:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   105d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105d8:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   105dc:	7e bb                	jle    10599 <list_test+0x32>
    }
    show_list(list);
   105de:	83 ec 04             	sub    $0x4,%esp
   105e1:	ff 75 dc             	pushl  -0x24(%ebp)
   105e4:	ff 75 d8             	pushl  -0x28(%ebp)
   105e7:	ff 75 d4             	pushl  -0x2c(%ebp)
   105ea:	e8 33 ff ff ff       	call   10522 <show_list>
   105ef:	83 c4 10             	add    $0x10,%esp

    list_init(&list);
   105f2:	83 ec 0c             	sub    $0xc,%esp
   105f5:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105f8:	50                   	push   %eax
   105f9:	e8 b4 0c 00 00       	call   112b2 <list_init>
   105fe:	83 c4 10             	add    $0x10,%esp
    show_list(list);
   10601:	83 ec 04             	sub    $0x4,%esp
   10604:	ff 75 dc             	pushl  -0x24(%ebp)
   10607:	ff 75 d8             	pushl  -0x28(%ebp)
   1060a:	ff 75 d4             	pushl  -0x2c(%ebp)
   1060d:	e8 10 ff ff ff       	call   10522 <show_list>
   10612:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10615:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1061c:	eb 3f                	jmp    1065d <list_test+0xf6>
        list_node_t * node = nodes + i;
   1061e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10621:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   10628:	8d 45 ac             	lea    -0x54(%ebp),%eax
   1062b:	01 d0                	add    %edx,%eax
   1062d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   10630:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10633:	83 ec 04             	sub    $0x4,%esp
   10636:	50                   	push   %eax
   10637:	ff 75 f0             	pushl  -0x10(%ebp)
   1063a:	68 ac 1a 01 00       	push   $0x11aac
   1063f:	e8 05 0f 00 00       	call   11549 <klog>
   10644:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   10647:	83 ec 08             	sub    $0x8,%esp
   1064a:	ff 75 e4             	pushl  -0x1c(%ebp)
   1064d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10650:	50                   	push   %eax
   10651:	e8 e0 0c 00 00       	call   11336 <list_insert_last>
   10656:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10659:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1065d:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   10661:	7e bb                	jle    1061e <list_test+0xb7>
    }
    show_list(list);
   10663:	83 ec 04             	sub    $0x4,%esp
   10666:	ff 75 dc             	pushl  -0x24(%ebp)
   10669:	ff 75 d8             	pushl  -0x28(%ebp)
   1066c:	ff 75 d4             	pushl  -0x2c(%ebp)
   1066f:	e8 ae fe ff ff       	call   10522 <show_list>
   10674:	83 c4 10             	add    $0x10,%esp
// ------------------
    
    for(int i=0; i<5; i++) {
   10677:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1067e:	eb 2d                	jmp    106ad <list_test+0x146>
        list_node_t* node = list_delete_first(&list);
   10680:	83 ec 0c             	sub    $0xc,%esp
   10683:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10686:	50                   	push   %eax
   10687:	e8 0e 0d 00 00       	call   1139a <list_delete_first>
   1068c:	83 c4 10             	add    $0x10,%esp
   1068f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("delete first from list: %d, 0x%x", i, (uint32_t)node);
   10692:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10695:	83 ec 04             	sub    $0x4,%esp
   10698:	50                   	push   %eax
   10699:	ff 75 ec             	pushl  -0x14(%ebp)
   1069c:	68 cc 1a 01 00       	push   $0x11acc
   106a1:	e8 a3 0e 00 00       	call   11549 <klog>
   106a6:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   106a9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   106ad:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   106b1:	7e cd                	jle    10680 <list_test+0x119>
    }

    show_list(list);
   106b3:	83 ec 04             	sub    $0x4,%esp
   106b6:	ff 75 dc             	pushl  -0x24(%ebp)
   106b9:	ff 75 d8             	pushl  -0x28(%ebp)
   106bc:	ff 75 d4             	pushl  -0x2c(%ebp)
   106bf:	e8 5e fe ff ff       	call   10522 <show_list>
   106c4:	83 c4 10             	add    $0x10,%esp

}
   106c7:	90                   	nop
   106c8:	c9                   	leave  
   106c9:	c3                   	ret    

000106ca <offset_test>:

void offset_test() {
   106ca:	55                   	push   %ebp
   106cb:	89 e5                	mov    %esp,%ebp
   106cd:	83 ec 28             	sub    $0x28,%esp
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   106d0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   106d7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   106de:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   106e5:	c7 45 e4 56 34 12 00 	movl   $0x123456,-0x1c(%ebp)

    list_node_t * v_node = &v.node;
   106ec:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   106ef:	83 c0 04             	add    $0x4,%eax
   106f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   106f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   106f9:	74 08                	je     10703 <offset_test+0x39>
   106fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106fe:	83 e8 04             	sub    $0x4,%eax
   10701:	eb 05                	jmp    10708 <offset_test+0x3e>
   10703:	b8 00 00 00 00       	mov    $0x0,%eax
   10708:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    if(p->i != 0x123456) {
   1070b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1070e:	8b 00                	mov    (%eax),%eax
   10710:	3d 56 34 12 00       	cmp    $0x123456,%eax
   10715:	74 10                	je     10727 <offset_test+0x5d>
        klog("error");
   10717:	83 ec 0c             	sub    $0xc,%esp
   1071a:	68 ed 1a 01 00       	push   $0x11aed
   1071f:	e8 25 0e 00 00       	call   11549 <klog>
   10724:	83 c4 10             	add    $0x10,%esp
    }
}
   10727:	90                   	nop
   10728:	c9                   	leave  
   10729:	c3                   	ret    

0001072a <init_main>:


void init_main() {
   1072a:	55                   	push   %ebp
   1072b:	89 e5                	mov    %esp,%ebp
   1072d:	83 ec 08             	sub    $0x8,%esp
    klog("Kernal %s is running ... ", "1.0.0");
   10730:	83 ec 08             	sub    $0x8,%esp
   10733:	68 f3 1a 01 00       	push   $0x11af3
   10738:	68 f9 1a 01 00       	push   $0x11af9
   1073d:	e8 07 0e 00 00       	call   11549 <klog>
   10742:	83 c4 10             	add    $0x10,%esp

    task1_func_init();
   10745:	e8 61 11 00 00       	call   118ab <task1_func_init>
    task_switch_from_to(0, get_first_task());
   1074a:	e8 bf 11 00 00       	call   1190e <get_first_task>
   1074f:	83 ec 08             	sub    $0x8,%esp
   10752:	50                   	push   %eax
   10753:	6a 00                	push   $0x0
   10755:	e8 dd 0e 00 00       	call   11637 <task_switch_from_to>
   1075a:	83 c4 10             	add    $0x10,%esp
   1075d:	90                   	nop
   1075e:	c9                   	leave  
   1075f:	c3                   	ret    

00010760 <hlt>:
static inline void hlt() {
   10760:	55                   	push   %ebp
   10761:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   10763:	f4                   	hlt    
}
   10764:	90                   	nop
   10765:	5d                   	pop    %ebp
   10766:	c3                   	ret    

00010767 <cli>:
static inline void cli() {
   10767:	55                   	push   %ebp
   10768:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   1076a:	fa                   	cli    
}
   1076b:	90                   	nop
   1076c:	5d                   	pop    %ebp
   1076d:	c3                   	ret    

0001076e <sti>:
static inline void sti() {
   1076e:	55                   	push   %ebp
   1076f:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   10771:	fb                   	sti    
}
   10772:	90                   	nop
   10773:	5d                   	pop    %ebp
   10774:	c3                   	ret    

00010775 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10775:	55                   	push   %ebp
   10776:	89 e5                	mov    %esp,%ebp
   10778:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   1077b:	8b 45 08             	mov    0x8(%ebp),%eax
   1077e:	c1 e8 10             	shr    $0x10,%eax
   10781:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   10785:	8b 45 08             	mov    0x8(%ebp),%eax
   10788:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   1078c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1078f:	83 e8 01             	sub    $0x1,%eax
   10792:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   10796:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1079a:	90                   	nop
   1079b:	c9                   	leave  
   1079c:	c3                   	ret    

0001079d <inb>:
static inline uint8_t inb(uint16_t  port) {
   1079d:	55                   	push   %ebp
   1079e:	89 e5                	mov    %esp,%ebp
   107a0:	83 ec 14             	sub    $0x14,%esp
   107a3:	8b 45 08             	mov    0x8(%ebp),%eax
   107a6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   107aa:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   107ae:	89 c2                	mov    %eax,%edx
   107b0:	ec                   	in     (%dx),%al
   107b1:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   107b4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   107b8:	c9                   	leave  
   107b9:	c3                   	ret    

000107ba <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   107ba:	55                   	push   %ebp
   107bb:	89 e5                	mov    %esp,%ebp
   107bd:	83 ec 08             	sub    $0x8,%esp
   107c0:	8b 55 08             	mov    0x8(%ebp),%edx
   107c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   107c6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   107ca:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   107cd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   107d1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   107d5:	ee                   	out    %al,(%dx)
}
   107d6:	90                   	nop
   107d7:	c9                   	leave  
   107d8:	c3                   	ret    

000107d9 <default_handler>:

//  -----------------------------------------   中断相关    -------------------------------------------
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void default_handler (exception_frame_t * frame, const char * message) {
   107d9:	55                   	push   %ebp
   107da:	89 e5                	mov    %esp,%ebp
   107dc:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   107df:	83 ec 0c             	sub    $0xc,%esp
   107e2:	68 14 1b 01 00       	push   $0x11b14
   107e7:	e8 5d 0d 00 00       	call   11549 <klog>
   107ec:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   107ef:	83 ec 08             	sub    $0x8,%esp
   107f2:	ff 75 0c             	pushl  0xc(%ebp)
   107f5:	68 35 1b 01 00       	push   $0x11b35
   107fa:	e8 4a 0d 00 00       	call   11549 <klog>
   107ff:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   10802:	e8 59 ff ff ff       	call   10760 <hlt>
   10807:	eb f9                	jmp    10802 <default_handler+0x29>

00010809 <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   10809:	55                   	push   %ebp
   1080a:	89 e5                	mov    %esp,%ebp
   1080c:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   1080f:	83 ec 08             	sub    $0x8,%esp
   10812:	68 50 1b 01 00       	push   $0x11b50
   10817:	ff 75 08             	pushl  0x8(%ebp)
   1081a:	e8 ba ff ff ff       	call   107d9 <default_handler>
   1081f:	83 c4 10             	add    $0x10,%esp
}
   10822:	90                   	nop
   10823:	c9                   	leave  
   10824:	c3                   	ret    

00010825 <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   10825:	55                   	push   %ebp
   10826:	89 e5                	mov    %esp,%ebp
   10828:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   1082b:	83 ec 08             	sub    $0x8,%esp
   1082e:	68 63 1b 01 00       	push   $0x11b63
   10833:	ff 75 08             	pushl  0x8(%ebp)
   10836:	e8 9e ff ff ff       	call   107d9 <default_handler>
   1083b:	83 c4 10             	add    $0x10,%esp
}
   1083e:	90                   	nop
   1083f:	c9                   	leave  
   10840:	c3                   	ret    

00010841 <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   10841:	55                   	push   %ebp
   10842:	89 e5                	mov    %esp,%ebp
   10844:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   10847:	83 ec 08             	sub    $0x8,%esp
   1084a:	68 72 1b 01 00       	push   $0x11b72
   1084f:	ff 75 08             	pushl  0x8(%ebp)
   10852:	e8 82 ff ff ff       	call   107d9 <default_handler>
   10857:	83 c4 10             	add    $0x10,%esp
}
   1085a:	90                   	nop
   1085b:	c9                   	leave  
   1085c:	c3                   	ret    

0001085d <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   1085d:	55                   	push   %ebp
   1085e:	89 e5                	mov    %esp,%ebp
   10860:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   10863:	83 ec 08             	sub    $0x8,%esp
   10866:	68 82 1b 01 00       	push   $0x11b82
   1086b:	ff 75 08             	pushl  0x8(%ebp)
   1086e:	e8 66 ff ff ff       	call   107d9 <default_handler>
   10873:	83 c4 10             	add    $0x10,%esp
}
   10876:	90                   	nop
   10877:	c9                   	leave  
   10878:	c3                   	ret    

00010879 <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   10879:	55                   	push   %ebp
   1087a:	89 e5                	mov    %esp,%ebp
   1087c:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   1087f:	83 ec 08             	sub    $0x8,%esp
   10882:	68 91 1b 01 00       	push   $0x11b91
   10887:	ff 75 08             	pushl  0x8(%ebp)
   1088a:	e8 4a ff ff ff       	call   107d9 <default_handler>
   1088f:	83 c4 10             	add    $0x10,%esp
}
   10892:	90                   	nop
   10893:	c9                   	leave  
   10894:	c3                   	ret    

00010895 <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   10895:	55                   	push   %ebp
   10896:	89 e5                	mov    %esp,%ebp
   10898:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   1089b:	83 ec 08             	sub    $0x8,%esp
   1089e:	68 9d 1b 01 00       	push   $0x11b9d
   108a3:	ff 75 08             	pushl  0x8(%ebp)
   108a6:	e8 2e ff ff ff       	call   107d9 <default_handler>
   108ab:	83 c4 10             	add    $0x10,%esp
}
   108ae:	90                   	nop
   108af:	c9                   	leave  
   108b0:	c3                   	ret    

000108b1 <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   108b1:	55                   	push   %ebp
   108b2:	89 e5                	mov    %esp,%ebp
   108b4:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   108b7:	83 ec 08             	sub    $0x8,%esp
   108ba:	68 a7 1b 01 00       	push   $0x11ba7
   108bf:	ff 75 08             	pushl  0x8(%ebp)
   108c2:	e8 12 ff ff ff       	call   107d9 <default_handler>
   108c7:	83 c4 10             	add    $0x10,%esp
}
   108ca:	90                   	nop
   108cb:	c9                   	leave  
   108cc:	c3                   	ret    

000108cd <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   108cd:	55                   	push   %ebp
   108ce:	89 e5                	mov    %esp,%ebp
   108d0:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   108d3:	83 ec 08             	sub    $0x8,%esp
   108d6:	68 bd 1b 01 00       	push   $0x11bbd
   108db:	ff 75 08             	pushl  0x8(%ebp)
   108de:	e8 f6 fe ff ff       	call   107d9 <default_handler>
   108e3:	83 c4 10             	add    $0x10,%esp
}
   108e6:	90                   	nop
   108e7:	c9                   	leave  
   108e8:	c3                   	ret    

000108e9 <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   108e9:	55                   	push   %ebp
   108ea:	89 e5                	mov    %esp,%ebp
   108ec:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   108ef:	83 ec 08             	sub    $0x8,%esp
   108f2:	68 cd 1b 01 00       	push   $0x11bcd
   108f7:	ff 75 08             	pushl  0x8(%ebp)
   108fa:	e8 da fe ff ff       	call   107d9 <default_handler>
   108ff:	83 c4 10             	add    $0x10,%esp
}
   10902:	90                   	nop
   10903:	c9                   	leave  
   10904:	c3                   	ret    

00010905 <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   10905:	55                   	push   %ebp
   10906:	89 e5                	mov    %esp,%ebp
   10908:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   1090b:	83 ec 08             	sub    $0x8,%esp
   1090e:	68 e3 1b 01 00       	push   $0x11be3
   10913:	ff 75 08             	pushl  0x8(%ebp)
   10916:	e8 be fe ff ff       	call   107d9 <default_handler>
   1091b:	83 c4 10             	add    $0x10,%esp
}
   1091e:	90                   	nop
   1091f:	c9                   	leave  
   10920:	c3                   	ret    

00010921 <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   10921:	55                   	push   %ebp
   10922:	89 e5                	mov    %esp,%ebp
   10924:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   10927:	83 ec 08             	sub    $0x8,%esp
   1092a:	68 f1 1b 01 00       	push   $0x11bf1
   1092f:	ff 75 08             	pushl  0x8(%ebp)
   10932:	e8 a2 fe ff ff       	call   107d9 <default_handler>
   10937:	83 c4 10             	add    $0x10,%esp
}
   1093a:	90                   	nop
   1093b:	c9                   	leave  
   1093c:	c3                   	ret    

0001093d <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   1093d:	55                   	push   %ebp
   1093e:	89 e5                	mov    %esp,%ebp
   10940:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   10943:	83 ec 08             	sub    $0x8,%esp
   10946:	68 fd 1b 01 00       	push   $0x11bfd
   1094b:	ff 75 08             	pushl  0x8(%ebp)
   1094e:	e8 86 fe ff ff       	call   107d9 <default_handler>
   10953:	83 c4 10             	add    $0x10,%esp
}
   10956:	90                   	nop
   10957:	c9                   	leave  
   10958:	c3                   	ret    

00010959 <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   10959:	55                   	push   %ebp
   1095a:	89 e5                	mov    %esp,%ebp
   1095c:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   1095f:	83 ec 08             	sub    $0x8,%esp
   10962:	68 12 1c 01 00       	push   $0x11c12
   10967:	ff 75 08             	pushl  0x8(%ebp)
   1096a:	e8 6a fe ff ff       	call   107d9 <default_handler>
   1096f:	83 c4 10             	add    $0x10,%esp
}
   10972:	90                   	nop
   10973:	c9                   	leave  
   10974:	c3                   	ret    

00010975 <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   10975:	55                   	push   %ebp
   10976:	89 e5                	mov    %esp,%ebp
   10978:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   1097b:	83 ec 08             	sub    $0x8,%esp
   1097e:	68 28 1c 01 00       	push   $0x11c28
   10983:	ff 75 08             	pushl  0x8(%ebp)
   10986:	e8 4e fe ff ff       	call   107d9 <default_handler>
   1098b:	83 c4 10             	add    $0x10,%esp
}
   1098e:	90                   	nop
   1098f:	c9                   	leave  
   10990:	c3                   	ret    

00010991 <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   10991:	55                   	push   %ebp
   10992:	89 e5                	mov    %esp,%ebp
   10994:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: Page fault.");
   10997:	83 ec 08             	sub    $0x8,%esp
   1099a:	68 54 1c 01 00       	push   $0x11c54
   1099f:	ff 75 08             	pushl  0x8(%ebp)
   109a2:	e8 32 fe ff ff       	call   107d9 <default_handler>
   109a7:	83 c4 10             	add    $0x10,%esp
}
   109aa:	90                   	nop
   109ab:	c9                   	leave  
   109ac:	c3                   	ret    

000109ad <handle_fpu_error>:
void handle_fpu_error(exception_frame_t * frame) {
   109ad:	55                   	push   %ebp
   109ae:	89 e5                	mov    %esp,%ebp
   109b0:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   109b3:	83 ec 08             	sub    $0x8,%esp
   109b6:	68 77 1c 01 00       	push   $0x11c77
   109bb:	ff 75 08             	pushl  0x8(%ebp)
   109be:	e8 16 fe ff ff       	call   107d9 <default_handler>
   109c3:	83 c4 10             	add    $0x10,%esp
}
   109c6:	90                   	nop
   109c7:	c9                   	leave  
   109c8:	c3                   	ret    

000109c9 <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   109c9:	55                   	push   %ebp
   109ca:	89 e5                	mov    %esp,%ebp
   109cc:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   109cf:	83 ec 08             	sub    $0x8,%esp
   109d2:	68 95 1c 01 00       	push   $0x11c95
   109d7:	ff 75 08             	pushl  0x8(%ebp)
   109da:	e8 fa fd ff ff       	call   107d9 <default_handler>
   109df:	83 c4 10             	add    $0x10,%esp
}
   109e2:	90                   	nop
   109e3:	c9                   	leave  
   109e4:	c3                   	ret    

000109e5 <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   109e5:	55                   	push   %ebp
   109e6:	89 e5                	mov    %esp,%ebp
   109e8:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   109eb:	83 ec 08             	sub    $0x8,%esp
   109ee:	68 a6 1c 01 00       	push   $0x11ca6
   109f3:	ff 75 08             	pushl  0x8(%ebp)
   109f6:	e8 de fd ff ff       	call   107d9 <default_handler>
   109fb:	83 c4 10             	add    $0x10,%esp
}
   109fe:	90                   	nop
   109ff:	c9                   	leave  
   10a00:	c3                   	ret    

00010a01 <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   10a01:	55                   	push   %ebp
   10a02:	89 e5                	mov    %esp,%ebp
   10a04:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10a07:	83 ec 08             	sub    $0x8,%esp
   10a0a:	68 b8 1c 01 00       	push   $0x11cb8
   10a0f:	ff 75 08             	pushl  0x8(%ebp)
   10a12:	e8 c2 fd ff ff       	call   107d9 <default_handler>
   10a17:	83 c4 10             	add    $0x10,%esp
}
   10a1a:	90                   	nop
   10a1b:	c9                   	leave  
   10a1c:	c3                   	ret    

00010a1d <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10a1d:	55                   	push   %ebp
   10a1e:	89 e5                	mov    %esp,%ebp
   10a20:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   10a23:	83 ec 08             	sub    $0x8,%esp
   10a26:	68 d7 1c 01 00       	push   $0x11cd7
   10a2b:	ff 75 08             	pushl  0x8(%ebp)
   10a2e:	e8 a6 fd ff ff       	call   107d9 <default_handler>
   10a33:	83 c4 10             	add    $0x10,%esp
}
   10a36:	90                   	nop
   10a37:	c9                   	leave  
   10a38:	c3                   	ret    

00010a39 <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10a39:	55                   	push   %ebp
   10a3a:	89 e5                	mov    %esp,%ebp
   10a3c:	83 ec 08             	sub    $0x8,%esp
   10a3f:	8b 55 0c             	mov    0xc(%ebp),%edx
   10a42:	8b 45 14             	mov    0x14(%ebp),%eax
   10a45:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10a49:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10a4d:	8b 45 10             	mov    0x10(%ebp),%eax
   10a50:	89 c2                	mov    %eax,%edx
   10a52:	8b 45 08             	mov    0x8(%ebp),%eax
   10a55:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10a58:	8b 45 08             	mov    0x8(%ebp),%eax
   10a5b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a5f:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10a63:	8b 45 08             	mov    0x8(%ebp),%eax
   10a66:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a6a:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10a6e:	8b 45 10             	mov    0x10(%ebp),%eax
   10a71:	c1 e8 10             	shr    $0x10,%eax
   10a74:	89 c2                	mov    %eax,%edx
   10a76:	8b 45 08             	mov    0x8(%ebp),%eax
   10a79:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10a7d:	90                   	nop
   10a7e:	c9                   	leave  
   10a7f:	c3                   	ret    

00010a80 <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   10a80:	55                   	push   %ebp
   10a81:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   10a83:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10a87:	7e 07                	jle    10a90 <irq_install+0x10>
        return -1;
   10a89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10a8e:	eb 1e                	jmp    10aae <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   10a90:	8b 45 08             	mov    0x8(%ebp),%eax
   10a93:	c1 e0 03             	shl    $0x3,%eax
   10a96:	05 40 08 20 00       	add    $0x200840,%eax
   10a9b:	68 00 8e 00 00       	push   $0x8e00
   10aa0:	ff 75 0c             	pushl  0xc(%ebp)
   10aa3:	6a 08                	push   $0x8
   10aa5:	50                   	push   %eax
   10aa6:	e8 8e ff ff ff       	call   10a39 <gate_desc_set>
   10aab:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   10aae:	c9                   	leave  
   10aaf:	c3                   	ret    

00010ab0 <init_pic>:

static void init_pic() {
   10ab0:	55                   	push   %ebp
   10ab1:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10ab3:	6a 11                	push   $0x11
   10ab5:	6a 20                	push   $0x20
   10ab7:	e8 fe fc ff ff       	call   107ba <outb>
   10abc:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10abf:	6a 20                	push   $0x20
   10ac1:	6a 21                	push   $0x21
   10ac3:	e8 f2 fc ff ff       	call   107ba <outb>
   10ac8:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10acb:	6a 04                	push   $0x4
   10acd:	6a 21                	push   $0x21
   10acf:	e8 e6 fc ff ff       	call   107ba <outb>
   10ad4:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10ad7:	6a 01                	push   $0x1
   10ad9:	6a 21                	push   $0x21
   10adb:	e8 da fc ff ff       	call   107ba <outb>
   10ae0:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10ae3:	6a 11                	push   $0x11
   10ae5:	68 a0 00 00 00       	push   $0xa0
   10aea:	e8 cb fc ff ff       	call   107ba <outb>
   10aef:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10af2:	6a 28                	push   $0x28
   10af4:	68 a1 00 00 00       	push   $0xa1
   10af9:	e8 bc fc ff ff       	call   107ba <outb>
   10afe:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10b01:	6a 02                	push   $0x2
   10b03:	68 a1 00 00 00       	push   $0xa1
   10b08:	e8 ad fc ff ff       	call   107ba <outb>
   10b0d:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10b10:	6a 01                	push   $0x1
   10b12:	68 a1 00 00 00       	push   $0xa1
   10b17:	e8 9e fc ff ff       	call   107ba <outb>
   10b1c:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10b1f:	68 fb 00 00 00       	push   $0xfb
   10b24:	6a 21                	push   $0x21
   10b26:	e8 8f fc ff ff       	call   107ba <outb>
   10b2b:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10b2e:	68 ff 00 00 00       	push   $0xff
   10b33:	68 a1 00 00 00       	push   $0xa1
   10b38:	e8 7d fc ff ff       	call   107ba <outb>
   10b3d:	83 c4 08             	add    $0x8,%esp
}
   10b40:	90                   	nop
   10b41:	c9                   	leave  
   10b42:	c3                   	ret    

00010b43 <irq_init>:

void irq_init () {
   10b43:	55                   	push   %ebp
   10b44:	89 e5                	mov    %esp,%ebp
   10b46:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10b49:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10b50:	eb 25                	jmp    10b77 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10b52:	ba 28 00 01 00       	mov    $0x10028,%edx
   10b57:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b5a:	c1 e0 03             	shl    $0x3,%eax
   10b5d:	05 40 08 20 00       	add    $0x200840,%eax
   10b62:	68 00 8e 00 00       	push   $0x8e00
   10b67:	52                   	push   %edx
   10b68:	6a 08                	push   $0x8
   10b6a:	50                   	push   %eax
   10b6b:	e8 c9 fe ff ff       	call   10a39 <gate_desc_set>
   10b70:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10b73:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10b77:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   10b7b:	76 d5                	jbe    10b52 <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10b7d:	b8 40 08 20 00       	mov    $0x200840,%eax
   10b82:	68 00 04 00 00       	push   $0x400
   10b87:	50                   	push   %eax
   10b88:	e8 e8 fb ff ff       	call   10775 <lidt>
   10b8d:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   10b90:	b8 47 00 01 00       	mov    $0x10047,%eax
   10b95:	50                   	push   %eax
   10b96:	6a 00                	push   $0x0
   10b98:	e8 e3 fe ff ff       	call   10a80 <irq_install>
   10b9d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   10ba0:	b8 66 00 01 00       	mov    $0x10066,%eax
   10ba5:	50                   	push   %eax
   10ba6:	6a 01                	push   $0x1
   10ba8:	e8 d3 fe ff ff       	call   10a80 <irq_install>
   10bad:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   10bb0:	b8 85 00 01 00       	mov    $0x10085,%eax
   10bb5:	50                   	push   %eax
   10bb6:	6a 02                	push   $0x2
   10bb8:	e8 c3 fe ff ff       	call   10a80 <irq_install>
   10bbd:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   10bc0:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   10bc5:	50                   	push   %eax
   10bc6:	6a 03                	push   $0x3
   10bc8:	e8 b3 fe ff ff       	call   10a80 <irq_install>
   10bcd:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10bd0:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   10bd5:	50                   	push   %eax
   10bd6:	6a 04                	push   $0x4
   10bd8:	e8 a3 fe ff ff       	call   10a80 <irq_install>
   10bdd:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10be0:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   10be5:	50                   	push   %eax
   10be6:	6a 05                	push   $0x5
   10be8:	e8 93 fe ff ff       	call   10a80 <irq_install>
   10bed:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10bf0:	b8 01 01 01 00       	mov    $0x10101,%eax
   10bf5:	50                   	push   %eax
   10bf6:	6a 06                	push   $0x6
   10bf8:	e8 83 fe ff ff       	call   10a80 <irq_install>
   10bfd:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10c00:	b8 20 01 01 00       	mov    $0x10120,%eax
   10c05:	50                   	push   %eax
   10c06:	6a 07                	push   $0x7
   10c08:	e8 73 fe ff ff       	call   10a80 <irq_install>
   10c0d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10c10:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   10c15:	50                   	push   %eax
   10c16:	6a 08                	push   $0x8
   10c18:	e8 63 fe ff ff       	call   10a80 <irq_install>
   10c1d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10c20:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   10c25:	50                   	push   %eax
   10c26:	6a 0a                	push   $0xa
   10c28:	e8 53 fe ff ff       	call   10a80 <irq_install>
   10c2d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10c30:	b8 79 01 01 00       	mov    $0x10179,%eax
   10c35:	50                   	push   %eax
   10c36:	6a 0b                	push   $0xb
   10c38:	e8 43 fe ff ff       	call   10a80 <irq_install>
   10c3d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10c40:	b8 96 01 01 00       	mov    $0x10196,%eax
   10c45:	50                   	push   %eax
   10c46:	6a 0c                	push   $0xc
   10c48:	e8 33 fe ff ff       	call   10a80 <irq_install>
   10c4d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10c50:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   10c55:	50                   	push   %eax
   10c56:	6a 0d                	push   $0xd
   10c58:	e8 23 fe ff ff       	call   10a80 <irq_install>
   10c5d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10c60:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   10c65:	50                   	push   %eax
   10c66:	6a 0e                	push   $0xe
   10c68:	e8 13 fe ff ff       	call   10a80 <irq_install>
   10c6d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   10c70:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   10c75:	50                   	push   %eax
   10c76:	6a 10                	push   $0x10
   10c78:	e8 03 fe ff ff       	call   10a80 <irq_install>
   10c7d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   10c80:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   10c85:	50                   	push   %eax
   10c86:	6a 11                	push   $0x11
   10c88:	e8 f3 fd ff ff       	call   10a80 <irq_install>
   10c8d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   10c90:	b8 29 02 01 00       	mov    $0x10229,%eax
   10c95:	50                   	push   %eax
   10c96:	6a 12                	push   $0x12
   10c98:	e8 e3 fd ff ff       	call   10a80 <irq_install>
   10c9d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   10ca0:	b8 48 02 01 00       	mov    $0x10248,%eax
   10ca5:	50                   	push   %eax
   10ca6:	6a 13                	push   $0x13
   10ca8:	e8 d3 fd ff ff       	call   10a80 <irq_install>
   10cad:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   10cb0:	b8 67 02 01 00       	mov    $0x10267,%eax
   10cb5:	50                   	push   %eax
   10cb6:	6a 14                	push   $0x14
   10cb8:	e8 c3 fd ff ff       	call   10a80 <irq_install>
   10cbd:	83 c4 08             	add    $0x8,%esp

    init_pic();
   10cc0:	e8 eb fd ff ff       	call   10ab0 <init_pic>
}
   10cc5:	90                   	nop
   10cc6:	c9                   	leave  
   10cc7:	c3                   	ret    

00010cc8 <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10cc8:	55                   	push   %ebp
   10cc9:	89 e5                	mov    %esp,%ebp
   10ccb:	53                   	push   %ebx
   10ccc:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10ccf:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10cd3:	7e 78                	jle    10d4d <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10cd5:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10cd9:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10cdd:	7f 32                	jg     10d11 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10cdf:	6a 21                	push   $0x21
   10ce1:	e8 b7 fa ff ff       	call   1079d <inb>
   10ce6:	83 c4 04             	add    $0x4,%esp
   10ce9:	89 c2                	mov    %eax,%edx
   10ceb:	8b 45 08             	mov    0x8(%ebp),%eax
   10cee:	bb 01 00 00 00       	mov    $0x1,%ebx
   10cf3:	89 c1                	mov    %eax,%ecx
   10cf5:	d3 e3                	shl    %cl,%ebx
   10cf7:	89 d8                	mov    %ebx,%eax
   10cf9:	f7 d0                	not    %eax
   10cfb:	21 d0                	and    %edx,%eax
   10cfd:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10d00:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10d04:	50                   	push   %eax
   10d05:	6a 21                	push   $0x21
   10d07:	e8 ae fa ff ff       	call   107ba <outb>
   10d0c:	83 c4 08             	add    $0x8,%esp
   10d0f:	eb 3d                	jmp    10d4e <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10d11:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10d15:	68 a1 00 00 00       	push   $0xa1
   10d1a:	e8 7e fa ff ff       	call   1079d <inb>
   10d1f:	83 c4 04             	add    $0x4,%esp
   10d22:	89 c2                	mov    %eax,%edx
   10d24:	8b 45 08             	mov    0x8(%ebp),%eax
   10d27:	bb 01 00 00 00       	mov    $0x1,%ebx
   10d2c:	89 c1                	mov    %eax,%ecx
   10d2e:	d3 e3                	shl    %cl,%ebx
   10d30:	89 d8                	mov    %ebx,%eax
   10d32:	f7 d0                	not    %eax
   10d34:	21 d0                	and    %edx,%eax
   10d36:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10d39:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d3d:	50                   	push   %eax
   10d3e:	68 a1 00 00 00       	push   $0xa1
   10d43:	e8 72 fa ff ff       	call   107ba <outb>
   10d48:	83 c4 08             	add    $0x8,%esp
   10d4b:	eb 01                	jmp    10d4e <irq_enable+0x86>
        return;
   10d4d:	90                   	nop
    }
}
   10d4e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d51:	c9                   	leave  
   10d52:	c3                   	ret    

00010d53 <irq_disable>:

void irq_disable(int irq_num) {
   10d53:	55                   	push   %ebp
   10d54:	89 e5                	mov    %esp,%ebp
   10d56:	53                   	push   %ebx
   10d57:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10d5a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10d5e:	7e 74                	jle    10dd4 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10d60:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10d64:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d68:	7f 30                	jg     10d9a <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10d6a:	6a 21                	push   $0x21
   10d6c:	e8 2c fa ff ff       	call   1079d <inb>
   10d71:	83 c4 04             	add    $0x4,%esp
   10d74:	89 c3                	mov    %eax,%ebx
   10d76:	8b 45 08             	mov    0x8(%ebp),%eax
   10d79:	ba 01 00 00 00       	mov    $0x1,%edx
   10d7e:	89 c1                	mov    %eax,%ecx
   10d80:	d3 e2                	shl    %cl,%edx
   10d82:	89 d0                	mov    %edx,%eax
   10d84:	09 d8                	or     %ebx,%eax
   10d86:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10d89:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10d8d:	50                   	push   %eax
   10d8e:	6a 21                	push   $0x21
   10d90:	e8 25 fa ff ff       	call   107ba <outb>
   10d95:	83 c4 08             	add    $0x8,%esp
   10d98:	eb 3b                	jmp    10dd5 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10d9a:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10d9e:	68 a1 00 00 00       	push   $0xa1
   10da3:	e8 f5 f9 ff ff       	call   1079d <inb>
   10da8:	83 c4 04             	add    $0x4,%esp
   10dab:	89 c3                	mov    %eax,%ebx
   10dad:	8b 45 08             	mov    0x8(%ebp),%eax
   10db0:	ba 01 00 00 00       	mov    $0x1,%edx
   10db5:	89 c1                	mov    %eax,%ecx
   10db7:	d3 e2                	shl    %cl,%edx
   10db9:	89 d0                	mov    %edx,%eax
   10dbb:	09 d8                	or     %ebx,%eax
   10dbd:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10dc0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10dc4:	50                   	push   %eax
   10dc5:	68 a1 00 00 00       	push   $0xa1
   10dca:	e8 eb f9 ff ff       	call   107ba <outb>
   10dcf:	83 c4 08             	add    $0x8,%esp
   10dd2:	eb 01                	jmp    10dd5 <irq_disable+0x82>
        return;
   10dd4:	90                   	nop
    }
}
   10dd5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10dd8:	c9                   	leave  
   10dd9:	c3                   	ret    

00010dda <irq_disable_global>:

void irq_disable_global(void) {
   10dda:	55                   	push   %ebp
   10ddb:	89 e5                	mov    %esp,%ebp
    cli();
   10ddd:	e8 85 f9 ff ff       	call   10767 <cli>
}
   10de2:	90                   	nop
   10de3:	5d                   	pop    %ebp
   10de4:	c3                   	ret    

00010de5 <irq_enable_global>:

void irq_enable_global(void) {
   10de5:	55                   	push   %ebp
   10de6:	89 e5                	mov    %esp,%ebp
    sti();
   10de8:	e8 81 f9 ff ff       	call   1076e <sti>
}
   10ded:	90                   	nop
   10dee:	5d                   	pop    %ebp
   10def:	c3                   	ret    

00010df0 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10df0:	55                   	push   %ebp
   10df1:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10df3:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10df7:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10dfb:	7e 0f                	jle    10e0c <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10dfd:	6a 20                	push   $0x20
   10dff:	68 a0 00 00 00       	push   $0xa0
   10e04:	e8 b1 f9 ff ff       	call   107ba <outb>
   10e09:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10e0c:	6a 20                	push   $0x20
   10e0e:	6a 20                	push   $0x20
   10e10:	e8 a5 f9 ff ff       	call   107ba <outb>
   10e15:	83 c4 08             	add    $0x8,%esp
}
   10e18:	90                   	nop
   10e19:	c9                   	leave  
   10e1a:	c3                   	ret    

00010e1b <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   10e1b:	55                   	push   %ebp
   10e1c:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   10e1e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e22:	74 3b                	je     10e5f <k_strcpy+0x44>
   10e24:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e28:	74 35                	je     10e5f <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   10e2a:	eb 17                	jmp    10e43 <k_strcpy+0x28>
        *dest++ = *src++;
   10e2c:	8b 55 0c             	mov    0xc(%ebp),%edx
   10e2f:	8d 42 01             	lea    0x1(%edx),%eax
   10e32:	89 45 0c             	mov    %eax,0xc(%ebp)
   10e35:	8b 45 08             	mov    0x8(%ebp),%eax
   10e38:	8d 48 01             	lea    0x1(%eax),%ecx
   10e3b:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10e3e:	0f b6 12             	movzbl (%edx),%edx
   10e41:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   10e43:	8b 45 08             	mov    0x8(%ebp),%eax
   10e46:	0f b6 00             	movzbl (%eax),%eax
   10e49:	84 c0                	test   %al,%al
   10e4b:	74 0a                	je     10e57 <k_strcpy+0x3c>
   10e4d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e50:	0f b6 00             	movzbl (%eax),%eax
   10e53:	84 c0                	test   %al,%al
   10e55:	75 d5                	jne    10e2c <k_strcpy+0x11>
    }
    *dest = '\0'; 
   10e57:	8b 45 08             	mov    0x8(%ebp),%eax
   10e5a:	c6 00 00             	movb   $0x0,(%eax)
   10e5d:	eb 01                	jmp    10e60 <k_strcpy+0x45>
        return;
   10e5f:	90                   	nop
}
   10e60:	5d                   	pop    %ebp
   10e61:	c3                   	ret    

00010e62 <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   10e62:	55                   	push   %ebp
   10e63:	89 e5                	mov    %esp,%ebp
   10e65:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   10e68:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e6c:	74 61                	je     10ecf <k_strncpy+0x6d>
   10e6e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e72:	74 5b                	je     10ecf <k_strncpy+0x6d>
   10e74:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10e78:	74 55                	je     10ecf <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   10e7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   10e80:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e83:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   10e86:	eb 17                	jmp    10e9f <k_strncpy+0x3d>
        *d++ = *s++;
   10e88:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10e8b:	8d 42 01             	lea    0x1(%edx),%eax
   10e8e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10e91:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e94:	8d 48 01             	lea    0x1(%eax),%ecx
   10e97:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10e9a:	0f b6 12             	movzbl (%edx),%edx
   10e9d:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   10e9f:	8b 45 10             	mov    0x10(%ebp),%eax
   10ea2:	8d 50 ff             	lea    -0x1(%eax),%edx
   10ea5:	89 55 10             	mov    %edx,0x10(%ebp)
   10ea8:	85 c0                	test   %eax,%eax
   10eaa:	7e 0a                	jle    10eb6 <k_strncpy+0x54>
   10eac:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10eaf:	0f b6 00             	movzbl (%eax),%eax
   10eb2:	84 c0                	test   %al,%al
   10eb4:	75 d2                	jne    10e88 <k_strncpy+0x26>
    } 
    if (size == 0) {
   10eb6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10eba:	75 0b                	jne    10ec7 <k_strncpy+0x65>
        *(d - 1) = '\0';
   10ebc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ebf:	83 e8 01             	sub    $0x1,%eax
   10ec2:	c6 00 00             	movb   $0x0,(%eax)
   10ec5:	eb 09                	jmp    10ed0 <k_strncpy+0x6e>
    } else {
        *d = '\0';
   10ec7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10eca:	c6 00 00             	movb   $0x0,(%eax)
   10ecd:	eb 01                	jmp    10ed0 <k_strncpy+0x6e>
        return;
   10ecf:	90                   	nop
    }
}
   10ed0:	c9                   	leave  
   10ed1:	c3                   	ret    

00010ed2 <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   10ed2:	55                   	push   %ebp
   10ed3:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   10ed5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ed9:	74 06                	je     10ee1 <k_strncmp+0xf>
   10edb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10edf:	75 0f                	jne    10ef0 <k_strncmp+0x1e>
   10ee1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ee6:	eb 62                	jmp    10f4a <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   10ee8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   10eec:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   10ef0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ef3:	0f b6 00             	movzbl (%eax),%eax
   10ef6:	84 c0                	test   %al,%al
   10ef8:	74 20                	je     10f1a <k_strncmp+0x48>
   10efa:	8b 45 0c             	mov    0xc(%ebp),%eax
   10efd:	0f b6 00             	movzbl (%eax),%eax
   10f00:	84 c0                	test   %al,%al
   10f02:	74 16                	je     10f1a <k_strncmp+0x48>
   10f04:	8b 45 08             	mov    0x8(%ebp),%eax
   10f07:	0f b6 10             	movzbl (%eax),%edx
   10f0a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f0d:	0f b6 00             	movzbl (%eax),%eax
   10f10:	38 c2                	cmp    %al,%dl
   10f12:	75 06                	jne    10f1a <k_strncmp+0x48>
   10f14:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f18:	75 ce                	jne    10ee8 <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   10f1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f1d:	0f b6 00             	movzbl (%eax),%eax
   10f20:	84 c0                	test   %al,%al
   10f22:	74 21                	je     10f45 <k_strncmp+0x73>
   10f24:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f27:	0f b6 00             	movzbl (%eax),%eax
   10f2a:	84 c0                	test   %al,%al
   10f2c:	74 17                	je     10f45 <k_strncmp+0x73>
   10f2e:	8b 45 08             	mov    0x8(%ebp),%eax
   10f31:	0f b6 10             	movzbl (%eax),%edx
   10f34:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f37:	0f b6 00             	movzbl (%eax),%eax
   10f3a:	38 c2                	cmp    %al,%dl
   10f3c:	74 07                	je     10f45 <k_strncmp+0x73>
   10f3e:	b8 01 00 00 00       	mov    $0x1,%eax
   10f43:	eb 05                	jmp    10f4a <k_strncmp+0x78>
   10f45:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f4a:	5d                   	pop    %ebp
   10f4b:	c3                   	ret    

00010f4c <k_strlen>:
int k_strlen(const char *str) {
   10f4c:	55                   	push   %ebp
   10f4d:	89 e5                	mov    %esp,%ebp
   10f4f:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   10f52:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f56:	75 07                	jne    10f5f <k_strlen+0x13>
        return 0;
   10f58:	b8 00 00 00 00       	mov    $0x0,%eax
   10f5d:	eb 26                	jmp    10f85 <k_strlen+0x39>
    }

    int len = 0;
   10f5f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   10f66:	8b 45 08             	mov    0x8(%ebp),%eax
   10f69:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   10f6c:	eb 04                	jmp    10f72 <k_strlen+0x26>
        len++;
   10f6e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   10f72:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10f75:	8d 50 01             	lea    0x1(%eax),%edx
   10f78:	89 55 f8             	mov    %edx,-0x8(%ebp)
   10f7b:	0f b6 00             	movzbl (%eax),%eax
   10f7e:	84 c0                	test   %al,%al
   10f80:	75 ec                	jne    10f6e <k_strlen+0x22>
    }

    return len;
   10f82:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10f85:	c9                   	leave  
   10f86:	c3                   	ret    

00010f87 <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   10f87:	55                   	push   %ebp
   10f88:	89 e5                	mov    %esp,%ebp
   10f8a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || size) {
   10f8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f91:	74 40                	je     10fd3 <k_memcpy+0x4c>
   10f93:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f97:	74 3a                	je     10fd3 <k_memcpy+0x4c>
   10f99:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f9d:	75 34                	jne    10fd3 <k_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   10f9f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fa2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   10fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   10fab:	eb 17                	jmp    10fc4 <k_memcpy+0x3d>
        *d++ = *s++;
   10fad:	8b 55 fc             	mov    -0x4(%ebp),%edx
   10fb0:	8d 42 01             	lea    0x1(%edx),%eax
   10fb3:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10fb6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10fb9:	8d 48 01             	lea    0x1(%eax),%ecx
   10fbc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   10fbf:	0f b6 12             	movzbl (%edx),%edx
   10fc2:	88 10                	mov    %dl,(%eax)
    while(size--) {
   10fc4:	8b 45 10             	mov    0x10(%ebp),%eax
   10fc7:	8d 50 ff             	lea    -0x1(%eax),%edx
   10fca:	89 55 10             	mov    %edx,0x10(%ebp)
   10fcd:	85 c0                	test   %eax,%eax
   10fcf:	75 dc                	jne    10fad <k_memcpy+0x26>
   10fd1:	eb 01                	jmp    10fd4 <k_memcpy+0x4d>
        return;
   10fd3:	90                   	nop
    }
}
   10fd4:	c9                   	leave  
   10fd5:	c3                   	ret    

00010fd6 <k_memset>:
void k_memset(void* dest, uint8_t v, int size) {
   10fd6:	55                   	push   %ebp
   10fd7:	89 e5                	mov    %esp,%ebp
   10fd9:	83 ec 14             	sub    $0x14,%esp
   10fdc:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fdf:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   10fe2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fe6:	74 2c                	je     11014 <k_memset+0x3e>
   10fe8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10fec:	74 26                	je     11014 <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   10fee:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   10ff4:	eb 0f                	jmp    11005 <k_memset+0x2f>
        *d++ = v;
   10ff6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ff9:	8d 50 01             	lea    0x1(%eax),%edx
   10ffc:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10fff:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11003:	88 10                	mov    %dl,(%eax)
    while(size--) {
   11005:	8b 45 10             	mov    0x10(%ebp),%eax
   11008:	8d 50 ff             	lea    -0x1(%eax),%edx
   1100b:	89 55 10             	mov    %edx,0x10(%ebp)
   1100e:	85 c0                	test   %eax,%eax
   11010:	75 e4                	jne    10ff6 <k_memset+0x20>
   11012:	eb 01                	jmp    11015 <k_memset+0x3f>
    if(!dest || !size) return;
   11014:	90                   	nop
    }
}
   11015:	c9                   	leave  
   11016:	c3                   	ret    

00011017 <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   11017:	55                   	push   %ebp
   11018:	89 e5                	mov    %esp,%ebp
   1101a:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   1101d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11021:	74 0c                	je     1102f <k_memcmp+0x18>
   11023:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11027:	74 06                	je     1102f <k_memcmp+0x18>
   11029:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1102d:	74 07                	je     11036 <k_memcmp+0x1f>
        return 1;
   1102f:	b8 01 00 00 00       	mov    $0x1,%eax
   11034:	eb 43                	jmp    11079 <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11036:	8b 45 08             	mov    0x8(%ebp),%eax
   11039:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   1103c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1103f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   11042:	eb 23                	jmp    11067 <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   11044:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11047:	8d 50 01             	lea    0x1(%eax),%edx
   1104a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1104d:	0f b6 08             	movzbl (%eax),%ecx
   11050:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11053:	8d 50 01             	lea    0x1(%eax),%edx
   11056:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11059:	0f b6 00             	movzbl (%eax),%eax
   1105c:	38 c1                	cmp    %al,%cl
   1105e:	74 07                	je     11067 <k_memcmp+0x50>
        return 1;
   11060:	b8 01 00 00 00       	mov    $0x1,%eax
   11065:	eb 12                	jmp    11079 <k_memcmp+0x62>
    while(size--) {
   11067:	8b 45 10             	mov    0x10(%ebp),%eax
   1106a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1106d:	89 55 10             	mov    %edx,0x10(%ebp)
   11070:	85 c0                	test   %eax,%eax
   11072:	75 d0                	jne    11044 <k_memcmp+0x2d>
    }

    return 0;
   11074:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11079:	c9                   	leave  
   1107a:	c3                   	ret    

0001107b <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   1107b:	55                   	push   %ebp
   1107c:	89 e5                	mov    %esp,%ebp
   1107e:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11081:	8b 45 08             	mov    0x8(%ebp),%eax
   11084:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   11087:	8b 45 0c             	mov    0xc(%ebp),%eax
   1108a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   1108d:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11091:	74 1d                	je     110b0 <k_itoa+0x35>
   11093:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11097:	74 17                	je     110b0 <k_itoa+0x35>
   11099:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1109d:	74 11                	je     110b0 <k_itoa+0x35>
   1109f:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   110a3:	74 0b                	je     110b0 <k_itoa+0x35>
        *p = '\0';
   110a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110a8:	c6 00 00             	movb   $0x0,(%eax)
        return;
   110ab:	e9 a0 00 00 00       	jmp    11150 <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   110b0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110b4:	79 12                	jns    110c8 <k_itoa+0x4d>
   110b6:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   110ba:	75 0c                	jne    110c8 <k_itoa+0x4d>
        *p++ = '-';
   110bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110bf:	8d 50 01             	lea    0x1(%eax),%edx
   110c2:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110c5:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   110c8:	8b 0d 00 00 20 00    	mov    0x200000,%ecx
   110ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   110d1:	99                   	cltd   
   110d2:	f7 7d 10             	idivl  0x10(%ebp)
   110d5:	89 d0                	mov    %edx,%eax
   110d7:	83 c0 0f             	add    $0xf,%eax
   110da:	01 c8                	add    %ecx,%eax
   110dc:	0f b6 00             	movzbl (%eax),%eax
   110df:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   110e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110e5:	8d 50 01             	lea    0x1(%eax),%edx
   110e8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110eb:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   110ef:	88 10                	mov    %dl,(%eax)
        num /= base;
   110f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   110f4:	99                   	cltd   
   110f5:	f7 7d 10             	idivl  0x10(%ebp)
   110f8:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   110fb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110ff:	75 c7                	jne    110c8 <k_itoa+0x4d>

    *p-- = '\0';
   11101:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11104:	8d 50 ff             	lea    -0x1(%eax),%edx
   11107:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1110a:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   1110d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11111:	7f 08                	jg     1111b <k_itoa+0xa0>
   11113:	8b 45 08             	mov    0x8(%ebp),%eax
   11116:	83 c0 01             	add    $0x1,%eax
   11119:	eb 03                	jmp    1111e <k_itoa+0xa3>
   1111b:	8b 45 08             	mov    0x8(%ebp),%eax
   1111e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   11121:	eb 25                	jmp    11148 <k_itoa+0xcd>
        char ch = *start;
   11123:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11126:	0f b6 00             	movzbl (%eax),%eax
   11129:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1112c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1112f:	0f b6 10             	movzbl (%eax),%edx
   11132:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11135:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11137:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1113a:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1113e:	88 10                	mov    %dl,(%eax)

        p--;
   11140:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11144:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   11148:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1114b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1114e:	72 d3                	jb     11123 <k_itoa+0xa8>
    }
}
   11150:	c9                   	leave  
   11151:	c3                   	ret    

00011152 <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   11152:	55                   	push   %ebp
   11153:	89 e5                	mov    %esp,%ebp
   11155:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   11158:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   1115f:	8b 45 08             	mov    0x8(%ebp),%eax
   11162:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   11165:	e9 19 01 00 00       	jmp    11283 <k_vsprint+0x131>
        switch (state) {
   1116a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1116d:	85 c0                	test   %eax,%eax
   1116f:	74 0a                	je     1117b <k_vsprint+0x29>
   11171:	83 f8 01             	cmp    $0x1,%eax
   11174:	74 2b                	je     111a1 <k_vsprint+0x4f>
   11176:	e9 07 01 00 00       	jmp    11282 <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   1117b:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1117f:	75 0c                	jne    1118d <k_vsprint+0x3b>
                state = READ_FMT;
   11181:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11188:	e9 f6 00 00 00       	jmp    11283 <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   1118d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11190:	8d 50 01             	lea    0x1(%eax),%edx
   11193:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11196:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1119a:	88 10                	mov    %dl,(%eax)
            }
            break;
   1119c:	e9 e2 00 00 00       	jmp    11283 <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   111a1:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   111a5:	75 31                	jne    111d8 <k_vsprint+0x86>
                int num  = va_arg(args, int);
   111a7:	8b 45 10             	mov    0x10(%ebp),%eax
   111aa:	8d 50 04             	lea    0x4(%eax),%edx
   111ad:	89 55 10             	mov    %edx,0x10(%ebp)
   111b0:	8b 00                	mov    (%eax),%eax
   111b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   111b5:	6a 0a                	push   $0xa
   111b7:	ff 75 e4             	pushl  -0x1c(%ebp)
   111ba:	ff 75 f8             	pushl  -0x8(%ebp)
   111bd:	e8 b9 fe ff ff       	call   1107b <k_itoa>
   111c2:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   111c5:	ff 75 f8             	pushl  -0x8(%ebp)
   111c8:	e8 7f fd ff ff       	call   10f4c <k_strlen>
   111cd:	83 c4 04             	add    $0x4,%esp
   111d0:	01 45 f8             	add    %eax,-0x8(%ebp)
   111d3:	e9 a1 00 00 00       	jmp    11279 <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   111d8:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   111dc:	75 2e                	jne    1120c <k_vsprint+0xba>
                int num  = va_arg(args, int);
   111de:	8b 45 10             	mov    0x10(%ebp),%eax
   111e1:	8d 50 04             	lea    0x4(%eax),%edx
   111e4:	89 55 10             	mov    %edx,0x10(%ebp)
   111e7:	8b 00                	mov    (%eax),%eax
   111e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   111ec:	6a 10                	push   $0x10
   111ee:	ff 75 e8             	pushl  -0x18(%ebp)
   111f1:	ff 75 f8             	pushl  -0x8(%ebp)
   111f4:	e8 82 fe ff ff       	call   1107b <k_itoa>
   111f9:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   111fc:	ff 75 f8             	pushl  -0x8(%ebp)
   111ff:	e8 48 fd ff ff       	call   10f4c <k_strlen>
   11204:	83 c4 04             	add    $0x4,%esp
   11207:	01 45 f8             	add    %eax,-0x8(%ebp)
   1120a:	eb 6d                	jmp    11279 <k_vsprint+0x127>

            }else if (ch == 'c') {
   1120c:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11210:	75 1f                	jne    11231 <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   11212:	8b 45 10             	mov    0x10(%ebp),%eax
   11215:	8d 50 04             	lea    0x4(%eax),%edx
   11218:	89 55 10             	mov    %edx,0x10(%ebp)
   1121b:	8b 00                	mov    (%eax),%eax
   1121d:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   11220:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11223:	8d 50 01             	lea    0x1(%eax),%edx
   11226:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11229:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1122d:	88 10                	mov    %dl,(%eax)
   1122f:	eb 48                	jmp    11279 <k_vsprint+0x127>

            }else if (ch == 's') {
   11231:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11235:	75 42                	jne    11279 <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   11237:	8b 45 10             	mov    0x10(%ebp),%eax
   1123a:	8d 50 04             	lea    0x4(%eax),%edx
   1123d:	89 55 10             	mov    %edx,0x10(%ebp)
   11240:	8b 00                	mov    (%eax),%eax
   11242:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   11245:	ff 75 f4             	pushl  -0xc(%ebp)
   11248:	e8 ff fc ff ff       	call   10f4c <k_strlen>
   1124d:	83 c4 04             	add    $0x4,%esp
   11250:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   11253:	eb 17                	jmp    1126c <k_vsprint+0x11a>
                    *curr++ = *str++;
   11255:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11258:	8d 42 01             	lea    0x1(%edx),%eax
   1125b:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1125e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11261:	8d 48 01             	lea    0x1(%eax),%ecx
   11264:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11267:	0f b6 12             	movzbl (%edx),%edx
   1126a:	88 10                	mov    %dl,(%eax)
                while(len--) {
   1126c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1126f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11272:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11275:	85 c0                	test   %eax,%eax
   11277:	75 dc                	jne    11255 <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   11279:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11280:	eb 01                	jmp    11283 <k_vsprint+0x131>
        
        default:
            break;
   11282:	90                   	nop
    while((ch = *fmt++)) {
   11283:	8b 45 0c             	mov    0xc(%ebp),%eax
   11286:	8d 50 01             	lea    0x1(%eax),%edx
   11289:	89 55 0c             	mov    %edx,0xc(%ebp)
   1128c:	0f b6 00             	movzbl (%eax),%eax
   1128f:	88 45 ef             	mov    %al,-0x11(%ebp)
   11292:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11296:	0f 85 ce fe ff ff    	jne    1116a <k_vsprint+0x18>
        }
    }
   1129c:	90                   	nop
   1129d:	c9                   	leave  
   1129e:	c3                   	ret    

0001129f <list_is_empty>:
static inline int list_is_empty (list_t* list) {
   1129f:	55                   	push   %ebp
   112a0:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   112a2:	8b 45 08             	mov    0x8(%ebp),%eax
   112a5:	8b 40 08             	mov    0x8(%eax),%eax
   112a8:	85 c0                	test   %eax,%eax
   112aa:	0f 94 c0             	sete   %al
   112ad:	0f b6 c0             	movzbl %al,%eax
}
   112b0:	5d                   	pop    %ebp
   112b1:	c3                   	ret    

000112b2 <list_init>:
#include <list.h>

void list_init(list_t* list) {
   112b2:	55                   	push   %ebp
   112b3:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t*)0;
   112b5:	8b 45 08             	mov    0x8(%ebp),%eax
   112b8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   112bf:	8b 45 08             	mov    0x8(%ebp),%eax
   112c2:	8b 50 04             	mov    0x4(%eax),%edx
   112c5:	8b 45 08             	mov    0x8(%ebp),%eax
   112c8:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   112ca:	8b 45 08             	mov    0x8(%ebp),%eax
   112cd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   112d4:	90                   	nop
   112d5:	5d                   	pop    %ebp
   112d6:	c3                   	ret    

000112d7 <list_insert_first>:

void list_insert_first (list_t* list, list_node_t* node) {
   112d7:	55                   	push   %ebp
   112d8:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   112da:	8b 45 08             	mov    0x8(%ebp),%eax
   112dd:	8b 10                	mov    (%eax),%edx
   112df:	8b 45 0c             	mov    0xc(%ebp),%eax
   112e2:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   112e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   112e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if(list_is_empty(list)) {
   112ee:	ff 75 08             	pushl  0x8(%ebp)
   112f1:	e8 a9 ff ff ff       	call   1129f <list_is_empty>
   112f6:	83 c4 04             	add    $0x4,%esp
   112f9:	85 c0                	test   %eax,%eax
   112fb:	74 15                	je     11312 <list_insert_first+0x3b>
        list->last = list->first = node;
   112fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11300:	8b 55 0c             	mov    0xc(%ebp),%edx
   11303:	89 10                	mov    %edx,(%eax)
   11305:	8b 45 08             	mov    0x8(%ebp),%eax
   11308:	8b 10                	mov    (%eax),%edx
   1130a:	8b 45 08             	mov    0x8(%ebp),%eax
   1130d:	89 50 04             	mov    %edx,0x4(%eax)
   11310:	eb 12                	jmp    11324 <list_insert_first+0x4d>
    } else {
        list->first->pre = node;
   11312:	8b 45 08             	mov    0x8(%ebp),%eax
   11315:	8b 00                	mov    (%eax),%eax
   11317:	8b 55 0c             	mov    0xc(%ebp),%edx
   1131a:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1131c:	8b 45 08             	mov    0x8(%ebp),%eax
   1131f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11322:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11324:	8b 45 08             	mov    0x8(%ebp),%eax
   11327:	8b 40 08             	mov    0x8(%eax),%eax
   1132a:	8d 50 01             	lea    0x1(%eax),%edx
   1132d:	8b 45 08             	mov    0x8(%ebp),%eax
   11330:	89 50 08             	mov    %edx,0x8(%eax)
}
   11333:	90                   	nop
   11334:	c9                   	leave  
   11335:	c3                   	ret    

00011336 <list_insert_last>:

void list_insert_last (list_t* list, list_node_t* node) {
   11336:	55                   	push   %ebp
   11337:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11339:	8b 45 08             	mov    0x8(%ebp),%eax
   1133c:	8b 50 04             	mov    0x4(%eax),%edx
   1133f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11342:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11344:	8b 45 0c             	mov    0xc(%ebp),%eax
   11347:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   1134e:	ff 75 08             	pushl  0x8(%ebp)
   11351:	e8 49 ff ff ff       	call   1129f <list_is_empty>
   11356:	83 c4 04             	add    $0x4,%esp
   11359:	85 c0                	test   %eax,%eax
   1135b:	74 16                	je     11373 <list_insert_last+0x3d>
        list->first = list->last = node;
   1135d:	8b 45 08             	mov    0x8(%ebp),%eax
   11360:	8b 55 0c             	mov    0xc(%ebp),%edx
   11363:	89 50 04             	mov    %edx,0x4(%eax)
   11366:	8b 45 08             	mov    0x8(%ebp),%eax
   11369:	8b 50 04             	mov    0x4(%eax),%edx
   1136c:	8b 45 08             	mov    0x8(%ebp),%eax
   1136f:	89 10                	mov    %edx,(%eax)
   11371:	eb 15                	jmp    11388 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11373:	8b 45 08             	mov    0x8(%ebp),%eax
   11376:	8b 40 04             	mov    0x4(%eax),%eax
   11379:	8b 55 0c             	mov    0xc(%ebp),%edx
   1137c:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   1137f:	8b 45 08             	mov    0x8(%ebp),%eax
   11382:	8b 55 0c             	mov    0xc(%ebp),%edx
   11385:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   11388:	8b 45 08             	mov    0x8(%ebp),%eax
   1138b:	8b 40 08             	mov    0x8(%eax),%eax
   1138e:	8d 50 01             	lea    0x1(%eax),%edx
   11391:	8b 45 08             	mov    0x8(%ebp),%eax
   11394:	89 50 08             	mov    %edx,0x8(%eax)
}
   11397:	90                   	nop
   11398:	c9                   	leave  
   11399:	c3                   	ret    

0001139a <list_delete_first>:


list_node_t* list_delete_first (list_t* list) {
   1139a:	55                   	push   %ebp
   1139b:	89 e5                	mov    %esp,%ebp
   1139d:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list)) {
   113a0:	ff 75 08             	pushl  0x8(%ebp)
   113a3:	e8 f7 fe ff ff       	call   1129f <list_is_empty>
   113a8:	83 c4 04             	add    $0x4,%esp
   113ab:	85 c0                	test   %eax,%eax
   113ad:	74 07                	je     113b6 <list_delete_first+0x1c>
        return (list_node_t*)0;
   113af:	b8 00 00 00 00       	mov    $0x0,%eax
   113b4:	eb 5b                	jmp    11411 <list_delete_first+0x77>
    }

    list_node_t* remove_node = list->first;
   113b6:	8b 45 08             	mov    0x8(%ebp),%eax
   113b9:	8b 00                	mov    (%eax),%eax
   113bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   113be:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113c1:	8b 50 04             	mov    0x4(%eax),%edx
   113c4:	8b 45 08             	mov    0x8(%ebp),%eax
   113c7:	89 10                	mov    %edx,(%eax)

    if( list->first == (list_node_t*)0 ) {
   113c9:	8b 45 08             	mov    0x8(%ebp),%eax
   113cc:	8b 00                	mov    (%eax),%eax
   113ce:	85 c0                	test   %eax,%eax
   113d0:	75 0c                	jne    113de <list_delete_first+0x44>
        list->last = (list_node_t*)0;
   113d2:	8b 45 08             	mov    0x8(%ebp),%eax
   113d5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   113dc:	eb 0c                	jmp    113ea <list_delete_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t*)0;
   113de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113e1:	8b 40 04             	mov    0x4(%eax),%eax
   113e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        //list->first->pre = (list_node_t*)0;
    }

    remove_node->pre = remove_node->next = (list_node_t*)0;
   113ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113ed:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   113f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113f7:	8b 50 04             	mov    0x4(%eax),%edx
   113fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113fd:	89 10                	mov    %edx,(%eax)
    list->count--;
   113ff:	8b 45 08             	mov    0x8(%ebp),%eax
   11402:	8b 40 08             	mov    0x8(%eax),%eax
   11405:	8d 50 ff             	lea    -0x1(%eax),%edx
   11408:	8b 45 08             	mov    0x8(%ebp),%eax
   1140b:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   1140e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11411:	c9                   	leave  
   11412:	c3                   	ret    

00011413 <list_delete>:

list_node_t* list_delete (list_t* list, list_node_t* node) {
   11413:	55                   	push   %ebp
   11414:	89 e5                	mov    %esp,%ebp
    if(node == list->first) {
   11416:	8b 45 08             	mov    0x8(%ebp),%eax
   11419:	8b 00                	mov    (%eax),%eax
   1141b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1141e:	75 0b                	jne    1142b <list_delete+0x18>
        list->first = node->next;
   11420:	8b 45 0c             	mov    0xc(%ebp),%eax
   11423:	8b 50 04             	mov    0x4(%eax),%edx
   11426:	8b 45 08             	mov    0x8(%ebp),%eax
   11429:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last) {
   1142b:	8b 45 08             	mov    0x8(%ebp),%eax
   1142e:	8b 40 04             	mov    0x4(%eax),%eax
   11431:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11434:	75 0b                	jne    11441 <list_delete+0x2e>
        list->last = node->pre;
   11436:	8b 45 0c             	mov    0xc(%ebp),%eax
   11439:	8b 10                	mov    (%eax),%edx
   1143b:	8b 45 08             	mov    0x8(%ebp),%eax
   1143e:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if(node->pre) {
   11441:	8b 45 0c             	mov    0xc(%ebp),%eax
   11444:	8b 00                	mov    (%eax),%eax
   11446:	85 c0                	test   %eax,%eax
   11448:	74 0e                	je     11458 <list_delete+0x45>
        node->pre->next = node->next;
   1144a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1144d:	8b 00                	mov    (%eax),%eax
   1144f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11452:	8b 52 04             	mov    0x4(%edx),%edx
   11455:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) {
   11458:	8b 45 0c             	mov    0xc(%ebp),%eax
   1145b:	8b 40 04             	mov    0x4(%eax),%eax
   1145e:	85 c0                	test   %eax,%eax
   11460:	74 0d                	je     1146f <list_delete+0x5c>
        node->next->pre = node->pre;
   11462:	8b 45 0c             	mov    0xc(%ebp),%eax
   11465:	8b 40 04             	mov    0x4(%eax),%eax
   11468:	8b 55 0c             	mov    0xc(%ebp),%edx
   1146b:	8b 12                	mov    (%edx),%edx
   1146d:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   1146f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11472:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11479:	8b 45 0c             	mov    0xc(%ebp),%eax
   1147c:	8b 50 04             	mov    0x4(%eax),%edx
   1147f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11482:	89 10                	mov    %edx,(%eax)

    list->count--;
   11484:	8b 45 08             	mov    0x8(%ebp),%eax
   11487:	8b 40 08             	mov    0x8(%eax),%eax
   1148a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1148d:	8b 45 08             	mov    0x8(%ebp),%eax
   11490:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11493:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11496:	5d                   	pop    %ebp
   11497:	c3                   	ret    

00011498 <inb>:
static inline uint8_t inb(uint16_t  port) {
   11498:	55                   	push   %ebp
   11499:	89 e5                	mov    %esp,%ebp
   1149b:	83 ec 14             	sub    $0x14,%esp
   1149e:	8b 45 08             	mov    0x8(%ebp),%eax
   114a1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   114a5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   114a9:	89 c2                	mov    %eax,%edx
   114ab:	ec                   	in     (%dx),%al
   114ac:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   114af:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   114b3:	c9                   	leave  
   114b4:	c3                   	ret    

000114b5 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   114b5:	55                   	push   %ebp
   114b6:	89 e5                	mov    %esp,%ebp
   114b8:	83 ec 08             	sub    $0x8,%esp
   114bb:	8b 55 08             	mov    0x8(%ebp),%edx
   114be:	8b 45 0c             	mov    0xc(%ebp),%eax
   114c1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   114c5:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   114c8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114cc:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   114d0:	ee                   	out    %al,(%dx)
}
   114d1:	90                   	nop
   114d2:	c9                   	leave  
   114d3:	c3                   	ret    

000114d4 <log_init>:
#include <log.h>

#define COM1_PORT       0x3f8

void log_init() {
   114d4:	55                   	push   %ebp
   114d5:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   114d7:	6a 00                	push   $0x0
   114d9:	68 f9 03 00 00       	push   $0x3f9
   114de:	e8 d2 ff ff ff       	call   114b5 <outb>
   114e3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   114e6:	68 80 00 00 00       	push   $0x80
   114eb:	68 fb 03 00 00       	push   $0x3fb
   114f0:	e8 c0 ff ff ff       	call   114b5 <outb>
   114f5:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   114f8:	6a 03                	push   $0x3
   114fa:	68 f8 03 00 00       	push   $0x3f8
   114ff:	e8 b1 ff ff ff       	call   114b5 <outb>
   11504:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11507:	6a 00                	push   $0x0
   11509:	68 f9 03 00 00       	push   $0x3f9
   1150e:	e8 a2 ff ff ff       	call   114b5 <outb>
   11513:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11516:	6a 03                	push   $0x3
   11518:	68 fb 03 00 00       	push   $0x3fb
   1151d:	e8 93 ff ff ff       	call   114b5 <outb>
   11522:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11525:	68 c7 00 00 00       	push   $0xc7
   1152a:	68 fa 03 00 00       	push   $0x3fa
   1152f:	e8 81 ff ff ff       	call   114b5 <outb>
   11534:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11537:	6a 0f                	push   $0xf
   11539:	68 fc 03 00 00       	push   $0x3fc
   1153e:	e8 72 ff ff ff       	call   114b5 <outb>
   11543:	83 c4 08             	add    $0x8,%esp
}
   11546:	90                   	nop
   11547:	c9                   	leave  
   11548:	c3                   	ret    

00011549 <klog>:


void klog(const char* fmt, ...) {
   11549:	55                   	push   %ebp
   1154a:	89 e5                	mov    %esp,%ebp
   1154c:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   11552:	83 ec 04             	sub    $0x4,%esp
   11555:	68 80 00 00 00       	push   $0x80
   1155a:	6a 00                	push   $0x0
   1155c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11562:	50                   	push   %eax
   11563:	e8 6e fa ff ff       	call   10fd6 <k_memset>
   11568:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   1156b:	8d 45 0c             	lea    0xc(%ebp),%eax
   1156e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    k_vsprint(buf, fmt, args);
   11574:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1157a:	83 ec 04             	sub    $0x4,%esp
   1157d:	50                   	push   %eax
   1157e:	ff 75 08             	pushl  0x8(%ebp)
   11581:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11587:	50                   	push   %eax
   11588:	e8 c5 fb ff ff       	call   11152 <k_vsprint>
   1158d:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = buf;
   11590:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11596:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11599:	eb 3b                	jmp    115d6 <klog+0x8d>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1159b:	90                   	nop
   1159c:	83 ec 0c             	sub    $0xc,%esp
   1159f:	68 fd 03 00 00       	push   $0x3fd
   115a4:	e8 ef fe ff ff       	call   11498 <inb>
   115a9:	83 c4 10             	add    $0x10,%esp
   115ac:	0f b6 c0             	movzbl %al,%eax
   115af:	83 e0 40             	and    $0x40,%eax
   115b2:	85 c0                	test   %eax,%eax
   115b4:	74 e6                	je     1159c <klog+0x53>
        outb(COM1_PORT, *p++);
   115b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115b9:	8d 50 01             	lea    0x1(%eax),%edx
   115bc:	89 55 f4             	mov    %edx,-0xc(%ebp)
   115bf:	0f b6 00             	movzbl (%eax),%eax
   115c2:	0f b6 c0             	movzbl %al,%eax
   115c5:	83 ec 08             	sub    $0x8,%esp
   115c8:	50                   	push   %eax
   115c9:	68 f8 03 00 00       	push   $0x3f8
   115ce:	e8 e2 fe ff ff       	call   114b5 <outb>
   115d3:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   115d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115d9:	0f b6 00             	movzbl (%eax),%eax
   115dc:	84 c0                	test   %al,%al
   115de:	75 bb                	jne    1159b <klog+0x52>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   115e0:	83 ec 08             	sub    $0x8,%esp
   115e3:	6a 0d                	push   $0xd
   115e5:	68 f8 03 00 00       	push   $0x3f8
   115ea:	e8 c6 fe ff ff       	call   114b5 <outb>
   115ef:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   115f2:	83 ec 08             	sub    $0x8,%esp
   115f5:	6a 0a                	push   $0xa
   115f7:	68 f8 03 00 00       	push   $0x3f8
   115fc:	e8 b4 fe ff ff       	call   114b5 <outb>
   11601:	83 c4 10             	add    $0x10,%esp
}
   11604:	90                   	nop
   11605:	c9                   	leave  
   11606:	c3                   	ret    

00011607 <list_node_init>:
static inline void list_node_init(list_node_t* node) {
   11607:	55                   	push   %ebp
   11608:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t*)0;
   1160a:	8b 45 08             	mov    0x8(%ebp),%eax
   1160d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11614:	8b 45 08             	mov    0x8(%ebp),%eax
   11617:	8b 50 04             	mov    0x4(%eax),%edx
   1161a:	8b 45 08             	mov    0x8(%ebp),%eax
   1161d:	89 10                	mov    %edx,(%eax)
}
   1161f:	90                   	nop
   11620:	5d                   	pop    %ebp
   11621:	c3                   	ret    

00011622 <list_count>:
static inline int list_count (list_t* list) {
   11622:	55                   	push   %ebp
   11623:	89 e5                	mov    %esp,%ebp
    return list->count;
   11625:	8b 45 08             	mov    0x8(%ebp),%eax
   11628:	8b 40 08             	mov    0x8(%eax),%eax
}
   1162b:	5d                   	pop    %ebp
   1162c:	c3                   	ret    

0001162d <list_first>:
static inline list_node_t* list_first (list_t* list) {
   1162d:	55                   	push   %ebp
   1162e:	89 e5                	mov    %esp,%ebp
    return list->first;
   11630:	8b 45 08             	mov    0x8(%ebp),%eax
   11633:	8b 00                	mov    (%eax),%eax
}
   11635:	5d                   	pop    %ebp
   11636:	c3                   	ret    

00011637 <task_switch_from_to>:
#include <task.h>

void simple_switch(uint32_t **from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   11637:	55                   	push   %ebp
   11638:	89 e5                	mov    %esp,%ebp
   1163a:	83 ec 08             	sub    $0x8,%esp
    // far_jump(to->tss_sel, 0);  // 使用 tss 机制

    simple_switch(&from->stack, to->stack);  // 使用直接跳转机制
   1163d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11640:	8b 10                	mov    (%eax),%edx
   11642:	8b 45 08             	mov    0x8(%ebp),%eax
   11645:	83 ec 08             	sub    $0x8,%esp
   11648:	52                   	push   %edx
   11649:	50                   	push   %eax
   1164a:	e8 56 ec ff ff       	call   102a5 <simple_switch>
   1164f:	83 c4 10             	add    $0x10,%esp
}
   11652:	90                   	nop
   11653:	c9                   	leave  
   11654:	c3                   	ret    

00011655 <task_manager_init>:


static task_manager_t task_manager;


void task_manager_init() {
   11655:	55                   	push   %ebp
   11656:	89 e5                	mov    %esp,%ebp
   11658:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   1165b:	83 ec 0c             	sub    $0xc,%esp
   1165e:	68 44 0c 20 00       	push   $0x200c44
   11663:	e8 4a fc ff ff       	call   112b2 <list_init>
   11668:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1166b:	83 ec 0c             	sub    $0xc,%esp
   1166e:	68 50 0c 20 00       	push   $0x200c50
   11673:	e8 3a fc ff ff       	call   112b2 <list_init>
   11678:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = get_first_task();
   1167b:	e8 8e 02 00 00       	call   1190e <get_first_task>
   11680:	a3 40 0c 20 00       	mov    %eax,0x200c40
}
   11685:	90                   	nop
   11686:	c9                   	leave  
   11687:	c3                   	ret    

00011688 <task_init>:


int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   11688:	55                   	push   %ebp
   11689:	89 e5                	mov    %esp,%ebp
   1168b:	83 ec 18             	sub    $0x18,%esp
    // tss_init(task, entry, esp);  // 使用 tss 机制

    // 使用直接跳转机制
    uint32_t* pesp = (uint32_t*)esp;
   1168e:	8b 45 14             	mov    0x14(%ebp),%eax
   11691:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pesp) {
   11694:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11698:	74 48                	je     116e2 <task_init+0x5a>
        *(--pesp) = entry;
   1169a:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   1169e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116a1:	8b 55 10             	mov    0x10(%ebp),%edx
   116a4:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;
   116a6:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   116aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   116b3:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   116b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116ba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   116c0:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   116c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116c7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   116cd:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   116d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        task->stack = pesp;
   116da:	8b 45 08             	mov    0x8(%ebp),%eax
   116dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   116e0:	89 10                	mov    %edx,(%eax)
    }

    k_strncpy(task->name, name, TASK_NAME_SIZE);        // 进程名
   116e2:	8b 45 08             	mov    0x8(%ebp),%eax
   116e5:	83 c0 08             	add    $0x8,%eax
   116e8:	83 ec 04             	sub    $0x4,%esp
   116eb:	6a 20                	push   $0x20
   116ed:	ff 75 0c             	pushl  0xc(%ebp)
   116f0:	50                   	push   %eax
   116f1:	e8 6c f7 ff ff       	call   10e62 <k_strncpy>
   116f6:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;                         // 状态  created
   116f9:	8b 45 08             	mov    0x8(%ebp),%eax
   116fc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;         //  最大时间片
   11703:	8b 45 08             	mov    0x8(%ebp),%eax
   11706:	c7 40 2c 0a 00 00 00 	movl   $0xa,0x2c(%eax)
    task->slice_ticks = TASK_TIME_SLICE_DEFAULT;        //  当前时间片
   1170d:	8b 45 08             	mov    0x8(%ebp),%eax
   11710:	c7 40 28 0a 00 00 00 	movl   $0xa,0x28(%eax)

    list_node_init(&task->all_node); 
   11717:	8b 45 08             	mov    0x8(%ebp),%eax
   1171a:	83 c0 38             	add    $0x38,%eax
   1171d:	83 ec 0c             	sub    $0xc,%esp
   11720:	50                   	push   %eax
   11721:	e8 e1 fe ff ff       	call   11607 <list_node_init>
   11726:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   11729:	8b 45 08             	mov    0x8(%ebp),%eax
   1172c:	83 c0 30             	add    $0x30,%eax
   1172f:	83 ec 0c             	sub    $0xc,%esp
   11732:	50                   	push   %eax
   11733:	e8 cf fe ff ff       	call   11607 <list_node_init>
   11738:	83 c4 10             	add    $0x10,%esp
    task_set_ready(task);                                        // 加入到就绪队列
   1173b:	83 ec 0c             	sub    $0xc,%esp
   1173e:	ff 75 08             	pushl  0x8(%ebp)
   11741:	e8 dc 01 00 00       	call   11922 <task_set_ready>
   11746:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node);  // 加入到所有队列
   11749:	8b 45 08             	mov    0x8(%ebp),%eax
   1174c:	83 c0 38             	add    $0x38,%eax
   1174f:	83 ec 08             	sub    $0x8,%esp
   11752:	50                   	push   %eax
   11753:	68 50 0c 20 00       	push   $0x200c50
   11758:	e8 d9 fb ff ff       	call   11336 <list_insert_last>
   1175d:	83 c4 10             	add    $0x10,%esp

    return 0;
   11760:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11765:	c9                   	leave  
   11766:	c3                   	ret    

00011767 <tss_init>:


int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   11767:	55                   	push   %ebp
   11768:	89 e5                	mov    %esp,%ebp
   1176a:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   1176d:	e8 64 ec ff ff       	call   103d6 <gdt_alloc_desc>
   11772:	89 45 f4             	mov    %eax,-0xc(%ebp)


    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), 
   11775:	8b 45 08             	mov    0x8(%ebp),%eax
   11778:	83 c0 40             	add    $0x40,%eax
   1177b:	68 89 00 00 00       	push   $0x89
   11780:	6a 68                	push   $0x68
   11782:	50                   	push   %eax
   11783:	ff 75 f4             	pushl  -0xc(%ebp)
   11786:	e8 58 eb ff ff       	call   102e3 <segment_desc_set>
   1178b:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS
    );

    k_memset(&task->tss, 0, sizeof(tss_t));
   1178e:	8b 45 08             	mov    0x8(%ebp),%eax
   11791:	83 c0 40             	add    $0x40,%eax
   11794:	83 ec 04             	sub    $0x4,%esp
   11797:	6a 68                	push   $0x68
   11799:	6a 00                	push   $0x0
   1179b:	50                   	push   %eax
   1179c:	e8 35 f8 ff ff       	call   10fd6 <k_memset>
   117a1:	83 c4 10             	add    $0x10,%esp

    task->tss.eip  = entry;
   117a4:	8b 45 08             	mov    0x8(%ebp),%eax
   117a7:	8b 55 0c             	mov    0xc(%ebp),%edx
   117aa:	89 50 60             	mov    %edx,0x60(%eax)
    task->tss.esp  = esp;
   117ad:	8b 45 08             	mov    0x8(%ebp),%eax
   117b0:	8b 55 10             	mov    0x10(%ebp),%edx
   117b3:	89 50 78             	mov    %edx,0x78(%eax)
    task->tss.esp0 = esp;
   117b6:	8b 45 08             	mov    0x8(%ebp),%eax
   117b9:	8b 55 10             	mov    0x10(%ebp),%edx
   117bc:	89 50 44             	mov    %edx,0x44(%eax)

    task->tss.ss  = KERNEL_SELECTOR_DS;
   117bf:	8b 45 08             	mov    0x8(%ebp),%eax
   117c2:	c7 80 90 00 00 00 10 	movl   $0x10,0x90(%eax)
   117c9:	00 00 00 
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   117cc:	8b 45 08             	mov    0x8(%ebp),%eax
   117cf:	c7 40 48 10 00 00 00 	movl   $0x10,0x48(%eax)
    task->tss.es  = KERNEL_SELECTOR_DS;
   117d6:	8b 45 08             	mov    0x8(%ebp),%eax
   117d9:	c7 80 88 00 00 00 10 	movl   $0x10,0x88(%eax)
   117e0:	00 00 00 
    task->tss.ds  = KERNEL_SELECTOR_DS;
   117e3:	8b 45 08             	mov    0x8(%ebp),%eax
   117e6:	c7 80 94 00 00 00 10 	movl   $0x10,0x94(%eax)
   117ed:	00 00 00 
    task->tss.fs  = KERNEL_SELECTOR_DS;
   117f0:	8b 45 08             	mov    0x8(%ebp),%eax
   117f3:	c7 80 98 00 00 00 10 	movl   $0x10,0x98(%eax)
   117fa:	00 00 00 
    task->tss.gs  = KERNEL_SELECTOR_DS;
   117fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11800:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   11807:	00 00 00 

    task->tss.cs  = KERNEL_SELECTOR_CS;
   1180a:	8b 45 08             	mov    0x8(%ebp),%eax
   1180d:	c7 80 8c 00 00 00 08 	movl   $0x8,0x8c(%eax)
   11814:	00 00 00 

    task->tss.eflags = EFLAGES_DEFAULT | EFLAGS_IF;
   11817:	8b 45 08             	mov    0x8(%ebp),%eax
   1181a:	c7 40 64 02 02 00 00 	movl   $0x202,0x64(%eax)

    task->tss_sel = tss_sel;
   11821:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11824:	8b 45 08             	mov    0x8(%ebp),%eax
   11827:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
}
   1182d:	90                   	nop
   1182e:	c9                   	leave  
   1182f:	c3                   	ret    

00011830 <task1_func>:
static uint32_t task3_stack[2048];

static task_t task2;
static task_t task3;

void task1_func() {
   11830:	55                   	push   %ebp
   11831:	89 e5                	mov    %esp,%ebp
   11833:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11836:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("-------------------------11111---------------------------: %d", count++);
   1183d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11840:	8d 50 01             	lea    0x1(%eax),%edx
   11843:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11846:	83 ec 08             	sub    $0x8,%esp
   11849:	50                   	push   %eax
   1184a:	68 14 1d 01 00       	push   $0x11d14
   1184f:	e8 f5 fc ff ff       	call   11549 <klog>
   11854:	83 c4 10             	add    $0x10,%esp
   11857:	eb e4                	jmp    1183d <task1_func+0xd>

00011859 <task2_func>:
        
        // sys_sched_yield();
    }
}
void task2_func() {
   11859:	55                   	push   %ebp
   1185a:	89 e5                	mov    %esp,%ebp
   1185c:	83 ec 18             	sub    $0x18,%esp
    // irq_enable_global();
    int count = 0;
   1185f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("------------------------222222----------------------------: %d", count++);
   11866:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11869:	8d 50 01             	lea    0x1(%eax),%edx
   1186c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1186f:	83 ec 08             	sub    $0x8,%esp
   11872:	50                   	push   %eax
   11873:	68 54 1d 01 00       	push   $0x11d54
   11878:	e8 cc fc ff ff       	call   11549 <klog>
   1187d:	83 c4 10             	add    $0x10,%esp
   11880:	eb e4                	jmp    11866 <task2_func+0xd>

00011882 <task3_func>:

        // sys_sched_yield();
    }
}
void task3_func() {
   11882:	55                   	push   %ebp
   11883:	89 e5                	mov    %esp,%ebp
   11885:	83 ec 18             	sub    $0x18,%esp
    // irq_enable_global();
    int count = 0;
   11888:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("--------------------------3333--------------------------: %d", count++);
   1188f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11892:	8d 50 01             	lea    0x1(%eax),%edx
   11895:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11898:	83 ec 08             	sub    $0x8,%esp
   1189b:	50                   	push   %eax
   1189c:	68 94 1d 01 00       	push   $0x11d94
   118a1:	e8 a3 fc ff ff       	call   11549 <klog>
   118a6:	83 c4 10             	add    $0x10,%esp
   118a9:	eb e4                	jmp    1188f <task3_func+0xd>

000118ab <task1_func_init>:

        // sys_sched_yield();
    }
}

void task1_func_init() {
   118ab:	55                   	push   %ebp
   118ac:	89 e5                	mov    %esp,%ebp
   118ae:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "task11", (uint32_t)task1_func, (uint32_t)&task1_stack[1024]);
   118b1:	ba 20 1d 20 00       	mov    $0x201d20,%edx
   118b6:	b8 30 18 01 00       	mov    $0x11830,%eax
   118bb:	52                   	push   %edx
   118bc:	50                   	push   %eax
   118bd:	68 d1 1d 01 00       	push   $0x11dd1
   118c2:	68 5c 0c 20 00       	push   $0x200c5c
   118c7:	e8 bc fd ff ff       	call   11688 <task_init>
   118cc:	83 c4 10             	add    $0x10,%esp
    task_init(&task2,                   "task22", (uint32_t)task2_func, (uint32_t)&task2_stack[1024]);
   118cf:	ba 20 3d 20 00       	mov    $0x203d20,%edx
   118d4:	b8 59 18 01 00       	mov    $0x11859,%eax
   118d9:	52                   	push   %edx
   118da:	50                   	push   %eax
   118db:	68 d8 1d 01 00       	push   $0x11dd8
   118e0:	68 20 6d 20 00       	push   $0x206d20
   118e5:	e8 9e fd ff ff       	call   11688 <task_init>
   118ea:	83 c4 10             	add    $0x10,%esp
    task_init(&task3,                   "task33", (uint32_t)task3_func, (uint32_t)&task3_stack[1024]);
   118ed:	ba 20 5d 20 00       	mov    $0x205d20,%edx
   118f2:	b8 82 18 01 00       	mov    $0x11882,%eax
   118f7:	52                   	push   %edx
   118f8:	50                   	push   %eax
   118f9:	68 df 1d 01 00       	push   $0x11ddf
   118fe:	68 e0 6d 20 00       	push   $0x206de0
   11903:	e8 80 fd ff ff       	call   11688 <task_init>
   11908:	83 c4 10             	add    $0x10,%esp

}
   1190b:	90                   	nop
   1190c:	c9                   	leave  
   1190d:	c3                   	ret    

0001190e <get_first_task>:


task_t* get_first_task() {
   1190e:	55                   	push   %ebp
   1190f:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11911:	b8 5c 0c 20 00       	mov    $0x200c5c,%eax
}
   11916:	5d                   	pop    %ebp
   11917:	c3                   	ret    

00011918 <task_current>:


task_t* task_current() {
   11918:	55                   	push   %ebp
   11919:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1191b:	a1 40 0c 20 00       	mov    0x200c40,%eax
}
   11920:	5d                   	pop    %ebp
   11921:	c3                   	ret    

00011922 <task_set_ready>:

// 将任务添加到就绪队列 尾部 设置状态为 ready
void task_set_ready(task_t* task) {
   11922:	55                   	push   %ebp
   11923:	89 e5                	mov    %esp,%ebp
   11925:	83 ec 08             	sub    $0x8,%esp
    list_insert_last(&task_manager.ready_list, &task->run_node);
   11928:	8b 45 08             	mov    0x8(%ebp),%eax
   1192b:	83 c0 30             	add    $0x30,%eax
   1192e:	83 ec 08             	sub    $0x8,%esp
   11931:	50                   	push   %eax
   11932:	68 44 0c 20 00       	push   $0x200c44
   11937:	e8 fa f9 ff ff       	call   11336 <list_insert_last>
   1193c:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1193f:	8b 45 08             	mov    0x8(%ebp),%eax
   11942:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
}
   11949:	90                   	nop
   1194a:	c9                   	leave  
   1194b:	c3                   	ret    

0001194c <task_set_block>:

// 将 特定 任务从就绪队列删除
void task_set_block(task_t* task) {
   1194c:	55                   	push   %ebp
   1194d:	89 e5                	mov    %esp,%ebp
   1194f:	83 ec 08             	sub    $0x8,%esp
    list_delete(&task_manager.ready_list, &task->run_node);
   11952:	8b 45 08             	mov    0x8(%ebp),%eax
   11955:	83 c0 30             	add    $0x30,%eax
   11958:	83 ec 08             	sub    $0x8,%esp
   1195b:	50                   	push   %eax
   1195c:	68 44 0c 20 00       	push   $0x200c44
   11961:	e8 ad fa ff ff       	call   11413 <list_delete>
   11966:	83 c4 10             	add    $0x10,%esp
    // list_delete_first(&task_manager.ready_list);
}
   11969:	90                   	nop
   1196a:	c9                   	leave  
   1196b:	c3                   	ret    

0001196c <sys_sched_yield>:

// 主动放弃cpu执行
int  sys_sched_yield() {
   1196c:	55                   	push   %ebp
   1196d:	89 e5                	mov    %esp,%ebp
   1196f:	83 ec 18             	sub    $0x18,%esp
    if(list_count(&task_manager.ready_list) > 1) {
   11972:	68 44 0c 20 00       	push   $0x200c44
   11977:	e8 a6 fc ff ff       	call   11622 <list_count>
   1197c:	83 c4 04             	add    $0x4,%esp
   1197f:	83 f8 01             	cmp    $0x1,%eax
   11982:	7e 29                	jle    119ad <sys_sched_yield+0x41>
        task_t* curr = task_current();
   11984:	e8 8f ff ff ff       	call   11918 <task_current>
   11989:	89 45 f4             	mov    %eax,-0xc(%ebp)
        task_set_block(curr);
   1198c:	83 ec 0c             	sub    $0xc,%esp
   1198f:	ff 75 f4             	pushl  -0xc(%ebp)
   11992:	e8 b5 ff ff ff       	call   1194c <task_set_block>
   11997:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   1199a:	83 ec 0c             	sub    $0xc,%esp
   1199d:	ff 75 f4             	pushl  -0xc(%ebp)
   119a0:	e8 7d ff ff ff       	call   11922 <task_set_ready>
   119a5:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   119a8:	e8 32 00 00 00       	call   119df <task_dispatch>
    }
    return 0;
   119ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
   119b2:	c9                   	leave  
   119b3:	c3                   	ret    

000119b4 <task_next_run>:

// 从就绪队列中找到一第一个任务
task_t * task_next_run() {
   119b4:	55                   	push   %ebp
   119b5:	89 e5                	mov    %esp,%ebp
   119b7:	83 ec 10             	sub    $0x10,%esp
    list_node_t * task_node = list_first(&task_manager.ready_list);
   119ba:	68 44 0c 20 00       	push   $0x200c44
   119bf:	e8 69 fc ff ff       	call   1162d <list_first>
   119c4:	83 c4 04             	add    $0x4,%esp
   119c7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   119ca:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   119ce:	74 08                	je     119d8 <task_next_run+0x24>
   119d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   119d3:	83 e8 30             	sub    $0x30,%eax
   119d6:	eb 05                	jmp    119dd <task_next_run+0x29>
   119d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   119dd:	c9                   	leave  
   119de:	c3                   	ret    

000119df <task_dispatch>:

// 分配一个任务并从当前任务切换过去
void task_dispatch() {
   119df:	55                   	push   %ebp
   119e0:	89 e5                	mov    %esp,%ebp
   119e2:	83 ec 18             	sub    $0x18,%esp

    task_t * to = task_next_run();
   119e5:	e8 ca ff ff ff       	call   119b4 <task_next_run>
   119ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.curr_task) {
   119ed:	a1 40 0c 20 00       	mov    0x200c40,%eax
   119f2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   119f5:	74 2b                	je     11a22 <task_dispatch+0x43>
        task_t * from = task_current();
   119f7:	e8 1c ff ff ff       	call   11918 <task_current>
   119fc:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_manager.curr_task = to;   // 设置将要切换的任务为“当前任务”
   119ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a02:	a3 40 0c 20 00       	mov    %eax,0x200c40
        to->state = TASK_RUNNING;      // 设置 task running
   11a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a0a:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

        task_switch_from_to(from, to);
   11a11:	83 ec 08             	sub    $0x8,%esp
   11a14:	ff 75 f4             	pushl  -0xc(%ebp)
   11a17:	ff 75 f0             	pushl  -0x10(%ebp)
   11a1a:	e8 18 fc ff ff       	call   11637 <task_switch_from_to>
   11a1f:	83 c4 10             	add    $0x10,%esp
    }
}
   11a22:	90                   	nop
   11a23:	c9                   	leave  
   11a24:	c3                   	ret    

00011a25 <task_time_tick>:

// 检查当前任务的时间片是否用完，若用完强制切换到下一任务
void task_time_tick() {
   11a25:	55                   	push   %ebp
   11a26:	89 e5                	mov    %esp,%ebp
   11a28:	83 ec 18             	sub    $0x18,%esp
    task_t* curr = task_current();
   11a2b:	e8 e8 fe ff ff       	call   11918 <task_current>
   11a30:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int slice = --curr->slice_ticks;
   11a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a36:	8b 40 28             	mov    0x28(%eax),%eax
   11a39:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a3f:	89 50 28             	mov    %edx,0x28(%eax)
   11a42:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a45:	8b 40 28             	mov    0x28(%eax),%eax
   11a48:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( slice == 0 && &task_manager.ready_list.count > 0) {
   11a4b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a4f:	75 2d                	jne    11a7e <task_time_tick+0x59>
        curr->slice_ticks = curr->time_ticks;
   11a51:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a54:	8b 50 2c             	mov    0x2c(%eax),%edx
   11a57:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a5a:	89 50 28             	mov    %edx,0x28(%eax)

        task_set_block(curr);
   11a5d:	83 ec 0c             	sub    $0xc,%esp
   11a60:	ff 75 f4             	pushl  -0xc(%ebp)
   11a63:	e8 e4 fe ff ff       	call   1194c <task_set_block>
   11a68:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   11a6b:	83 ec 0c             	sub    $0xc,%esp
   11a6e:	ff 75 f4             	pushl  -0xc(%ebp)
   11a71:	e8 ac fe ff ff       	call   11922 <task_set_ready>
   11a76:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11a79:	e8 61 ff ff ff       	call   119df <task_dispatch>
    }
   11a7e:	90                   	nop
   11a7f:	c9                   	leave  
   11a80:	c3                   	ret    
