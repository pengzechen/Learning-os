
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000030de memsz 0x000030de flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000060 memsz 0x000081a0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001c1a0 align 2**12
         filesz 0x00000026 memsz 0x00000026 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c84  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000045a  00012c84  00012c84  00003c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000060  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000071a0  00015000  00015000  00005060  2**12
                  ALLOC
  4 .first_task   00000026  80000000  0001c1a0  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001390  00000000  00000000  00006026  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000443d  00000000  00000000  000073b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001283  00000000  00000000  0000b7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000ca78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fa5  00000000  00000000  0000cc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000dbfd  2**0
                  CONTENTS, READONLY
 11 .debug_frame  0000130c  00000000  00000000  0000dc10  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012c84 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 mtime.c
000102bb l     F .text	0000001f outb
00015000 l     O .bss	00000004 sys_tick
00010302 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 gdt.c
0001037b l     F .text	00000028 lgdt
00015020 l     O .bss	00000800 g_gdt_table
00015820 l     O .bss	00000014 g_mutex
00000000 l    df *ABS*	00000000 init.c
00010557 l     F .text	0000000b list_count
00010562 l     F .text	0000000a list_first
0001056c l     F .text	0000000b list_last
00000000 l    df *ABS*	00000000 irq.c
00010821 l     F .text	00000007 hlt
00010828 l     F .text	00000007 cli
0001082f l     F .text	00000007 sti
00010836 l     F .text	00000028 lidt
0001085e l     F .text	0000001d inb
0001087b l     F .text	0000001f outb
0001089a l     F .text	00000011 read_cr2
000108ab l     F .text	00000010 read_eflags
000108bb l     F .text	0000000b write_eflags
00015840 l     O .bss	00000400 idt_table
000108c6 l     F .text	00000030 default_handler
00010c47 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00014000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 list.c
000116a4 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0001189d l     F .text	0000001d inb
000118ba l     F .text	0000001f outb
00015c40 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mem.c
00011a54 l     F .text	0000000d down2
00011a61 l     F .text	00000017 up2
00011a78 l     F .text	0000000c write_cr3
00011a84 l     F .text	00000011 mmu_set_page_dir
00011a95 l     F .text	00000014 pde_index
00011aa9 l     F .text	00000027 pde_paddr
00011ad0 l     F .text	00000010 pte_index
00011ae0 l     F .text	00000027 pte_paddr
00016000 l     O .bss	00000028 g_paddr_alloc
00017000 l     O .bss	00001000 g_kernel_page_dir
00011b07 l     F .text	00000058 addr_alloc_init
00011b5f l     F .text	00000067 addr_alloc_page
00011bc6 l     F .text	00000062 addr_free_page
00011cd5 l     F .text	00000066 show_mem_info
00011d3b l     F .text	00000037 total_mem_size
00014020 l     O .data	00000040 kernel_map.2276
000121e1 l     F .text	00000010 curr_page_dir
00000000 l    df *ABS*	00000000 mutex.c
0001227e l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00012408 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 task.c
0001254c l     F .text	00000007 hlt
00012553 l     F .text	0000000c write_cr3
0001255f l     F .text	0000001a far_jump
00012579 l     F .text	00000017 write_tr
00012590 l     F .text	0000001b list_node_init
000125ab l     F .text	0000000b list_node_next
000125b6 l     F .text	0000000b list_count
000125c1 l     F .text	0000000a list_first
000125cb l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	000001a0 g_task_manager
000181a0 l     O .bss	00002000 idle_task_stack
000125dc l     F .text	0000000a idle_task_func
00012600 l     F .text	00000156 tss_init
00000000 l    df *ABS*	00000000 first_task.c
00011044 g     F .text	0000003a bitmap_get_bit
00012989 g     F .text	0000000a task_current
00010fb2 g     F .text	00000018 irq_enter_proection
00011818 g     F .text	00000085 list_delete
00010f7c g     F .text	0000000b irq_enable_global
0001173b g     F .text	00000064 list_insert_last
00012993 g     F .text	00000035 task_set_ready
0001107e g     F .text	0000001b bitmap_is_set
00010982 g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
00010bb4 g     F .text	0000001c handle_virtual_exception
000118d9 g     F .text	0000009d log_init
000107ef g     F .text	00000032 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
0001051e g     F .text	00000039 gdt_free_sel
00014000 g       .data	00000000 s_data
000112d7 g     F .text	0000007a k_strncmp
00010a2a g     F .text	0000001c handle_segment_not_present
00010e5f g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
0001092e g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
00011e22 g     F .text	00000080 memory_create_map
000101b3 g       .text	00000000 exception_handler_general_protection
00012523 g     F .text	00000029 sem_count
80000010 g     F .first_task	00000016 first_task_main
00011099 g     F .text	000000d4 bitmap_set_bit
00010a7e g     F .text	000000c6 handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010f87 g     F .text	0000002b pic_send_eoi
00010000 g       .text	00000000 s_text
0001202c g     F .text	00000085 memory_create_uvm
00012436 g     F .text	0000006b sem_wait
0001219a g     F .text	00000027 memory_alloc_page_for
00011220 g     F .text	00000047 k_strcpy
00011267 g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00010429 g     F .text	00000080 gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
0001a1a0 g     O .bss	00002000 stack
00012bd1 g     F .text	00000058 sys_sleep
000121f1 g     F .text	0000008d memory_free_page
000105e7 g     F .text	00000163 list_test
0001c1a0 g       *ABS*	00000000 s_first_task
000109ba g     F .text	0000001c handle_invalid_opcode
00011351 g     F .text	0000003b k_strlen
0001141c g     F .text	00000064 k_memcmp
000120b1 g     F .text	000000e9 memory_alloc_for_page_dir
000100e2 g       .text	00000000 exception_handler_bound_range
000124a1 g     F .text	00000082 sem_notify
0001297f g     F .text	0000000a get_first_task
0001015c g       .text	00000000 exception_handler_invalid_tss
00011557 g     F .text	0000014d k_vsprint
000116dc g     F .text	0000005f list_insert_first
00012c64 g     F .text	00000020 task_set_wakeup
000128e4 g     F .text	0000009b first_task_init
00010047 g       .text	00000000 exception_handler_divider
00011c28 g     F .text	000000ad some_test
00010b44 g     F .text	0000001c handle_fpu_error
00010f71 g     F .text	0000000b irq_disable_global
000129f3 g     F .text	00000061 sys_sched_yield
0001c1c6 g       *ABS*	00000000 mem_free_start
000108f6 g     F .text	0000001c handle_unknown
00010577 g     F .text	0000002b kernel_init
000113db g     F .text	00000041 k_memset
00012413 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
000105a2 g     F .text	00000045 show_list
0001c1a0 g       .bss	00000000 e_data
000122b7 g     F .text	00000094 mutex_lock
00010229 g       .text	00000000 exception_handler_machine_check
00000000 g       *ABS*	00000000 kernel_base
0001c1c6 g       *ABS*	00000000 e_first_task
00012c29 g     F .text	0000003b task_set_sleep
00010c17 g     F .text	00000030 irq_install
00010b98 g     F .text	0000001c handle_smd_exception
00012289 g     F .text	0000002e mutex_init
00010eea g     F .text	00000087 irq_disable
00010a62 g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
00010fca g     F .text	00000011 irq_leave_proection
00010fdb g     F .text	00000016 bitmap_byte_count
00010b60 g     F .text	0000001c handle_alignment_check
00012a97 g     F .text	0000005c task_dispatch
000107aa g     F .text	00000045 move_to_first_task
00010b7c g     F .text	0000001c handle_machine_check
00012a54 g     F .text	00000043 task_next_run
00011ea2 g     F .text	0000009b create_kernel_table
000116b7 g     F .text	00000025 list_init
00010a46 g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
000129c8 g     F .text	0000002b task_set_block
0001099e g     F .text	0000001c handle_bound_range
000121c1 g     F .text	00000020 memory_alloc_page
000101ed g       .text	00000000 exception_handler_fpu_error
000125e6 g     F .text	0000001a task_switch_from_to
00010cda g     F .text	00000185 irq_init
00011480 g     F .text	000000d7 k_itoa
0001234b g     F .text	000000bd mutex_unlock
000109f2 g     F .text	0000001c handle_double_fault
000102da g     F .text	00000028 handle_time
000103a3 g     F .text	00000086 segment_desc_set
0001074a g     F .text	00000060 offset_test
000130de g       .rodata	00000000 e_text
00010966 g     F .text	0000001c handle_breakpoint
00010ff1 g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
0001116d g     F .text	000000b3 bitmap_alloc_nbits
00012836 g     F .text	000000ae task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00012af3 g     F .text	000000de task_time_tick
00011f3d g     F .text	000000ef memory_init
000109d6 g     F .text	0000001c handle_device_unavailable
00010912 g     F .text	0000001c handle_divider
0001138c g     F .text	0000004f k_memcpy
00012756 g     F .text	000000e0 task_init
000104a9 g     F .text	00000075 gdt_alloc_desc
0001179f g     F .text	00000079 list_delete_first
00010bd0 g     F .text	00000047 gate_desc_set
00011976 g     F .text	000000de klog
0001094a g     F .text	0000001c handle_NMI
00010a0e g     F .text	0000001c handle_invalid_tss
00011d72 g     F .text	000000b0 find_pte
00010363 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 6e 05 00 00       	call   10577 <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc a0 c1 01 00       	mov    $0x1c1a0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 c7 07 00 00       	jmp    107ef <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 bd 08 00 00       	call   108f6 <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 ba 08 00 00       	call   10912 <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 b7 08 00 00       	call   1092e <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 b4 08 00 00       	call   1094a <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 b1 08 00 00       	call   10966 <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 ae 08 00 00       	call   10982 <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 ab 08 00 00       	call   1099e <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 a8 08 00 00       	call   109ba <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 a5 08 00 00       	call   109d6 <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 a4 08 00 00       	call   109f2 <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 a3 08 00 00       	call   10a0e <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 a2 08 00 00       	call   10a2a <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 a1 08 00 00       	call   10a46 <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 a0 08 00 00       	call   10a62 <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 9f 08 00 00       	call   10a7e <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 46 09 00 00       	call   10b44 <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 45 09 00 00       	call   10b60 <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 42 09 00 00       	call   10b7c <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 3f 09 00 00       	call   10b98 <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 3c 09 00 00       	call   10bb4 <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 43 00 00 00       	call   102da <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch

simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp
    
    sti
   102b9:	fb                   	sti    
   102ba:	c3                   	ret    

000102bb <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   102bb:	55                   	push   %ebp
   102bc:	89 e5                	mov    %esp,%ebp
   102be:	83 ec 08             	sub    $0x8,%esp
   102c1:	8b 55 08             	mov    0x8(%ebp),%edx
   102c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   102cb:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   102ce:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   102d2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   102d6:	ee                   	out    %al,(%dx)
}
   102d7:	90                   	nop
   102d8:	c9                   	leave  
   102d9:	c3                   	ret    

000102da <handle_time>:


static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   102da:	55                   	push   %ebp
   102db:	89 e5                	mov    %esp,%ebp
   102dd:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   102e0:	a1 00 50 01 00       	mov    0x15000,%eax
   102e5:	83 c0 01             	add    $0x1,%eax
   102e8:	a3 00 50 01 00       	mov    %eax,0x15000
    pic_send_eoi(IRQ0_TIMER);
   102ed:	83 ec 0c             	sub    $0xc,%esp
   102f0:	6a 20                	push   $0x20
   102f2:	e8 90 0c 00 00       	call   10f87 <pic_send_eoi>
   102f7:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   102fa:	e8 f4 27 00 00       	call   12af3 <task_time_tick>
} 
   102ff:	90                   	nop
   10300:	c9                   	leave  
   10301:	c3                   	ret    

00010302 <pit_init>:

static void pit_init (void) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
   10305:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10308:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1030f:	6a 36                	push   $0x36
   10311:	6a 43                	push   $0x43
   10313:	e8 a3 ff ff ff       	call   102bb <outb>
   10318:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   1031b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1031e:	0f b6 c0             	movzbl %al,%eax
   10321:	50                   	push   %eax
   10322:	6a 40                	push   $0x40
   10324:	e8 92 ff ff ff       	call   102bb <outb>
   10329:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   1032c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1032f:	c1 e8 08             	shr    $0x8,%eax
   10332:	0f b6 c0             	movzbl %al,%eax
   10335:	50                   	push   %eax
   10336:	6a 40                	push   $0x40
   10338:	e8 7e ff ff ff       	call   102bb <outb>
   1033d:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   10340:	b8 86 02 01 00       	mov    $0x10286,%eax
   10345:	83 ec 08             	sub    $0x8,%esp
   10348:	50                   	push   %eax
   10349:	6a 20                	push   $0x20
   1034b:	e8 c7 08 00 00       	call   10c17 <irq_install>
   10350:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10353:	83 ec 0c             	sub    $0xc,%esp
   10356:	6a 20                	push   $0x20
   10358:	e8 02 0b 00 00       	call   10e5f <irq_enable>
   1035d:	83 c4 10             	add    $0x10,%esp
}
   10360:	90                   	nop
   10361:	c9                   	leave  
   10362:	c3                   	ret    

00010363 <time_init>:

void time_init() {
   10363:	55                   	push   %ebp
   10364:	89 e5                	mov    %esp,%ebp
   10366:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10369:	c7 05 00 50 01 00 00 	movl   $0x0,0x15000
   10370:	00 00 00 

    pit_init();
   10373:	e8 8a ff ff ff       	call   10302 <pit_init>
   10378:	90                   	nop
   10379:	c9                   	leave  
   1037a:	c3                   	ret    

0001037b <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1037b:	55                   	push   %ebp
   1037c:	89 e5                	mov    %esp,%ebp
   1037e:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   10381:	8b 45 08             	mov    0x8(%ebp),%eax
   10384:	c1 e8 10             	shr    $0x10,%eax
   10387:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   10392:	8b 45 0c             	mov    0xc(%ebp),%eax
   10395:	83 e8 01             	sub    $0x1,%eax
   10398:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1039c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   103a0:	90                   	nop
   103a1:	c9                   	leave  
   103a2:	c3                   	ret    

000103a3 <segment_desc_set>:


static segment_desc_t g_gdt_table[GDT_TABLE_SIZE];
static mutex_t g_mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   103a3:	55                   	push   %ebp
   103a4:	89 e5                	mov    %esp,%ebp
   103a6:	83 ec 14             	sub    $0x14,%esp
   103a9:	8b 45 14             	mov    0x14(%ebp),%eax
   103ac:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = g_gdt_table + (selector >> 3);
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	c1 f8 03             	sar    $0x3,%eax
   103b6:	c1 e0 03             	shl    $0x3,%eax
   103b9:	05 20 50 01 00       	add    $0x15020,%eax
   103be:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   103c1:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   103c8:	76 0f                	jbe    103d9 <segment_desc_set+0x36>
		attr |= 0x8000;
   103ca:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   103d0:	8b 45 10             	mov    0x10(%ebp),%eax
   103d3:	c1 e8 0c             	shr    $0xc,%eax
   103d6:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   103d9:	8b 45 10             	mov    0x10(%ebp),%eax
   103dc:	89 c2                	mov    %eax,%edx
   103de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103e1:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   103e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103e7:	89 c2                	mov    %eax,%edx
   103e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103ec:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   103f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   103f3:	c1 e8 10             	shr    $0x10,%eax
   103f6:	89 c2                	mov    %eax,%edx
   103f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103fb:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   103fe:	8b 45 10             	mov    0x10(%ebp),%eax
   10401:	c1 e8 10             	shr    $0x10,%eax
   10404:	c1 e0 08             	shl    $0x8,%eax
   10407:	66 25 00 0f          	and    $0xf00,%ax
   1040b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1040f:	89 c2                	mov    %eax,%edx
   10411:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10414:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10418:	8b 45 0c             	mov    0xc(%ebp),%eax
   1041b:	c1 e8 18             	shr    $0x18,%eax
   1041e:	89 c2                	mov    %eax,%edx
   10420:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10423:	88 50 07             	mov    %dl,0x7(%eax)
}
   10426:	90                   	nop
   10427:	c9                   	leave  
   10428:	c3                   	ret    

00010429 <gdt_init>:

void gdt_init() {
   10429:	55                   	push   %ebp
   1042a:	89 e5                	mov    %esp,%ebp
   1042c:	83 ec 18             	sub    $0x18,%esp
    mutex_init(&g_mutex);
   1042f:	83 ec 0c             	sub    $0xc,%esp
   10432:	68 20 58 01 00       	push   $0x15820
   10437:	e8 4d 1e 00 00       	call   12289 <mutex_init>
   1043c:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1043f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10446:	eb 19                	jmp    10461 <gdt_init+0x38>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10448:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1044b:	c1 e0 03             	shl    $0x3,%eax
   1044e:	6a 00                	push   $0x0
   10450:	6a 00                	push   $0x0
   10452:	6a 00                	push   $0x0
   10454:	50                   	push   %eax
   10455:	e8 49 ff ff ff       	call   103a3 <segment_desc_set>
   1045a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1045d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10461:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10468:	7e de                	jle    10448 <gdt_init+0x1f>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1046a:	68 92 c0 00 00       	push   $0xc092
   1046f:	6a ff                	push   $0xffffffff
   10471:	6a 00                	push   $0x0
   10473:	6a 10                	push   $0x10
   10475:	e8 29 ff ff ff       	call   103a3 <segment_desc_set>
   1047a:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1047d:	68 9a c0 00 00       	push   $0xc09a
   10482:	6a ff                	push   $0xffffffff
   10484:	6a 00                	push   $0x0
   10486:	6a 08                	push   $0x8
   10488:	e8 16 ff ff ff       	call   103a3 <segment_desc_set>
   1048d:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)g_gdt_table, sizeof(g_gdt_table));
   10490:	b8 20 50 01 00       	mov    $0x15020,%eax
   10495:	83 ec 08             	sub    $0x8,%esp
   10498:	68 00 08 00 00       	push   $0x800
   1049d:	50                   	push   %eax
   1049e:	e8 d8 fe ff ff       	call   1037b <lgdt>
   104a3:	83 c4 10             	add    $0x10,%esp

}
   104a6:	90                   	nop
   104a7:	c9                   	leave  
   104a8:	c3                   	ret    

000104a9 <gdt_alloc_desc>:

int  gdt_alloc_desc() {
   104a9:	55                   	push   %ebp
   104aa:	89 e5                	mov    %esp,%ebp
   104ac:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&g_mutex);
   104af:	83 ec 0c             	sub    $0xc,%esp
   104b2:	68 20 58 01 00       	push   $0x15820
   104b7:	e8 fb 1d 00 00       	call   122b7 <mutex_lock>
   104bc:	83 c4 10             	add    $0x10,%esp
    int i = 1;
   104bf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    for(; i < GDT_TABLE_SIZE; i++) {
   104c6:	eb 36                	jmp    104fe <gdt_alloc_desc+0x55>
        segment_desc_t* desc = g_gdt_table + i;
   104c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104cb:	c1 e0 03             	shl    $0x3,%eax
   104ce:	05 20 50 01 00       	add    $0x15020,%eax
   104d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(desc->attr == 0) {
   104d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   104d9:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104dd:	66 85 c0             	test   %ax,%ax
   104e0:	75 18                	jne    104fa <gdt_alloc_desc+0x51>
            mutex_unlock(&g_mutex);
   104e2:	83 ec 0c             	sub    $0xc,%esp
   104e5:	68 20 58 01 00       	push   $0x15820
   104ea:	e8 5c 1e 00 00       	call   1234b <mutex_unlock>
   104ef:	83 c4 10             	add    $0x10,%esp
            return ( i * sizeof(segment_desc_t) );
   104f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104f5:	c1 e0 03             	shl    $0x3,%eax
   104f8:	eb 22                	jmp    1051c <gdt_alloc_desc+0x73>
    for(; i < GDT_TABLE_SIZE; i++) {
   104fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104fe:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10505:	7e c1                	jle    104c8 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&g_mutex);
   10507:	83 ec 0c             	sub    $0xc,%esp
   1050a:	68 20 58 01 00       	push   $0x15820
   1050f:	e8 37 1e 00 00       	call   1234b <mutex_unlock>
   10514:	83 c4 10             	add    $0x10,%esp
    return -1;
   10517:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1051c:	c9                   	leave  
   1051d:	c3                   	ret    

0001051e <gdt_free_sel>:

void gdt_free_sel(int sel) {
   1051e:	55                   	push   %ebp
   1051f:	89 e5                	mov    %esp,%ebp
   10521:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&g_mutex);
   10524:	83 ec 0c             	sub    $0xc,%esp
   10527:	68 20 58 01 00       	push   $0x15820
   1052c:	e8 86 1d 00 00       	call   122b7 <mutex_lock>
   10531:	83 c4 10             	add    $0x10,%esp
    g_gdt_table[sel/sizeof(segment_desc_t)].attr = 0;
   10534:	8b 45 08             	mov    0x8(%ebp),%eax
   10537:	c1 e8 03             	shr    $0x3,%eax
   1053a:	66 c7 04 c5 25 50 01 	movw   $0x0,0x15025(,%eax,8)
   10541:	00 00 00 
    mutex_unlock(&g_mutex);
   10544:	83 ec 0c             	sub    $0xc,%esp
   10547:	68 20 58 01 00       	push   $0x15820
   1054c:	e8 fa 1d 00 00       	call   1234b <mutex_unlock>
   10551:	83 c4 10             	add    $0x10,%esp
}
   10554:	90                   	nop
   10555:	c9                   	leave  
   10556:	c3                   	ret    

00010557 <list_count>:

static inline int list_is_empty (list_t* list) {
    return list->count == 0;
}

static inline int list_count (list_t* list) {
   10557:	55                   	push   %ebp
   10558:	89 e5                	mov    %esp,%ebp
    return list->count;
   1055a:	8b 45 08             	mov    0x8(%ebp),%eax
   1055d:	8b 40 08             	mov    0x8(%eax),%eax
}
   10560:	5d                   	pop    %ebp
   10561:	c3                   	ret    

00010562 <list_first>:

static inline list_node_t* list_first (list_t* list) {
   10562:	55                   	push   %ebp
   10563:	89 e5                	mov    %esp,%ebp
    return list->first;
   10565:	8b 45 08             	mov    0x8(%ebp),%eax
   10568:	8b 00                	mov    (%eax),%eax
}
   1056a:	5d                   	pop    %ebp
   1056b:	c3                   	ret    

0001056c <list_last>:

static inline list_node_t* list_last (list_t* list) {
   1056c:	55                   	push   %ebp
   1056d:	89 e5                	mov    %esp,%ebp
    return list->last;
   1056f:	8b 45 08             	mov    0x8(%ebp),%eax
   10572:	8b 40 04             	mov    0x4(%eax),%eax
}
   10575:	5d                   	pop    %ebp
   10576:	c3                   	ret    

00010577 <kernel_init>:

// void test_mem_page() {}
// *(uint8_t*)test_mem_page = 0x12;
// *(uint8_t*)test_mem_page = 0x34;

void kernel_init (boot_info_t * boot_info) {
   10577:	55                   	push   %ebp
   10578:	89 e5                	mov    %esp,%ebp
   1057a:	83 ec 08             	sub    $0x8,%esp
    log_init();
   1057d:	e8 57 13 00 00       	call   118d9 <log_init>
    gdt_init();
   10582:	e8 a2 fe ff ff       	call   10429 <gdt_init>
    memory_init(boot_info);
   10587:	83 ec 0c             	sub    $0xc,%esp
   1058a:	ff 75 08             	pushl  0x8(%ebp)
   1058d:	e8 ab 19 00 00       	call   11f3d <memory_init>
   10592:	83 c4 10             	add    $0x10,%esp
    irq_init();
   10595:	e8 40 07 00 00       	call   10cda <irq_init>
    time_init();
   1059a:	e8 c4 fd ff ff       	call   10363 <time_init>
}
   1059f:	90                   	nop
   105a0:	c9                   	leave  
   105a1:	c3                   	ret    

000105a2 <show_list>:


void show_list(list_t list) {
   105a2:	55                   	push   %ebp
   105a3:	89 e5                	mov    %esp,%ebp
   105a5:	56                   	push   %esi
   105a6:	53                   	push   %ebx
    klog("list: first=0x%x, last=0x%x, count=%d",
   105a7:	8d 45 08             	lea    0x8(%ebp),%eax
   105aa:	50                   	push   %eax
   105ab:	e8 a7 ff ff ff       	call   10557 <list_count>
   105b0:	83 c4 04             	add    $0x4,%esp
   105b3:	89 c6                	mov    %eax,%esi
   105b5:	8d 45 08             	lea    0x8(%ebp),%eax
   105b8:	50                   	push   %eax
   105b9:	e8 ae ff ff ff       	call   1056c <list_last>
   105be:	83 c4 04             	add    $0x4,%esp
   105c1:	89 c3                	mov    %eax,%ebx
   105c3:	8d 45 08             	lea    0x8(%ebp),%eax
   105c6:	50                   	push   %eax
   105c7:	e8 96 ff ff ff       	call   10562 <list_first>
   105cc:	83 c4 04             	add    $0x4,%esp
   105cf:	56                   	push   %esi
   105d0:	53                   	push   %ebx
   105d1:	50                   	push   %eax
   105d2:	68 84 2c 01 00       	push   $0x12c84
   105d7:	e8 9a 13 00 00       	call   11976 <klog>
   105dc:	83 c4 10             	add    $0x10,%esp
         list_first(&list), list_last(&list), list_count(&list) );
}
   105df:	90                   	nop
   105e0:	8d 65 f8             	lea    -0x8(%ebp),%esp
   105e3:	5b                   	pop    %ebx
   105e4:	5e                   	pop    %esi
   105e5:	5d                   	pop    %ebp
   105e6:	c3                   	ret    

000105e7 <list_test>:

void list_test() {
   105e7:	55                   	push   %ebp
   105e8:	89 e5                	mov    %esp,%ebp
   105ea:	83 ec 58             	sub    $0x58,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   105ed:	83 ec 0c             	sub    $0xc,%esp
   105f0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105f3:	50                   	push   %eax
   105f4:	e8 be 10 00 00       	call   116b7 <list_init>
   105f9:	83 c4 10             	add    $0x10,%esp

    show_list(list);
   105fc:	83 ec 04             	sub    $0x4,%esp
   105ff:	ff 75 dc             	pushl  -0x24(%ebp)
   10602:	ff 75 d8             	pushl  -0x28(%ebp)
   10605:	ff 75 d4             	pushl  -0x2c(%ebp)
   10608:	e8 95 ff ff ff       	call   105a2 <show_list>
   1060d:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10610:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10617:	eb 3f                	jmp    10658 <list_test+0x71>
        list_node_t * node = nodes + i;
   10619:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1061c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   10623:	8d 45 ac             	lea    -0x54(%ebp),%eax
   10626:	01 d0                	add    %edx,%eax
   10628:	89 45 e0             	mov    %eax,-0x20(%ebp)
        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   1062b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1062e:	83 ec 04             	sub    $0x4,%esp
   10631:	50                   	push   %eax
   10632:	ff 75 f4             	pushl  -0xc(%ebp)
   10635:	68 ac 2c 01 00       	push   $0x12cac
   1063a:	e8 37 13 00 00       	call   11976 <klog>
   1063f:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   10642:	83 ec 08             	sub    $0x8,%esp
   10645:	ff 75 e0             	pushl  -0x20(%ebp)
   10648:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   1064b:	50                   	push   %eax
   1064c:	e8 8b 10 00 00       	call   116dc <list_insert_first>
   10651:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10654:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10658:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1065c:	7e bb                	jle    10619 <list_test+0x32>
    }
    show_list(list);
   1065e:	83 ec 04             	sub    $0x4,%esp
   10661:	ff 75 dc             	pushl  -0x24(%ebp)
   10664:	ff 75 d8             	pushl  -0x28(%ebp)
   10667:	ff 75 d4             	pushl  -0x2c(%ebp)
   1066a:	e8 33 ff ff ff       	call   105a2 <show_list>
   1066f:	83 c4 10             	add    $0x10,%esp

    list_init(&list);
   10672:	83 ec 0c             	sub    $0xc,%esp
   10675:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10678:	50                   	push   %eax
   10679:	e8 39 10 00 00       	call   116b7 <list_init>
   1067e:	83 c4 10             	add    $0x10,%esp
    show_list(list);
   10681:	83 ec 04             	sub    $0x4,%esp
   10684:	ff 75 dc             	pushl  -0x24(%ebp)
   10687:	ff 75 d8             	pushl  -0x28(%ebp)
   1068a:	ff 75 d4             	pushl  -0x2c(%ebp)
   1068d:	e8 10 ff ff ff       	call   105a2 <show_list>
   10692:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10695:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1069c:	eb 3f                	jmp    106dd <list_test+0xf6>
        list_node_t * node = nodes + i;
   1069e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   106a8:	8d 45 ac             	lea    -0x54(%ebp),%eax
   106ab:	01 d0                	add    %edx,%eax
   106ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   106b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106b3:	83 ec 04             	sub    $0x4,%esp
   106b6:	50                   	push   %eax
   106b7:	ff 75 f0             	pushl  -0x10(%ebp)
   106ba:	68 ac 2c 01 00       	push   $0x12cac
   106bf:	e8 b2 12 00 00       	call   11976 <klog>
   106c4:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   106c7:	83 ec 08             	sub    $0x8,%esp
   106ca:	ff 75 e4             	pushl  -0x1c(%ebp)
   106cd:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   106d0:	50                   	push   %eax
   106d1:	e8 65 10 00 00       	call   1173b <list_insert_last>
   106d6:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   106d9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   106dd:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   106e1:	7e bb                	jle    1069e <list_test+0xb7>
    }
    show_list(list);
   106e3:	83 ec 04             	sub    $0x4,%esp
   106e6:	ff 75 dc             	pushl  -0x24(%ebp)
   106e9:	ff 75 d8             	pushl  -0x28(%ebp)
   106ec:	ff 75 d4             	pushl  -0x2c(%ebp)
   106ef:	e8 ae fe ff ff       	call   105a2 <show_list>
   106f4:	83 c4 10             	add    $0x10,%esp
    
    for(int i=0; i<5; i++) {
   106f7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   106fe:	eb 2d                	jmp    1072d <list_test+0x146>
        list_node_t* node = list_delete_first(&list);
   10700:	83 ec 0c             	sub    $0xc,%esp
   10703:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10706:	50                   	push   %eax
   10707:	e8 93 10 00 00       	call   1179f <list_delete_first>
   1070c:	83 c4 10             	add    $0x10,%esp
   1070f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("delete first from list: %d, 0x%x", i, (uint32_t)node);
   10712:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10715:	83 ec 04             	sub    $0x4,%esp
   10718:	50                   	push   %eax
   10719:	ff 75 ec             	pushl  -0x14(%ebp)
   1071c:	68 cc 2c 01 00       	push   $0x12ccc
   10721:	e8 50 12 00 00       	call   11976 <klog>
   10726:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10729:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1072d:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   10731:	7e cd                	jle    10700 <list_test+0x119>
    }

    show_list(list);
   10733:	83 ec 04             	sub    $0x4,%esp
   10736:	ff 75 dc             	pushl  -0x24(%ebp)
   10739:	ff 75 d8             	pushl  -0x28(%ebp)
   1073c:	ff 75 d4             	pushl  -0x2c(%ebp)
   1073f:	e8 5e fe ff ff       	call   105a2 <show_list>
   10744:	83 c4 10             	add    $0x10,%esp

}
   10747:	90                   	nop
   10748:	c9                   	leave  
   10749:	c3                   	ret    

0001074a <offset_test>:

void offset_test() {
   1074a:	55                   	push   %ebp
   1074b:	89 e5                	mov    %esp,%ebp
   1074d:	83 ec 28             	sub    $0x28,%esp
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   10750:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   10757:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1075e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10765:	c7 45 e4 56 34 12 00 	movl   $0x123456,-0x1c(%ebp)

    list_node_t * v_node = &v.node;
   1076c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   1076f:	83 c0 04             	add    $0x4,%eax
   10772:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   10775:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10779:	74 08                	je     10783 <offset_test+0x39>
   1077b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1077e:	83 e8 04             	sub    $0x4,%eax
   10781:	eb 05                	jmp    10788 <offset_test+0x3e>
   10783:	b8 00 00 00 00       	mov    $0x0,%eax
   10788:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    if(p->i != 0x123456) {
   1078b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1078e:	8b 00                	mov    (%eax),%eax
   10790:	3d 56 34 12 00       	cmp    $0x123456,%eax
   10795:	74 10                	je     107a7 <offset_test+0x5d>
        klog("error");
   10797:	83 ec 0c             	sub    $0xc,%esp
   1079a:	68 ed 2c 01 00       	push   $0x12ced
   1079f:	e8 d2 11 00 00       	call   11976 <klog>
   107a4:	83 c4 10             	add    $0x10,%esp
    }
}
   107a7:	90                   	nop
   107a8:	c9                   	leave  
   107a9:	c3                   	ret    

000107aa <move_to_first_task>:


void move_to_first_task(void) {
   107aa:	55                   	push   %ebp
   107ab:	89 e5                	mov    %esp,%ebp
   107ad:	56                   	push   %esi
   107ae:	53                   	push   %ebx
   107af:	83 ec 10             	sub    $0x10,%esp
    task_t * curr = task_current();
   107b2:	e8 d2 21 00 00       	call   12989 <task_current>
   107b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    tss_t * tss = &(curr->tss);
   107ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107bd:	83 c0 4c             	add    $0x4c,%eax
   107c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"
        ::[ss]"r"(tss->ss), 
   107c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107c6:	8b 40 50             	mov    0x50(%eax),%eax
        [esp]"r"(tss->esp),
   107c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   107cc:	8b 52 38             	mov    0x38(%edx),%edx
        [eflags]"r"(tss->eflags),
   107cf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   107d2:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs),
   107d5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   107d8:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
        [eip]"r"(tss->eip)
   107db:	8b 75 f0             	mov    -0x10(%ebp),%esi
   107de:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__( 
   107e1:	50                   	push   %eax
   107e2:	52                   	push   %edx
   107e3:	51                   	push   %ecx
   107e4:	53                   	push   %ebx
   107e5:	56                   	push   %esi
   107e6:	cf                   	iret   
    );
}
   107e7:	90                   	nop
   107e8:	83 c4 10             	add    $0x10,%esp
   107eb:	5b                   	pop    %ebx
   107ec:	5e                   	pop    %esi
   107ed:	5d                   	pop    %ebp
   107ee:	c3                   	ret    

000107ef <init_main>:


void init_main() {
   107ef:	55                   	push   %ebp
   107f0:	89 e5                	mov    %esp,%ebp
   107f2:	83 ec 08             	sub    $0x8,%esp
    klog("Kernal %s is running ... ", "1.0.0");
   107f5:	83 ec 08             	sub    $0x8,%esp
   107f8:	68 f3 2c 01 00       	push   $0x12cf3
   107fd:	68 f9 2c 01 00       	push   $0x12cf9
   10802:	e8 6f 11 00 00       	call   11976 <klog>
   10807:	83 c4 10             	add    $0x10,%esp

    task_manager_init();
   1080a:	e8 27 20 00 00       	call   12836 <task_manager_init>
    first_task_init();
   1080f:	e8 d0 20 00 00       	call   128e4 <first_task_init>
    irq_enable_global();
   10814:	e8 63 07 00 00       	call   10f7c <irq_enable_global>
    
    move_to_first_task();
   10819:	e8 8c ff ff ff       	call   107aa <move_to_first_task>
   1081e:	90                   	nop
   1081f:	c9                   	leave  
   10820:	c3                   	ret    

00010821 <hlt>:
static inline void hlt() {
   10821:	55                   	push   %ebp
   10822:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   10824:	f4                   	hlt    
}
   10825:	90                   	nop
   10826:	5d                   	pop    %ebp
   10827:	c3                   	ret    

00010828 <cli>:
static inline void cli() {
   10828:	55                   	push   %ebp
   10829:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   1082b:	fa                   	cli    
}
   1082c:	90                   	nop
   1082d:	5d                   	pop    %ebp
   1082e:	c3                   	ret    

0001082f <sti>:
static inline void sti() {
   1082f:	55                   	push   %ebp
   10830:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   10832:	fb                   	sti    
}
   10833:	90                   	nop
   10834:	5d                   	pop    %ebp
   10835:	c3                   	ret    

00010836 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10836:	55                   	push   %ebp
   10837:	89 e5                	mov    %esp,%ebp
   10839:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   1083c:	8b 45 08             	mov    0x8(%ebp),%eax
   1083f:	c1 e8 10             	shr    $0x10,%eax
   10842:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   10846:	8b 45 08             	mov    0x8(%ebp),%eax
   10849:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   1084d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10850:	83 e8 01             	sub    $0x1,%eax
   10853:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   10857:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1085b:	90                   	nop
   1085c:	c9                   	leave  
   1085d:	c3                   	ret    

0001085e <inb>:
static inline uint8_t inb(uint16_t  port) {
   1085e:	55                   	push   %ebp
   1085f:	89 e5                	mov    %esp,%ebp
   10861:	83 ec 14             	sub    $0x14,%esp
   10864:	8b 45 08             	mov    0x8(%ebp),%eax
   10867:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   1086b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1086f:	89 c2                	mov    %eax,%edx
   10871:	ec                   	in     (%dx),%al
   10872:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   10875:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10879:	c9                   	leave  
   1087a:	c3                   	ret    

0001087b <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1087b:	55                   	push   %ebp
   1087c:	89 e5                	mov    %esp,%ebp
   1087e:	83 ec 08             	sub    $0x8,%esp
   10881:	8b 55 08             	mov    0x8(%ebp),%edx
   10884:	8b 45 0c             	mov    0xc(%ebp),%eax
   10887:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1088b:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1088e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10892:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10896:	ee                   	out    %al,(%dx)
}
   10897:	90                   	nop
   10898:	c9                   	leave  
   10899:	c3                   	ret    

0001089a <read_cr2>:

static inline void write_cr0(uint32_t v) {
	__asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
}

static inline uint32_t read_cr2() {
   1089a:	55                   	push   %ebp
   1089b:	89 e5                	mov    %esp,%ebp
   1089d:	83 ec 10             	sub    $0x10,%esp
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   108a0:	0f 20 d0             	mov    %cr2,%eax
   108a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   108a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   108a9:	c9                   	leave  
   108aa:	c3                   	ret    

000108ab <read_eflags>:

static inline void write_tr (uint16_t tss_selector) {
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
}

static inline uint32_t read_eflags() {
   108ab:	55                   	push   %ebp
   108ac:	89 e5                	mov    %esp,%ebp
   108ae:	83 ec 10             	sub    $0x10,%esp
	uint32_t eflags;

	__asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   108b1:	9c                   	pushf  
   108b2:	58                   	pop    %eax
   108b3:	89 45 fc             	mov    %eax,-0x4(%ebp)

	return eflags;
   108b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   108b9:	c9                   	leave  
   108ba:	c3                   	ret    

000108bb <write_eflags>:

static inline void write_eflags(uint32_t eflags) {
   108bb:	55                   	push   %ebp
   108bc:	89 e5                	mov    %esp,%ebp

	__asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   108be:	8b 45 08             	mov    0x8(%ebp),%eax
   108c1:	50                   	push   %eax
   108c2:	9d                   	popf   


}
   108c3:	90                   	nop
   108c4:	5d                   	pop    %ebp
   108c5:	c3                   	ret    

000108c6 <default_handler>:

//  -----------------------------------------   中断相关    -------------------------------------------
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void default_handler (exception_frame_t * frame, const char * message) {
   108c6:	55                   	push   %ebp
   108c7:	89 e5                	mov    %esp,%ebp
   108c9:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   108cc:	83 ec 0c             	sub    $0xc,%esp
   108cf:	68 14 2d 01 00       	push   $0x12d14
   108d4:	e8 9d 10 00 00       	call   11976 <klog>
   108d9:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   108dc:	83 ec 08             	sub    $0x8,%esp
   108df:	ff 75 0c             	pushl  0xc(%ebp)
   108e2:	68 35 2d 01 00       	push   $0x12d35
   108e7:	e8 8a 10 00 00       	call   11976 <klog>
   108ec:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   108ef:	e8 2d ff ff ff       	call   10821 <hlt>
   108f4:	eb f9                	jmp    108ef <default_handler+0x29>

000108f6 <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   108f6:	55                   	push   %ebp
   108f7:	89 e5                	mov    %esp,%ebp
   108f9:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   108fc:	83 ec 08             	sub    $0x8,%esp
   108ff:	68 50 2d 01 00       	push   $0x12d50
   10904:	ff 75 08             	pushl  0x8(%ebp)
   10907:	e8 ba ff ff ff       	call   108c6 <default_handler>
   1090c:	83 c4 10             	add    $0x10,%esp
}
   1090f:	90                   	nop
   10910:	c9                   	leave  
   10911:	c3                   	ret    

00010912 <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   10912:	55                   	push   %ebp
   10913:	89 e5                	mov    %esp,%ebp
   10915:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   10918:	83 ec 08             	sub    $0x8,%esp
   1091b:	68 63 2d 01 00       	push   $0x12d63
   10920:	ff 75 08             	pushl  0x8(%ebp)
   10923:	e8 9e ff ff ff       	call   108c6 <default_handler>
   10928:	83 c4 10             	add    $0x10,%esp
}
   1092b:	90                   	nop
   1092c:	c9                   	leave  
   1092d:	c3                   	ret    

0001092e <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   1092e:	55                   	push   %ebp
   1092f:	89 e5                	mov    %esp,%ebp
   10931:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   10934:	83 ec 08             	sub    $0x8,%esp
   10937:	68 72 2d 01 00       	push   $0x12d72
   1093c:	ff 75 08             	pushl  0x8(%ebp)
   1093f:	e8 82 ff ff ff       	call   108c6 <default_handler>
   10944:	83 c4 10             	add    $0x10,%esp
}
   10947:	90                   	nop
   10948:	c9                   	leave  
   10949:	c3                   	ret    

0001094a <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   1094a:	55                   	push   %ebp
   1094b:	89 e5                	mov    %esp,%ebp
   1094d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   10950:	83 ec 08             	sub    $0x8,%esp
   10953:	68 82 2d 01 00       	push   $0x12d82
   10958:	ff 75 08             	pushl  0x8(%ebp)
   1095b:	e8 66 ff ff ff       	call   108c6 <default_handler>
   10960:	83 c4 10             	add    $0x10,%esp
}
   10963:	90                   	nop
   10964:	c9                   	leave  
   10965:	c3                   	ret    

00010966 <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   10966:	55                   	push   %ebp
   10967:	89 e5                	mov    %esp,%ebp
   10969:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   1096c:	83 ec 08             	sub    $0x8,%esp
   1096f:	68 91 2d 01 00       	push   $0x12d91
   10974:	ff 75 08             	pushl  0x8(%ebp)
   10977:	e8 4a ff ff ff       	call   108c6 <default_handler>
   1097c:	83 c4 10             	add    $0x10,%esp
}
   1097f:	90                   	nop
   10980:	c9                   	leave  
   10981:	c3                   	ret    

00010982 <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   10982:	55                   	push   %ebp
   10983:	89 e5                	mov    %esp,%ebp
   10985:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   10988:	83 ec 08             	sub    $0x8,%esp
   1098b:	68 9d 2d 01 00       	push   $0x12d9d
   10990:	ff 75 08             	pushl  0x8(%ebp)
   10993:	e8 2e ff ff ff       	call   108c6 <default_handler>
   10998:	83 c4 10             	add    $0x10,%esp
}
   1099b:	90                   	nop
   1099c:	c9                   	leave  
   1099d:	c3                   	ret    

0001099e <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   1099e:	55                   	push   %ebp
   1099f:	89 e5                	mov    %esp,%ebp
   109a1:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   109a4:	83 ec 08             	sub    $0x8,%esp
   109a7:	68 a7 2d 01 00       	push   $0x12da7
   109ac:	ff 75 08             	pushl  0x8(%ebp)
   109af:	e8 12 ff ff ff       	call   108c6 <default_handler>
   109b4:	83 c4 10             	add    $0x10,%esp
}
   109b7:	90                   	nop
   109b8:	c9                   	leave  
   109b9:	c3                   	ret    

000109ba <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   109ba:	55                   	push   %ebp
   109bb:	89 e5                	mov    %esp,%ebp
   109bd:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   109c0:	83 ec 08             	sub    $0x8,%esp
   109c3:	68 bd 2d 01 00       	push   $0x12dbd
   109c8:	ff 75 08             	pushl  0x8(%ebp)
   109cb:	e8 f6 fe ff ff       	call   108c6 <default_handler>
   109d0:	83 c4 10             	add    $0x10,%esp
}
   109d3:	90                   	nop
   109d4:	c9                   	leave  
   109d5:	c3                   	ret    

000109d6 <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   109d6:	55                   	push   %ebp
   109d7:	89 e5                	mov    %esp,%ebp
   109d9:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   109dc:	83 ec 08             	sub    $0x8,%esp
   109df:	68 cd 2d 01 00       	push   $0x12dcd
   109e4:	ff 75 08             	pushl  0x8(%ebp)
   109e7:	e8 da fe ff ff       	call   108c6 <default_handler>
   109ec:	83 c4 10             	add    $0x10,%esp
}
   109ef:	90                   	nop
   109f0:	c9                   	leave  
   109f1:	c3                   	ret    

000109f2 <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   109f2:	55                   	push   %ebp
   109f3:	89 e5                	mov    %esp,%ebp
   109f5:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   109f8:	83 ec 08             	sub    $0x8,%esp
   109fb:	68 e3 2d 01 00       	push   $0x12de3
   10a00:	ff 75 08             	pushl  0x8(%ebp)
   10a03:	e8 be fe ff ff       	call   108c6 <default_handler>
   10a08:	83 c4 10             	add    $0x10,%esp
}
   10a0b:	90                   	nop
   10a0c:	c9                   	leave  
   10a0d:	c3                   	ret    

00010a0e <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   10a0e:	55                   	push   %ebp
   10a0f:	89 e5                	mov    %esp,%ebp
   10a11:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   10a14:	83 ec 08             	sub    $0x8,%esp
   10a17:	68 f1 2d 01 00       	push   $0x12df1
   10a1c:	ff 75 08             	pushl  0x8(%ebp)
   10a1f:	e8 a2 fe ff ff       	call   108c6 <default_handler>
   10a24:	83 c4 10             	add    $0x10,%esp
}
   10a27:	90                   	nop
   10a28:	c9                   	leave  
   10a29:	c3                   	ret    

00010a2a <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   10a2a:	55                   	push   %ebp
   10a2b:	89 e5                	mov    %esp,%ebp
   10a2d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   10a30:	83 ec 08             	sub    $0x8,%esp
   10a33:	68 fd 2d 01 00       	push   $0x12dfd
   10a38:	ff 75 08             	pushl  0x8(%ebp)
   10a3b:	e8 86 fe ff ff       	call   108c6 <default_handler>
   10a40:	83 c4 10             	add    $0x10,%esp
}
   10a43:	90                   	nop
   10a44:	c9                   	leave  
   10a45:	c3                   	ret    

00010a46 <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   10a46:	55                   	push   %ebp
   10a47:	89 e5                	mov    %esp,%ebp
   10a49:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   10a4c:	83 ec 08             	sub    $0x8,%esp
   10a4f:	68 12 2e 01 00       	push   $0x12e12
   10a54:	ff 75 08             	pushl  0x8(%ebp)
   10a57:	e8 6a fe ff ff       	call   108c6 <default_handler>
   10a5c:	83 c4 10             	add    $0x10,%esp
}
   10a5f:	90                   	nop
   10a60:	c9                   	leave  
   10a61:	c3                   	ret    

00010a62 <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   10a62:	55                   	push   %ebp
   10a63:	89 e5                	mov    %esp,%ebp
   10a65:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   10a68:	83 ec 08             	sub    $0x8,%esp
   10a6b:	68 28 2e 01 00       	push   $0x12e28
   10a70:	ff 75 08             	pushl  0x8(%ebp)
   10a73:	e8 4e fe ff ff       	call   108c6 <default_handler>
   10a78:	83 c4 10             	add    $0x10,%esp
}
   10a7b:	90                   	nop
   10a7c:	c9                   	leave  
   10a7d:	c3                   	ret    

00010a7e <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   10a7e:	55                   	push   %ebp
   10a7f:	89 e5                	mov    %esp,%ebp
   10a81:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   10a84:	83 ec 0c             	sub    $0xc,%esp
   10a87:	68 14 2d 01 00       	push   $0x12d14
   10a8c:	e8 e5 0e 00 00       	call   11976 <klog>
   10a91:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: Page fault.");
   10a94:	83 ec 0c             	sub    $0xc,%esp
   10a97:	68 54 2e 01 00       	push   $0x12e54
   10a9c:	e8 d5 0e 00 00       	call   11976 <klog>
   10aa1:	83 c4 10             	add    $0x10,%esp
    if (frame->err_code & ERR_PAGE_P) {
   10aa4:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa7:	8b 40 34             	mov    0x34(%eax),%eax
   10aaa:	83 e0 01             	and    $0x1,%eax
   10aad:	85 c0                	test   %eax,%eax
   10aaf:	74 18                	je     10ac9 <handle_page_fault+0x4b>
        klog("\tpage-level protection violation: 0x%x.", read_cr2());
   10ab1:	e8 e4 fd ff ff       	call   1089a <read_cr2>
   10ab6:	83 ec 08             	sub    $0x8,%esp
   10ab9:	50                   	push   %eax
   10aba:	68 78 2e 01 00       	push   $0x12e78
   10abf:	e8 b2 0e 00 00       	call   11976 <klog>
   10ac4:	83 c4 10             	add    $0x10,%esp
   10ac7:	eb 16                	jmp    10adf <handle_page_fault+0x61>
    } else {
         klog("\tPage doesn't present 0x%x", read_cr2());
   10ac9:	e8 cc fd ff ff       	call   1089a <read_cr2>
   10ace:	83 ec 08             	sub    $0x8,%esp
   10ad1:	50                   	push   %eax
   10ad2:	68 a0 2e 01 00       	push   $0x12ea0
   10ad7:	e8 9a 0e 00 00       	call   11976 <klog>
   10adc:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->err_code & ERR_PAGE_WR) {
   10adf:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae2:	8b 40 34             	mov    0x34(%eax),%eax
   10ae5:	83 e0 02             	and    $0x2,%eax
   10ae8:	85 c0                	test   %eax,%eax
   10aea:	74 12                	je     10afe <handle_page_fault+0x80>
        klog("\tThe access causing the fault was a read.");
   10aec:	83 ec 0c             	sub    $0xc,%esp
   10aef:	68 bc 2e 01 00       	push   $0x12ebc
   10af4:	e8 7d 0e 00 00       	call   11976 <klog>
   10af9:	83 c4 10             	add    $0x10,%esp
   10afc:	eb 10                	jmp    10b0e <handle_page_fault+0x90>
    } else {
        klog("\tThe access causing the fault was a write.");
   10afe:	83 ec 0c             	sub    $0xc,%esp
   10b01:	68 e8 2e 01 00       	push   $0x12ee8
   10b06:	e8 6b 0e 00 00       	call   11976 <klog>
   10b0b:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->err_code & ERR_PAGE_US) {
   10b0e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b11:	8b 40 34             	mov    0x34(%eax),%eax
   10b14:	83 e0 02             	and    $0x2,%eax
   10b17:	85 c0                	test   %eax,%eax
   10b19:	74 12                	je     10b2d <handle_page_fault+0xaf>
        klog("\tA supervisor-mode access caused the fault.");
   10b1b:	83 ec 0c             	sub    $0xc,%esp
   10b1e:	68 14 2f 01 00       	push   $0x12f14
   10b23:	e8 4e 0e 00 00       	call   11976 <klog>
   10b28:	83 c4 10             	add    $0x10,%esp
   10b2b:	eb 10                	jmp    10b3d <handle_page_fault+0xbf>
    } else {
        klog("\tA user-mode access caused the fault.");
   10b2d:	83 ec 0c             	sub    $0xc,%esp
   10b30:	68 40 2f 01 00       	push   $0x12f40
   10b35:	e8 3c 0e 00 00       	call   11976 <klog>
   10b3a:	83 c4 10             	add    $0x10,%esp
    }

    while(1){hlt();}
   10b3d:	e8 df fc ff ff       	call   10821 <hlt>
   10b42:	eb f9                	jmp    10b3d <handle_page_fault+0xbf>

00010b44 <handle_fpu_error>:

	//default_handler(frame, "IRQ/Exception happend: Page fault.");
}
void handle_fpu_error(exception_frame_t * frame) {
   10b44:	55                   	push   %ebp
   10b45:	89 e5                	mov    %esp,%ebp
   10b47:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   10b4a:	83 ec 08             	sub    $0x8,%esp
   10b4d:	68 66 2f 01 00       	push   $0x12f66
   10b52:	ff 75 08             	pushl  0x8(%ebp)
   10b55:	e8 6c fd ff ff       	call   108c6 <default_handler>
   10b5a:	83 c4 10             	add    $0x10,%esp
}
   10b5d:	90                   	nop
   10b5e:	c9                   	leave  
   10b5f:	c3                   	ret    

00010b60 <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   10b60:	55                   	push   %ebp
   10b61:	89 e5                	mov    %esp,%ebp
   10b63:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   10b66:	83 ec 08             	sub    $0x8,%esp
   10b69:	68 84 2f 01 00       	push   $0x12f84
   10b6e:	ff 75 08             	pushl  0x8(%ebp)
   10b71:	e8 50 fd ff ff       	call   108c6 <default_handler>
   10b76:	83 c4 10             	add    $0x10,%esp
}
   10b79:	90                   	nop
   10b7a:	c9                   	leave  
   10b7b:	c3                   	ret    

00010b7c <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   10b7c:	55                   	push   %ebp
   10b7d:	89 e5                	mov    %esp,%ebp
   10b7f:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   10b82:	83 ec 08             	sub    $0x8,%esp
   10b85:	68 95 2f 01 00       	push   $0x12f95
   10b8a:	ff 75 08             	pushl  0x8(%ebp)
   10b8d:	e8 34 fd ff ff       	call   108c6 <default_handler>
   10b92:	83 c4 10             	add    $0x10,%esp
}
   10b95:	90                   	nop
   10b96:	c9                   	leave  
   10b97:	c3                   	ret    

00010b98 <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   10b98:	55                   	push   %ebp
   10b99:	89 e5                	mov    %esp,%ebp
   10b9b:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10b9e:	83 ec 08             	sub    $0x8,%esp
   10ba1:	68 a4 2f 01 00       	push   $0x12fa4
   10ba6:	ff 75 08             	pushl  0x8(%ebp)
   10ba9:	e8 18 fd ff ff       	call   108c6 <default_handler>
   10bae:	83 c4 10             	add    $0x10,%esp
}
   10bb1:	90                   	nop
   10bb2:	c9                   	leave  
   10bb3:	c3                   	ret    

00010bb4 <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10bb4:	55                   	push   %ebp
   10bb5:	89 e5                	mov    %esp,%ebp
   10bb7:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   10bba:	83 ec 08             	sub    $0x8,%esp
   10bbd:	68 c3 2f 01 00       	push   $0x12fc3
   10bc2:	ff 75 08             	pushl  0x8(%ebp)
   10bc5:	e8 fc fc ff ff       	call   108c6 <default_handler>
   10bca:	83 c4 10             	add    $0x10,%esp
}
   10bcd:	90                   	nop
   10bce:	c9                   	leave  
   10bcf:	c3                   	ret    

00010bd0 <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10bd0:	55                   	push   %ebp
   10bd1:	89 e5                	mov    %esp,%ebp
   10bd3:	83 ec 08             	sub    $0x8,%esp
   10bd6:	8b 55 0c             	mov    0xc(%ebp),%edx
   10bd9:	8b 45 14             	mov    0x14(%ebp),%eax
   10bdc:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10be0:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10be4:	8b 45 10             	mov    0x10(%ebp),%eax
   10be7:	89 c2                	mov    %eax,%edx
   10be9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bec:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10bef:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf2:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10bf6:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10bfa:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfd:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10c01:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10c05:	8b 45 10             	mov    0x10(%ebp),%eax
   10c08:	c1 e8 10             	shr    $0x10,%eax
   10c0b:	89 c2                	mov    %eax,%edx
   10c0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c10:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10c14:	90                   	nop
   10c15:	c9                   	leave  
   10c16:	c3                   	ret    

00010c17 <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   10c17:	55                   	push   %ebp
   10c18:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   10c1a:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10c1e:	7e 07                	jle    10c27 <irq_install+0x10>
        return -1;
   10c20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c25:	eb 1e                	jmp    10c45 <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   10c27:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2a:	c1 e0 03             	shl    $0x3,%eax
   10c2d:	05 40 58 01 00       	add    $0x15840,%eax
   10c32:	68 00 8e 00 00       	push   $0x8e00
   10c37:	ff 75 0c             	pushl  0xc(%ebp)
   10c3a:	6a 08                	push   $0x8
   10c3c:	50                   	push   %eax
   10c3d:	e8 8e ff ff ff       	call   10bd0 <gate_desc_set>
   10c42:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   10c45:	c9                   	leave  
   10c46:	c3                   	ret    

00010c47 <init_pic>:

static void init_pic() {
   10c47:	55                   	push   %ebp
   10c48:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10c4a:	6a 11                	push   $0x11
   10c4c:	6a 20                	push   $0x20
   10c4e:	e8 28 fc ff ff       	call   1087b <outb>
   10c53:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10c56:	6a 20                	push   $0x20
   10c58:	6a 21                	push   $0x21
   10c5a:	e8 1c fc ff ff       	call   1087b <outb>
   10c5f:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10c62:	6a 04                	push   $0x4
   10c64:	6a 21                	push   $0x21
   10c66:	e8 10 fc ff ff       	call   1087b <outb>
   10c6b:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10c6e:	6a 01                	push   $0x1
   10c70:	6a 21                	push   $0x21
   10c72:	e8 04 fc ff ff       	call   1087b <outb>
   10c77:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10c7a:	6a 11                	push   $0x11
   10c7c:	68 a0 00 00 00       	push   $0xa0
   10c81:	e8 f5 fb ff ff       	call   1087b <outb>
   10c86:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10c89:	6a 28                	push   $0x28
   10c8b:	68 a1 00 00 00       	push   $0xa1
   10c90:	e8 e6 fb ff ff       	call   1087b <outb>
   10c95:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10c98:	6a 02                	push   $0x2
   10c9a:	68 a1 00 00 00       	push   $0xa1
   10c9f:	e8 d7 fb ff ff       	call   1087b <outb>
   10ca4:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10ca7:	6a 01                	push   $0x1
   10ca9:	68 a1 00 00 00       	push   $0xa1
   10cae:	e8 c8 fb ff ff       	call   1087b <outb>
   10cb3:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10cb6:	68 fb 00 00 00       	push   $0xfb
   10cbb:	6a 21                	push   $0x21
   10cbd:	e8 b9 fb ff ff       	call   1087b <outb>
   10cc2:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10cc5:	68 ff 00 00 00       	push   $0xff
   10cca:	68 a1 00 00 00       	push   $0xa1
   10ccf:	e8 a7 fb ff ff       	call   1087b <outb>
   10cd4:	83 c4 08             	add    $0x8,%esp
}
   10cd7:	90                   	nop
   10cd8:	c9                   	leave  
   10cd9:	c3                   	ret    

00010cda <irq_init>:

void irq_init () {
   10cda:	55                   	push   %ebp
   10cdb:	89 e5                	mov    %esp,%ebp
   10cdd:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10ce0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10ce7:	eb 25                	jmp    10d0e <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10ce9:	ba 28 00 01 00       	mov    $0x10028,%edx
   10cee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10cf1:	c1 e0 03             	shl    $0x3,%eax
   10cf4:	05 40 58 01 00       	add    $0x15840,%eax
   10cf9:	68 00 8e 00 00       	push   $0x8e00
   10cfe:	52                   	push   %edx
   10cff:	6a 08                	push   $0x8
   10d01:	50                   	push   %eax
   10d02:	e8 c9 fe ff ff       	call   10bd0 <gate_desc_set>
   10d07:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10d0a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10d0e:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   10d12:	76 d5                	jbe    10ce9 <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10d14:	b8 40 58 01 00       	mov    $0x15840,%eax
   10d19:	68 00 04 00 00       	push   $0x400
   10d1e:	50                   	push   %eax
   10d1f:	e8 12 fb ff ff       	call   10836 <lidt>
   10d24:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   10d27:	b8 47 00 01 00       	mov    $0x10047,%eax
   10d2c:	50                   	push   %eax
   10d2d:	6a 00                	push   $0x0
   10d2f:	e8 e3 fe ff ff       	call   10c17 <irq_install>
   10d34:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   10d37:	b8 66 00 01 00       	mov    $0x10066,%eax
   10d3c:	50                   	push   %eax
   10d3d:	6a 01                	push   $0x1
   10d3f:	e8 d3 fe ff ff       	call   10c17 <irq_install>
   10d44:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   10d47:	b8 85 00 01 00       	mov    $0x10085,%eax
   10d4c:	50                   	push   %eax
   10d4d:	6a 02                	push   $0x2
   10d4f:	e8 c3 fe ff ff       	call   10c17 <irq_install>
   10d54:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   10d57:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   10d5c:	50                   	push   %eax
   10d5d:	6a 03                	push   $0x3
   10d5f:	e8 b3 fe ff ff       	call   10c17 <irq_install>
   10d64:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10d67:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   10d6c:	50                   	push   %eax
   10d6d:	6a 04                	push   $0x4
   10d6f:	e8 a3 fe ff ff       	call   10c17 <irq_install>
   10d74:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10d77:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   10d7c:	50                   	push   %eax
   10d7d:	6a 05                	push   $0x5
   10d7f:	e8 93 fe ff ff       	call   10c17 <irq_install>
   10d84:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10d87:	b8 01 01 01 00       	mov    $0x10101,%eax
   10d8c:	50                   	push   %eax
   10d8d:	6a 06                	push   $0x6
   10d8f:	e8 83 fe ff ff       	call   10c17 <irq_install>
   10d94:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10d97:	b8 20 01 01 00       	mov    $0x10120,%eax
   10d9c:	50                   	push   %eax
   10d9d:	6a 07                	push   $0x7
   10d9f:	e8 73 fe ff ff       	call   10c17 <irq_install>
   10da4:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10da7:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   10dac:	50                   	push   %eax
   10dad:	6a 08                	push   $0x8
   10daf:	e8 63 fe ff ff       	call   10c17 <irq_install>
   10db4:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10db7:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   10dbc:	50                   	push   %eax
   10dbd:	6a 0a                	push   $0xa
   10dbf:	e8 53 fe ff ff       	call   10c17 <irq_install>
   10dc4:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10dc7:	b8 79 01 01 00       	mov    $0x10179,%eax
   10dcc:	50                   	push   %eax
   10dcd:	6a 0b                	push   $0xb
   10dcf:	e8 43 fe ff ff       	call   10c17 <irq_install>
   10dd4:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10dd7:	b8 96 01 01 00       	mov    $0x10196,%eax
   10ddc:	50                   	push   %eax
   10ddd:	6a 0c                	push   $0xc
   10ddf:	e8 33 fe ff ff       	call   10c17 <irq_install>
   10de4:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10de7:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   10dec:	50                   	push   %eax
   10ded:	6a 0d                	push   $0xd
   10def:	e8 23 fe ff ff       	call   10c17 <irq_install>
   10df4:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10df7:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   10dfc:	50                   	push   %eax
   10dfd:	6a 0e                	push   $0xe
   10dff:	e8 13 fe ff ff       	call   10c17 <irq_install>
   10e04:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   10e07:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   10e0c:	50                   	push   %eax
   10e0d:	6a 10                	push   $0x10
   10e0f:	e8 03 fe ff ff       	call   10c17 <irq_install>
   10e14:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   10e17:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   10e1c:	50                   	push   %eax
   10e1d:	6a 11                	push   $0x11
   10e1f:	e8 f3 fd ff ff       	call   10c17 <irq_install>
   10e24:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   10e27:	b8 29 02 01 00       	mov    $0x10229,%eax
   10e2c:	50                   	push   %eax
   10e2d:	6a 12                	push   $0x12
   10e2f:	e8 e3 fd ff ff       	call   10c17 <irq_install>
   10e34:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   10e37:	b8 48 02 01 00       	mov    $0x10248,%eax
   10e3c:	50                   	push   %eax
   10e3d:	6a 13                	push   $0x13
   10e3f:	e8 d3 fd ff ff       	call   10c17 <irq_install>
   10e44:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   10e47:	b8 67 02 01 00       	mov    $0x10267,%eax
   10e4c:	50                   	push   %eax
   10e4d:	6a 14                	push   $0x14
   10e4f:	e8 c3 fd ff ff       	call   10c17 <irq_install>
   10e54:	83 c4 08             	add    $0x8,%esp

    init_pic();
   10e57:	e8 eb fd ff ff       	call   10c47 <init_pic>
}
   10e5c:	90                   	nop
   10e5d:	c9                   	leave  
   10e5e:	c3                   	ret    

00010e5f <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10e5f:	55                   	push   %ebp
   10e60:	89 e5                	mov    %esp,%ebp
   10e62:	53                   	push   %ebx
   10e63:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10e66:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10e6a:	7e 78                	jle    10ee4 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10e6c:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10e70:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e74:	7f 32                	jg     10ea8 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10e76:	6a 21                	push   $0x21
   10e78:	e8 e1 f9 ff ff       	call   1085e <inb>
   10e7d:	83 c4 04             	add    $0x4,%esp
   10e80:	89 c2                	mov    %eax,%edx
   10e82:	8b 45 08             	mov    0x8(%ebp),%eax
   10e85:	bb 01 00 00 00       	mov    $0x1,%ebx
   10e8a:	89 c1                	mov    %eax,%ecx
   10e8c:	d3 e3                	shl    %cl,%ebx
   10e8e:	89 d8                	mov    %ebx,%eax
   10e90:	f7 d0                	not    %eax
   10e92:	21 d0                	and    %edx,%eax
   10e94:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10e97:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10e9b:	50                   	push   %eax
   10e9c:	6a 21                	push   $0x21
   10e9e:	e8 d8 f9 ff ff       	call   1087b <outb>
   10ea3:	83 c4 08             	add    $0x8,%esp
   10ea6:	eb 3d                	jmp    10ee5 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10ea8:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10eac:	68 a1 00 00 00       	push   $0xa1
   10eb1:	e8 a8 f9 ff ff       	call   1085e <inb>
   10eb6:	83 c4 04             	add    $0x4,%esp
   10eb9:	89 c2                	mov    %eax,%edx
   10ebb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ebe:	bb 01 00 00 00       	mov    $0x1,%ebx
   10ec3:	89 c1                	mov    %eax,%ecx
   10ec5:	d3 e3                	shl    %cl,%ebx
   10ec7:	89 d8                	mov    %ebx,%eax
   10ec9:	f7 d0                	not    %eax
   10ecb:	21 d0                	and    %edx,%eax
   10ecd:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10ed0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10ed4:	50                   	push   %eax
   10ed5:	68 a1 00 00 00       	push   $0xa1
   10eda:	e8 9c f9 ff ff       	call   1087b <outb>
   10edf:	83 c4 08             	add    $0x8,%esp
   10ee2:	eb 01                	jmp    10ee5 <irq_enable+0x86>
        return;
   10ee4:	90                   	nop
    }
}
   10ee5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ee8:	c9                   	leave  
   10ee9:	c3                   	ret    

00010eea <irq_disable>:

void irq_disable(int irq_num) {
   10eea:	55                   	push   %ebp
   10eeb:	89 e5                	mov    %esp,%ebp
   10eed:	53                   	push   %ebx
   10eee:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10ef1:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ef5:	7e 74                	jle    10f6b <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10ef7:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10efb:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10eff:	7f 30                	jg     10f31 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10f01:	6a 21                	push   $0x21
   10f03:	e8 56 f9 ff ff       	call   1085e <inb>
   10f08:	83 c4 04             	add    $0x4,%esp
   10f0b:	89 c3                	mov    %eax,%ebx
   10f0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f10:	ba 01 00 00 00       	mov    $0x1,%edx
   10f15:	89 c1                	mov    %eax,%ecx
   10f17:	d3 e2                	shl    %cl,%edx
   10f19:	89 d0                	mov    %edx,%eax
   10f1b:	09 d8                	or     %ebx,%eax
   10f1d:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10f20:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10f24:	50                   	push   %eax
   10f25:	6a 21                	push   $0x21
   10f27:	e8 4f f9 ff ff       	call   1087b <outb>
   10f2c:	83 c4 08             	add    $0x8,%esp
   10f2f:	eb 3b                	jmp    10f6c <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10f31:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10f35:	68 a1 00 00 00       	push   $0xa1
   10f3a:	e8 1f f9 ff ff       	call   1085e <inb>
   10f3f:	83 c4 04             	add    $0x4,%esp
   10f42:	89 c3                	mov    %eax,%ebx
   10f44:	8b 45 08             	mov    0x8(%ebp),%eax
   10f47:	ba 01 00 00 00       	mov    $0x1,%edx
   10f4c:	89 c1                	mov    %eax,%ecx
   10f4e:	d3 e2                	shl    %cl,%edx
   10f50:	89 d0                	mov    %edx,%eax
   10f52:	09 d8                	or     %ebx,%eax
   10f54:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10f57:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10f5b:	50                   	push   %eax
   10f5c:	68 a1 00 00 00       	push   $0xa1
   10f61:	e8 15 f9 ff ff       	call   1087b <outb>
   10f66:	83 c4 08             	add    $0x8,%esp
   10f69:	eb 01                	jmp    10f6c <irq_disable+0x82>
        return;
   10f6b:	90                   	nop
    }
}
   10f6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f6f:	c9                   	leave  
   10f70:	c3                   	ret    

00010f71 <irq_disable_global>:

void irq_disable_global(void) {
   10f71:	55                   	push   %ebp
   10f72:	89 e5                	mov    %esp,%ebp
    cli();
   10f74:	e8 af f8 ff ff       	call   10828 <cli>
}
   10f79:	90                   	nop
   10f7a:	5d                   	pop    %ebp
   10f7b:	c3                   	ret    

00010f7c <irq_enable_global>:

void irq_enable_global(void) {
   10f7c:	55                   	push   %ebp
   10f7d:	89 e5                	mov    %esp,%ebp
    sti();
   10f7f:	e8 ab f8 ff ff       	call   1082f <sti>
}
   10f84:	90                   	nop
   10f85:	5d                   	pop    %ebp
   10f86:	c3                   	ret    

00010f87 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10f87:	55                   	push   %ebp
   10f88:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10f8a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10f8e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f92:	7e 0f                	jle    10fa3 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10f94:	6a 20                	push   $0x20
   10f96:	68 a0 00 00 00       	push   $0xa0
   10f9b:	e8 db f8 ff ff       	call   1087b <outb>
   10fa0:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10fa3:	6a 20                	push   $0x20
   10fa5:	6a 20                	push   $0x20
   10fa7:	e8 cf f8 ff ff       	call   1087b <outb>
   10fac:	83 c4 08             	add    $0x8,%esp
}
   10faf:	90                   	nop
   10fb0:	c9                   	leave  
   10fb1:	c3                   	ret    

00010fb2 <irq_enter_proection>:


irq_state_t irq_enter_proection() {
   10fb2:	55                   	push   %ebp
   10fb3:	89 e5                	mov    %esp,%ebp
   10fb5:	83 ec 10             	sub    $0x10,%esp
    irq_state_t  state = read_eflags();
   10fb8:	e8 ee f8 ff ff       	call   108ab <read_eflags>
   10fbd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   10fc0:	e8 ac ff ff ff       	call   10f71 <irq_disable_global>

    return state;
   10fc5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10fc8:	c9                   	leave  
   10fc9:	c3                   	ret    

00010fca <irq_leave_proection>:


void irq_leave_proection(irq_state_t state) {
   10fca:	55                   	push   %ebp
   10fcb:	89 e5                	mov    %esp,%ebp

    write_eflags(state);
   10fcd:	ff 75 08             	pushl  0x8(%ebp)
   10fd0:	e8 e6 f8 ff ff       	call   108bb <write_eflags>
   10fd5:	83 c4 04             	add    $0x4,%esp
}
   10fd8:	90                   	nop
   10fd9:	c9                   	leave  
   10fda:	c3                   	ret    

00010fdb <bitmap_byte_count>:
#include <bitmap.h>
#include <klib.h>

int bitmap_byte_count (int bit_count) {
   10fdb:	55                   	push   %ebp
   10fdc:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         
   10fde:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe1:	83 c0 07             	add    $0x7,%eax
   10fe4:	8d 50 07             	lea    0x7(%eax),%edx
   10fe7:	85 c0                	test   %eax,%eax
   10fe9:	0f 48 c2             	cmovs  %edx,%eax
   10fec:	c1 f8 03             	sar    $0x3,%eax
}
   10fef:	5d                   	pop    %ebp
   10ff0:	c3                   	ret    

00010ff1 <bitmap_init>:

void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   10ff1:	55                   	push   %ebp
   10ff2:	89 e5                	mov    %esp,%ebp
   10ff4:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   10ff7:	8b 45 08             	mov    0x8(%ebp),%eax
   10ffa:	8b 55 10             	mov    0x10(%ebp),%edx
   10ffd:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   10fff:	8b 45 08             	mov    0x8(%ebp),%eax
   11002:	8b 55 0c             	mov    0xc(%ebp),%edx
   11005:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   11008:	8b 45 08             	mov    0x8(%ebp),%eax
   1100b:	8b 00                	mov    (%eax),%eax
   1100d:	50                   	push   %eax
   1100e:	e8 c8 ff ff ff       	call   10fdb <bitmap_byte_count>
   11013:	83 c4 04             	add    $0x4,%esp
   11016:	89 45 f4             	mov    %eax,-0xc(%ebp)
    k_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   11019:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1101d:	74 07                	je     11026 <bitmap_init+0x35>
   1101f:	ba ff 00 00 00       	mov    $0xff,%edx
   11024:	eb 05                	jmp    1102b <bitmap_init+0x3a>
   11026:	ba 00 00 00 00       	mov    $0x0,%edx
   1102b:	8b 45 08             	mov    0x8(%ebp),%eax
   1102e:	8b 40 04             	mov    0x4(%eax),%eax
   11031:	83 ec 04             	sub    $0x4,%esp
   11034:	ff 75 f4             	pushl  -0xc(%ebp)
   11037:	52                   	push   %edx
   11038:	50                   	push   %eax
   11039:	e8 9d 03 00 00       	call   113db <k_memset>
   1103e:	83 c4 10             	add    $0x10,%esp
}
   11041:	90                   	nop
   11042:	c9                   	leave  
   11043:	c3                   	ret    

00011044 <bitmap_get_bit>:


int bitmap_get_bit (bitmap_t * bitmap, int index) {
   11044:	55                   	push   %ebp
   11045:	89 e5                	mov    %esp,%ebp
   11047:	53                   	push   %ebx

    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   11048:	8b 45 08             	mov    0x8(%ebp),%eax
   1104b:	8b 50 04             	mov    0x4(%eax),%edx
   1104e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11051:	8d 48 07             	lea    0x7(%eax),%ecx
   11054:	85 c0                	test   %eax,%eax
   11056:	0f 48 c1             	cmovs  %ecx,%eax
   11059:	c1 f8 03             	sar    $0x3,%eax
   1105c:	01 d0                	add    %edx,%eax
   1105e:	0f b6 00             	movzbl (%eax),%eax
   11061:	0f b6 d8             	movzbl %al,%ebx
   11064:	8b 45 0c             	mov    0xc(%ebp),%eax
   11067:	99                   	cltd   
   11068:	c1 ea 1d             	shr    $0x1d,%edx
   1106b:	01 d0                	add    %edx,%eax
   1106d:	83 e0 07             	and    $0x7,%eax
   11070:	29 d0                	sub    %edx,%eax
   11072:	89 c1                	mov    %eax,%ecx
   11074:	d3 fb                	sar    %cl,%ebx
   11076:	89 d8                	mov    %ebx,%eax
   11078:	83 e0 01             	and    $0x1,%eax
}
   1107b:	5b                   	pop    %ebx
   1107c:	5d                   	pop    %ebp
   1107d:	c3                   	ret    

0001107e <bitmap_is_set>:

int bitmap_is_set (bitmap_t * bitmap, int index) {
   1107e:	55                   	push   %ebp
   1107f:	89 e5                	mov    %esp,%ebp
    
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   11081:	ff 75 0c             	pushl  0xc(%ebp)
   11084:	ff 75 08             	pushl  0x8(%ebp)
   11087:	e8 b8 ff ff ff       	call   11044 <bitmap_get_bit>
   1108c:	83 c4 08             	add    $0x8,%esp
   1108f:	85 c0                	test   %eax,%eax
   11091:	0f 95 c0             	setne  %al
   11094:	0f b6 c0             	movzbl %al,%eax
}
   11097:	c9                   	leave  
   11098:	c3                   	ret    

00011099 <bitmap_set_bit>:



void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   11099:	55                   	push   %ebp
   1109a:	89 e5                	mov    %esp,%ebp
   1109c:	56                   	push   %esi
   1109d:	53                   	push   %ebx
   1109e:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   110a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   110a8:	e9 a2 00 00 00       	jmp    1114f <bitmap_set_bit+0xb6>
        if (bit) {
   110ad:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110b1:	74 4a                	je     110fd <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   110b3:	8b 45 08             	mov    0x8(%ebp),%eax
   110b6:	8b 50 04             	mov    0x4(%eax),%edx
   110b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   110bc:	8d 48 07             	lea    0x7(%eax),%ecx
   110bf:	85 c0                	test   %eax,%eax
   110c1:	0f 48 c1             	cmovs  %ecx,%eax
   110c4:	c1 f8 03             	sar    $0x3,%eax
   110c7:	89 c3                	mov    %eax,%ebx
   110c9:	89 d8                	mov    %ebx,%eax
   110cb:	01 d0                	add    %edx,%eax
   110cd:	0f b6 00             	movzbl (%eax),%eax
   110d0:	89 c6                	mov    %eax,%esi
   110d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   110d5:	99                   	cltd   
   110d6:	c1 ea 1d             	shr    $0x1d,%edx
   110d9:	01 d0                	add    %edx,%eax
   110db:	83 e0 07             	and    $0x7,%eax
   110de:	29 d0                	sub    %edx,%eax
   110e0:	ba 01 00 00 00       	mov    $0x1,%edx
   110e5:	89 c1                	mov    %eax,%ecx
   110e7:	d3 e2                	shl    %cl,%edx
   110e9:	89 d0                	mov    %edx,%eax
   110eb:	89 f2                	mov    %esi,%edx
   110ed:	09 c2                	or     %eax,%edx
   110ef:	8b 45 08             	mov    0x8(%ebp),%eax
   110f2:	8b 40 04             	mov    0x4(%eax),%eax
   110f5:	89 d9                	mov    %ebx,%ecx
   110f7:	01 c8                	add    %ecx,%eax
   110f9:	88 10                	mov    %dl,(%eax)
   110fb:	eb 4a                	jmp    11147 <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   110fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11100:	8b 50 04             	mov    0x4(%eax),%edx
   11103:	8b 45 0c             	mov    0xc(%ebp),%eax
   11106:	8d 48 07             	lea    0x7(%eax),%ecx
   11109:	85 c0                	test   %eax,%eax
   1110b:	0f 48 c1             	cmovs  %ecx,%eax
   1110e:	c1 f8 03             	sar    $0x3,%eax
   11111:	89 c3                	mov    %eax,%ebx
   11113:	89 d8                	mov    %ebx,%eax
   11115:	01 d0                	add    %edx,%eax
   11117:	0f b6 00             	movzbl (%eax),%eax
   1111a:	89 c6                	mov    %eax,%esi
   1111c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1111f:	99                   	cltd   
   11120:	c1 ea 1d             	shr    $0x1d,%edx
   11123:	01 d0                	add    %edx,%eax
   11125:	83 e0 07             	and    $0x7,%eax
   11128:	29 d0                	sub    %edx,%eax
   1112a:	ba 01 00 00 00       	mov    $0x1,%edx
   1112f:	89 c1                	mov    %eax,%ecx
   11131:	d3 e2                	shl    %cl,%edx
   11133:	89 d0                	mov    %edx,%eax
   11135:	f7 d0                	not    %eax
   11137:	89 f2                	mov    %esi,%edx
   11139:	21 c2                	and    %eax,%edx
   1113b:	8b 45 08             	mov    0x8(%ebp),%eax
   1113e:	8b 40 04             	mov    0x4(%eax),%eax
   11141:	89 d9                	mov    %ebx,%ecx
   11143:	01 c8                	add    %ecx,%eax
   11145:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   11147:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1114b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1114f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11152:	3b 45 10             	cmp    0x10(%ebp),%eax
   11155:	7d 0e                	jge    11165 <bitmap_set_bit+0xcc>
   11157:	8b 45 08             	mov    0x8(%ebp),%eax
   1115a:	8b 00                	mov    (%eax),%eax
   1115c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1115f:	0f 8c 48 ff ff ff    	jl     110ad <bitmap_set_bit+0x14>
        }
    }
} 
   11165:	90                   	nop
   11166:	83 c4 10             	add    $0x10,%esp
   11169:	5b                   	pop    %ebx
   1116a:	5e                   	pop    %esi
   1116b:	5d                   	pop    %ebp
   1116c:	c3                   	ret    

0001116d <bitmap_alloc_nbits>:



int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   1116d:	55                   	push   %ebp
   1116e:	89 e5                	mov    %esp,%ebp
   11170:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   11173:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   1117a:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   11181:	e9 85 00 00 00       	jmp    1120b <bitmap_alloc_nbits+0x9e>
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   11186:	ff 75 fc             	pushl  -0x4(%ebp)
   11189:	ff 75 08             	pushl  0x8(%ebp)
   1118c:	e8 b3 fe ff ff       	call   11044 <bitmap_get_bit>
   11191:	83 c4 08             	add    $0x8,%esp
   11194:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11197:	74 06                	je     1119f <bitmap_alloc_nbits+0x32>
            search_idx++;
   11199:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   1119d:	eb 6c                	jmp    1120b <bitmap_alloc_nbits+0x9e>
        }

        ok_idx = search_idx;
   1119f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111a2:	89 45 f8             	mov    %eax,-0x8(%ebp)

        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   111a5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   111ac:	eb 27                	jmp    111d5 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   111ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111b1:	8d 50 01             	lea    0x1(%eax),%edx
   111b4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111b7:	50                   	push   %eax
   111b8:	ff 75 08             	pushl  0x8(%ebp)
   111bb:	e8 84 fe ff ff       	call   11044 <bitmap_get_bit>
   111c0:	83 c4 08             	add    $0x8,%esp
   111c3:	39 45 0c             	cmp    %eax,0xc(%ebp)
   111c6:	74 09                	je     111d1 <bitmap_alloc_nbits+0x64>
                ok_idx = -1;
   111c8:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   111cf:	eb 16                	jmp    111e7 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   111d1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   111d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111d8:	3b 45 10             	cmp    0x10(%ebp),%eax
   111db:	7d 0a                	jge    111e7 <bitmap_alloc_nbits+0x7a>
   111dd:	8b 45 08             	mov    0x8(%ebp),%eax
   111e0:	8b 00                	mov    (%eax),%eax
   111e2:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   111e5:	7c c7                	jl     111ae <bitmap_alloc_nbits+0x41>
            }
        }

        if (i >= count) {
   111e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111ea:	3b 45 10             	cmp    0x10(%ebp),%eax
   111ed:	7c 1c                	jl     1120b <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   111ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   111f2:	f7 d0                	not    %eax
   111f4:	50                   	push   %eax
   111f5:	ff 75 10             	pushl  0x10(%ebp)
   111f8:	ff 75 f8             	pushl  -0x8(%ebp)
   111fb:	ff 75 08             	pushl  0x8(%ebp)
   111fe:	e8 96 fe ff ff       	call   11099 <bitmap_set_bit>
   11203:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   11206:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11209:	eb 13                	jmp    1121e <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   1120b:	8b 45 08             	mov    0x8(%ebp),%eax
   1120e:	8b 00                	mov    (%eax),%eax
   11210:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11213:	0f 8c 6d ff ff ff    	jl     11186 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   11219:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1121e:	c9                   	leave  
   1121f:	c3                   	ret    

00011220 <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   11220:	55                   	push   %ebp
   11221:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   11223:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11227:	74 3b                	je     11264 <k_strcpy+0x44>
   11229:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1122d:	74 35                	je     11264 <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   1122f:	eb 17                	jmp    11248 <k_strcpy+0x28>
        *dest++ = *src++;
   11231:	8b 55 0c             	mov    0xc(%ebp),%edx
   11234:	8d 42 01             	lea    0x1(%edx),%eax
   11237:	89 45 0c             	mov    %eax,0xc(%ebp)
   1123a:	8b 45 08             	mov    0x8(%ebp),%eax
   1123d:	8d 48 01             	lea    0x1(%eax),%ecx
   11240:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11243:	0f b6 12             	movzbl (%edx),%edx
   11246:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   11248:	8b 45 08             	mov    0x8(%ebp),%eax
   1124b:	0f b6 00             	movzbl (%eax),%eax
   1124e:	84 c0                	test   %al,%al
   11250:	74 0a                	je     1125c <k_strcpy+0x3c>
   11252:	8b 45 0c             	mov    0xc(%ebp),%eax
   11255:	0f b6 00             	movzbl (%eax),%eax
   11258:	84 c0                	test   %al,%al
   1125a:	75 d5                	jne    11231 <k_strcpy+0x11>
    }
    *dest = '\0'; 
   1125c:	8b 45 08             	mov    0x8(%ebp),%eax
   1125f:	c6 00 00             	movb   $0x0,(%eax)
   11262:	eb 01                	jmp    11265 <k_strcpy+0x45>
        return;
   11264:	90                   	nop
}
   11265:	5d                   	pop    %ebp
   11266:	c3                   	ret    

00011267 <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   11267:	55                   	push   %ebp
   11268:	89 e5                	mov    %esp,%ebp
   1126a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1126d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11271:	74 61                	je     112d4 <k_strncpy+0x6d>
   11273:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11277:	74 5b                	je     112d4 <k_strncpy+0x6d>
   11279:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1127d:	74 55                	je     112d4 <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   1127f:	8b 45 08             	mov    0x8(%ebp),%eax
   11282:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   11285:	8b 45 0c             	mov    0xc(%ebp),%eax
   11288:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   1128b:	eb 17                	jmp    112a4 <k_strncpy+0x3d>
        *d++ = *s++;
   1128d:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11290:	8d 42 01             	lea    0x1(%edx),%eax
   11293:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11296:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11299:	8d 48 01             	lea    0x1(%eax),%ecx
   1129c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1129f:	0f b6 12             	movzbl (%edx),%edx
   112a2:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   112a4:	8b 45 10             	mov    0x10(%ebp),%eax
   112a7:	8d 50 ff             	lea    -0x1(%eax),%edx
   112aa:	89 55 10             	mov    %edx,0x10(%ebp)
   112ad:	85 c0                	test   %eax,%eax
   112af:	7e 0a                	jle    112bb <k_strncpy+0x54>
   112b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112b4:	0f b6 00             	movzbl (%eax),%eax
   112b7:	84 c0                	test   %al,%al
   112b9:	75 d2                	jne    1128d <k_strncpy+0x26>
    } 
    if (size == 0) {
   112bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112bf:	75 0b                	jne    112cc <k_strncpy+0x65>
        *(d - 1) = '\0';
   112c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112c4:	83 e8 01             	sub    $0x1,%eax
   112c7:	c6 00 00             	movb   $0x0,(%eax)
   112ca:	eb 09                	jmp    112d5 <k_strncpy+0x6e>
    } else {
        *d = '\0';
   112cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112cf:	c6 00 00             	movb   $0x0,(%eax)
   112d2:	eb 01                	jmp    112d5 <k_strncpy+0x6e>
        return;
   112d4:	90                   	nop
    }
}
   112d5:	c9                   	leave  
   112d6:	c3                   	ret    

000112d7 <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   112d7:	55                   	push   %ebp
   112d8:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   112da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112de:	74 06                	je     112e6 <k_strncmp+0xf>
   112e0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112e4:	75 0f                	jne    112f5 <k_strncmp+0x1e>
   112e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   112eb:	eb 62                	jmp    1134f <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   112ed:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   112f1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   112f5:	8b 45 08             	mov    0x8(%ebp),%eax
   112f8:	0f b6 00             	movzbl (%eax),%eax
   112fb:	84 c0                	test   %al,%al
   112fd:	74 20                	je     1131f <k_strncmp+0x48>
   112ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   11302:	0f b6 00             	movzbl (%eax),%eax
   11305:	84 c0                	test   %al,%al
   11307:	74 16                	je     1131f <k_strncmp+0x48>
   11309:	8b 45 08             	mov    0x8(%ebp),%eax
   1130c:	0f b6 10             	movzbl (%eax),%edx
   1130f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11312:	0f b6 00             	movzbl (%eax),%eax
   11315:	38 c2                	cmp    %al,%dl
   11317:	75 06                	jne    1131f <k_strncmp+0x48>
   11319:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1131d:	75 ce                	jne    112ed <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1131f:	8b 45 08             	mov    0x8(%ebp),%eax
   11322:	0f b6 00             	movzbl (%eax),%eax
   11325:	84 c0                	test   %al,%al
   11327:	74 21                	je     1134a <k_strncmp+0x73>
   11329:	8b 45 0c             	mov    0xc(%ebp),%eax
   1132c:	0f b6 00             	movzbl (%eax),%eax
   1132f:	84 c0                	test   %al,%al
   11331:	74 17                	je     1134a <k_strncmp+0x73>
   11333:	8b 45 08             	mov    0x8(%ebp),%eax
   11336:	0f b6 10             	movzbl (%eax),%edx
   11339:	8b 45 0c             	mov    0xc(%ebp),%eax
   1133c:	0f b6 00             	movzbl (%eax),%eax
   1133f:	38 c2                	cmp    %al,%dl
   11341:	74 07                	je     1134a <k_strncmp+0x73>
   11343:	b8 01 00 00 00       	mov    $0x1,%eax
   11348:	eb 05                	jmp    1134f <k_strncmp+0x78>
   1134a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1134f:	5d                   	pop    %ebp
   11350:	c3                   	ret    

00011351 <k_strlen>:
int k_strlen(const char *str) {
   11351:	55                   	push   %ebp
   11352:	89 e5                	mov    %esp,%ebp
   11354:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   11357:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1135b:	75 07                	jne    11364 <k_strlen+0x13>
        return 0;
   1135d:	b8 00 00 00 00       	mov    $0x0,%eax
   11362:	eb 26                	jmp    1138a <k_strlen+0x39>
    }

    int len = 0;
   11364:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   1136b:	8b 45 08             	mov    0x8(%ebp),%eax
   1136e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   11371:	eb 04                	jmp    11377 <k_strlen+0x26>
        len++;
   11373:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   11377:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1137a:	8d 50 01             	lea    0x1(%eax),%edx
   1137d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11380:	0f b6 00             	movzbl (%eax),%eax
   11383:	84 c0                	test   %al,%al
   11385:	75 ec                	jne    11373 <k_strlen+0x22>
    }

    return len;
   11387:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1138a:	c9                   	leave  
   1138b:	c3                   	ret    

0001138c <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   1138c:	55                   	push   %ebp
   1138d:	89 e5                	mov    %esp,%ebp
   1138f:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11392:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11396:	74 40                	je     113d8 <k_memcpy+0x4c>
   11398:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1139c:	74 3a                	je     113d8 <k_memcpy+0x4c>
   1139e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   113a2:	74 34                	je     113d8 <k_memcpy+0x4c>
        return;
    }
    uint8_t * s = (uint8_t *)src;
   113a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   113a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   113aa:	8b 45 08             	mov    0x8(%ebp),%eax
   113ad:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   113b0:	eb 17                	jmp    113c9 <k_memcpy+0x3d>
        *d++ = *s++;
   113b2:	8b 55 fc             	mov    -0x4(%ebp),%edx
   113b5:	8d 42 01             	lea    0x1(%edx),%eax
   113b8:	89 45 fc             	mov    %eax,-0x4(%ebp)
   113bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113be:	8d 48 01             	lea    0x1(%eax),%ecx
   113c1:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113c4:	0f b6 12             	movzbl (%edx),%edx
   113c7:	88 10                	mov    %dl,(%eax)
    while (size--) {
   113c9:	8b 45 10             	mov    0x10(%ebp),%eax
   113cc:	8d 50 ff             	lea    -0x1(%eax),%edx
   113cf:	89 55 10             	mov    %edx,0x10(%ebp)
   113d2:	85 c0                	test   %eax,%eax
   113d4:	75 dc                	jne    113b2 <k_memcpy+0x26>
   113d6:	eb 01                	jmp    113d9 <k_memcpy+0x4d>
        return;
   113d8:	90                   	nop
    }
}
   113d9:	c9                   	leave  
   113da:	c3                   	ret    

000113db <k_memset>:


void k_memset(void* dest, uint8_t v, int size) {
   113db:	55                   	push   %ebp
   113dc:	89 e5                	mov    %esp,%ebp
   113de:	83 ec 14             	sub    $0x14,%esp
   113e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   113e4:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   113e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113eb:	74 2c                	je     11419 <k_memset+0x3e>
   113ed:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   113f1:	74 26                	je     11419 <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   113f3:	8b 45 08             	mov    0x8(%ebp),%eax
   113f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   113f9:	eb 0f                	jmp    1140a <k_memset+0x2f>
        *d++ = v;
   113fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113fe:	8d 50 01             	lea    0x1(%eax),%edx
   11401:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11404:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11408:	88 10                	mov    %dl,(%eax)
    while(size--) {
   1140a:	8b 45 10             	mov    0x10(%ebp),%eax
   1140d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11410:	89 55 10             	mov    %edx,0x10(%ebp)
   11413:	85 c0                	test   %eax,%eax
   11415:	75 e4                	jne    113fb <k_memset+0x20>
   11417:	eb 01                	jmp    1141a <k_memset+0x3f>
    if(!dest || !size) return;
   11419:	90                   	nop
    }
}
   1141a:	c9                   	leave  
   1141b:	c3                   	ret    

0001141c <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   1141c:	55                   	push   %ebp
   1141d:	89 e5                	mov    %esp,%ebp
   1141f:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   11422:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11426:	74 0c                	je     11434 <k_memcmp+0x18>
   11428:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1142c:	74 06                	je     11434 <k_memcmp+0x18>
   1142e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11432:	74 07                	je     1143b <k_memcmp+0x1f>
        return 1;
   11434:	b8 01 00 00 00       	mov    $0x1,%eax
   11439:	eb 43                	jmp    1147e <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   1143b:	8b 45 08             	mov    0x8(%ebp),%eax
   1143e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   11441:	8b 45 0c             	mov    0xc(%ebp),%eax
   11444:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   11447:	eb 23                	jmp    1146c <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   11449:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1144c:	8d 50 01             	lea    0x1(%eax),%edx
   1144f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11452:	0f b6 08             	movzbl (%eax),%ecx
   11455:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11458:	8d 50 01             	lea    0x1(%eax),%edx
   1145b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1145e:	0f b6 00             	movzbl (%eax),%eax
   11461:	38 c1                	cmp    %al,%cl
   11463:	74 07                	je     1146c <k_memcmp+0x50>
        return 1;
   11465:	b8 01 00 00 00       	mov    $0x1,%eax
   1146a:	eb 12                	jmp    1147e <k_memcmp+0x62>
    while(size--) {
   1146c:	8b 45 10             	mov    0x10(%ebp),%eax
   1146f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11472:	89 55 10             	mov    %edx,0x10(%ebp)
   11475:	85 c0                	test   %eax,%eax
   11477:	75 d0                	jne    11449 <k_memcmp+0x2d>
    }

    return 0;
   11479:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1147e:	c9                   	leave  
   1147f:	c3                   	ret    

00011480 <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   11480:	55                   	push   %ebp
   11481:	89 e5                	mov    %esp,%ebp
   11483:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11486:	8b 45 08             	mov    0x8(%ebp),%eax
   11489:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   1148c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1148f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   11492:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11496:	74 1d                	je     114b5 <k_itoa+0x35>
   11498:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1149c:	74 17                	je     114b5 <k_itoa+0x35>
   1149e:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   114a2:	74 11                	je     114b5 <k_itoa+0x35>
   114a4:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   114a8:	74 0b                	je     114b5 <k_itoa+0x35>
        *p = '\0';
   114aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114ad:	c6 00 00             	movb   $0x0,(%eax)
        return;
   114b0:	e9 a0 00 00 00       	jmp    11555 <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   114b5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114b9:	79 12                	jns    114cd <k_itoa+0x4d>
   114bb:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   114bf:	75 0c                	jne    114cd <k_itoa+0x4d>
        *p++ = '-';
   114c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114c4:	8d 50 01             	lea    0x1(%eax),%edx
   114c7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114ca:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   114cd:	8b 0d 00 40 01 00    	mov    0x14000,%ecx
   114d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   114d6:	99                   	cltd   
   114d7:	f7 7d 10             	idivl  0x10(%ebp)
   114da:	89 d0                	mov    %edx,%eax
   114dc:	83 c0 0f             	add    $0xf,%eax
   114df:	01 c8                	add    %ecx,%eax
   114e1:	0f b6 00             	movzbl (%eax),%eax
   114e4:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   114e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114ea:	8d 50 01             	lea    0x1(%eax),%edx
   114ed:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114f0:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   114f4:	88 10                	mov    %dl,(%eax)
        num /= base;
   114f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   114f9:	99                   	cltd   
   114fa:	f7 7d 10             	idivl  0x10(%ebp)
   114fd:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   11500:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11504:	75 c7                	jne    114cd <k_itoa+0x4d>

    *p-- = '\0';
   11506:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11509:	8d 50 ff             	lea    -0x1(%eax),%edx
   1150c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1150f:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   11512:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11516:	7f 08                	jg     11520 <k_itoa+0xa0>
   11518:	8b 45 08             	mov    0x8(%ebp),%eax
   1151b:	83 c0 01             	add    $0x1,%eax
   1151e:	eb 03                	jmp    11523 <k_itoa+0xa3>
   11520:	8b 45 08             	mov    0x8(%ebp),%eax
   11523:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   11526:	eb 25                	jmp    1154d <k_itoa+0xcd>
        char ch = *start;
   11528:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1152b:	0f b6 00             	movzbl (%eax),%eax
   1152e:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   11531:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11534:	0f b6 10             	movzbl (%eax),%edx
   11537:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1153a:	88 10                	mov    %dl,(%eax)
        *p = ch;
   1153c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1153f:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   11543:	88 10                	mov    %dl,(%eax)

        p--;
   11545:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11549:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   1154d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11550:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   11553:	72 d3                	jb     11528 <k_itoa+0xa8>
    }
}
   11555:	c9                   	leave  
   11556:	c3                   	ret    

00011557 <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   11557:	55                   	push   %ebp
   11558:	89 e5                	mov    %esp,%ebp
   1155a:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   1155d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   11564:	8b 45 08             	mov    0x8(%ebp),%eax
   11567:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   1156a:	e9 19 01 00 00       	jmp    11688 <k_vsprint+0x131>
        switch (state) {
   1156f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11572:	85 c0                	test   %eax,%eax
   11574:	74 0a                	je     11580 <k_vsprint+0x29>
   11576:	83 f8 01             	cmp    $0x1,%eax
   11579:	74 2b                	je     115a6 <k_vsprint+0x4f>
   1157b:	e9 07 01 00 00       	jmp    11687 <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   11580:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11584:	75 0c                	jne    11592 <k_vsprint+0x3b>
                state = READ_FMT;
   11586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1158d:	e9 f6 00 00 00       	jmp    11688 <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   11592:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11595:	8d 50 01             	lea    0x1(%eax),%edx
   11598:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1159b:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1159f:	88 10                	mov    %dl,(%eax)
            }
            break;
   115a1:	e9 e2 00 00 00       	jmp    11688 <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   115a6:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   115aa:	75 31                	jne    115dd <k_vsprint+0x86>
                int num  = va_arg(args, int);
   115ac:	8b 45 10             	mov    0x10(%ebp),%eax
   115af:	8d 50 04             	lea    0x4(%eax),%edx
   115b2:	89 55 10             	mov    %edx,0x10(%ebp)
   115b5:	8b 00                	mov    (%eax),%eax
   115b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   115ba:	6a 0a                	push   $0xa
   115bc:	ff 75 e4             	pushl  -0x1c(%ebp)
   115bf:	ff 75 f8             	pushl  -0x8(%ebp)
   115c2:	e8 b9 fe ff ff       	call   11480 <k_itoa>
   115c7:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   115ca:	ff 75 f8             	pushl  -0x8(%ebp)
   115cd:	e8 7f fd ff ff       	call   11351 <k_strlen>
   115d2:	83 c4 04             	add    $0x4,%esp
   115d5:	01 45 f8             	add    %eax,-0x8(%ebp)
   115d8:	e9 a1 00 00 00       	jmp    1167e <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   115dd:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   115e1:	75 2e                	jne    11611 <k_vsprint+0xba>
                int num  = va_arg(args, int);
   115e3:	8b 45 10             	mov    0x10(%ebp),%eax
   115e6:	8d 50 04             	lea    0x4(%eax),%edx
   115e9:	89 55 10             	mov    %edx,0x10(%ebp)
   115ec:	8b 00                	mov    (%eax),%eax
   115ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   115f1:	6a 10                	push   $0x10
   115f3:	ff 75 e8             	pushl  -0x18(%ebp)
   115f6:	ff 75 f8             	pushl  -0x8(%ebp)
   115f9:	e8 82 fe ff ff       	call   11480 <k_itoa>
   115fe:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   11601:	ff 75 f8             	pushl  -0x8(%ebp)
   11604:	e8 48 fd ff ff       	call   11351 <k_strlen>
   11609:	83 c4 04             	add    $0x4,%esp
   1160c:	01 45 f8             	add    %eax,-0x8(%ebp)
   1160f:	eb 6d                	jmp    1167e <k_vsprint+0x127>

            }else if (ch == 'c') {
   11611:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11615:	75 1f                	jne    11636 <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   11617:	8b 45 10             	mov    0x10(%ebp),%eax
   1161a:	8d 50 04             	lea    0x4(%eax),%edx
   1161d:	89 55 10             	mov    %edx,0x10(%ebp)
   11620:	8b 00                	mov    (%eax),%eax
   11622:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   11625:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11628:	8d 50 01             	lea    0x1(%eax),%edx
   1162b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1162e:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11632:	88 10                	mov    %dl,(%eax)
   11634:	eb 48                	jmp    1167e <k_vsprint+0x127>

            }else if (ch == 's') {
   11636:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1163a:	75 42                	jne    1167e <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   1163c:	8b 45 10             	mov    0x10(%ebp),%eax
   1163f:	8d 50 04             	lea    0x4(%eax),%edx
   11642:	89 55 10             	mov    %edx,0x10(%ebp)
   11645:	8b 00                	mov    (%eax),%eax
   11647:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   1164a:	ff 75 f4             	pushl  -0xc(%ebp)
   1164d:	e8 ff fc ff ff       	call   11351 <k_strlen>
   11652:	83 c4 04             	add    $0x4,%esp
   11655:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   11658:	eb 17                	jmp    11671 <k_vsprint+0x11a>
                    *curr++ = *str++;
   1165a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1165d:	8d 42 01             	lea    0x1(%edx),%eax
   11660:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11663:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11666:	8d 48 01             	lea    0x1(%eax),%ecx
   11669:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1166c:	0f b6 12             	movzbl (%edx),%edx
   1166f:	88 10                	mov    %dl,(%eax)
                while(len--) {
   11671:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11674:	8d 50 ff             	lea    -0x1(%eax),%edx
   11677:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1167a:	85 c0                	test   %eax,%eax
   1167c:	75 dc                	jne    1165a <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   1167e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11685:	eb 01                	jmp    11688 <k_vsprint+0x131>
        
        default:
            break;
   11687:	90                   	nop
    while((ch = *fmt++)) {
   11688:	8b 45 0c             	mov    0xc(%ebp),%eax
   1168b:	8d 50 01             	lea    0x1(%eax),%edx
   1168e:	89 55 0c             	mov    %edx,0xc(%ebp)
   11691:	0f b6 00             	movzbl (%eax),%eax
   11694:	88 45 ef             	mov    %al,-0x11(%ebp)
   11697:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1169b:	0f 85 ce fe ff ff    	jne    1156f <k_vsprint+0x18>
        }
    }
   116a1:	90                   	nop
   116a2:	c9                   	leave  
   116a3:	c3                   	ret    

000116a4 <list_is_empty>:
static inline int list_is_empty (list_t* list) {
   116a4:	55                   	push   %ebp
   116a5:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   116a7:	8b 45 08             	mov    0x8(%ebp),%eax
   116aa:	8b 40 08             	mov    0x8(%eax),%eax
   116ad:	85 c0                	test   %eax,%eax
   116af:	0f 94 c0             	sete   %al
   116b2:	0f b6 c0             	movzbl %al,%eax
}
   116b5:	5d                   	pop    %ebp
   116b6:	c3                   	ret    

000116b7 <list_init>:
#include <list.h>

void list_init(list_t* list) {
   116b7:	55                   	push   %ebp
   116b8:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t*)0;
   116ba:	8b 45 08             	mov    0x8(%ebp),%eax
   116bd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116c4:	8b 45 08             	mov    0x8(%ebp),%eax
   116c7:	8b 50 04             	mov    0x4(%eax),%edx
   116ca:	8b 45 08             	mov    0x8(%ebp),%eax
   116cd:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   116cf:	8b 45 08             	mov    0x8(%ebp),%eax
   116d2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   116d9:	90                   	nop
   116da:	5d                   	pop    %ebp
   116db:	c3                   	ret    

000116dc <list_insert_first>:

void list_insert_first (list_t* list, list_node_t* node) {
   116dc:	55                   	push   %ebp
   116dd:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   116df:	8b 45 08             	mov    0x8(%ebp),%eax
   116e2:	8b 10                	mov    (%eax),%edx
   116e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   116e7:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   116ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   116ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if(list_is_empty(list)) {
   116f3:	ff 75 08             	pushl  0x8(%ebp)
   116f6:	e8 a9 ff ff ff       	call   116a4 <list_is_empty>
   116fb:	83 c4 04             	add    $0x4,%esp
   116fe:	85 c0                	test   %eax,%eax
   11700:	74 15                	je     11717 <list_insert_first+0x3b>
        list->last = list->first = node;
   11702:	8b 45 08             	mov    0x8(%ebp),%eax
   11705:	8b 55 0c             	mov    0xc(%ebp),%edx
   11708:	89 10                	mov    %edx,(%eax)
   1170a:	8b 45 08             	mov    0x8(%ebp),%eax
   1170d:	8b 10                	mov    (%eax),%edx
   1170f:	8b 45 08             	mov    0x8(%ebp),%eax
   11712:	89 50 04             	mov    %edx,0x4(%eax)
   11715:	eb 12                	jmp    11729 <list_insert_first+0x4d>
    } else {
        list->first->pre = node;
   11717:	8b 45 08             	mov    0x8(%ebp),%eax
   1171a:	8b 00                	mov    (%eax),%eax
   1171c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1171f:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11721:	8b 45 08             	mov    0x8(%ebp),%eax
   11724:	8b 55 0c             	mov    0xc(%ebp),%edx
   11727:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11729:	8b 45 08             	mov    0x8(%ebp),%eax
   1172c:	8b 40 08             	mov    0x8(%eax),%eax
   1172f:	8d 50 01             	lea    0x1(%eax),%edx
   11732:	8b 45 08             	mov    0x8(%ebp),%eax
   11735:	89 50 08             	mov    %edx,0x8(%eax)
}
   11738:	90                   	nop
   11739:	c9                   	leave  
   1173a:	c3                   	ret    

0001173b <list_insert_last>:

void list_insert_last (list_t* list, list_node_t* node) {
   1173b:	55                   	push   %ebp
   1173c:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1173e:	8b 45 08             	mov    0x8(%ebp),%eax
   11741:	8b 50 04             	mov    0x4(%eax),%edx
   11744:	8b 45 0c             	mov    0xc(%ebp),%eax
   11747:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11749:	8b 45 0c             	mov    0xc(%ebp),%eax
   1174c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   11753:	ff 75 08             	pushl  0x8(%ebp)
   11756:	e8 49 ff ff ff       	call   116a4 <list_is_empty>
   1175b:	83 c4 04             	add    $0x4,%esp
   1175e:	85 c0                	test   %eax,%eax
   11760:	74 16                	je     11778 <list_insert_last+0x3d>
        list->first = list->last = node;
   11762:	8b 45 08             	mov    0x8(%ebp),%eax
   11765:	8b 55 0c             	mov    0xc(%ebp),%edx
   11768:	89 50 04             	mov    %edx,0x4(%eax)
   1176b:	8b 45 08             	mov    0x8(%ebp),%eax
   1176e:	8b 50 04             	mov    0x4(%eax),%edx
   11771:	8b 45 08             	mov    0x8(%ebp),%eax
   11774:	89 10                	mov    %edx,(%eax)
   11776:	eb 15                	jmp    1178d <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11778:	8b 45 08             	mov    0x8(%ebp),%eax
   1177b:	8b 40 04             	mov    0x4(%eax),%eax
   1177e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11781:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11784:	8b 45 08             	mov    0x8(%ebp),%eax
   11787:	8b 55 0c             	mov    0xc(%ebp),%edx
   1178a:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   1178d:	8b 45 08             	mov    0x8(%ebp),%eax
   11790:	8b 40 08             	mov    0x8(%eax),%eax
   11793:	8d 50 01             	lea    0x1(%eax),%edx
   11796:	8b 45 08             	mov    0x8(%ebp),%eax
   11799:	89 50 08             	mov    %edx,0x8(%eax)
}
   1179c:	90                   	nop
   1179d:	c9                   	leave  
   1179e:	c3                   	ret    

0001179f <list_delete_first>:


list_node_t* list_delete_first (list_t* list) {
   1179f:	55                   	push   %ebp
   117a0:	89 e5                	mov    %esp,%ebp
   117a2:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list)) {
   117a5:	ff 75 08             	pushl  0x8(%ebp)
   117a8:	e8 f7 fe ff ff       	call   116a4 <list_is_empty>
   117ad:	83 c4 04             	add    $0x4,%esp
   117b0:	85 c0                	test   %eax,%eax
   117b2:	74 07                	je     117bb <list_delete_first+0x1c>
        return (list_node_t*)0;
   117b4:	b8 00 00 00 00       	mov    $0x0,%eax
   117b9:	eb 5b                	jmp    11816 <list_delete_first+0x77>
    }

    list_node_t* remove_node = list->first;
   117bb:	8b 45 08             	mov    0x8(%ebp),%eax
   117be:	8b 00                	mov    (%eax),%eax
   117c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   117c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117c6:	8b 50 04             	mov    0x4(%eax),%edx
   117c9:	8b 45 08             	mov    0x8(%ebp),%eax
   117cc:	89 10                	mov    %edx,(%eax)

    if( list->first == (list_node_t*)0 ) {
   117ce:	8b 45 08             	mov    0x8(%ebp),%eax
   117d1:	8b 00                	mov    (%eax),%eax
   117d3:	85 c0                	test   %eax,%eax
   117d5:	75 0c                	jne    117e3 <list_delete_first+0x44>
        list->last = (list_node_t*)0;
   117d7:	8b 45 08             	mov    0x8(%ebp),%eax
   117da:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   117e1:	eb 0c                	jmp    117ef <list_delete_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t*)0;
   117e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117e6:	8b 40 04             	mov    0x4(%eax),%eax
   117e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        //list->first->pre = (list_node_t*)0;
    }

    remove_node->pre = remove_node->next = (list_node_t*)0;
   117ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117f2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   117f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117fc:	8b 50 04             	mov    0x4(%eax),%edx
   117ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11802:	89 10                	mov    %edx,(%eax)
    list->count--;
   11804:	8b 45 08             	mov    0x8(%ebp),%eax
   11807:	8b 40 08             	mov    0x8(%eax),%eax
   1180a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1180d:	8b 45 08             	mov    0x8(%ebp),%eax
   11810:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   11813:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11816:	c9                   	leave  
   11817:	c3                   	ret    

00011818 <list_delete>:

list_node_t* list_delete (list_t* list, list_node_t* node) {
   11818:	55                   	push   %ebp
   11819:	89 e5                	mov    %esp,%ebp
    if(node == list->first) {
   1181b:	8b 45 08             	mov    0x8(%ebp),%eax
   1181e:	8b 00                	mov    (%eax),%eax
   11820:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11823:	75 0b                	jne    11830 <list_delete+0x18>
        list->first = node->next;
   11825:	8b 45 0c             	mov    0xc(%ebp),%eax
   11828:	8b 50 04             	mov    0x4(%eax),%edx
   1182b:	8b 45 08             	mov    0x8(%ebp),%eax
   1182e:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last) {
   11830:	8b 45 08             	mov    0x8(%ebp),%eax
   11833:	8b 40 04             	mov    0x4(%eax),%eax
   11836:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11839:	75 0b                	jne    11846 <list_delete+0x2e>
        list->last = node->pre;
   1183b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1183e:	8b 10                	mov    (%eax),%edx
   11840:	8b 45 08             	mov    0x8(%ebp),%eax
   11843:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if(node->pre) {
   11846:	8b 45 0c             	mov    0xc(%ebp),%eax
   11849:	8b 00                	mov    (%eax),%eax
   1184b:	85 c0                	test   %eax,%eax
   1184d:	74 0e                	je     1185d <list_delete+0x45>
        node->pre->next = node->next;
   1184f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11852:	8b 00                	mov    (%eax),%eax
   11854:	8b 55 0c             	mov    0xc(%ebp),%edx
   11857:	8b 52 04             	mov    0x4(%edx),%edx
   1185a:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) {
   1185d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11860:	8b 40 04             	mov    0x4(%eax),%eax
   11863:	85 c0                	test   %eax,%eax
   11865:	74 0d                	je     11874 <list_delete+0x5c>
        node->next->pre = node->pre;
   11867:	8b 45 0c             	mov    0xc(%ebp),%eax
   1186a:	8b 40 04             	mov    0x4(%eax),%eax
   1186d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11870:	8b 12                	mov    (%edx),%edx
   11872:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   11874:	8b 45 0c             	mov    0xc(%ebp),%eax
   11877:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1187e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11881:	8b 50 04             	mov    0x4(%eax),%edx
   11884:	8b 45 0c             	mov    0xc(%ebp),%eax
   11887:	89 10                	mov    %edx,(%eax)

    list->count--;
   11889:	8b 45 08             	mov    0x8(%ebp),%eax
   1188c:	8b 40 08             	mov    0x8(%eax),%eax
   1188f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11892:	8b 45 08             	mov    0x8(%ebp),%eax
   11895:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11898:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   1189b:	5d                   	pop    %ebp
   1189c:	c3                   	ret    

0001189d <inb>:
static inline uint8_t inb(uint16_t  port) {
   1189d:	55                   	push   %ebp
   1189e:	89 e5                	mov    %esp,%ebp
   118a0:	83 ec 14             	sub    $0x14,%esp
   118a3:	8b 45 08             	mov    0x8(%ebp),%eax
   118a6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   118aa:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   118ae:	89 c2                	mov    %eax,%edx
   118b0:	ec                   	in     (%dx),%al
   118b1:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   118b4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   118b8:	c9                   	leave  
   118b9:	c3                   	ret    

000118ba <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   118ba:	55                   	push   %ebp
   118bb:	89 e5                	mov    %esp,%ebp
   118bd:	83 ec 08             	sub    $0x8,%esp
   118c0:	8b 55 08             	mov    0x8(%ebp),%edx
   118c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   118c6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   118ca:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   118cd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   118d1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   118d5:	ee                   	out    %al,(%dx)
}
   118d6:	90                   	nop
   118d7:	c9                   	leave  
   118d8:	c3                   	ret    

000118d9 <log_init>:

#define COM1_PORT       0x3f8

static mutex_t mutex;

void log_init() {
   118d9:	55                   	push   %ebp
   118da:	89 e5                	mov    %esp,%ebp
   118dc:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   118df:	83 ec 0c             	sub    $0xc,%esp
   118e2:	68 40 5c 01 00       	push   $0x15c40
   118e7:	e8 9d 09 00 00       	call   12289 <mutex_init>
   118ec:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   118ef:	83 ec 08             	sub    $0x8,%esp
   118f2:	6a 00                	push   $0x0
   118f4:	68 f9 03 00 00       	push   $0x3f9
   118f9:	e8 bc ff ff ff       	call   118ba <outb>
   118fe:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   11901:	83 ec 08             	sub    $0x8,%esp
   11904:	68 80 00 00 00       	push   $0x80
   11909:	68 fb 03 00 00       	push   $0x3fb
   1190e:	e8 a7 ff ff ff       	call   118ba <outb>
   11913:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   11916:	83 ec 08             	sub    $0x8,%esp
   11919:	6a 03                	push   $0x3
   1191b:	68 f8 03 00 00       	push   $0x3f8
   11920:	e8 95 ff ff ff       	call   118ba <outb>
   11925:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   11928:	83 ec 08             	sub    $0x8,%esp
   1192b:	6a 00                	push   $0x0
   1192d:	68 f9 03 00 00       	push   $0x3f9
   11932:	e8 83 ff ff ff       	call   118ba <outb>
   11937:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   1193a:	83 ec 08             	sub    $0x8,%esp
   1193d:	6a 03                	push   $0x3
   1193f:	68 fb 03 00 00       	push   $0x3fb
   11944:	e8 71 ff ff ff       	call   118ba <outb>
   11949:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   1194c:	83 ec 08             	sub    $0x8,%esp
   1194f:	68 c7 00 00 00       	push   $0xc7
   11954:	68 fa 03 00 00       	push   $0x3fa
   11959:	e8 5c ff ff ff       	call   118ba <outb>
   1195e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   11961:	83 ec 08             	sub    $0x8,%esp
   11964:	6a 0f                	push   $0xf
   11966:	68 fc 03 00 00       	push   $0x3fc
   1196b:	e8 4a ff ff ff       	call   118ba <outb>
   11970:	83 c4 10             	add    $0x10,%esp
}
   11973:	90                   	nop
   11974:	c9                   	leave  
   11975:	c3                   	ret    

00011976 <klog>:


void klog(const char* fmt, ...) {
   11976:	55                   	push   %ebp
   11977:	89 e5                	mov    %esp,%ebp
   11979:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   1197f:	83 ec 04             	sub    $0x4,%esp
   11982:	68 80 00 00 00       	push   $0x80
   11987:	6a 00                	push   $0x0
   11989:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1198f:	50                   	push   %eax
   11990:	e8 46 fa ff ff       	call   113db <k_memset>
   11995:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   11998:	8d 45 0c             	lea    0xc(%ebp),%eax
   1199b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    k_vsprint(buf, fmt, args);
   119a1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   119a7:	83 ec 04             	sub    $0x4,%esp
   119aa:	50                   	push   %eax
   119ab:	ff 75 08             	pushl  0x8(%ebp)
   119ae:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   119b4:	50                   	push   %eax
   119b5:	e8 9d fb ff ff       	call   11557 <k_vsprint>
   119ba:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   119bd:	83 ec 0c             	sub    $0xc,%esp
   119c0:	68 40 5c 01 00       	push   $0x15c40
   119c5:	e8 ed 08 00 00       	call   122b7 <mutex_lock>
   119ca:	83 c4 10             	add    $0x10,%esp
    // irq_state_t state = irq_enter_proection();

    const char *p = buf;
   119cd:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   119d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   119d6:	eb 3b                	jmp    11a13 <klog+0x9d>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   119d8:	90                   	nop
   119d9:	83 ec 0c             	sub    $0xc,%esp
   119dc:	68 fd 03 00 00       	push   $0x3fd
   119e1:	e8 b7 fe ff ff       	call   1189d <inb>
   119e6:	83 c4 10             	add    $0x10,%esp
   119e9:	0f b6 c0             	movzbl %al,%eax
   119ec:	83 e0 40             	and    $0x40,%eax
   119ef:	85 c0                	test   %eax,%eax
   119f1:	74 e6                	je     119d9 <klog+0x63>
        outb(COM1_PORT, *p++);
   119f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119f6:	8d 50 01             	lea    0x1(%eax),%edx
   119f9:	89 55 f4             	mov    %edx,-0xc(%ebp)
   119fc:	0f b6 00             	movzbl (%eax),%eax
   119ff:	0f b6 c0             	movzbl %al,%eax
   11a02:	83 ec 08             	sub    $0x8,%esp
   11a05:	50                   	push   %eax
   11a06:	68 f8 03 00 00       	push   $0x3f8
   11a0b:	e8 aa fe ff ff       	call   118ba <outb>
   11a10:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11a13:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a16:	0f b6 00             	movzbl (%eax),%eax
   11a19:	84 c0                	test   %al,%al
   11a1b:	75 bb                	jne    119d8 <klog+0x62>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   11a1d:	83 ec 08             	sub    $0x8,%esp
   11a20:	6a 0d                	push   $0xd
   11a22:	68 f8 03 00 00       	push   $0x3f8
   11a27:	e8 8e fe ff ff       	call   118ba <outb>
   11a2c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   11a2f:	83 ec 08             	sub    $0x8,%esp
   11a32:	6a 0a                	push   $0xa
   11a34:	68 f8 03 00 00       	push   $0x3f8
   11a39:	e8 7c fe ff ff       	call   118ba <outb>
   11a3e:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   11a41:	83 ec 0c             	sub    $0xc,%esp
   11a44:	68 40 5c 01 00       	push   $0x15c40
   11a49:	e8 fd 08 00 00       	call   1234b <mutex_unlock>
   11a4e:	83 c4 10             	add    $0x10,%esp
    // irq_leave_proection(state);

}
   11a51:	90                   	nop
   11a52:	c9                   	leave  
   11a53:	c3                   	ret    

00011a54 <down2>:

uint32_t memory_create_uvm();

void memory_init (boot_info_t* boot_info);

static inline uint32_t down2(uint32_t size, uint32_t bound) {
   11a54:	55                   	push   %ebp
   11a55:	89 e5                	mov    %esp,%ebp
    return size & ~ (bound - 1);
   11a57:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a5a:	f7 d8                	neg    %eax
   11a5c:	23 45 08             	and    0x8(%ebp),%eax
}
   11a5f:	5d                   	pop    %ebp
   11a60:	c3                   	ret    

00011a61 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11a61:	55                   	push   %ebp
   11a62:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~ (bound - 1);
   11a64:	8b 55 08             	mov    0x8(%ebp),%edx
   11a67:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a6a:	01 d0                	add    %edx,%eax
   11a6c:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a6f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a72:	f7 d8                	neg    %eax
   11a74:	21 d0                	and    %edx,%eax
}
   11a76:	5d                   	pop    %ebp
   11a77:	c3                   	ret    

00011a78 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   11a78:	55                   	push   %ebp
   11a79:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   11a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7e:	0f 22 d8             	mov    %eax,%cr3
}
   11a81:	90                   	nop
   11a82:	5d                   	pop    %ebp
   11a83:	c3                   	ret    

00011a84 <mmu_set_page_dir>:
    };
}pte_t;
#pragma pack()


static inline void mmu_set_page_dir(uint32_t paddr) {
   11a84:	55                   	push   %ebp
   11a85:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11a87:	ff 75 08             	pushl  0x8(%ebp)
   11a8a:	e8 e9 ff ff ff       	call   11a78 <write_cr3>
   11a8f:	83 c4 04             	add    $0x4,%esp
}
   11a92:	90                   	nop
   11a93:	c9                   	leave  
   11a94:	c3                   	ret    

00011a95 <pde_index>:

static inline uint32_t pde_index (uint32_t vaddr) {
   11a95:	55                   	push   %ebp
   11a96:	89 e5                	mov    %esp,%ebp
   11a98:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22);      // 只取高10位
   11a9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a9e:	c1 e8 16             	shr    $0x16,%eax
   11aa1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   11aa4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11aa7:	c9                   	leave  
   11aa8:	c3                   	ret    

00011aa9 <pde_paddr>:


static inline uint32_t pde_paddr (pde_t * pde) {
   11aa9:	55                   	push   %ebp
   11aaa:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   11aac:	8b 45 08             	mov    0x8(%ebp),%eax
   11aaf:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   11ab3:	c0 ea 04             	shr    $0x4,%dl
   11ab6:	0f b6 d2             	movzbl %dl,%edx
   11ab9:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   11abd:	c1 e1 04             	shl    $0x4,%ecx
   11ac0:	09 ca                	or     %ecx,%edx
   11ac2:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   11ac6:	c1 e0 0c             	shl    $0xc,%eax
   11ac9:	09 d0                	or     %edx,%eax
   11acb:	c1 e0 0c             	shl    $0xc,%eax
}
   11ace:	5d                   	pop    %ebp
   11acf:	c3                   	ret    

00011ad0 <pte_index>:


static inline int pte_index (uint32_t vaddr) {
   11ad0:	55                   	push   %ebp
   11ad1:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   11ad3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ad6:	c1 e8 0c             	shr    $0xc,%eax
   11ad9:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   11ade:	5d                   	pop    %ebp
   11adf:	c3                   	ret    

00011ae0 <pte_paddr>:


static inline uint32_t pte_paddr (pte_t * pte) {
   11ae0:	55                   	push   %ebp
   11ae1:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   11ae3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae6:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   11aea:	c0 ea 04             	shr    $0x4,%dl
   11aed:	0f b6 d2             	movzbl %dl,%edx
   11af0:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   11af4:	c1 e1 04             	shl    $0x4,%ecx
   11af7:	09 ca                	or     %ecx,%edx
   11af9:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   11afd:	c1 e0 0c             	shl    $0xc,%eax
   11b00:	09 d0                	or     %edx,%eax
   11b02:	c1 e0 0c             	shl    $0xc,%eax
}
   11b05:	5d                   	pop    %ebp
   11b06:	c3                   	ret    

00011b07 <addr_alloc_init>:
static pde_t g_kernel_page_dir[PDE_CNT] __attribute__( (aligned(MEM_PAGE_SIZE)) );


static void 
addr_alloc_init(addr_alloc_t * alloc, uint8_t* bits, uint32_t start, 
uint32_t size, uint32_t page_size) {
   11b07:	55                   	push   %ebp
   11b08:	89 e5                	mov    %esp,%ebp
   11b0a:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   11b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b10:	83 ec 0c             	sub    $0xc,%esp
   11b13:	50                   	push   %eax
   11b14:	e8 70 07 00 00       	call   12289 <mutex_init>
   11b19:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   11b1c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b1f:	8b 55 10             	mov    0x10(%ebp),%edx
   11b22:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   11b25:	8b 45 08             	mov    0x8(%ebp),%eax
   11b28:	8b 55 14             	mov    0x14(%ebp),%edx
   11b2b:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   11b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   11b31:	8b 55 18             	mov    0x18(%ebp),%edx
   11b34:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   11b37:	8b 45 08             	mov    0x8(%ebp),%eax
   11b3a:	8b 40 20             	mov    0x20(%eax),%eax
   11b3d:	ba 00 00 00 00       	mov    $0x0,%edx
   11b42:	f7 75 18             	divl   0x18(%ebp)
   11b45:	89 c2                	mov    %eax,%edx
   11b47:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4a:	83 c0 14             	add    $0x14,%eax
   11b4d:	6a 00                	push   $0x0
   11b4f:	52                   	push   %edx
   11b50:	ff 75 0c             	pushl  0xc(%ebp)
   11b53:	50                   	push   %eax
   11b54:	e8 98 f4 ff ff       	call   10ff1 <bitmap_init>
   11b59:	83 c4 10             	add    $0x10,%esp
}
   11b5c:	90                   	nop
   11b5d:	c9                   	leave  
   11b5e:	c3                   	ret    

00011b5f <addr_alloc_page>:


static uint32_t 
addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   11b5f:	55                   	push   %ebp
   11b60:	89 e5                	mov    %esp,%ebp
   11b62:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   11b65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   11b6c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b6f:	83 ec 0c             	sub    $0xc,%esp
   11b72:	50                   	push   %eax
   11b73:	e8 3f 07 00 00       	call   122b7 <mutex_lock>
   11b78:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   11b7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7e:	83 c0 14             	add    $0x14,%eax
   11b81:	83 ec 04             	sub    $0x4,%esp
   11b84:	ff 75 0c             	pushl  0xc(%ebp)
   11b87:	6a 00                	push   $0x0
   11b89:	50                   	push   %eax
   11b8a:	e8 de f5 ff ff       	call   1116d <bitmap_alloc_nbits>
   11b8f:	83 c4 10             	add    $0x10,%esp
   11b92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   11b95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11b99:	78 17                	js     11bb2 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   11b9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b9e:	8b 50 1c             	mov    0x1c(%eax),%edx
   11ba1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ba4:	8b 48 24             	mov    0x24(%eax),%ecx
   11ba7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11baa:	0f af c1             	imul   %ecx,%eax
   11bad:	01 d0                	add    %edx,%eax
   11baf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   11bb2:	8b 45 08             	mov    0x8(%ebp),%eax
   11bb5:	83 ec 0c             	sub    $0xc,%esp
   11bb8:	50                   	push   %eax
   11bb9:	e8 8d 07 00 00       	call   1234b <mutex_unlock>
   11bbe:	83 c4 10             	add    $0x10,%esp
    return addr;
   11bc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11bc4:	c9                   	leave  
   11bc5:	c3                   	ret    

00011bc6 <addr_free_page>:


static uint32_t
addr_free_page(addr_alloc_t * alloc, uint32_t addr, int page_count) {
   11bc6:	55                   	push   %ebp
   11bc7:	89 e5                	mov    %esp,%ebp
   11bc9:	53                   	push   %ebx
   11bca:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   11bcd:	8b 45 08             	mov    0x8(%ebp),%eax
   11bd0:	83 ec 0c             	sub    $0xc,%esp
   11bd3:	50                   	push   %eax
   11bd4:	e8 de 06 00 00       	call   122b7 <mutex_lock>
   11bd9:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   11bdc:	8b 45 08             	mov    0x8(%ebp),%eax
   11bdf:	8b 40 1c             	mov    0x1c(%eax),%eax
   11be2:	8b 55 0c             	mov    0xc(%ebp),%edx
   11be5:	89 d1                	mov    %edx,%ecx
   11be7:	29 c1                	sub    %eax,%ecx
   11be9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bec:	8b 58 24             	mov    0x24(%eax),%ebx
   11bef:	89 c8                	mov    %ecx,%eax
   11bf1:	ba 00 00 00 00       	mov    $0x0,%edx
   11bf6:	f7 f3                	div    %ebx
   11bf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   11bfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bfe:	8b 55 08             	mov    0x8(%ebp),%edx
   11c01:	83 c2 14             	add    $0x14,%edx
   11c04:	6a 00                	push   $0x0
   11c06:	ff 75 10             	pushl  0x10(%ebp)
   11c09:	50                   	push   %eax
   11c0a:	52                   	push   %edx
   11c0b:	e8 89 f4 ff ff       	call   11099 <bitmap_set_bit>
   11c10:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   11c13:	8b 45 08             	mov    0x8(%ebp),%eax
   11c16:	83 ec 0c             	sub    $0xc,%esp
   11c19:	50                   	push   %eax
   11c1a:	e8 2c 07 00 00       	call   1234b <mutex_unlock>
   11c1f:	83 c4 10             	add    $0x10,%esp
}
   11c22:	90                   	nop
   11c23:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11c26:	c9                   	leave  
   11c27:	c3                   	ret    

00011c28 <some_test>:


void some_test() {
   11c28:	55                   	push   %ebp
   11c29:	89 e5                	mov    %esp,%ebp
   11c2b:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t addr_alloc;
    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64*4096, 4096);
   11c2e:	83 ec 0c             	sub    $0xc,%esp
   11c31:	68 00 10 00 00       	push   $0x1000
   11c36:	68 00 00 04 00       	push   $0x40000
   11c3b:	68 00 10 00 00       	push   $0x1000
   11c40:	8d 45 b8             	lea    -0x48(%ebp),%eax
   11c43:	50                   	push   %eax
   11c44:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11c47:	50                   	push   %eax
   11c48:	e8 ba fe ff ff       	call   11b07 <addr_alloc_init>
   11c4d:	83 c4 20             	add    $0x20,%esp
    for(int i=0; i<32; i++) {
   11c50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11c57:	eb 2b                	jmp    11c84 <some_test+0x5c>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   11c59:	83 ec 08             	sub    $0x8,%esp
   11c5c:	6a 02                	push   $0x2
   11c5e:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11c61:	50                   	push   %eax
   11c62:	e8 f8 fe ff ff       	call   11b5f <addr_alloc_page>
   11c67:	83 c4 10             	add    $0x10,%esp
   11c6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("alloc addr: 0x%x", addr);
   11c6d:	83 ec 08             	sub    $0x8,%esp
   11c70:	ff 75 e8             	pushl  -0x18(%ebp)
   11c73:	68 00 30 01 00       	push   $0x13000
   11c78:	e8 f9 fc ff ff       	call   11976 <klog>
   11c7d:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11c80:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11c84:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   11c88:	7e cf                	jle    11c59 <some_test+0x31>
    }
    uint32_t addr = 0x1000;
   11c8a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for(int i=0; i<32; i++) {
   11c91:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11c98:	eb 32                	jmp    11ccc <some_test+0xa4>
        addr_free_page(&addr_alloc, addr, 2);
   11c9a:	83 ec 04             	sub    $0x4,%esp
   11c9d:	6a 02                	push   $0x2
   11c9f:	ff 75 f0             	pushl  -0x10(%ebp)
   11ca2:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11ca5:	50                   	push   %eax
   11ca6:	e8 1b ff ff ff       	call   11bc6 <addr_free_page>
   11cab:	83 c4 10             	add    $0x10,%esp
        addr += 8192;
   11cae:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        klog("free addr: 0x%x", addr);
   11cb5:	83 ec 08             	sub    $0x8,%esp
   11cb8:	ff 75 f0             	pushl  -0x10(%ebp)
   11cbb:	68 11 30 01 00       	push   $0x13011
   11cc0:	e8 b1 fc ff ff       	call   11976 <klog>
   11cc5:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11cc8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11ccc:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   11cd0:	7e c8                	jle    11c9a <some_test+0x72>
    }
}
   11cd2:	90                   	nop
   11cd3:	c9                   	leave  
   11cd4:	c3                   	ret    

00011cd5 <show_mem_info>:


static void        
show_mem_info(boot_info_t* boot_info) {
   11cd5:	55                   	push   %ebp
   11cd6:	89 e5                	mov    %esp,%ebp
   11cd8:	83 ec 18             	sub    $0x18,%esp
    klog("mem region");
   11cdb:	83 ec 0c             	sub    $0xc,%esp
   11cde:	68 21 30 01 00       	push   $0x13021
   11ce3:	e8 8e fc ff ff       	call   11976 <klog>
   11ce8:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11cf2:	eb 29                	jmp    11d1d <show_mem_info+0x48>
        klog("[%d]: 0x%x - 0x%x", i, 
   11cf4:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cfa:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   11cfe:	8b 45 08             	mov    0x8(%ebp),%eax
   11d01:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11d04:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   11d07:	52                   	push   %edx
   11d08:	50                   	push   %eax
   11d09:	ff 75 f4             	pushl  -0xc(%ebp)
   11d0c:	68 2c 30 01 00       	push   $0x1302c
   11d11:	e8 60 fc ff ff       	call   11976 <klog>
   11d16:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d19:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d1d:	8b 45 08             	mov    0x8(%ebp),%eax
   11d20:	8b 40 50             	mov    0x50(%eax),%eax
   11d23:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11d26:	7c cc                	jl     11cf4 <show_mem_info+0x1f>
            boot_info->ram_region_cfg[i].start, 
            boot_info->ram_region_cfg[i].size );
    }
    klog("");
   11d28:	83 ec 0c             	sub    $0xc,%esp
   11d2b:	68 3e 30 01 00       	push   $0x1303e
   11d30:	e8 41 fc ff ff       	call   11976 <klog>
   11d35:	83 c4 10             	add    $0x10,%esp
}
   11d38:	90                   	nop
   11d39:	c9                   	leave  
   11d3a:	c3                   	ret    

00011d3b <total_mem_size>:


static uint32_t 
total_mem_size(boot_info_t* boot_info) {
   11d3b:	55                   	push   %ebp
   11d3c:	89 e5                	mov    %esp,%ebp
   11d3e:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   11d41:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d48:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   11d4f:	eb 11                	jmp    11d62 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   11d51:	8b 45 08             	mov    0x8(%ebp),%eax
   11d54:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11d57:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   11d5b:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d5e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   11d62:	8b 45 08             	mov    0x8(%ebp),%eax
   11d65:	8b 40 50             	mov    0x50(%eax),%eax
   11d68:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   11d6b:	7c e4                	jl     11d51 <total_mem_size+0x16>
    }
    return mem_size;
   11d6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11d70:	c9                   	leave  
   11d71:	c3                   	ret    

00011d72 <find_pte>:




pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   11d72:	55                   	push   %ebp
   11d73:	89 e5                	mov    %esp,%ebp
   11d75:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   11d78:	ff 75 0c             	pushl  0xc(%ebp)
   11d7b:	e8 15 fd ff ff       	call   11a95 <pde_index>
   11d80:	83 c4 04             	add    $0x4,%esp
   11d83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11d8a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d8d:	01 d0                	add    %edx,%eax
   11d8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   11d92:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d95:	0f b6 00             	movzbl (%eax),%eax
   11d98:	83 e0 01             	and    $0x1,%eax
   11d9b:	84 c0                	test   %al,%al
   11d9d:	74 10                	je     11daf <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   11d9f:	ff 75 f0             	pushl  -0x10(%ebp)
   11da2:	e8 02 fd ff ff       	call   11aa9 <pde_paddr>
   11da7:	83 c4 04             	add    $0x4,%esp
   11daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11dad:	eb 57                	jmp    11e06 <find_pte+0x94>
    } else {
        if (alloc == 0) {
   11daf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11db3:	75 07                	jne    11dbc <find_pte+0x4a>
            return (pte_t *)0;
   11db5:	b8 00 00 00 00       	mov    $0x0,%eax
   11dba:	eb 64                	jmp    11e20 <find_pte+0xae>
        }
        uint32_t pg_paddr = addr_alloc_page(&g_paddr_alloc, 1);
   11dbc:	83 ec 08             	sub    $0x8,%esp
   11dbf:	6a 01                	push   $0x1
   11dc1:	68 00 60 01 00       	push   $0x16000
   11dc6:	e8 94 fd ff ff       	call   11b5f <addr_alloc_page>
   11dcb:	83 c4 10             	add    $0x10,%esp
   11dce:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   11dd1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11dd5:	75 07                	jne    11dde <find_pte+0x6c>
            return (pte_t *)0;
   11dd7:	b8 00 00 00 00       	mov    $0x0,%eax
   11ddc:	eb 42                	jmp    11e20 <find_pte+0xae>
        }
        pde->v = pg_paddr | PDE_P | PDE_W | PDE_U;
   11dde:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11de1:	83 c8 07             	or     $0x7,%eax
   11de4:	89 c2                	mov    %eax,%edx
   11de6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11de9:	89 10                	mov    %edx,(%eax)

        page_table = (pte_t *)(pg_paddr);
   11deb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dee:	89 45 f4             	mov    %eax,-0xc(%ebp)
        k_memset(page_table, 0, MEM_PAGE_SIZE);
   11df1:	83 ec 04             	sub    $0x4,%esp
   11df4:	68 00 10 00 00       	push   $0x1000
   11df9:	6a 00                	push   $0x0
   11dfb:	ff 75 f4             	pushl  -0xc(%ebp)
   11dfe:	e8 d8 f5 ff ff       	call   113db <k_memset>
   11e03:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   11e06:	83 ec 0c             	sub    $0xc,%esp
   11e09:	ff 75 0c             	pushl  0xc(%ebp)
   11e0c:	e8 bf fc ff ff       	call   11ad0 <pte_index>
   11e11:	83 c4 10             	add    $0x10,%esp
   11e14:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e1e:	01 d0                	add    %edx,%eax
}
   11e20:	c9                   	leave  
   11e21:	c3                   	ret    

00011e22 <memory_create_map>:

// 创建映射
int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   11e22:	55                   	push   %ebp
   11e23:	89 e5                	mov    %esp,%ebp
   11e25:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   11e28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11e2f:	eb 62                	jmp    11e93 <memory_create_map+0x71>
        // klog("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   11e31:	83 ec 04             	sub    $0x4,%esp
   11e34:	6a 01                	push   $0x1
   11e36:	ff 75 0c             	pushl  0xc(%ebp)
   11e39:	ff 75 08             	pushl  0x8(%ebp)
   11e3c:	e8 31 ff ff ff       	call   11d72 <find_pte>
   11e41:	83 c4 10             	add    $0x10,%esp
   11e44:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   11e47:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e4b:	75 07                	jne    11e54 <memory_create_map+0x32>
            return -1;
   11e4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e52:	eb 4c                	jmp    11ea0 <memory_create_map+0x7e>
        }
        if (pte->present != 0) klog("error");
   11e54:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e57:	0f b6 00             	movzbl (%eax),%eax
   11e5a:	83 e0 01             	and    $0x1,%eax
   11e5d:	84 c0                	test   %al,%al
   11e5f:	74 10                	je     11e71 <memory_create_map+0x4f>
   11e61:	83 ec 0c             	sub    $0xc,%esp
   11e64:	68 3f 30 01 00       	push   $0x1303f
   11e69:	e8 08 fb ff ff       	call   11976 <klog>
   11e6e:	83 c4 10             	add    $0x10,%esp

        // klog("pte addr: 0x%x", (uint32_t)pte);

        pte->v = paddr | perm | PTE_P;
   11e71:	8b 45 10             	mov    0x10(%ebp),%eax
   11e74:	0b 45 18             	or     0x18(%ebp),%eax
   11e77:	83 c8 01             	or     $0x1,%eax
   11e7a:	89 c2                	mov    %eax,%edx
   11e7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e7f:	89 10                	mov    %edx,(%eax)
        vaddr += MEM_PAGE_SIZE;
   11e81:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   11e88:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   11e8f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11e93:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e96:	3b 45 14             	cmp    0x14(%ebp),%eax
   11e99:	7c 96                	jl     11e31 <memory_create_map+0xf>
    }

    return 0;
   11e9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11ea0:	c9                   	leave  
   11ea1:	c3                   	ret    

00011ea2 <create_kernel_table>:


void create_kernel_table (void) {
   11ea2:	55                   	push   %ebp
   11ea3:	89 e5                	mov    %esp,%ebp
   11ea5:	83 ec 28             	sub    $0x28,%esp
        {s_text,                e_text,                         s_text,                 0    },      // 内核代码区
        {s_data,                (void *)(MEM_EBDA_START),       s_data,                 PTE_W},      // 内核数据区
        {(void*)MEM_EXT_START,  (void*)MEM_EXT_END,             (void*)MEM_EXT_START,   PTE_W},
    };

    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11ea8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11eaf:	eb 7d                	jmp    11f2e <create_kernel_table+0x8c>
        memory_map_t * map = kernel_map + i;
   11eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11eb4:	c1 e0 04             	shl    $0x4,%eax
   11eb7:	05 20 40 01 00       	add    $0x14020,%eax
   11ebc:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   11ebf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ec2:	8b 00                	mov    (%eax),%eax
   11ec4:	68 00 10 00 00       	push   $0x1000
   11ec9:	50                   	push   %eax
   11eca:	e8 85 fb ff ff       	call   11a54 <down2>
   11ecf:	83 c4 08             	add    $0x8,%esp
   11ed2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend   = up2  ((uint32_t)map->vend, MEM_PAGE_SIZE);
   11ed5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ed8:	8b 40 04             	mov    0x4(%eax),%eax
   11edb:	68 00 10 00 00       	push   $0x1000
   11ee0:	50                   	push   %eax
   11ee1:	e8 7b fb ff ff       	call   11a61 <up2>
   11ee6:	83 c4 08             	add    $0x8,%esp
   11ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   11eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11eef:	2b 45 ec             	sub    -0x14(%ebp),%eax
   11ef2:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   11ef8:	85 c0                	test   %eax,%eax
   11efa:	0f 48 c2             	cmovs  %edx,%eax
   11efd:	c1 f8 0c             	sar    $0xc,%eax
   11f00:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(g_kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   11f03:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f06:	8b 50 0c             	mov    0xc(%eax),%edx
   11f09:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f0c:	8b 40 08             	mov    0x8(%eax),%eax
   11f0f:	89 c1                	mov    %eax,%ecx
   11f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f14:	83 ec 0c             	sub    $0xc,%esp
   11f17:	52                   	push   %edx
   11f18:	ff 75 e4             	pushl  -0x1c(%ebp)
   11f1b:	51                   	push   %ecx
   11f1c:	50                   	push   %eax
   11f1d:	68 00 70 01 00       	push   $0x17000
   11f22:	e8 fb fe ff ff       	call   11e22 <memory_create_map>
   11f27:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11f2a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f31:	83 f8 03             	cmp    $0x3,%eax
   11f34:	0f 86 77 ff ff ff    	jbe    11eb1 <create_kernel_table+0xf>
    }
}
   11f3a:	90                   	nop
   11f3b:	c9                   	leave  
   11f3c:	c3                   	ret    

00011f3d <memory_init>:


void memory_init (boot_info_t* boot_info) {
   11f3d:	55                   	push   %ebp
   11f3e:	89 e5                	mov    %esp,%ebp
   11f40:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;
    uint8_t * mem_free = (uint8_t*)&mem_free_start;
   11f43:	c7 45 f4 c6 c1 01 00 	movl   $0x1c1c6,-0xc(%ebp)
    klog("memory init");
   11f4a:	83 ec 0c             	sub    $0xc,%esp
   11f4d:	68 45 30 01 00       	push   $0x13045
   11f52:	e8 1f fa ff ff       	call   11976 <klog>
   11f57:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   11f5a:	83 ec 0c             	sub    $0xc,%esp
   11f5d:	ff 75 08             	pushl  0x8(%ebp)
   11f60:	e8 70 fd ff ff       	call   11cd5 <show_mem_info>
   11f65:	83 c4 10             	add    $0x10,%esp

    
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   11f68:	83 ec 0c             	sub    $0xc,%esp
   11f6b:	ff 75 08             	pushl  0x8(%ebp)
   11f6e:	e8 c8 fd ff ff       	call   11d3b <total_mem_size>
   11f73:	83 c4 10             	add    $0x10,%esp
   11f76:	2d 00 00 10 00       	sub    $0x100000,%eax
   11f7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   11f7e:	83 ec 08             	sub    $0x8,%esp
   11f81:	68 00 10 00 00       	push   $0x1000
   11f86:	ff 75 f0             	pushl  -0x10(%ebp)
   11f89:	e8 c6 fa ff ff       	call   11a54 <down2>
   11f8e:	83 c4 10             	add    $0x10,%esp
   11f91:	89 45 f0             	mov    %eax,-0x10(%ebp)

    klog("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   11f94:	83 ec 04             	sub    $0x4,%esp
   11f97:	ff 75 f0             	pushl  -0x10(%ebp)
   11f9a:	68 00 00 10 00       	push   $0x100000
   11f9f:	68 51 30 01 00       	push   $0x13051
   11fa4:	e8 cd f9 ff ff       	call   11976 <klog>
   11fa9:	83 c4 10             	add    $0x10,%esp
    addr_alloc_init(&g_paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   11fac:	83 ec 0c             	sub    $0xc,%esp
   11faf:	68 00 10 00 00       	push   $0x1000
   11fb4:	ff 75 f0             	pushl  -0x10(%ebp)
   11fb7:	68 00 00 10 00       	push   $0x100000
   11fbc:	ff 75 f4             	pushl  -0xc(%ebp)
   11fbf:	68 00 60 01 00       	push   $0x16000
   11fc4:	e8 3e fb ff ff       	call   11b07 <addr_alloc_init>
   11fc9:	83 c4 20             	add    $0x20,%esp

    mem_free += bitmap_byte_count(g_paddr_alloc.size / MEM_PAGE_SIZE);
   11fcc:	a1 20 60 01 00       	mov    0x16020,%eax
   11fd1:	c1 e8 0c             	shr    $0xc,%eax
   11fd4:	83 ec 0c             	sub    $0xc,%esp
   11fd7:	50                   	push   %eax
   11fd8:	e8 fe ef ff ff       	call   10fdb <bitmap_byte_count>
   11fdd:	83 c4 10             	add    $0x10,%esp
   11fe0:	01 45 f4             	add    %eax,-0xc(%ebp)
    if (mem_free < (uint8_t *)0x800000) {
   11fe3:	81 7d f4 ff ff 7f 00 	cmpl   $0x7fffff,-0xc(%ebp)
   11fea:	77 10                	ja     11ffc <memory_init+0xbf>
        klog("simple test ok!");
   11fec:	83 ec 0c             	sub    $0xc,%esp
   11fef:	68 6f 30 01 00       	push   $0x1306f
   11ff4:	e8 7d f9 ff ff       	call   11976 <klog>
   11ff9:	83 c4 10             	add    $0x10,%esp
    }

    k_memset(g_kernel_page_dir, 0, sizeof(g_kernel_page_dir));  // 清空内核表
   11ffc:	83 ec 04             	sub    $0x4,%esp
   11fff:	68 00 10 00 00       	push   $0x1000
   12004:	6a 00                	push   $0x0
   12006:	68 00 70 01 00       	push   $0x17000
   1200b:	e8 cb f3 ff ff       	call   113db <k_memset>
   12010:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   12013:	e8 8a fe ff ff       	call   11ea2 <create_kernel_table>

    mmu_set_page_dir((uint32_t)g_kernel_page_dir);            // 重新设置页表
   12018:	b8 00 70 01 00       	mov    $0x17000,%eax
   1201d:	83 ec 0c             	sub    $0xc,%esp
   12020:	50                   	push   %eax
   12021:	e8 5e fa ff ff       	call   11a84 <mmu_set_page_dir>
   12026:	83 c4 10             	add    $0x10,%esp
    
}
   12029:	90                   	nop
   1202a:	c9                   	leave  
   1202b:	c3                   	ret    

0001202c <memory_create_uvm>:


uint32_t memory_create_uvm() {
   1202c:	55                   	push   %ebp
   1202d:	89 e5                	mov    %esp,%ebp
   1202f:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&g_paddr_alloc, 1);
   12032:	83 ec 08             	sub    $0x8,%esp
   12035:	6a 01                	push   $0x1
   12037:	68 00 60 01 00       	push   $0x16000
   1203c:	e8 1e fb ff ff       	call   11b5f <addr_alloc_page>
   12041:	83 c4 10             	add    $0x10,%esp
   12044:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == (pde_t*)0) {
   12047:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1204b:	75 07                	jne    12054 <memory_create_uvm+0x28>
        return 0;  // error
   1204d:	b8 00 00 00 00       	mov    $0x0,%eax
   12052:	eb 5b                	jmp    120af <memory_create_uvm+0x83>
    }

    k_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   12054:	83 ec 04             	sub    $0x4,%esp
   12057:	68 00 10 00 00       	push   $0x1000
   1205c:	6a 00                	push   $0x0
   1205e:	ff 75 f0             	pushl  -0x10(%ebp)
   12061:	e8 75 f3 ff ff       	call   113db <k_memset>
   12066:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index( MEMORY_TASK_BASE );
   12069:	83 ec 0c             	sub    $0xc,%esp
   1206c:	68 00 00 00 80       	push   $0x80000000
   12071:	e8 1f fa ff ff       	call   11a95 <pde_index>
   12076:	83 c4 10             	add    $0x10,%esp
   12079:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    for(int i=0; i<user_pde_start; i++) {
   1207c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12083:	eb 1f                	jmp    120a4 <memory_create_uvm+0x78>
        page_dir[i].v = g_kernel_page_dir[i].v;
   12085:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12088:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1208f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12092:	01 c2                	add    %eax,%edx
   12094:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12097:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   1209e:	89 02                	mov    %eax,(%edx)
    for(int i=0; i<user_pde_start; i++) {
   120a0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   120a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120a7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   120aa:	77 d9                	ja     12085 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   120ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   120af:	c9                   	leave  
   120b0:	c3                   	ret    

000120b1 <memory_alloc_for_page_dir>:


uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   120b1:	55                   	push   %ebp
   120b2:	89 e5                	mov    %esp,%ebp
   120b4:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   120b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   120ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   120bd:	68 00 10 00 00       	push   $0x1000
   120c2:	ff 75 10             	pushl  0x10(%ebp)
   120c5:	e8 97 f9 ff ff       	call   11a61 <up2>
   120ca:	83 c4 08             	add    $0x8,%esp
   120cd:	c1 e8 0c             	shr    $0xc,%eax
   120d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   120d3:	68 00 10 00 00       	push   $0x1000
   120d8:	ff 75 0c             	pushl  0xc(%ebp)
   120db:	e8 74 f9 ff ff       	call   11a54 <down2>
   120e0:	83 c4 08             	add    $0x8,%esp
   120e3:	89 45 0c             	mov    %eax,0xc(%ebp)

    for (int i = 0; i < page_count; i++) {
   120e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   120ed:	e9 95 00 00 00       	jmp    12187 <memory_alloc_for_page_dir+0xd6>
        uint32_t paddr = addr_alloc_page(&g_paddr_alloc, 1);
   120f2:	83 ec 08             	sub    $0x8,%esp
   120f5:	6a 01                	push   $0x1
   120f7:	68 00 60 01 00       	push   $0x16000
   120fc:	e8 5e fa ff ff       	call   11b5f <addr_alloc_page>
   12101:	83 c4 10             	add    $0x10,%esp
   12104:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   12107:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1210b:	75 17                	jne    12124 <memory_alloc_for_page_dir+0x73>
            klog("mem alloc failed. no memory");
   1210d:	83 ec 0c             	sub    $0xc,%esp
   12110:	68 7f 30 01 00       	push   $0x1307f
   12115:	e8 5c f8 ff ff       	call   11976 <klog>
   1211a:	83 c4 10             	add    $0x10,%esp
            return 0;
   1211d:	b8 00 00 00 00       	mov    $0x0,%eax
   12122:	eb 74                	jmp    12198 <memory_alloc_for_page_dir+0xe7>
        }

        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   12124:	8b 55 14             	mov    0x14(%ebp),%edx
   12127:	8b 45 08             	mov    0x8(%ebp),%eax
   1212a:	83 ec 0c             	sub    $0xc,%esp
   1212d:	52                   	push   %edx
   1212e:	6a 01                	push   $0x1
   12130:	ff 75 e8             	pushl  -0x18(%ebp)
   12133:	ff 75 f4             	pushl  -0xc(%ebp)
   12136:	50                   	push   %eax
   12137:	e8 e6 fc ff ff       	call   11e22 <memory_create_map>
   1213c:	83 c4 20             	add    $0x20,%esp
   1213f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   12142:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12146:	79 34                	jns    1217c <memory_alloc_for_page_dir+0xcb>
            klog("create memory map failed. err = %d", err);
   12148:	83 ec 08             	sub    $0x8,%esp
   1214b:	ff 75 e4             	pushl  -0x1c(%ebp)
   1214e:	68 9c 30 01 00       	push   $0x1309c
   12153:	e8 1e f8 ff ff       	call   11976 <klog>
   12158:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&g_paddr_alloc, vaddr, i + 1);
   1215b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1215e:	83 c0 01             	add    $0x1,%eax
   12161:	83 ec 04             	sub    $0x4,%esp
   12164:	50                   	push   %eax
   12165:	ff 75 0c             	pushl  0xc(%ebp)
   12168:	68 00 60 01 00       	push   $0x16000
   1216d:	e8 54 fa ff ff       	call   11bc6 <addr_free_page>
   12172:	83 c4 10             	add    $0x10,%esp
            return -1;
   12175:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1217a:	eb 1c                	jmp    12198 <memory_alloc_for_page_dir+0xe7>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   1217c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   12183:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12187:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1218a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   1218d:	0f 8c 5f ff ff ff    	jl     120f2 <memory_alloc_for_page_dir+0x41>
    }

    return 0;
   12193:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12198:	c9                   	leave  
   12199:	c3                   	ret    

0001219a <memory_alloc_page_for>:


int memory_alloc_page_for(uint32_t addr, uint32_t size, int perm) {
   1219a:	55                   	push   %ebp
   1219b:	89 e5                	mov    %esp,%ebp
   1219d:	83 ec 18             	sub    $0x18,%esp
    
    uint32_t cr3 = task_current()->tss.cr3;
   121a0:	e8 e4 07 00 00       	call   12989 <task_current>
   121a5:	8b 40 68             	mov    0x68(%eax),%eax
   121a8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return memory_alloc_for_page_dir(cr3, addr, size, perm);
   121ab:	ff 75 10             	pushl  0x10(%ebp)
   121ae:	ff 75 0c             	pushl  0xc(%ebp)
   121b1:	ff 75 08             	pushl  0x8(%ebp)
   121b4:	ff 75 f4             	pushl  -0xc(%ebp)
   121b7:	e8 f5 fe ff ff       	call   120b1 <memory_alloc_for_page_dir>
   121bc:	83 c4 10             	add    $0x10,%esp
}
   121bf:	c9                   	leave  
   121c0:	c3                   	ret    

000121c1 <memory_alloc_page>:


// 0x80000000 以下
uint32_t memory_alloc_page() {
   121c1:	55                   	push   %ebp
   121c2:	89 e5                	mov    %esp,%ebp
   121c4:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&g_paddr_alloc, 1);
   121c7:	83 ec 08             	sub    $0x8,%esp
   121ca:	6a 01                	push   $0x1
   121cc:	68 00 60 01 00       	push   $0x16000
   121d1:	e8 89 f9 ff ff       	call   11b5f <addr_alloc_page>
   121d6:	83 c4 10             	add    $0x10,%esp
   121d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   121dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   121df:	c9                   	leave  
   121e0:	c3                   	ret    

000121e1 <curr_page_dir>:

static pde_t* curr_page_dir() {
   121e1:	55                   	push   %ebp
   121e2:	89 e5                	mov    %esp,%ebp
   121e4:	83 ec 08             	sub    $0x8,%esp

    return (pde_t*)( task_current()->tss.cr3 );
   121e7:	e8 9d 07 00 00       	call   12989 <task_current>
   121ec:	8b 40 68             	mov    0x68(%eax),%eax
}
   121ef:	c9                   	leave  
   121f0:	c3                   	ret    

000121f1 <memory_free_page>:

void memory_free_page(uint32_t addr) {
   121f1:	55                   	push   %ebp
   121f2:	89 e5                	mov    %esp,%ebp
   121f4:	83 ec 18             	sub    $0x18,%esp
    if( addr < MEMORY_TASK_BASE ) {
   121f7:	8b 45 08             	mov    0x8(%ebp),%eax
   121fa:	85 c0                	test   %eax,%eax
   121fc:	78 17                	js     12215 <memory_free_page+0x24>
        addr_free_page(&g_paddr_alloc, addr, 1);
   121fe:	83 ec 04             	sub    $0x4,%esp
   12201:	6a 01                	push   $0x1
   12203:	ff 75 08             	pushl  0x8(%ebp)
   12206:	68 00 60 01 00       	push   $0x16000
   1220b:	e8 b6 f9 ff ff       	call   11bc6 <addr_free_page>
   12210:	83 c4 10             	add    $0x10,%esp
        if(pte == 0 && !pte->present) klog("free err");

        addr_free_page(&g_paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
   12213:	eb 66                	jmp    1227b <memory_free_page+0x8a>
        pte_t* pte = find_pte(curr_page_dir(), addr, 0);
   12215:	e8 c7 ff ff ff       	call   121e1 <curr_page_dir>
   1221a:	83 ec 04             	sub    $0x4,%esp
   1221d:	6a 00                	push   $0x0
   1221f:	ff 75 08             	pushl  0x8(%ebp)
   12222:	50                   	push   %eax
   12223:	e8 4a fb ff ff       	call   11d72 <find_pte>
   12228:	83 c4 10             	add    $0x10,%esp
   1222b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(pte == 0 && !pte->present) klog("free err");
   1222e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12232:	75 1d                	jne    12251 <memory_free_page+0x60>
   12234:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12237:	0f b6 00             	movzbl (%eax),%eax
   1223a:	83 e0 01             	and    $0x1,%eax
   1223d:	84 c0                	test   %al,%al
   1223f:	75 10                	jne    12251 <memory_free_page+0x60>
   12241:	83 ec 0c             	sub    $0xc,%esp
   12244:	68 bf 30 01 00       	push   $0x130bf
   12249:	e8 28 f7 ff ff       	call   11976 <klog>
   1224e:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&g_paddr_alloc, pte_paddr(pte), 1);
   12251:	83 ec 0c             	sub    $0xc,%esp
   12254:	ff 75 f4             	pushl  -0xc(%ebp)
   12257:	e8 84 f8 ff ff       	call   11ae0 <pte_paddr>
   1225c:	83 c4 10             	add    $0x10,%esp
   1225f:	83 ec 04             	sub    $0x4,%esp
   12262:	6a 01                	push   $0x1
   12264:	50                   	push   %eax
   12265:	68 00 60 01 00       	push   $0x16000
   1226a:	e8 57 f9 ff ff       	call   11bc6 <addr_free_page>
   1226f:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   12272:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12275:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1227b:	90                   	nop
   1227c:	c9                   	leave  
   1227d:	c3                   	ret    

0001227e <list_count>:
static inline int list_count (list_t* list) {
   1227e:	55                   	push   %ebp
   1227f:	89 e5                	mov    %esp,%ebp
    return list->count;
   12281:	8b 45 08             	mov    0x8(%ebp),%eax
   12284:	8b 40 08             	mov    0x8(%eax),%eax
}
   12287:	5d                   	pop    %ebp
   12288:	c3                   	ret    

00012289 <mutex_init>:
#include <mux.h>
#include <irq.h>
#include <log.h>

void mutex_init (mutex_t * mutex) {
   12289:	55                   	push   %ebp
   1228a:	89 e5                	mov    %esp,%ebp
   1228c:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   1228f:	8b 45 08             	mov    0x8(%ebp),%eax
   12292:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   12299:	8b 45 08             	mov    0x8(%ebp),%eax
   1229c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   122a2:	8b 45 08             	mov    0x8(%ebp),%eax
   122a5:	83 c0 08             	add    $0x8,%eax
   122a8:	83 ec 0c             	sub    $0xc,%esp
   122ab:	50                   	push   %eax
   122ac:	e8 06 f4 ff ff       	call   116b7 <list_init>
   122b1:	83 c4 10             	add    $0x10,%esp
}
   122b4:	90                   	nop
   122b5:	c9                   	leave  
   122b6:	c3                   	ret    

000122b7 <mutex_lock>:

void mutex_lock (mutex_t * mutex) {
   122b7:	55                   	push   %ebp
   122b8:	89 e5                	mov    %esp,%ebp
   122ba:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   122bd:	e8 f0 ec ff ff       	call   10fb2 <irq_enter_proection>
   122c2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   122c5:	e8 bf 06 00 00       	call   12989 <task_current>
   122ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   122cd:	8b 45 08             	mov    0x8(%ebp),%eax
   122d0:	8b 40 04             	mov    0x4(%eax),%eax
   122d3:	85 c0                	test   %eax,%eax
   122d5:	75 14                	jne    122eb <mutex_lock+0x34>
        mutex->locked_count = 1;
   122d7:	8b 45 08             	mov    0x8(%ebp),%eax
   122da:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   122e1:	8b 45 08             	mov    0x8(%ebp),%eax
   122e4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   122e7:	89 10                	mov    %edx,(%eax)
   122e9:	eb 4f                	jmp    1233a <mutex_lock+0x83>
    } else if (mutex->owner == curr) {
   122eb:	8b 45 08             	mov    0x8(%ebp),%eax
   122ee:	8b 00                	mov    (%eax),%eax
   122f0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   122f3:	75 11                	jne    12306 <mutex_lock+0x4f>
        mutex->locked_count++;
   122f5:	8b 45 08             	mov    0x8(%ebp),%eax
   122f8:	8b 40 04             	mov    0x4(%eax),%eax
   122fb:	8d 50 01             	lea    0x1(%eax),%edx
   122fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12301:	89 50 04             	mov    %edx,0x4(%eax)
   12304:	eb 34                	jmp    1233a <mutex_lock+0x83>
    } else {
        task_t * curr = task_current();
   12306:	e8 7e 06 00 00       	call   12989 <task_current>
   1230b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   1230e:	83 ec 0c             	sub    $0xc,%esp
   12311:	ff 75 ec             	pushl  -0x14(%ebp)
   12314:	e8 af 06 00 00       	call   129c8 <task_set_block>
   12319:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   1231c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1231f:	8d 50 44             	lea    0x44(%eax),%edx
   12322:	8b 45 08             	mov    0x8(%ebp),%eax
   12325:	83 c0 08             	add    $0x8,%eax
   12328:	83 ec 08             	sub    $0x8,%esp
   1232b:	52                   	push   %edx
   1232c:	50                   	push   %eax
   1232d:	e8 09 f4 ff ff       	call   1173b <list_insert_last>
   12332:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12335:	e8 5d 07 00 00       	call   12a97 <task_dispatch>
    }

    irq_leave_proection(irq_state);
   1233a:	83 ec 0c             	sub    $0xc,%esp
   1233d:	ff 75 f4             	pushl  -0xc(%ebp)
   12340:	e8 85 ec ff ff       	call   10fca <irq_leave_proection>
   12345:	83 c4 10             	add    $0x10,%esp
}
   12348:	90                   	nop
   12349:	c9                   	leave  
   1234a:	c3                   	ret    

0001234b <mutex_unlock>:

void mutex_unlock (mutex_t * mutex) {
   1234b:	55                   	push   %ebp
   1234c:	89 e5                	mov    %esp,%ebp
   1234e:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   12351:	e8 5c ec ff ff       	call   10fb2 <irq_enter_proection>
   12356:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * curr = task_current();
   12359:	e8 2b 06 00 00       	call   12989 <task_current>
   1235e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   12361:	8b 45 08             	mov    0x8(%ebp),%eax
   12364:	8b 00                	mov    (%eax),%eax
   12366:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12369:	0f 85 88 00 00 00    	jne    123f7 <mutex_unlock+0xac>
        if (--mutex->locked_count == 0) {
   1236f:	8b 45 08             	mov    0x8(%ebp),%eax
   12372:	8b 40 04             	mov    0x4(%eax),%eax
   12375:	8d 50 ff             	lea    -0x1(%eax),%edx
   12378:	8b 45 08             	mov    0x8(%ebp),%eax
   1237b:	89 50 04             	mov    %edx,0x4(%eax)
   1237e:	8b 45 08             	mov    0x8(%ebp),%eax
   12381:	8b 40 04             	mov    0x4(%eax),%eax
   12384:	85 c0                	test   %eax,%eax
   12386:	75 6f                	jne    123f7 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   12388:	8b 45 08             	mov    0x8(%ebp),%eax
   1238b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   12391:	8b 45 08             	mov    0x8(%ebp),%eax
   12394:	83 c0 08             	add    $0x8,%eax
   12397:	83 ec 0c             	sub    $0xc,%esp
   1239a:	50                   	push   %eax
   1239b:	e8 de fe ff ff       	call   1227e <list_count>
   123a0:	83 c4 10             	add    $0x10,%esp
   123a3:	85 c0                	test   %eax,%eax
   123a5:	74 50                	je     123f7 <mutex_unlock+0xac>
                list_node_t * task_node = list_delete_first(&mutex->wait_list);
   123a7:	8b 45 08             	mov    0x8(%ebp),%eax
   123aa:	83 c0 08             	add    $0x8,%eax
   123ad:	83 ec 0c             	sub    $0xc,%esp
   123b0:	50                   	push   %eax
   123b1:	e8 e9 f3 ff ff       	call   1179f <list_delete_first>
   123b6:	83 c4 10             	add    $0x10,%esp
   123b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   123bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   123c0:	74 08                	je     123ca <mutex_unlock+0x7f>
   123c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   123c5:	83 e8 44             	sub    $0x44,%eax
   123c8:	eb 05                	jmp    123cf <mutex_unlock+0x84>
   123ca:	b8 00 00 00 00       	mov    $0x0,%eax
   123cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   123d2:	83 ec 0c             	sub    $0xc,%esp
   123d5:	ff 75 e8             	pushl  -0x18(%ebp)
   123d8:	e8 b6 05 00 00       	call   12993 <task_set_ready>
   123dd:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   123e0:	8b 45 08             	mov    0x8(%ebp),%eax
   123e3:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   123ea:	8b 45 08             	mov    0x8(%ebp),%eax
   123ed:	8b 55 e8             	mov    -0x18(%ebp),%edx
   123f0:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   123f2:	e8 a0 06 00 00       	call   12a97 <task_dispatch>
            }
        }
    }

    irq_leave_proection(irq_state);
   123f7:	83 ec 0c             	sub    $0xc,%esp
   123fa:	ff 75 f4             	pushl  -0xc(%ebp)
   123fd:	e8 c8 eb ff ff       	call   10fca <irq_leave_proection>
   12402:	83 c4 10             	add    $0x10,%esp
   12405:	90                   	nop
   12406:	c9                   	leave  
   12407:	c3                   	ret    

00012408 <list_count>:
static inline int list_count (list_t* list) {
   12408:	55                   	push   %ebp
   12409:	89 e5                	mov    %esp,%ebp
    return list->count;
   1240b:	8b 45 08             	mov    0x8(%ebp),%eax
   1240e:	8b 40 08             	mov    0x8(%eax),%eax
}
   12411:	5d                   	pop    %ebp
   12412:	c3                   	ret    

00012413 <sem_init>:
#include <sem.h>
#include <irq.h>

void sem_init(sem_t* sem, int init_count) {
   12413:	55                   	push   %ebp
   12414:	89 e5                	mov    %esp,%ebp
   12416:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12419:	8b 45 08             	mov    0x8(%ebp),%eax
   1241c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1241f:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   12421:	8b 45 08             	mov    0x8(%ebp),%eax
   12424:	83 c0 04             	add    $0x4,%eax
   12427:	83 ec 0c             	sub    $0xc,%esp
   1242a:	50                   	push   %eax
   1242b:	e8 87 f2 ff ff       	call   116b7 <list_init>
   12430:	83 c4 10             	add    $0x10,%esp
}
   12433:	90                   	nop
   12434:	c9                   	leave  
   12435:	c3                   	ret    

00012436 <sem_wait>:

void sem_wait(sem_t* sem) {
   12436:	55                   	push   %ebp
   12437:	89 e5                	mov    %esp,%ebp
   12439:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   1243c:	e8 71 eb ff ff       	call   10fb2 <irq_enter_proection>
   12441:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0) {
   12444:	8b 45 08             	mov    0x8(%ebp),%eax
   12447:	8b 00                	mov    (%eax),%eax
   12449:	85 c0                	test   %eax,%eax
   1244b:	7e 0f                	jle    1245c <sem_wait+0x26>
        sem->count--;
   1244d:	8b 45 08             	mov    0x8(%ebp),%eax
   12450:	8b 00                	mov    (%eax),%eax
   12452:	8d 50 ff             	lea    -0x1(%eax),%edx
   12455:	8b 45 08             	mov    0x8(%ebp),%eax
   12458:	89 10                	mov    %edx,(%eax)
   1245a:	eb 34                	jmp    12490 <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   1245c:	e8 28 05 00 00       	call   12989 <task_current>
   12461:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   12464:	83 ec 0c             	sub    $0xc,%esp
   12467:	ff 75 f0             	pushl  -0x10(%ebp)
   1246a:	e8 59 05 00 00       	call   129c8 <task_set_block>
   1246f:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   12472:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12475:	8d 50 44             	lea    0x44(%eax),%edx
   12478:	8b 45 08             	mov    0x8(%ebp),%eax
   1247b:	83 c0 04             	add    $0x4,%eax
   1247e:	83 ec 08             	sub    $0x8,%esp
   12481:	52                   	push   %edx
   12482:	50                   	push   %eax
   12483:	e8 b3 f2 ff ff       	call   1173b <list_insert_last>
   12488:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1248b:	e8 07 06 00 00       	call   12a97 <task_dispatch>
    }
    irq_leave_proection(state);
   12490:	83 ec 0c             	sub    $0xc,%esp
   12493:	ff 75 f4             	pushl  -0xc(%ebp)
   12496:	e8 2f eb ff ff       	call   10fca <irq_leave_proection>
   1249b:	83 c4 10             	add    $0x10,%esp
}
   1249e:	90                   	nop
   1249f:	c9                   	leave  
   124a0:	c3                   	ret    

000124a1 <sem_notify>:

void sem_notify(sem_t* sem) {
   124a1:	55                   	push   %ebp
   124a2:	89 e5                	mov    %esp,%ebp
   124a4:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();
   124a7:	e8 06 eb ff ff       	call   10fb2 <irq_enter_proection>
   124ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list)) {
   124af:	8b 45 08             	mov    0x8(%ebp),%eax
   124b2:	83 c0 04             	add    $0x4,%eax
   124b5:	83 ec 0c             	sub    $0xc,%esp
   124b8:	50                   	push   %eax
   124b9:	e8 4a ff ff ff       	call   12408 <list_count>
   124be:	83 c4 10             	add    $0x10,%esp
   124c1:	85 c0                	test   %eax,%eax
   124c3:	74 40                	je     12505 <sem_notify+0x64>
        list_node_t* node = list_delete_first(&sem->wait_list);
   124c5:	8b 45 08             	mov    0x8(%ebp),%eax
   124c8:	83 c0 04             	add    $0x4,%eax
   124cb:	83 ec 0c             	sub    $0xc,%esp
   124ce:	50                   	push   %eax
   124cf:	e8 cb f2 ff ff       	call   1179f <list_delete_first>
   124d4:	83 c4 10             	add    $0x10,%esp
   124d7:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_t* task = list_node_parent(node, task_t, wait_node);
   124da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   124de:	74 08                	je     124e8 <sem_notify+0x47>
   124e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124e3:	83 e8 44             	sub    $0x44,%eax
   124e6:	eb 05                	jmp    124ed <sem_notify+0x4c>
   124e8:	b8 00 00 00 00       	mov    $0x0,%eax
   124ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   124f0:	83 ec 0c             	sub    $0xc,%esp
   124f3:	ff 75 ec             	pushl  -0x14(%ebp)
   124f6:	e8 98 04 00 00       	call   12993 <task_set_ready>
   124fb:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   124fe:	e8 94 05 00 00       	call   12a97 <task_dispatch>
   12503:	eb 0d                	jmp    12512 <sem_notify+0x71>
    } else {
        sem->count++;
   12505:	8b 45 08             	mov    0x8(%ebp),%eax
   12508:	8b 00                	mov    (%eax),%eax
   1250a:	8d 50 01             	lea    0x1(%eax),%edx
   1250d:	8b 45 08             	mov    0x8(%ebp),%eax
   12510:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_proection(state);
   12512:	83 ec 0c             	sub    $0xc,%esp
   12515:	ff 75 f4             	pushl  -0xc(%ebp)
   12518:	e8 ad ea ff ff       	call   10fca <irq_leave_proection>
   1251d:	83 c4 10             	add    $0x10,%esp

}
   12520:	90                   	nop
   12521:	c9                   	leave  
   12522:	c3                   	ret    

00012523 <sem_count>:

int  sem_count(sem_t* sem) {
   12523:	55                   	push   %ebp
   12524:	89 e5                	mov    %esp,%ebp
   12526:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12529:	e8 84 ea ff ff       	call   10fb2 <irq_enter_proection>
   1252e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   12531:	8b 45 08             	mov    0x8(%ebp),%eax
   12534:	8b 00                	mov    (%eax),%eax
   12536:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_proection(state);
   12539:	83 ec 0c             	sub    $0xc,%esp
   1253c:	ff 75 f4             	pushl  -0xc(%ebp)
   1253f:	e8 86 ea ff ff       	call   10fca <irq_leave_proection>
   12544:	83 c4 10             	add    $0x10,%esp
    return count;
   12547:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1254a:	c9                   	leave  
   1254b:	c3                   	ret    

0001254c <hlt>:
static inline void hlt() {
   1254c:	55                   	push   %ebp
   1254d:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   1254f:	f4                   	hlt    
}
   12550:	90                   	nop
   12551:	5d                   	pop    %ebp
   12552:	c3                   	ret    

00012553 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   12553:	55                   	push   %ebp
   12554:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   12556:	8b 45 08             	mov    0x8(%ebp),%eax
   12559:	0f 22 d8             	mov    %eax,%cr3
}
   1255c:	90                   	nop
   1255d:	5d                   	pop    %ebp
   1255e:	c3                   	ret    

0001255f <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1255f:	55                   	push   %ebp
   12560:	89 e5                	mov    %esp,%ebp
   12562:	83 ec 10             	sub    $0x10,%esp
	volatile uint32_t addr[] = {offset, selector };
   12565:	8b 45 0c             	mov    0xc(%ebp),%eax
   12568:	8b 55 08             	mov    0x8(%ebp),%edx
   1256b:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1256e:	89 55 fc             	mov    %edx,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   12571:	8d 45 f8             	lea    -0x8(%ebp),%eax
   12574:	ff 28                	ljmp   *(%eax)
}
   12576:	90                   	nop
   12577:	c9                   	leave  
   12578:	c3                   	ret    

00012579 <write_tr>:
static inline void write_tr (uint16_t tss_selector) {
   12579:	55                   	push   %ebp
   1257a:	89 e5                	mov    %esp,%ebp
   1257c:	83 ec 04             	sub    $0x4,%esp
   1257f:	8b 45 08             	mov    0x8(%ebp),%eax
   12582:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   12586:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1258a:	0f 00 d8             	ltr    %ax
}
   1258d:	90                   	nop
   1258e:	c9                   	leave  
   1258f:	c3                   	ret    

00012590 <list_node_init>:
static inline void list_node_init(list_node_t* node) {
   12590:	55                   	push   %ebp
   12591:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t*)0;
   12593:	8b 45 08             	mov    0x8(%ebp),%eax
   12596:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1259d:	8b 45 08             	mov    0x8(%ebp),%eax
   125a0:	8b 50 04             	mov    0x4(%eax),%edx
   125a3:	8b 45 08             	mov    0x8(%ebp),%eax
   125a6:	89 10                	mov    %edx,(%eax)
}
   125a8:	90                   	nop
   125a9:	5d                   	pop    %ebp
   125aa:	c3                   	ret    

000125ab <list_node_next>:
static inline list_node_t* list_node_next(list_node_t* node) {
   125ab:	55                   	push   %ebp
   125ac:	89 e5                	mov    %esp,%ebp
    return node->next;
   125ae:	8b 45 08             	mov    0x8(%ebp),%eax
   125b1:	8b 40 04             	mov    0x4(%eax),%eax
}
   125b4:	5d                   	pop    %ebp
   125b5:	c3                   	ret    

000125b6 <list_count>:
static inline int list_count (list_t* list) {
   125b6:	55                   	push   %ebp
   125b7:	89 e5                	mov    %esp,%ebp
    return list->count;
   125b9:	8b 45 08             	mov    0x8(%ebp),%eax
   125bc:	8b 40 08             	mov    0x8(%eax),%eax
}
   125bf:	5d                   	pop    %ebp
   125c0:	c3                   	ret    

000125c1 <list_first>:
static inline list_node_t* list_first (list_t* list) {
   125c1:	55                   	push   %ebp
   125c2:	89 e5                	mov    %esp,%ebp
    return list->first;
   125c4:	8b 45 08             	mov    0x8(%ebp),%eax
   125c7:	8b 00                	mov    (%eax),%eax
}
   125c9:	5d                   	pop    %ebp
   125ca:	c3                   	ret    

000125cb <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   125cb:	55                   	push   %ebp
   125cc:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   125ce:	ff 75 08             	pushl  0x8(%ebp)
   125d1:	e8 7d ff ff ff       	call   12553 <write_cr3>
   125d6:	83 c4 04             	add    $0x4,%esp
}
   125d9:	90                   	nop
   125da:	c9                   	leave  
   125db:	c3                   	ret    

000125dc <idle_task_func>:

static task_manager_t g_task_manager;
static uint32_t idle_task_stack[2048];


static void idle_task_func() { for(;;) hlt(); }
   125dc:	55                   	push   %ebp
   125dd:	89 e5                	mov    %esp,%ebp
   125df:	e8 68 ff ff ff       	call   1254c <hlt>
   125e4:	eb f9                	jmp    125df <idle_task_func+0x3>

000125e6 <task_switch_from_to>:

void simple_switch(uint32_t **from, uint32_t* to);

void task_switch_from_to(task_t* from, task_t* to) {
   125e6:	55                   	push   %ebp
   125e7:	89 e5                	mov    %esp,%ebp
    #ifndef USE_TSS
    simple_switch(&from->stack, to->stack);  // 使用直接跳转机制
    #else
    far_jump(to->tss_sel, 0);             // 使用 tss 机制
   125e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   125ec:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
   125f2:	6a 00                	push   $0x0
   125f4:	50                   	push   %eax
   125f5:	e8 65 ff ff ff       	call   1255f <far_jump>
   125fa:	83 c4 08             	add    $0x8,%esp
    #endif
}
   125fd:	90                   	nop
   125fe:	c9                   	leave  
   125ff:	c3                   	ret    

00012600 <tss_init>:


#ifdef USE_TSS
static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   12600:	55                   	push   %ebp
   12601:	89 e5                	mov    %esp,%ebp
   12603:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   12606:	e8 9e de ff ff       	call   104a9 <gdt_alloc_desc>
   1260b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), 
   1260e:	8b 45 08             	mov    0x8(%ebp),%eax
   12611:	83 c0 4c             	add    $0x4c,%eax
   12614:	68 89 00 00 00       	push   $0x89
   12619:	6a 68                	push   $0x68
   1261b:	50                   	push   %eax
   1261c:	ff 75 ec             	pushl  -0x14(%ebp)
   1261f:	e8 7f dd ff ff       	call   103a3 <segment_desc_set>
   12624:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS );

    k_memset(&task->tss, 0, sizeof(tss_t));
   12627:	8b 45 08             	mov    0x8(%ebp),%eax
   1262a:	83 c0 4c             	add    $0x4c,%eax
   1262d:	83 ec 04             	sub    $0x4,%esp
   12630:	6a 68                	push   $0x68
   12632:	6a 00                	push   $0x0
   12634:	50                   	push   %eax
   12635:	e8 a1 ed ff ff       	call   113db <k_memset>
   1263a:	83 c4 10             	add    $0x10,%esp

    uint32_t kernel_stack = memory_alloc_page();
   1263d:	e8 7f fb ff ff       	call   121c1 <memory_alloc_page>
   12642:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   12645:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12649:	0f 84 da 00 00 00    	je     12729 <tss_init+0x129>
        goto tss_init_failed;
    }

    int code_sel, data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   1264f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12652:	83 e0 01             	and    $0x1,%eax
   12655:	85 c0                	test   %eax,%eax
   12657:	74 10                	je     12669 <tss_init+0x69>
        code_sel = KERNEL_SELECTOR_CS;
   12659:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   12660:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   12667:	eb 16                	jmp    1267f <tss_init+0x7f>
    } else {
        code_sel = g_task_manager.app_code_sel | SEG_RPL3;
   12669:	a1 98 81 01 00       	mov    0x18198,%eax
   1266e:	83 c8 03             	or     $0x3,%eax
   12671:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = g_task_manager.app_data_sel | SEG_RPL3;
   12674:	a1 9c 81 01 00       	mov    0x1819c,%eax
   12679:	83 c8 03             	or     $0x3,%eax
   1267c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip  = entry;
   1267f:	8b 45 08             	mov    0x8(%ebp),%eax
   12682:	8b 55 10             	mov    0x10(%ebp),%edx
   12685:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp  = esp;
   12688:	8b 45 08             	mov    0x8(%ebp),%eax
   1268b:	8b 55 14             	mov    0x14(%ebp),%edx
   1268e:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   12694:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12697:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   1269d:	8b 45 08             	mov    0x8(%ebp),%eax
   126a0:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.ss  = data_sel;
   126a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   126a6:	8b 45 08             	mov    0x8(%ebp),%eax
   126a9:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   126af:	8b 45 08             	mov    0x8(%ebp),%eax
   126b2:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es  = data_sel;
   126b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   126bc:	8b 45 08             	mov    0x8(%ebp),%eax
   126bf:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.ds  = data_sel;
   126c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   126c8:	8b 45 08             	mov    0x8(%ebp),%eax
   126cb:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.fs  = data_sel;
   126d1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   126d4:	8b 45 08             	mov    0x8(%ebp),%eax
   126d7:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
    task->tss.gs  = data_sel;
   126dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   126e0:	8b 45 08             	mov    0x8(%ebp),%eax
   126e3:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    task->tss.cs  = code_sel;
   126e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
   126ec:	8b 45 08             	mov    0x8(%ebp),%eax
   126ef:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    
    task->tss.eflags = EFLAGES_DEFAULT | EFLAGS_IF;
   126f5:	8b 45 08             	mov    0x8(%ebp),%eax
   126f8:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    uint32_t page_dir = memory_create_uvm();
   126ff:	e8 28 f9 ff ff       	call   1202c <memory_create_uvm>
   12704:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(page_dir == 0) {
   12707:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1270b:	74 1f                	je     1272c <tss_init+0x12c>
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   1270d:	8b 45 08             	mov    0x8(%ebp),%eax
   12710:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   12713:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss_sel = tss_sel;
   12716:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12719:	8b 45 08             	mov    0x8(%ebp),%eax
   1271c:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)

    return 0;
   12722:	b8 00 00 00 00       	mov    $0x0,%eax
   12727:	eb 2b                	jmp    12754 <tss_init+0x154>
        goto tss_init_failed;
   12729:	90                   	nop
   1272a:	eb 01                	jmp    1272d <tss_init+0x12d>
        goto tss_init_failed;
   1272c:	90                   	nop

tss_init_failed:

    gdt_free_sel(tss_sel);
   1272d:	83 ec 0c             	sub    $0xc,%esp
   12730:	ff 75 ec             	pushl  -0x14(%ebp)
   12733:	e8 e6 dd ff ff       	call   1051e <gdt_free_sel>
   12738:	83 c4 10             	add    $0x10,%esp
    if(kernel_stack) {
   1273b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1273f:	74 0e                	je     1274f <tss_init+0x14f>
        memory_free_page(kernel_stack);
   12741:	83 ec 0c             	sub    $0xc,%esp
   12744:	ff 75 e8             	pushl  -0x18(%ebp)
   12747:	e8 a5 fa ff ff       	call   121f1 <memory_free_page>
   1274c:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   1274f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12754:	c9                   	leave  
   12755:	c3                   	ret    

00012756 <task_init>:
#endif

// 初始化一个任务
int task_init(task_t* task, const char* name, int flag, 
    uint32_t entry, uint32_t esp) {
   12756:	55                   	push   %ebp
   12757:	89 e5                	mov    %esp,%ebp
   12759:	83 ec 18             	sub    $0x18,%esp
        *(--pesp) = 0;
        *(--pesp) = 0;
        task->stack = pesp;
    }
    #else
    if (tss_init(task, flag, entry, esp) == -1) return -1;  // 使用 tss 机制
   1275c:	ff 75 18             	pushl  0x18(%ebp)
   1275f:	ff 75 14             	pushl  0x14(%ebp)
   12762:	ff 75 10             	pushl  0x10(%ebp)
   12765:	ff 75 08             	pushl  0x8(%ebp)
   12768:	e8 93 fe ff ff       	call   12600 <tss_init>
   1276d:	83 c4 10             	add    $0x10,%esp
   12770:	83 f8 ff             	cmp    $0xffffffff,%eax
   12773:	75 0a                	jne    1277f <task_init+0x29>
   12775:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1277a:	e9 b5 00 00 00       	jmp    12834 <task_init+0xde>
    #endif

    k_strncpy(task->name, name, TASK_NAME_SIZE);        // 进程名
   1277f:	8b 45 08             	mov    0x8(%ebp),%eax
   12782:	83 c0 08             	add    $0x8,%eax
   12785:	83 ec 04             	sub    $0x4,%esp
   12788:	6a 20                	push   $0x20
   1278a:	ff 75 0c             	pushl  0xc(%ebp)
   1278d:	50                   	push   %eax
   1278e:	e8 d4 ea ff ff       	call   11267 <k_strncpy>
   12793:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;                         // 状态  created
   12796:	8b 45 08             	mov    0x8(%ebp),%eax
   12799:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;         //  最大时间片
   127a0:	8b 45 08             	mov    0x8(%ebp),%eax
   127a3:	c7 40 2c 0a 00 00 00 	movl   $0xa,0x2c(%eax)
    task->slice_ticks = TASK_TIME_SLICE_DEFAULT;        //  当前时间片
   127aa:	8b 45 08             	mov    0x8(%ebp),%eax
   127ad:	c7 40 28 0a 00 00 00 	movl   $0xa,0x28(%eax)
    task->sleep_ticks = 0;
   127b4:	8b 45 08             	mov    0x8(%ebp),%eax
   127b7:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node); 
   127be:	8b 45 08             	mov    0x8(%ebp),%eax
   127c1:	83 c0 3c             	add    $0x3c,%eax
   127c4:	83 ec 0c             	sub    $0xc,%esp
   127c7:	50                   	push   %eax
   127c8:	e8 c3 fd ff ff       	call   12590 <list_node_init>
   127cd:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   127d0:	8b 45 08             	mov    0x8(%ebp),%eax
   127d3:	83 c0 34             	add    $0x34,%eax
   127d6:	83 ec 0c             	sub    $0xc,%esp
   127d9:	50                   	push   %eax
   127da:	e8 b1 fd ff ff       	call   12590 <list_node_init>
   127df:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   127e2:	8b 45 08             	mov    0x8(%ebp),%eax
   127e5:	83 c0 44             	add    $0x44,%eax
   127e8:	83 ec 0c             	sub    $0xc,%esp
   127eb:	50                   	push   %eax
   127ec:	e8 9f fd ff ff       	call   12590 <list_node_init>
   127f1:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   127f4:	e8 b9 e7 ff ff       	call   10fb2 <irq_enter_proection>
   127f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        task_set_ready(task);                                        // 加入到就绪队列
   127fc:	83 ec 0c             	sub    $0xc,%esp
   127ff:	ff 75 08             	pushl  0x8(%ebp)
   12802:	e8 8c 01 00 00       	call   12993 <task_set_ready>
   12807:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&g_task_manager.task_list, &task->all_node);  // 加入到所有队列
   1280a:	8b 45 08             	mov    0x8(%ebp),%eax
   1280d:	83 c0 3c             	add    $0x3c,%eax
   12810:	83 ec 08             	sub    $0x8,%esp
   12813:	50                   	push   %eax
   12814:	68 1c 80 01 00       	push   $0x1801c
   12819:	e8 1d ef ff ff       	call   1173b <list_insert_last>
   1281e:	83 c4 10             	add    $0x10,%esp
    irq_leave_proection(state);  //--leave protection
   12821:	83 ec 0c             	sub    $0xc,%esp
   12824:	ff 75 f4             	pushl  -0xc(%ebp)
   12827:	e8 9e e7 ff ff       	call   10fca <irq_leave_proection>
   1282c:	83 c4 10             	add    $0x10,%esp

    return 0;
   1282f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12834:	c9                   	leave  
   12835:	c3                   	ret    

00012836 <task_manager_init>:

// 初始化任务管理
void task_manager_init() {
   12836:	55                   	push   %ebp
   12837:	89 e5                	mov    %esp,%ebp
   12839:	83 ec 18             	sub    $0x18,%esp
    int seld = gdt_alloc_desc();
   1283c:	e8 68 dc ff ff       	call   104a9 <gdt_alloc_desc>
   12841:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(seld, 0x00000000, 0xffffffff, 
   12844:	68 f2 40 00 00       	push   $0x40f2
   12849:	6a ff                	push   $0xffffffff
   1284b:	6a 00                	push   $0x0
   1284d:	ff 75 f4             	pushl  -0xc(%ebp)
   12850:	e8 4e db ff ff       	call   103a3 <segment_desc_set>
   12855:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D
    );
    g_task_manager.app_data_sel = seld;
   12858:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1285b:	a3 9c 81 01 00       	mov    %eax,0x1819c

    int selc = gdt_alloc_desc();
   12860:	e8 44 dc ff ff       	call   104a9 <gdt_alloc_desc>
   12865:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(selc, 0x00000000, 0xffffffff, 
   12868:	68 fa 40 00 00       	push   $0x40fa
   1286d:	6a ff                	push   $0xffffffff
   1286f:	6a 00                	push   $0x0
   12871:	ff 75 f0             	pushl  -0x10(%ebp)
   12874:	e8 2a db ff ff       	call   103a3 <segment_desc_set>
   12879:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_CODE 
        | SEG_TYPE_RW | SEG_D
    );
    g_task_manager.app_code_sel = selc;
   1287c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1287f:	a3 98 81 01 00       	mov    %eax,0x18198

    list_init(&g_task_manager.ready_list);
   12884:	83 ec 0c             	sub    $0xc,%esp
   12887:	68 04 80 01 00       	push   $0x18004
   1288c:	e8 26 ee ff ff       	call   116b7 <list_init>
   12891:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.task_list);
   12894:	83 ec 0c             	sub    $0xc,%esp
   12897:	68 1c 80 01 00       	push   $0x1801c
   1289c:	e8 16 ee ff ff       	call   116b7 <list_init>
   128a1:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.sleep_list);
   128a4:	83 ec 0c             	sub    $0xc,%esp
   128a7:	68 10 80 01 00       	push   $0x18010
   128ac:	e8 06 ee ff ff       	call   116b7 <list_init>
   128b1:	83 c4 10             	add    $0x10,%esp
    g_task_manager.curr_task = get_first_task();
   128b4:	e8 c6 00 00 00       	call   1297f <get_first_task>
   128b9:	a3 00 80 01 00       	mov    %eax,0x18000
    
    task_init(&g_task_manager.idle_task,  
   128be:	ba a0 a1 01 00       	mov    $0x1a1a0,%edx
   128c3:	b8 dc 25 01 00       	mov    $0x125dc,%eax
   128c8:	83 ec 0c             	sub    $0xc,%esp
   128cb:	52                   	push   %edx
   128cc:	50                   	push   %eax
   128cd:	6a 01                	push   $0x1
   128cf:	68 c8 30 01 00       	push   $0x130c8
   128d4:	68 e0 80 01 00       	push   $0x180e0
   128d9:	e8 78 fe ff ff       	call   12756 <task_init>
   128de:	83 c4 20             	add    $0x20,%esp
            "idle  task", 
            TASK_FLAGS_SYSTEM,
            (uint32_t)idle_task_func, 
            (uint32_t)&idle_task_stack[2048]
    );
}
   128e1:	90                   	nop
   128e2:	c9                   	leave  
   128e3:	c3                   	ret    

000128e4 <first_task_init>:


void first_task_init() {
   128e4:	55                   	push   %ebp
   128e5:	89 e5                	mov    %esp,%ebp
   128e7:	83 ec 18             	sub    $0x18,%esp

    void first_task_entry();
    extern uint8_t s_first_task[], e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   128ea:	ba c6 c1 01 00       	mov    $0x1c1c6,%edx
   128ef:	b8 a0 c1 01 00       	mov    $0x1c1a0,%eax
   128f4:	29 c2                	sub    %eax,%edx
   128f6:	89 d0                	mov    %edx,%eax
   128f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   128fb:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)

    uint32_t first_start = (uint32_t)first_task_entry;
   12902:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    // first_start + alloc_size 栈顶
    task_init(&g_task_manager.first_task, 
   12909:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1290c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1290f:	01 d0                	add    %edx,%eax
   12911:	83 ec 0c             	sub    $0xc,%esp
   12914:	50                   	push   %eax
   12915:	ff 75 ec             	pushl  -0x14(%ebp)
   12918:	6a 00                	push   $0x0
   1291a:	68 d3 30 01 00       	push   $0x130d3
   1291f:	68 28 80 01 00       	push   $0x18028
   12924:	e8 2d fe ff ff       	call   12756 <task_init>
   12929:	83 c4 20             	add    $0x20,%esp
            "first task", 0, 
            first_start, 
            first_start + alloc_size 
    );
    
    mmu_set_page_dir((&g_task_manager)->first_task.tss.cr3);
   1292c:	a1 90 80 01 00       	mov    0x18090,%eax
   12931:	83 ec 0c             	sub    $0xc,%esp
   12934:	50                   	push   %eax
   12935:	e8 91 fc ff ff       	call   125cb <mmu_set_page_dir>
   1293a:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   1293d:	83 ec 04             	sub    $0x4,%esp
   12940:	6a 07                	push   $0x7
   12942:	ff 75 f0             	pushl  -0x10(%ebp)
   12945:	ff 75 ec             	pushl  -0x14(%ebp)
   12948:	e8 4d f8 ff ff       	call   1219a <memory_alloc_page_for>
   1294d:	83 c4 10             	add    $0x10,%esp
    k_memcpy( (void*)first_start, (void *)&s_first_task, copy_size );
   12950:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12953:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12956:	83 ec 04             	sub    $0x4,%esp
   12959:	52                   	push   %edx
   1295a:	68 a0 c1 01 00       	push   $0x1c1a0
   1295f:	50                   	push   %eax
   12960:	e8 27 ea ff ff       	call   1138c <k_memcpy>
   12965:	83 c4 10             	add    $0x10,%esp


    write_tr((&g_task_manager)->first_task.tss_sel);
   12968:	a1 dc 80 01 00       	mov    0x180dc,%eax
   1296d:	0f b7 c0             	movzwl %ax,%eax
   12970:	83 ec 0c             	sub    $0xc,%esp
   12973:	50                   	push   %eax
   12974:	e8 00 fc ff ff       	call   12579 <write_tr>
   12979:	83 c4 10             	add    $0x10,%esp
}
   1297c:	90                   	nop
   1297d:	c9                   	leave  
   1297e:	c3                   	ret    

0001297f <get_first_task>:





task_t* get_first_task() {
   1297f:	55                   	push   %ebp
   12980:	89 e5                	mov    %esp,%ebp
    return &g_task_manager.first_task;
   12982:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   12987:	5d                   	pop    %ebp
   12988:	c3                   	ret    

00012989 <task_current>:

task_t* task_current() {
   12989:	55                   	push   %ebp
   1298a:	89 e5                	mov    %esp,%ebp
    return g_task_manager.curr_task;
   1298c:	a1 00 80 01 00       	mov    0x18000,%eax
}
   12991:	5d                   	pop    %ebp
   12992:	c3                   	ret    

00012993 <task_set_ready>:


// 将任务添加到就绪队列 尾部 设置状态为 ready
void task_set_ready(task_t* task) {
   12993:	55                   	push   %ebp
   12994:	89 e5                	mov    %esp,%ebp
   12996:	83 ec 08             	sub    $0x8,%esp
    if (task == &g_task_manager.idle_task) {  // 空进程不应该加入就绪队列
   12999:	81 7d 08 e0 80 01 00 	cmpl   $0x180e0,0x8(%ebp)
   129a0:	74 23                	je     129c5 <task_set_ready+0x32>
        return;
    }

    list_insert_last(&g_task_manager.ready_list, &task->run_node);
   129a2:	8b 45 08             	mov    0x8(%ebp),%eax
   129a5:	83 c0 34             	add    $0x34,%eax
   129a8:	83 ec 08             	sub    $0x8,%esp
   129ab:	50                   	push   %eax
   129ac:	68 04 80 01 00       	push   $0x18004
   129b1:	e8 85 ed ff ff       	call   1173b <list_insert_last>
   129b6:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   129b9:	8b 45 08             	mov    0x8(%ebp),%eax
   129bc:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
   129c3:	eb 01                	jmp    129c6 <task_set_ready+0x33>
        return;
   129c5:	90                   	nop
}
   129c6:	c9                   	leave  
   129c7:	c3                   	ret    

000129c8 <task_set_block>:

// 将 特定 任务从就绪队列删除
void task_set_block(task_t* task) {
   129c8:	55                   	push   %ebp
   129c9:	89 e5                	mov    %esp,%ebp
   129cb:	83 ec 08             	sub    $0x8,%esp
    if (task == &g_task_manager.idle_task) {  // 空进程不应该删除
   129ce:	81 7d 08 e0 80 01 00 	cmpl   $0x180e0,0x8(%ebp)
   129d5:	74 19                	je     129f0 <task_set_block+0x28>
        return;
    }
    list_delete(&g_task_manager.ready_list, &task->run_node);
   129d7:	8b 45 08             	mov    0x8(%ebp),%eax
   129da:	83 c0 34             	add    $0x34,%eax
   129dd:	83 ec 08             	sub    $0x8,%esp
   129e0:	50                   	push   %eax
   129e1:	68 04 80 01 00       	push   $0x18004
   129e6:	e8 2d ee ff ff       	call   11818 <list_delete>
   129eb:	83 c4 10             	add    $0x10,%esp
   129ee:	eb 01                	jmp    129f1 <task_set_block+0x29>
        return;
   129f0:	90                   	nop
    // list_delete_first(&g_task_manager.ready_list);
}
   129f1:	c9                   	leave  
   129f2:	c3                   	ret    

000129f3 <sys_sched_yield>:

// 主动放弃cpu执行
int  sys_sched_yield() {
   129f3:	55                   	push   %ebp
   129f4:	89 e5                	mov    %esp,%ebp
   129f6:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   129f9:	e8 b4 e5 ff ff       	call   10fb2 <irq_enter_proection>
   129fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if(list_count(&g_task_manager.ready_list) > 1) {
   12a01:	83 ec 0c             	sub    $0xc,%esp
   12a04:	68 04 80 01 00       	push   $0x18004
   12a09:	e8 a8 fb ff ff       	call   125b6 <list_count>
   12a0e:	83 c4 10             	add    $0x10,%esp
   12a11:	83 f8 01             	cmp    $0x1,%eax
   12a14:	7e 29                	jle    12a3f <sys_sched_yield+0x4c>
        task_t* curr = task_current();
   12a16:	e8 6e ff ff ff       	call   12989 <task_current>
   12a1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   12a1e:	83 ec 0c             	sub    $0xc,%esp
   12a21:	ff 75 f0             	pushl  -0x10(%ebp)
   12a24:	e8 9f ff ff ff       	call   129c8 <task_set_block>
   12a29:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   12a2c:	83 ec 0c             	sub    $0xc,%esp
   12a2f:	ff 75 f0             	pushl  -0x10(%ebp)
   12a32:	e8 5c ff ff ff       	call   12993 <task_set_ready>
   12a37:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12a3a:	e8 58 00 00 00       	call   12a97 <task_dispatch>
    }
    
    irq_leave_proection(state);  //--leave protection
   12a3f:	83 ec 0c             	sub    $0xc,%esp
   12a42:	ff 75 f4             	pushl  -0xc(%ebp)
   12a45:	e8 80 e5 ff ff       	call   10fca <irq_leave_proection>
   12a4a:	83 c4 10             	add    $0x10,%esp

    return 0;
   12a4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12a52:	c9                   	leave  
   12a53:	c3                   	ret    

00012a54 <task_next_run>:

// 从就绪队列中找到一第一个任务
task_t * task_next_run() {
   12a54:	55                   	push   %ebp
   12a55:	89 e5                	mov    %esp,%ebp
   12a57:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&g_task_manager.ready_list) == 0) {
   12a5a:	68 04 80 01 00       	push   $0x18004
   12a5f:	e8 52 fb ff ff       	call   125b6 <list_count>
   12a64:	83 c4 04             	add    $0x4,%esp
   12a67:	85 c0                	test   %eax,%eax
   12a69:	75 07                	jne    12a72 <task_next_run+0x1e>
        return &g_task_manager.idle_task;
   12a6b:	b8 e0 80 01 00       	mov    $0x180e0,%eax
   12a70:	eb 23                	jmp    12a95 <task_next_run+0x41>
    }

    list_node_t * task_node = list_first(&g_task_manager.ready_list);
   12a72:	68 04 80 01 00       	push   $0x18004
   12a77:	e8 45 fb ff ff       	call   125c1 <list_first>
   12a7c:	83 c4 04             	add    $0x4,%esp
   12a7f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   12a82:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   12a86:	74 08                	je     12a90 <task_next_run+0x3c>
   12a88:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12a8b:	83 e8 34             	sub    $0x34,%eax
   12a8e:	eb 05                	jmp    12a95 <task_next_run+0x41>
   12a90:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12a95:	c9                   	leave  
   12a96:	c3                   	ret    

00012a97 <task_dispatch>:

// 分配一个任务并从当前任务切换过去
void task_dispatch() {
   12a97:	55                   	push   %ebp
   12a98:	89 e5                	mov    %esp,%ebp
   12a9a:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12a9d:	e8 10 e5 ff ff       	call   10fb2 <irq_enter_proection>
   12aa2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * to = task_next_run();
   12aa5:	e8 aa ff ff ff       	call   12a54 <task_next_run>
   12aaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != g_task_manager.curr_task) {
   12aad:	a1 00 80 01 00       	mov    0x18000,%eax
   12ab2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12ab5:	74 2b                	je     12ae2 <task_dispatch+0x4b>
        task_t * from = task_current();
   12ab7:	e8 cd fe ff ff       	call   12989 <task_current>
   12abc:	89 45 ec             	mov    %eax,-0x14(%ebp)

        g_task_manager.curr_task = to;   // 设置将要切换的任务为“当前任务”
   12abf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12ac2:	a3 00 80 01 00       	mov    %eax,0x18000
        to->state = TASK_RUNNING;      // 设置 task running
   12ac7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12aca:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

        task_switch_from_to(from, to);
   12ad1:	83 ec 08             	sub    $0x8,%esp
   12ad4:	ff 75 f0             	pushl  -0x10(%ebp)
   12ad7:	ff 75 ec             	pushl  -0x14(%ebp)
   12ada:	e8 07 fb ff ff       	call   125e6 <task_switch_from_to>
   12adf:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_proection(state);  //--leave protection
   12ae2:	83 ec 0c             	sub    $0xc,%esp
   12ae5:	ff 75 f4             	pushl  -0xc(%ebp)
   12ae8:	e8 dd e4 ff ff       	call   10fca <irq_leave_proection>
   12aed:	83 c4 10             	add    $0x10,%esp
   
}
   12af0:	90                   	nop
   12af1:	c9                   	leave  
   12af2:	c3                   	ret    

00012af3 <task_time_tick>:

// 检查当前任务的时间片是否用完，若用完强制切换到下一任务
void task_time_tick() {
   12af3:	55                   	push   %ebp
   12af4:	89 e5                	mov    %esp,%ebp
   12af6:	83 ec 28             	sub    $0x28,%esp
    task_t* curr = task_current();
   12af9:	e8 8b fe ff ff       	call   12989 <task_current>
   12afe:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int slice = --curr->slice_ticks;
   12b01:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b04:	8b 40 28             	mov    0x28(%eax),%eax
   12b07:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b0d:	89 50 28             	mov    %edx,0x28(%eax)
   12b10:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b13:	8b 40 28             	mov    0x28(%eax),%eax
   12b16:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if( slice == 0 && &g_task_manager.ready_list.count > 0) {
   12b19:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12b1d:	75 2d                	jne    12b4c <task_time_tick+0x59>
        curr->slice_ticks = curr->time_ticks;
   12b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b22:	8b 50 2c             	mov    0x2c(%eax),%edx
   12b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b28:	89 50 28             	mov    %edx,0x28(%eax)

        task_set_block(curr);
   12b2b:	83 ec 0c             	sub    $0xc,%esp
   12b2e:	ff 75 f0             	pushl  -0x10(%ebp)
   12b31:	e8 92 fe ff ff       	call   129c8 <task_set_block>
   12b36:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   12b39:	83 ec 0c             	sub    $0xc,%esp
   12b3c:	ff 75 f0             	pushl  -0x10(%ebp)
   12b3f:	e8 4f fe ff ff       	call   12993 <task_set_ready>
   12b44:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12b47:	e8 4b ff ff ff       	call   12a97 <task_dispatch>
    }

    list_node_t* sleep_lists_curr = list_first(&g_task_manager.sleep_list);
   12b4c:	83 ec 0c             	sub    $0xc,%esp
   12b4f:	68 10 80 01 00       	push   $0x18010
   12b54:	e8 68 fa ff ff       	call   125c1 <list_first>
   12b59:	83 c4 10             	add    $0x10,%esp
   12b5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   12b5f:	eb 62                	jmp    12bc3 <task_time_tick+0xd0>
        list_node_t * next = list_node_next(sleep_lists_curr);
   12b61:	83 ec 0c             	sub    $0xc,%esp
   12b64:	ff 75 f4             	pushl  -0xc(%ebp)
   12b67:	e8 3f fa ff ff       	call   125ab <list_node_next>
   12b6c:	83 c4 10             	add    $0x10,%esp
   12b6f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_t* task = list_node_parent(sleep_lists_curr, task_t, run_node);
   12b72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12b76:	74 08                	je     12b80 <task_time_tick+0x8d>
   12b78:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b7b:	83 e8 34             	sub    $0x34,%eax
   12b7e:	eb 05                	jmp    12b85 <task_time_tick+0x92>
   12b80:	b8 00 00 00 00       	mov    $0x0,%eax
   12b85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        
        if(--task->sleep_ticks == 0) {
   12b88:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12b8b:	8b 40 30             	mov    0x30(%eax),%eax
   12b8e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12b94:	89 50 30             	mov    %edx,0x30(%eax)
   12b97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12b9a:	8b 40 30             	mov    0x30(%eax),%eax
   12b9d:	85 c0                	test   %eax,%eax
   12b9f:	75 1c                	jne    12bbd <task_time_tick+0xca>
            task_set_wakeup(task);
   12ba1:	83 ec 0c             	sub    $0xc,%esp
   12ba4:	ff 75 e4             	pushl  -0x1c(%ebp)
   12ba7:	e8 b8 00 00 00       	call   12c64 <task_set_wakeup>
   12bac:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   12baf:	83 ec 0c             	sub    $0xc,%esp
   12bb2:	ff 75 e4             	pushl  -0x1c(%ebp)
   12bb5:	e8 d9 fd ff ff       	call   12993 <task_set_ready>
   12bba:	83 c4 10             	add    $0x10,%esp
        }
        sleep_lists_curr = next;
   12bbd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12bc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   12bc3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12bc7:	75 98                	jne    12b61 <task_time_tick+0x6e>
    }

    task_dispatch();
   12bc9:	e8 c9 fe ff ff       	call   12a97 <task_dispatch>
}
   12bce:	90                   	nop
   12bcf:	c9                   	leave  
   12bd0:	c3                   	ret    

00012bd1 <sys_sleep>:



void sys_sleep(uint32_t ms) {
   12bd1:	55                   	push   %ebp
   12bd2:	89 e5                	mov    %esp,%ebp
   12bd4:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12bd7:	e8 d6 e3 ff ff       	call   10fb2 <irq_enter_proection>
   12bdc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12bdf:	e8 a5 fd ff ff       	call   12989 <task_current>
   12be4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_block(curr);
   12be7:	83 ec 0c             	sub    $0xc,%esp
   12bea:	ff 75 f0             	pushl  -0x10(%ebp)
   12bed:	e8 d6 fd ff ff       	call   129c8 <task_set_block>
   12bf2:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(curr, ms / OS_TICK_MS);
   12bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf8:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   12bfd:	f7 e2                	mul    %edx
   12bff:	89 d0                	mov    %edx,%eax
   12c01:	c1 e8 03             	shr    $0x3,%eax
   12c04:	83 ec 08             	sub    $0x8,%esp
   12c07:	50                   	push   %eax
   12c08:	ff 75 f0             	pushl  -0x10(%ebp)
   12c0b:	e8 19 00 00 00       	call   12c29 <task_set_sleep>
   12c10:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   12c13:	e8 7f fe ff ff       	call   12a97 <task_dispatch>

    irq_leave_proection(state);
   12c18:	83 ec 0c             	sub    $0xc,%esp
   12c1b:	ff 75 f4             	pushl  -0xc(%ebp)
   12c1e:	e8 a7 e3 ff ff       	call   10fca <irq_leave_proection>
   12c23:	83 c4 10             	add    $0x10,%esp
}
   12c26:	90                   	nop
   12c27:	c9                   	leave  
   12c28:	c3                   	ret    

00012c29 <task_set_sleep>:

void task_set_sleep(task_t* task, uint32_t ticks) {
   12c29:	55                   	push   %ebp
   12c2a:	89 e5                	mov    %esp,%ebp
   12c2c:	83 ec 08             	sub    $0x8,%esp
    if(ticks <= 0) return;
   12c2f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12c33:	74 2c                	je     12c61 <task_set_sleep+0x38>
    task->sleep_ticks = ticks;
   12c35:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c38:	8b 45 08             	mov    0x8(%ebp),%eax
   12c3b:	89 50 30             	mov    %edx,0x30(%eax)
    task->state = TASK_SLEEP;
   12c3e:	8b 45 08             	mov    0x8(%ebp),%eax
   12c41:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
    list_insert_last(&g_task_manager.sleep_list, 
   12c48:	8b 45 08             	mov    0x8(%ebp),%eax
   12c4b:	83 c0 34             	add    $0x34,%eax
   12c4e:	83 ec 08             	sub    $0x8,%esp
   12c51:	50                   	push   %eax
   12c52:	68 10 80 01 00       	push   $0x18010
   12c57:	e8 df ea ff ff       	call   1173b <list_insert_last>
   12c5c:	83 c4 10             	add    $0x10,%esp
   12c5f:	eb 01                	jmp    12c62 <task_set_sleep+0x39>
    if(ticks <= 0) return;
   12c61:	90                   	nop
        &task->run_node);
}
   12c62:	c9                   	leave  
   12c63:	c3                   	ret    

00012c64 <task_set_wakeup>:

void task_set_wakeup(task_t* task) {
   12c64:	55                   	push   %ebp
   12c65:	89 e5                	mov    %esp,%ebp
   12c67:	83 ec 08             	sub    $0x8,%esp
    list_delete(&g_task_manager.sleep_list, 
   12c6a:	8b 45 08             	mov    0x8(%ebp),%eax
   12c6d:	83 c0 34             	add    $0x34,%eax
   12c70:	83 ec 08             	sub    $0x8,%esp
   12c73:	50                   	push   %eax
   12c74:	68 10 80 01 00       	push   $0x18010
   12c79:	e8 9a eb ff ff       	call   11818 <list_delete>
   12c7e:	83 c4 10             	add    $0x10,%esp
        &task->run_node);
   12c81:	90                   	nop
   12c82:	c9                   	leave  
   12c83:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
    .global first_task_entry
    .extern first_task_main

first_task_entry:

	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
#include <task.h>
#include <log.h>

int first_task_main() {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 10             	sub    $0x10,%esp
    int xx = 10;
80000016:	c7 45 fc 0a 00 00 00 	movl   $0xa,-0x4(%ebp)
    for(;;) {
        // klog("first task");
        int y = 1000;
8000001d:	c7 45 f8 e8 03 00 00 	movl   $0x3e8,-0x8(%ebp)
    for(;;) {
80000024:	eb f7                	jmp    8000001d <first_task_main+0xd>
