
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002ba9 memsz 0x00002ba9 flags r-x
    LOAD off    0x00004000 vaddr 0x00013000 paddr 0x00013000 align 2**12
         filesz 0x00000060 memsz 0x0000c120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002810  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000399  00012810  00012810  00003810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000060  00013000  00013000  00004000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000b120  00014000  00014000  00004060  2**12
                  ALLOC
  4 .debug_line   000011c8  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003508  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001122  00000000  00000000  00008730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001a0  00000000  00000000  00009858  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000e40  00000000  00000000  000099f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000a838  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00001170  00000000  00000000  0000a84c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012810 l    d  .rodata	00000000 .rodata
00013000 l    d  .data	00000000 .data
00014000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 mtime.c
000102bb l     F .text	0000001f outb
00014000 l     O .bss	00000004 sys_tick
00010302 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 gdt.c
0001037b l     F .text	00000028 lgdt
00014020 l     O .bss	00000800 g_gdt_table
00014820 l     O .bss	00000014 g_mutex
00000000 l    df *ABS*	00000000 init.c
00010557 l     F .text	0000000b list_count
00010562 l     F .text	0000000a list_first
0001056c l     F .text	0000000b list_last
00000000 l    df *ABS*	00000000 irq.c
000107ea l     F .text	00000007 hlt
000107f1 l     F .text	00000007 cli
000107f8 l     F .text	00000007 sti
000107ff l     F .text	00000028 lidt
00010827 l     F .text	0000001d inb
00010844 l     F .text	0000001f outb
00010863 l     F .text	00000010 read_eflags
00010873 l     F .text	0000000b write_eflags
00014840 l     O .bss	00000400 idt_table
0001087e l     F .text	00000030 default_handler
00010b55 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00013000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 list.c
000115b2 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000117ab l     F .text	0000001d inb
000117c8 l     F .text	0000001f outb
00014c40 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mem.c
00011962 l     F .text	0000000d down2
0001196f l     F .text	00000017 up2
00011986 l     F .text	0000000c write_cr3
00011992 l     F .text	00000011 mmu_set_page_dir
000119a3 l     F .text	00000014 pde_index
000119b7 l     F .text	00000027 pde_paddr
000119de l     F .text	00000010 pte_index
00015000 l     O .bss	00000028 g_paddr_alloc
00016000 l     O .bss	00001000 g_kernel_page_dir
000119ee l     F .text	00000058 addr_alloc_init
00011a46 l     F .text	00000067 addr_alloc_page
00011aad l     F .text	00000062 addr_free_page
00011bbc l     F .text	00000066 show_mem_info
00011c22 l     F .text	00000037 total_mem_size
00013020 l     O .data	00000040 kernel_map.2265
00000000 l    df *ABS*	00000000 mutex.c
00011f98 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00012122 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 task.c
00012266 l     F .text	00000007 hlt
0001226d l     F .text	0000001b list_node_init
00012288 l     F .text	0000000b list_node_next
00012293 l     F .text	0000000b list_count
0001229e l     F .text	0000000a list_first
000122a8 l     F .text	0000000a idle_task_func
00017000 l     O .bss	000000c0 g_task_manager
000170c0 l     O .bss	00002000 task1_stack
000190c0 l     O .bss	00002000 idle_task_stack
0001b0c0 l     O .bss	00002000 task3_stack
0001d0c0 l     O .bss	0000004c task3
0001d10c l     O .bss	00000010 sem_test
00010f52 g     F .text	0000003a bitmap_get_bit
00012515 g     F .text	0000000a task_current
00010ec0 g     F .text	00000018 irq_enter_proection
00011726 g     F .text	00000085 list_delete
00010e8a g     F .text	0000000b irq_enable_global
00011649 g     F .text	00000064 list_insert_last
0001251f g     F .text	00000035 task_set_ready
00010f8c g     F .text	0000001b bitmap_is_set
0001093a g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
0001246f g     F .text	00000039 task3_func
00010ac2 g     F .text	0000001c handle_virtual_exception
000117e7 g     F .text	0000009d log_init
000107aa g     F .text	00000040 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
0001051e g     F .text	00000039 gdt_free_sel
00013000 g       .data	00000000 s_data
000111e5 g     F .text	0000007a k_strncmp
000109e2 g     F .text	0000001c handle_segment_not_present
00010d6d g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
000108e6 g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
00011d09 g     F .text	00000080 memory_create_map
000101b3 g       .text	00000000 exception_handler_general_protection
0001223d g     F .text	00000029 sem_count
00010fa7 g     F .text	000000d4 bitmap_set_bit
00010a36 g     F .text	0000001c handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010e95 g     F .text	0000002b pic_send_eoi
00010000 g       .text	00000000 s_text
00011f13 g     F .text	00000085 memory_create_uvm
00012436 g     F .text	00000039 task1_func
00012150 g     F .text	0000006b sem_wait
0001112e g     F .text	00000047 k_strcpy
00011175 g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010429 g     F .text	00000080 gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
0001d120 g     O .bss	00002000 stack
0001275d g     F .text	00000058 sys_sleep
000105e7 g     F .text	00000163 list_test
00010972 g     F .text	0000001c handle_invalid_opcode
0001125f g     F .text	0000003b k_strlen
0001132a g     F .text	00000064 k_memcmp
000100e2 g       .text	00000000 exception_handler_bound_range
000121bb g     F .text	00000082 sem_notify
0001250b g     F .text	0000000a get_first_task
0001015c g       .text	00000000 exception_handler_invalid_tss
00011465 g     F .text	0000014d k_vsprint
000115ea g     F .text	0000005f list_insert_first
000127f0 g     F .text	00000020 task_set_wakeup
00010047 g       .text	00000000 exception_handler_divider
00011b0f g     F .text	000000ad some_test
00010a52 g     F .text	0000001c handle_fpu_error
00010e7f g     F .text	0000000b irq_disable_global
0001257f g     F .text	00000061 sys_sched_yield
0001f120 g       .bss	00000000 mem_free_start
000108ae g     F .text	0000001c handle_unknown
00010577 g     F .text	0000002b kernel_init
000112e9 g     F .text	00000041 k_memset
0001212d g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
000105a2 g     F .text	00000045 show_list
00011fd1 g     F .text	00000094 mutex_lock
00010229 g       .text	00000000 exception_handler_machine_check
00000000 g       *ABS*	00000000 kernel_base
000127b5 g     F .text	0000003b task_set_sleep
00010b25 g     F .text	00000030 irq_install
00010aa6 g     F .text	0000001c handle_smd_exception
00011fa3 g     F .text	0000002e mutex_init
000124a8 g     F .text	00000063 task1_func_init
00010df8 g     F .text	00000087 irq_disable
00010a1a g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
00010ed8 g     F .text	00000011 irq_leave_proection
00010ee9 g     F .text	00000016 bitmap_byte_count
00010a6e g     F .text	0000001c handle_alignment_check
00012623 g     F .text	0000005c task_dispatch
00010a8a g     F .text	0000001c handle_machine_check
000125e0 g     F .text	00000043 task_next_run
00011d89 g     F .text	0000009b create_kernel_table
000115c5 g     F .text	00000025 list_init
000109fe g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
00012554 g     F .text	0000002b task_set_block
00010956 g     F .text	0000001c handle_bound_range
000101ed g       .text	00000000 exception_handler_fpu_error
000122b2 g     F .text	0000001e task_switch_from_to
00010be8 g     F .text	00000185 irq_init
0001138e g     F .text	000000d7 k_itoa
00012065 g     F .text	000000bd mutex_unlock
000109aa g     F .text	0000001c handle_double_fault
000102da g     F .text	00000028 handle_time
000103a3 g     F .text	00000086 segment_desc_set
0001074a g     F .text	00000060 offset_test
00012ba9 g       .rodata	00000000 e_text
0001091e g     F .text	0000001c handle_breakpoint
00010eff g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
0001107b g     F .text	000000b3 bitmap_alloc_nbits
000123e1 g     F .text	00000055 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
0001267f g     F .text	000000de task_time_tick
00011e24 g     F .text	000000ef memory_init
0001098e g     F .text	0000001c handle_device_unavailable
000108ca g     F .text	0000001c handle_divider
0001129a g     F .text	0000004f k_memcpy
000122d0 g     F .text	00000111 task_init
000104a9 g     F .text	00000075 gdt_alloc_desc
000116ad g     F .text	00000079 list_delete_first
00010ade g     F .text	00000047 gate_desc_set
00011884 g     F .text	000000de klog
00010902 g     F .text	0000001c handle_NMI
000109c6 g     F .text	0000001c handle_invalid_tss
00011c59 g     F .text	000000b0 find_pte
00010363 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 6e 05 00 00       	call   10577 <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc 20 f1 01 00       	mov    $0x1f120,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 82 07 00 00       	jmp    107aa <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 75 08 00 00       	call   108ae <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 72 08 00 00       	call   108ca <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 6f 08 00 00       	call   108e6 <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 6c 08 00 00       	call   10902 <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 69 08 00 00       	call   1091e <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 66 08 00 00       	call   1093a <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 63 08 00 00       	call   10956 <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 60 08 00 00       	call   10972 <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 5d 08 00 00       	call   1098e <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 5c 08 00 00       	call   109aa <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 5b 08 00 00       	call   109c6 <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 5a 08 00 00       	call   109e2 <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 59 08 00 00       	call   109fe <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 58 08 00 00       	call   10a1a <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 57 08 00 00       	call   10a36 <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 54 08 00 00       	call   10a52 <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 53 08 00 00       	call   10a6e <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 50 08 00 00       	call   10a8a <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 4d 08 00 00       	call   10aa6 <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 4a 08 00 00       	call   10ac2 <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 43 00 00 00       	call   102da <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch

simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp
    
    sti
   102b9:	fb                   	sti    
   102ba:	c3                   	ret    

000102bb <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   102bb:	55                   	push   %ebp
   102bc:	89 e5                	mov    %esp,%ebp
   102be:	83 ec 08             	sub    $0x8,%esp
   102c1:	8b 55 08             	mov    0x8(%ebp),%edx
   102c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   102cb:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   102ce:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   102d2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   102d6:	ee                   	out    %al,(%dx)
}
   102d7:	90                   	nop
   102d8:	c9                   	leave  
   102d9:	c3                   	ret    

000102da <handle_time>:


static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   102da:	55                   	push   %ebp
   102db:	89 e5                	mov    %esp,%ebp
   102dd:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   102e0:	a1 00 40 01 00       	mov    0x14000,%eax
   102e5:	83 c0 01             	add    $0x1,%eax
   102e8:	a3 00 40 01 00       	mov    %eax,0x14000
    pic_send_eoi(IRQ0_TIMER);
   102ed:	83 ec 0c             	sub    $0xc,%esp
   102f0:	6a 20                	push   $0x20
   102f2:	e8 9e 0b 00 00       	call   10e95 <pic_send_eoi>
   102f7:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   102fa:	e8 80 23 00 00       	call   1267f <task_time_tick>
} 
   102ff:	90                   	nop
   10300:	c9                   	leave  
   10301:	c3                   	ret    

00010302 <pit_init>:

static void pit_init (void) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
   10305:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10308:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1030f:	6a 36                	push   $0x36
   10311:	6a 43                	push   $0x43
   10313:	e8 a3 ff ff ff       	call   102bb <outb>
   10318:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   1031b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1031e:	0f b6 c0             	movzbl %al,%eax
   10321:	50                   	push   %eax
   10322:	6a 40                	push   $0x40
   10324:	e8 92 ff ff ff       	call   102bb <outb>
   10329:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   1032c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1032f:	c1 e8 08             	shr    $0x8,%eax
   10332:	0f b6 c0             	movzbl %al,%eax
   10335:	50                   	push   %eax
   10336:	6a 40                	push   $0x40
   10338:	e8 7e ff ff ff       	call   102bb <outb>
   1033d:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   10340:	b8 86 02 01 00       	mov    $0x10286,%eax
   10345:	83 ec 08             	sub    $0x8,%esp
   10348:	50                   	push   %eax
   10349:	6a 20                	push   $0x20
   1034b:	e8 d5 07 00 00       	call   10b25 <irq_install>
   10350:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10353:	83 ec 0c             	sub    $0xc,%esp
   10356:	6a 20                	push   $0x20
   10358:	e8 10 0a 00 00       	call   10d6d <irq_enable>
   1035d:	83 c4 10             	add    $0x10,%esp
}
   10360:	90                   	nop
   10361:	c9                   	leave  
   10362:	c3                   	ret    

00010363 <time_init>:

void time_init() {
   10363:	55                   	push   %ebp
   10364:	89 e5                	mov    %esp,%ebp
   10366:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10369:	c7 05 00 40 01 00 00 	movl   $0x0,0x14000
   10370:	00 00 00 

    pit_init();
   10373:	e8 8a ff ff ff       	call   10302 <pit_init>
   10378:	90                   	nop
   10379:	c9                   	leave  
   1037a:	c3                   	ret    

0001037b <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1037b:	55                   	push   %ebp
   1037c:	89 e5                	mov    %esp,%ebp
   1037e:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   10381:	8b 45 08             	mov    0x8(%ebp),%eax
   10384:	c1 e8 10             	shr    $0x10,%eax
   10387:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   10392:	8b 45 0c             	mov    0xc(%ebp),%eax
   10395:	83 e8 01             	sub    $0x1,%eax
   10398:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1039c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   103a0:	90                   	nop
   103a1:	c9                   	leave  
   103a2:	c3                   	ret    

000103a3 <segment_desc_set>:


static segment_desc_t g_gdt_table[GDT_TABLE_SIZE];
static mutex_t g_mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   103a3:	55                   	push   %ebp
   103a4:	89 e5                	mov    %esp,%ebp
   103a6:	83 ec 14             	sub    $0x14,%esp
   103a9:	8b 45 14             	mov    0x14(%ebp),%eax
   103ac:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = g_gdt_table + (selector >> 3);
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	c1 f8 03             	sar    $0x3,%eax
   103b6:	c1 e0 03             	shl    $0x3,%eax
   103b9:	05 20 40 01 00       	add    $0x14020,%eax
   103be:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   103c1:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   103c8:	76 0f                	jbe    103d9 <segment_desc_set+0x36>
		attr |= 0x8000;
   103ca:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   103d0:	8b 45 10             	mov    0x10(%ebp),%eax
   103d3:	c1 e8 0c             	shr    $0xc,%eax
   103d6:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   103d9:	8b 45 10             	mov    0x10(%ebp),%eax
   103dc:	89 c2                	mov    %eax,%edx
   103de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103e1:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   103e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103e7:	89 c2                	mov    %eax,%edx
   103e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103ec:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   103f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   103f3:	c1 e8 10             	shr    $0x10,%eax
   103f6:	89 c2                	mov    %eax,%edx
   103f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103fb:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   103fe:	8b 45 10             	mov    0x10(%ebp),%eax
   10401:	c1 e8 10             	shr    $0x10,%eax
   10404:	c1 e0 08             	shl    $0x8,%eax
   10407:	66 25 00 0f          	and    $0xf00,%ax
   1040b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1040f:	89 c2                	mov    %eax,%edx
   10411:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10414:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10418:	8b 45 0c             	mov    0xc(%ebp),%eax
   1041b:	c1 e8 18             	shr    $0x18,%eax
   1041e:	89 c2                	mov    %eax,%edx
   10420:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10423:	88 50 07             	mov    %dl,0x7(%eax)
}
   10426:	90                   	nop
   10427:	c9                   	leave  
   10428:	c3                   	ret    

00010429 <gdt_init>:

void gdt_init() {
   10429:	55                   	push   %ebp
   1042a:	89 e5                	mov    %esp,%ebp
   1042c:	83 ec 18             	sub    $0x18,%esp
    mutex_init(&g_mutex);
   1042f:	83 ec 0c             	sub    $0xc,%esp
   10432:	68 20 48 01 00       	push   $0x14820
   10437:	e8 67 1b 00 00       	call   11fa3 <mutex_init>
   1043c:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1043f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10446:	eb 19                	jmp    10461 <gdt_init+0x38>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10448:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1044b:	c1 e0 03             	shl    $0x3,%eax
   1044e:	6a 00                	push   $0x0
   10450:	6a 00                	push   $0x0
   10452:	6a 00                	push   $0x0
   10454:	50                   	push   %eax
   10455:	e8 49 ff ff ff       	call   103a3 <segment_desc_set>
   1045a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1045d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10461:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10468:	7e de                	jle    10448 <gdt_init+0x1f>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1046a:	68 92 c0 00 00       	push   $0xc092
   1046f:	6a ff                	push   $0xffffffff
   10471:	6a 00                	push   $0x0
   10473:	6a 10                	push   $0x10
   10475:	e8 29 ff ff ff       	call   103a3 <segment_desc_set>
   1047a:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1047d:	68 9a c0 00 00       	push   $0xc09a
   10482:	6a ff                	push   $0xffffffff
   10484:	6a 00                	push   $0x0
   10486:	6a 08                	push   $0x8
   10488:	e8 16 ff ff ff       	call   103a3 <segment_desc_set>
   1048d:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)g_gdt_table, sizeof(g_gdt_table));
   10490:	b8 20 40 01 00       	mov    $0x14020,%eax
   10495:	83 ec 08             	sub    $0x8,%esp
   10498:	68 00 08 00 00       	push   $0x800
   1049d:	50                   	push   %eax
   1049e:	e8 d8 fe ff ff       	call   1037b <lgdt>
   104a3:	83 c4 10             	add    $0x10,%esp

}
   104a6:	90                   	nop
   104a7:	c9                   	leave  
   104a8:	c3                   	ret    

000104a9 <gdt_alloc_desc>:

int  gdt_alloc_desc() {
   104a9:	55                   	push   %ebp
   104aa:	89 e5                	mov    %esp,%ebp
   104ac:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&g_mutex);
   104af:	83 ec 0c             	sub    $0xc,%esp
   104b2:	68 20 48 01 00       	push   $0x14820
   104b7:	e8 15 1b 00 00       	call   11fd1 <mutex_lock>
   104bc:	83 c4 10             	add    $0x10,%esp
    int i = 1;
   104bf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    for(; i < GDT_TABLE_SIZE; i++) {
   104c6:	eb 36                	jmp    104fe <gdt_alloc_desc+0x55>
        segment_desc_t* desc = g_gdt_table + i;
   104c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104cb:	c1 e0 03             	shl    $0x3,%eax
   104ce:	05 20 40 01 00       	add    $0x14020,%eax
   104d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(desc->attr == 0) {
   104d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   104d9:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104dd:	66 85 c0             	test   %ax,%ax
   104e0:	75 18                	jne    104fa <gdt_alloc_desc+0x51>
            mutex_unlock(&g_mutex);
   104e2:	83 ec 0c             	sub    $0xc,%esp
   104e5:	68 20 48 01 00       	push   $0x14820
   104ea:	e8 76 1b 00 00       	call   12065 <mutex_unlock>
   104ef:	83 c4 10             	add    $0x10,%esp
            return ( i * sizeof(segment_desc_t) );
   104f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104f5:	c1 e0 03             	shl    $0x3,%eax
   104f8:	eb 22                	jmp    1051c <gdt_alloc_desc+0x73>
    for(; i < GDT_TABLE_SIZE; i++) {
   104fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104fe:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10505:	7e c1                	jle    104c8 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&g_mutex);
   10507:	83 ec 0c             	sub    $0xc,%esp
   1050a:	68 20 48 01 00       	push   $0x14820
   1050f:	e8 51 1b 00 00       	call   12065 <mutex_unlock>
   10514:	83 c4 10             	add    $0x10,%esp
    return -1;
   10517:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1051c:	c9                   	leave  
   1051d:	c3                   	ret    

0001051e <gdt_free_sel>:

void gdt_free_sel(int sel) {
   1051e:	55                   	push   %ebp
   1051f:	89 e5                	mov    %esp,%ebp
   10521:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&g_mutex);
   10524:	83 ec 0c             	sub    $0xc,%esp
   10527:	68 20 48 01 00       	push   $0x14820
   1052c:	e8 a0 1a 00 00       	call   11fd1 <mutex_lock>
   10531:	83 c4 10             	add    $0x10,%esp
    g_gdt_table[sel/sizeof(segment_desc_t)].attr = 0;
   10534:	8b 45 08             	mov    0x8(%ebp),%eax
   10537:	c1 e8 03             	shr    $0x3,%eax
   1053a:	66 c7 04 c5 25 40 01 	movw   $0x0,0x14025(,%eax,8)
   10541:	00 00 00 
    mutex_unlock(&g_mutex);
   10544:	83 ec 0c             	sub    $0xc,%esp
   10547:	68 20 48 01 00       	push   $0x14820
   1054c:	e8 14 1b 00 00       	call   12065 <mutex_unlock>
   10551:	83 c4 10             	add    $0x10,%esp
}
   10554:	90                   	nop
   10555:	c9                   	leave  
   10556:	c3                   	ret    

00010557 <list_count>:

static inline int list_is_empty (list_t* list) {
    return list->count == 0;
}

static inline int list_count (list_t* list) {
   10557:	55                   	push   %ebp
   10558:	89 e5                	mov    %esp,%ebp
    return list->count;
   1055a:	8b 45 08             	mov    0x8(%ebp),%eax
   1055d:	8b 40 08             	mov    0x8(%eax),%eax
}
   10560:	5d                   	pop    %ebp
   10561:	c3                   	ret    

00010562 <list_first>:

static inline list_node_t* list_first (list_t* list) {
   10562:	55                   	push   %ebp
   10563:	89 e5                	mov    %esp,%ebp
    return list->first;
   10565:	8b 45 08             	mov    0x8(%ebp),%eax
   10568:	8b 00                	mov    (%eax),%eax
}
   1056a:	5d                   	pop    %ebp
   1056b:	c3                   	ret    

0001056c <list_last>:

static inline list_node_t* list_last (list_t* list) {
   1056c:	55                   	push   %ebp
   1056d:	89 e5                	mov    %esp,%ebp
    return list->last;
   1056f:	8b 45 08             	mov    0x8(%ebp),%eax
   10572:	8b 40 04             	mov    0x4(%eax),%eax
}
   10575:	5d                   	pop    %ebp
   10576:	c3                   	ret    

00010577 <kernel_init>:

// void test_mem_page() {}
    // *(uint8_t*)test_mem_page = 0x12;
    // *(uint8_t*)test_mem_page = 0x34;

void kernel_init (boot_info_t * boot_info) {
   10577:	55                   	push   %ebp
   10578:	89 e5                	mov    %esp,%ebp
   1057a:	83 ec 08             	sub    $0x8,%esp
    log_init();
   1057d:	e8 65 12 00 00       	call   117e7 <log_init>
    gdt_init();
   10582:	e8 a2 fe ff ff       	call   10429 <gdt_init>
    memory_init(boot_info);
   10587:	83 ec 0c             	sub    $0xc,%esp
   1058a:	ff 75 08             	pushl  0x8(%ebp)
   1058d:	e8 92 18 00 00       	call   11e24 <memory_init>
   10592:	83 c4 10             	add    $0x10,%esp
    irq_init();
   10595:	e8 4e 06 00 00       	call   10be8 <irq_init>
    time_init();
   1059a:	e8 c4 fd ff ff       	call   10363 <time_init>
}
   1059f:	90                   	nop
   105a0:	c9                   	leave  
   105a1:	c3                   	ret    

000105a2 <show_list>:


void show_list(list_t list) {
   105a2:	55                   	push   %ebp
   105a3:	89 e5                	mov    %esp,%ebp
   105a5:	56                   	push   %esi
   105a6:	53                   	push   %ebx
    klog("list: first=0x%x, last=0x%x, count=%d",
   105a7:	8d 45 08             	lea    0x8(%ebp),%eax
   105aa:	50                   	push   %eax
   105ab:	e8 a7 ff ff ff       	call   10557 <list_count>
   105b0:	83 c4 04             	add    $0x4,%esp
   105b3:	89 c6                	mov    %eax,%esi
   105b5:	8d 45 08             	lea    0x8(%ebp),%eax
   105b8:	50                   	push   %eax
   105b9:	e8 ae ff ff ff       	call   1056c <list_last>
   105be:	83 c4 04             	add    $0x4,%esp
   105c1:	89 c3                	mov    %eax,%ebx
   105c3:	8d 45 08             	lea    0x8(%ebp),%eax
   105c6:	50                   	push   %eax
   105c7:	e8 96 ff ff ff       	call   10562 <list_first>
   105cc:	83 c4 04             	add    $0x4,%esp
   105cf:	56                   	push   %esi
   105d0:	53                   	push   %ebx
   105d1:	50                   	push   %eax
   105d2:	68 10 28 01 00       	push   $0x12810
   105d7:	e8 a8 12 00 00       	call   11884 <klog>
   105dc:	83 c4 10             	add    $0x10,%esp
         list_first(&list), list_last(&list), list_count(&list) );
}
   105df:	90                   	nop
   105e0:	8d 65 f8             	lea    -0x8(%ebp),%esp
   105e3:	5b                   	pop    %ebx
   105e4:	5e                   	pop    %esi
   105e5:	5d                   	pop    %ebp
   105e6:	c3                   	ret    

000105e7 <list_test>:

void list_test() {
   105e7:	55                   	push   %ebp
   105e8:	89 e5                	mov    %esp,%ebp
   105ea:	83 ec 58             	sub    $0x58,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   105ed:	83 ec 0c             	sub    $0xc,%esp
   105f0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105f3:	50                   	push   %eax
   105f4:	e8 cc 0f 00 00       	call   115c5 <list_init>
   105f9:	83 c4 10             	add    $0x10,%esp

    show_list(list);
   105fc:	83 ec 04             	sub    $0x4,%esp
   105ff:	ff 75 dc             	pushl  -0x24(%ebp)
   10602:	ff 75 d8             	pushl  -0x28(%ebp)
   10605:	ff 75 d4             	pushl  -0x2c(%ebp)
   10608:	e8 95 ff ff ff       	call   105a2 <show_list>
   1060d:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10610:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10617:	eb 3f                	jmp    10658 <list_test+0x71>
        list_node_t * node = nodes + i;
   10619:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1061c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   10623:	8d 45 ac             	lea    -0x54(%ebp),%eax
   10626:	01 d0                	add    %edx,%eax
   10628:	89 45 e0             	mov    %eax,-0x20(%ebp)
        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   1062b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1062e:	83 ec 04             	sub    $0x4,%esp
   10631:	50                   	push   %eax
   10632:	ff 75 f4             	pushl  -0xc(%ebp)
   10635:	68 38 28 01 00       	push   $0x12838
   1063a:	e8 45 12 00 00       	call   11884 <klog>
   1063f:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   10642:	83 ec 08             	sub    $0x8,%esp
   10645:	ff 75 e0             	pushl  -0x20(%ebp)
   10648:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   1064b:	50                   	push   %eax
   1064c:	e8 99 0f 00 00       	call   115ea <list_insert_first>
   10651:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10654:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10658:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1065c:	7e bb                	jle    10619 <list_test+0x32>
    }
    show_list(list);
   1065e:	83 ec 04             	sub    $0x4,%esp
   10661:	ff 75 dc             	pushl  -0x24(%ebp)
   10664:	ff 75 d8             	pushl  -0x28(%ebp)
   10667:	ff 75 d4             	pushl  -0x2c(%ebp)
   1066a:	e8 33 ff ff ff       	call   105a2 <show_list>
   1066f:	83 c4 10             	add    $0x10,%esp

    list_init(&list);
   10672:	83 ec 0c             	sub    $0xc,%esp
   10675:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10678:	50                   	push   %eax
   10679:	e8 47 0f 00 00       	call   115c5 <list_init>
   1067e:	83 c4 10             	add    $0x10,%esp
    show_list(list);
   10681:	83 ec 04             	sub    $0x4,%esp
   10684:	ff 75 dc             	pushl  -0x24(%ebp)
   10687:	ff 75 d8             	pushl  -0x28(%ebp)
   1068a:	ff 75 d4             	pushl  -0x2c(%ebp)
   1068d:	e8 10 ff ff ff       	call   105a2 <show_list>
   10692:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10695:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1069c:	eb 3f                	jmp    106dd <list_test+0xf6>
        list_node_t * node = nodes + i;
   1069e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   106a8:	8d 45 ac             	lea    -0x54(%ebp),%eax
   106ab:	01 d0                	add    %edx,%eax
   106ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   106b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106b3:	83 ec 04             	sub    $0x4,%esp
   106b6:	50                   	push   %eax
   106b7:	ff 75 f0             	pushl  -0x10(%ebp)
   106ba:	68 38 28 01 00       	push   $0x12838
   106bf:	e8 c0 11 00 00       	call   11884 <klog>
   106c4:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   106c7:	83 ec 08             	sub    $0x8,%esp
   106ca:	ff 75 e4             	pushl  -0x1c(%ebp)
   106cd:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   106d0:	50                   	push   %eax
   106d1:	e8 73 0f 00 00       	call   11649 <list_insert_last>
   106d6:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   106d9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   106dd:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   106e1:	7e bb                	jle    1069e <list_test+0xb7>
    }
    show_list(list);
   106e3:	83 ec 04             	sub    $0x4,%esp
   106e6:	ff 75 dc             	pushl  -0x24(%ebp)
   106e9:	ff 75 d8             	pushl  -0x28(%ebp)
   106ec:	ff 75 d4             	pushl  -0x2c(%ebp)
   106ef:	e8 ae fe ff ff       	call   105a2 <show_list>
   106f4:	83 c4 10             	add    $0x10,%esp
    
    for(int i=0; i<5; i++) {
   106f7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   106fe:	eb 2d                	jmp    1072d <list_test+0x146>
        list_node_t* node = list_delete_first(&list);
   10700:	83 ec 0c             	sub    $0xc,%esp
   10703:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10706:	50                   	push   %eax
   10707:	e8 a1 0f 00 00       	call   116ad <list_delete_first>
   1070c:	83 c4 10             	add    $0x10,%esp
   1070f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("delete first from list: %d, 0x%x", i, (uint32_t)node);
   10712:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10715:	83 ec 04             	sub    $0x4,%esp
   10718:	50                   	push   %eax
   10719:	ff 75 ec             	pushl  -0x14(%ebp)
   1071c:	68 58 28 01 00       	push   $0x12858
   10721:	e8 5e 11 00 00       	call   11884 <klog>
   10726:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10729:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1072d:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   10731:	7e cd                	jle    10700 <list_test+0x119>
    }

    show_list(list);
   10733:	83 ec 04             	sub    $0x4,%esp
   10736:	ff 75 dc             	pushl  -0x24(%ebp)
   10739:	ff 75 d8             	pushl  -0x28(%ebp)
   1073c:	ff 75 d4             	pushl  -0x2c(%ebp)
   1073f:	e8 5e fe ff ff       	call   105a2 <show_list>
   10744:	83 c4 10             	add    $0x10,%esp

}
   10747:	90                   	nop
   10748:	c9                   	leave  
   10749:	c3                   	ret    

0001074a <offset_test>:

void offset_test() {
   1074a:	55                   	push   %ebp
   1074b:	89 e5                	mov    %esp,%ebp
   1074d:	83 ec 28             	sub    $0x28,%esp
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   10750:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   10757:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1075e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10765:	c7 45 e4 56 34 12 00 	movl   $0x123456,-0x1c(%ebp)

    list_node_t * v_node = &v.node;
   1076c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   1076f:	83 c0 04             	add    $0x4,%eax
   10772:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   10775:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10779:	74 08                	je     10783 <offset_test+0x39>
   1077b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1077e:	83 e8 04             	sub    $0x4,%eax
   10781:	eb 05                	jmp    10788 <offset_test+0x3e>
   10783:	b8 00 00 00 00       	mov    $0x0,%eax
   10788:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    if(p->i != 0x123456) {
   1078b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1078e:	8b 00                	mov    (%eax),%eax
   10790:	3d 56 34 12 00       	cmp    $0x123456,%eax
   10795:	74 10                	je     107a7 <offset_test+0x5d>
        klog("error");
   10797:	83 ec 0c             	sub    $0xc,%esp
   1079a:	68 79 28 01 00       	push   $0x12879
   1079f:	e8 e0 10 00 00       	call   11884 <klog>
   107a4:	83 c4 10             	add    $0x10,%esp
    }
}
   107a7:	90                   	nop
   107a8:	c9                   	leave  
   107a9:	c3                   	ret    

000107aa <init_main>:


void init_main() {
   107aa:	55                   	push   %ebp
   107ab:	89 e5                	mov    %esp,%ebp
   107ad:	83 ec 08             	sub    $0x8,%esp
    klog("Kernal %s is running ... ", "1.0.0");
   107b0:	83 ec 08             	sub    $0x8,%esp
   107b3:	68 7f 28 01 00       	push   $0x1287f
   107b8:	68 85 28 01 00       	push   $0x12885
   107bd:	e8 c2 10 00 00       	call   11884 <klog>
   107c2:	83 c4 10             	add    $0x10,%esp

    task_manager_init();
   107c5:	e8 17 1c 00 00       	call   123e1 <task_manager_init>
    task1_func_init();
   107ca:	e8 d9 1c 00 00       	call   124a8 <task1_func_init>
    irq_enable_global();
   107cf:	e8 b6 06 00 00       	call   10e8a <irq_enable_global>
    
    task_switch_from_to(0, get_first_task());
   107d4:	e8 32 1d 00 00       	call   1250b <get_first_task>
   107d9:	83 ec 08             	sub    $0x8,%esp
   107dc:	50                   	push   %eax
   107dd:	6a 00                	push   $0x0
   107df:	e8 ce 1a 00 00       	call   122b2 <task_switch_from_to>
   107e4:	83 c4 10             	add    $0x10,%esp
   107e7:	90                   	nop
   107e8:	c9                   	leave  
   107e9:	c3                   	ret    

000107ea <hlt>:
static inline void hlt() {
   107ea:	55                   	push   %ebp
   107eb:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   107ed:	f4                   	hlt    
}
   107ee:	90                   	nop
   107ef:	5d                   	pop    %ebp
   107f0:	c3                   	ret    

000107f1 <cli>:
static inline void cli() {
   107f1:	55                   	push   %ebp
   107f2:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   107f4:	fa                   	cli    
}
   107f5:	90                   	nop
   107f6:	5d                   	pop    %ebp
   107f7:	c3                   	ret    

000107f8 <sti>:
static inline void sti() {
   107f8:	55                   	push   %ebp
   107f9:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   107fb:	fb                   	sti    
}
   107fc:	90                   	nop
   107fd:	5d                   	pop    %ebp
   107fe:	c3                   	ret    

000107ff <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   107ff:	55                   	push   %ebp
   10800:	89 e5                	mov    %esp,%ebp
   10802:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   10805:	8b 45 08             	mov    0x8(%ebp),%eax
   10808:	c1 e8 10             	shr    $0x10,%eax
   1080b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   1080f:	8b 45 08             	mov    0x8(%ebp),%eax
   10812:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   10816:	8b 45 0c             	mov    0xc(%ebp),%eax
   10819:	83 e8 01             	sub    $0x1,%eax
   1081c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   10820:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10824:	90                   	nop
   10825:	c9                   	leave  
   10826:	c3                   	ret    

00010827 <inb>:
static inline uint8_t inb(uint16_t  port) {
   10827:	55                   	push   %ebp
   10828:	89 e5                	mov    %esp,%ebp
   1082a:	83 ec 14             	sub    $0x14,%esp
   1082d:	8b 45 08             	mov    0x8(%ebp),%eax
   10830:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   10834:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10838:	89 c2                	mov    %eax,%edx
   1083a:	ec                   	in     (%dx),%al
   1083b:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   1083e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10842:	c9                   	leave  
   10843:	c3                   	ret    

00010844 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10844:	55                   	push   %ebp
   10845:	89 e5                	mov    %esp,%ebp
   10847:	83 ec 08             	sub    $0x8,%esp
   1084a:	8b 55 08             	mov    0x8(%ebp),%edx
   1084d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10850:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10854:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   10857:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1085b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1085f:	ee                   	out    %al,(%dx)
}
   10860:	90                   	nop
   10861:	c9                   	leave  
   10862:	c3                   	ret    

00010863 <read_eflags>:

static inline void write_tr (uint16_t tss_selector) {
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
}

static inline uint32_t read_eflags() {
   10863:	55                   	push   %ebp
   10864:	89 e5                	mov    %esp,%ebp
   10866:	83 ec 10             	sub    $0x10,%esp
	uint32_t eflags;

	__asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   10869:	9c                   	pushf  
   1086a:	58                   	pop    %eax
   1086b:	89 45 fc             	mov    %eax,-0x4(%ebp)

	return eflags;
   1086e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10871:	c9                   	leave  
   10872:	c3                   	ret    

00010873 <write_eflags>:

static inline void write_eflags(uint32_t eflags) {
   10873:	55                   	push   %ebp
   10874:	89 e5                	mov    %esp,%ebp

	__asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   10876:	8b 45 08             	mov    0x8(%ebp),%eax
   10879:	50                   	push   %eax
   1087a:	9d                   	popf   


}
   1087b:	90                   	nop
   1087c:	5d                   	pop    %ebp
   1087d:	c3                   	ret    

0001087e <default_handler>:

//  -----------------------------------------   中断相关    -------------------------------------------
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void default_handler (exception_frame_t * frame, const char * message) {
   1087e:	55                   	push   %ebp
   1087f:	89 e5                	mov    %esp,%ebp
   10881:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   10884:	83 ec 0c             	sub    $0xc,%esp
   10887:	68 a0 28 01 00       	push   $0x128a0
   1088c:	e8 f3 0f 00 00       	call   11884 <klog>
   10891:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   10894:	83 ec 08             	sub    $0x8,%esp
   10897:	ff 75 0c             	pushl  0xc(%ebp)
   1089a:	68 c1 28 01 00       	push   $0x128c1
   1089f:	e8 e0 0f 00 00       	call   11884 <klog>
   108a4:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   108a7:	e8 3e ff ff ff       	call   107ea <hlt>
   108ac:	eb f9                	jmp    108a7 <default_handler+0x29>

000108ae <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   108ae:	55                   	push   %ebp
   108af:	89 e5                	mov    %esp,%ebp
   108b1:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   108b4:	83 ec 08             	sub    $0x8,%esp
   108b7:	68 dc 28 01 00       	push   $0x128dc
   108bc:	ff 75 08             	pushl  0x8(%ebp)
   108bf:	e8 ba ff ff ff       	call   1087e <default_handler>
   108c4:	83 c4 10             	add    $0x10,%esp
}
   108c7:	90                   	nop
   108c8:	c9                   	leave  
   108c9:	c3                   	ret    

000108ca <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   108ca:	55                   	push   %ebp
   108cb:	89 e5                	mov    %esp,%ebp
   108cd:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   108d0:	83 ec 08             	sub    $0x8,%esp
   108d3:	68 ef 28 01 00       	push   $0x128ef
   108d8:	ff 75 08             	pushl  0x8(%ebp)
   108db:	e8 9e ff ff ff       	call   1087e <default_handler>
   108e0:	83 c4 10             	add    $0x10,%esp
}
   108e3:	90                   	nop
   108e4:	c9                   	leave  
   108e5:	c3                   	ret    

000108e6 <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   108e6:	55                   	push   %ebp
   108e7:	89 e5                	mov    %esp,%ebp
   108e9:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   108ec:	83 ec 08             	sub    $0x8,%esp
   108ef:	68 fe 28 01 00       	push   $0x128fe
   108f4:	ff 75 08             	pushl  0x8(%ebp)
   108f7:	e8 82 ff ff ff       	call   1087e <default_handler>
   108fc:	83 c4 10             	add    $0x10,%esp
}
   108ff:	90                   	nop
   10900:	c9                   	leave  
   10901:	c3                   	ret    

00010902 <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   10902:	55                   	push   %ebp
   10903:	89 e5                	mov    %esp,%ebp
   10905:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   10908:	83 ec 08             	sub    $0x8,%esp
   1090b:	68 0e 29 01 00       	push   $0x1290e
   10910:	ff 75 08             	pushl  0x8(%ebp)
   10913:	e8 66 ff ff ff       	call   1087e <default_handler>
   10918:	83 c4 10             	add    $0x10,%esp
}
   1091b:	90                   	nop
   1091c:	c9                   	leave  
   1091d:	c3                   	ret    

0001091e <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   1091e:	55                   	push   %ebp
   1091f:	89 e5                	mov    %esp,%ebp
   10921:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   10924:	83 ec 08             	sub    $0x8,%esp
   10927:	68 1d 29 01 00       	push   $0x1291d
   1092c:	ff 75 08             	pushl  0x8(%ebp)
   1092f:	e8 4a ff ff ff       	call   1087e <default_handler>
   10934:	83 c4 10             	add    $0x10,%esp
}
   10937:	90                   	nop
   10938:	c9                   	leave  
   10939:	c3                   	ret    

0001093a <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   1093a:	55                   	push   %ebp
   1093b:	89 e5                	mov    %esp,%ebp
   1093d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   10940:	83 ec 08             	sub    $0x8,%esp
   10943:	68 29 29 01 00       	push   $0x12929
   10948:	ff 75 08             	pushl  0x8(%ebp)
   1094b:	e8 2e ff ff ff       	call   1087e <default_handler>
   10950:	83 c4 10             	add    $0x10,%esp
}
   10953:	90                   	nop
   10954:	c9                   	leave  
   10955:	c3                   	ret    

00010956 <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   10956:	55                   	push   %ebp
   10957:	89 e5                	mov    %esp,%ebp
   10959:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   1095c:	83 ec 08             	sub    $0x8,%esp
   1095f:	68 33 29 01 00       	push   $0x12933
   10964:	ff 75 08             	pushl  0x8(%ebp)
   10967:	e8 12 ff ff ff       	call   1087e <default_handler>
   1096c:	83 c4 10             	add    $0x10,%esp
}
   1096f:	90                   	nop
   10970:	c9                   	leave  
   10971:	c3                   	ret    

00010972 <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   10972:	55                   	push   %ebp
   10973:	89 e5                	mov    %esp,%ebp
   10975:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   10978:	83 ec 08             	sub    $0x8,%esp
   1097b:	68 49 29 01 00       	push   $0x12949
   10980:	ff 75 08             	pushl  0x8(%ebp)
   10983:	e8 f6 fe ff ff       	call   1087e <default_handler>
   10988:	83 c4 10             	add    $0x10,%esp
}
   1098b:	90                   	nop
   1098c:	c9                   	leave  
   1098d:	c3                   	ret    

0001098e <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   1098e:	55                   	push   %ebp
   1098f:	89 e5                	mov    %esp,%ebp
   10991:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   10994:	83 ec 08             	sub    $0x8,%esp
   10997:	68 59 29 01 00       	push   $0x12959
   1099c:	ff 75 08             	pushl  0x8(%ebp)
   1099f:	e8 da fe ff ff       	call   1087e <default_handler>
   109a4:	83 c4 10             	add    $0x10,%esp
}
   109a7:	90                   	nop
   109a8:	c9                   	leave  
   109a9:	c3                   	ret    

000109aa <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   109aa:	55                   	push   %ebp
   109ab:	89 e5                	mov    %esp,%ebp
   109ad:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   109b0:	83 ec 08             	sub    $0x8,%esp
   109b3:	68 6f 29 01 00       	push   $0x1296f
   109b8:	ff 75 08             	pushl  0x8(%ebp)
   109bb:	e8 be fe ff ff       	call   1087e <default_handler>
   109c0:	83 c4 10             	add    $0x10,%esp
}
   109c3:	90                   	nop
   109c4:	c9                   	leave  
   109c5:	c3                   	ret    

000109c6 <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   109c6:	55                   	push   %ebp
   109c7:	89 e5                	mov    %esp,%ebp
   109c9:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   109cc:	83 ec 08             	sub    $0x8,%esp
   109cf:	68 7d 29 01 00       	push   $0x1297d
   109d4:	ff 75 08             	pushl  0x8(%ebp)
   109d7:	e8 a2 fe ff ff       	call   1087e <default_handler>
   109dc:	83 c4 10             	add    $0x10,%esp
}
   109df:	90                   	nop
   109e0:	c9                   	leave  
   109e1:	c3                   	ret    

000109e2 <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   109e2:	55                   	push   %ebp
   109e3:	89 e5                	mov    %esp,%ebp
   109e5:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   109e8:	83 ec 08             	sub    $0x8,%esp
   109eb:	68 89 29 01 00       	push   $0x12989
   109f0:	ff 75 08             	pushl  0x8(%ebp)
   109f3:	e8 86 fe ff ff       	call   1087e <default_handler>
   109f8:	83 c4 10             	add    $0x10,%esp
}
   109fb:	90                   	nop
   109fc:	c9                   	leave  
   109fd:	c3                   	ret    

000109fe <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   109fe:	55                   	push   %ebp
   109ff:	89 e5                	mov    %esp,%ebp
   10a01:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   10a04:	83 ec 08             	sub    $0x8,%esp
   10a07:	68 9e 29 01 00       	push   $0x1299e
   10a0c:	ff 75 08             	pushl  0x8(%ebp)
   10a0f:	e8 6a fe ff ff       	call   1087e <default_handler>
   10a14:	83 c4 10             	add    $0x10,%esp
}
   10a17:	90                   	nop
   10a18:	c9                   	leave  
   10a19:	c3                   	ret    

00010a1a <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   10a1a:	55                   	push   %ebp
   10a1b:	89 e5                	mov    %esp,%ebp
   10a1d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   10a20:	83 ec 08             	sub    $0x8,%esp
   10a23:	68 b4 29 01 00       	push   $0x129b4
   10a28:	ff 75 08             	pushl  0x8(%ebp)
   10a2b:	e8 4e fe ff ff       	call   1087e <default_handler>
   10a30:	83 c4 10             	add    $0x10,%esp
}
   10a33:	90                   	nop
   10a34:	c9                   	leave  
   10a35:	c3                   	ret    

00010a36 <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   10a36:	55                   	push   %ebp
   10a37:	89 e5                	mov    %esp,%ebp
   10a39:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: Page fault.");
   10a3c:	83 ec 08             	sub    $0x8,%esp
   10a3f:	68 e0 29 01 00       	push   $0x129e0
   10a44:	ff 75 08             	pushl  0x8(%ebp)
   10a47:	e8 32 fe ff ff       	call   1087e <default_handler>
   10a4c:	83 c4 10             	add    $0x10,%esp
}
   10a4f:	90                   	nop
   10a50:	c9                   	leave  
   10a51:	c3                   	ret    

00010a52 <handle_fpu_error>:
void handle_fpu_error(exception_frame_t * frame) {
   10a52:	55                   	push   %ebp
   10a53:	89 e5                	mov    %esp,%ebp
   10a55:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   10a58:	83 ec 08             	sub    $0x8,%esp
   10a5b:	68 03 2a 01 00       	push   $0x12a03
   10a60:	ff 75 08             	pushl  0x8(%ebp)
   10a63:	e8 16 fe ff ff       	call   1087e <default_handler>
   10a68:	83 c4 10             	add    $0x10,%esp
}
   10a6b:	90                   	nop
   10a6c:	c9                   	leave  
   10a6d:	c3                   	ret    

00010a6e <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   10a6e:	55                   	push   %ebp
   10a6f:	89 e5                	mov    %esp,%ebp
   10a71:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   10a74:	83 ec 08             	sub    $0x8,%esp
   10a77:	68 21 2a 01 00       	push   $0x12a21
   10a7c:	ff 75 08             	pushl  0x8(%ebp)
   10a7f:	e8 fa fd ff ff       	call   1087e <default_handler>
   10a84:	83 c4 10             	add    $0x10,%esp
}
   10a87:	90                   	nop
   10a88:	c9                   	leave  
   10a89:	c3                   	ret    

00010a8a <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   10a8a:	55                   	push   %ebp
   10a8b:	89 e5                	mov    %esp,%ebp
   10a8d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   10a90:	83 ec 08             	sub    $0x8,%esp
   10a93:	68 32 2a 01 00       	push   $0x12a32
   10a98:	ff 75 08             	pushl  0x8(%ebp)
   10a9b:	e8 de fd ff ff       	call   1087e <default_handler>
   10aa0:	83 c4 10             	add    $0x10,%esp
}
   10aa3:	90                   	nop
   10aa4:	c9                   	leave  
   10aa5:	c3                   	ret    

00010aa6 <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   10aa6:	55                   	push   %ebp
   10aa7:	89 e5                	mov    %esp,%ebp
   10aa9:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10aac:	83 ec 08             	sub    $0x8,%esp
   10aaf:	68 44 2a 01 00       	push   $0x12a44
   10ab4:	ff 75 08             	pushl  0x8(%ebp)
   10ab7:	e8 c2 fd ff ff       	call   1087e <default_handler>
   10abc:	83 c4 10             	add    $0x10,%esp
}
   10abf:	90                   	nop
   10ac0:	c9                   	leave  
   10ac1:	c3                   	ret    

00010ac2 <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10ac2:	55                   	push   %ebp
   10ac3:	89 e5                	mov    %esp,%ebp
   10ac5:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   10ac8:	83 ec 08             	sub    $0x8,%esp
   10acb:	68 63 2a 01 00       	push   $0x12a63
   10ad0:	ff 75 08             	pushl  0x8(%ebp)
   10ad3:	e8 a6 fd ff ff       	call   1087e <default_handler>
   10ad8:	83 c4 10             	add    $0x10,%esp
}
   10adb:	90                   	nop
   10adc:	c9                   	leave  
   10add:	c3                   	ret    

00010ade <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10ade:	55                   	push   %ebp
   10adf:	89 e5                	mov    %esp,%ebp
   10ae1:	83 ec 08             	sub    $0x8,%esp
   10ae4:	8b 55 0c             	mov    0xc(%ebp),%edx
   10ae7:	8b 45 14             	mov    0x14(%ebp),%eax
   10aea:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10aee:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10af2:	8b 45 10             	mov    0x10(%ebp),%eax
   10af5:	89 c2                	mov    %eax,%edx
   10af7:	8b 45 08             	mov    0x8(%ebp),%eax
   10afa:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10afd:	8b 45 08             	mov    0x8(%ebp),%eax
   10b00:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10b04:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10b08:	8b 45 08             	mov    0x8(%ebp),%eax
   10b0b:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10b0f:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10b13:	8b 45 10             	mov    0x10(%ebp),%eax
   10b16:	c1 e8 10             	shr    $0x10,%eax
   10b19:	89 c2                	mov    %eax,%edx
   10b1b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1e:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10b22:	90                   	nop
   10b23:	c9                   	leave  
   10b24:	c3                   	ret    

00010b25 <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   10b25:	55                   	push   %ebp
   10b26:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   10b28:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10b2c:	7e 07                	jle    10b35 <irq_install+0x10>
        return -1;
   10b2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b33:	eb 1e                	jmp    10b53 <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   10b35:	8b 45 08             	mov    0x8(%ebp),%eax
   10b38:	c1 e0 03             	shl    $0x3,%eax
   10b3b:	05 40 48 01 00       	add    $0x14840,%eax
   10b40:	68 00 8e 00 00       	push   $0x8e00
   10b45:	ff 75 0c             	pushl  0xc(%ebp)
   10b48:	6a 08                	push   $0x8
   10b4a:	50                   	push   %eax
   10b4b:	e8 8e ff ff ff       	call   10ade <gate_desc_set>
   10b50:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   10b53:	c9                   	leave  
   10b54:	c3                   	ret    

00010b55 <init_pic>:

static void init_pic() {
   10b55:	55                   	push   %ebp
   10b56:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10b58:	6a 11                	push   $0x11
   10b5a:	6a 20                	push   $0x20
   10b5c:	e8 e3 fc ff ff       	call   10844 <outb>
   10b61:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10b64:	6a 20                	push   $0x20
   10b66:	6a 21                	push   $0x21
   10b68:	e8 d7 fc ff ff       	call   10844 <outb>
   10b6d:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10b70:	6a 04                	push   $0x4
   10b72:	6a 21                	push   $0x21
   10b74:	e8 cb fc ff ff       	call   10844 <outb>
   10b79:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10b7c:	6a 01                	push   $0x1
   10b7e:	6a 21                	push   $0x21
   10b80:	e8 bf fc ff ff       	call   10844 <outb>
   10b85:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10b88:	6a 11                	push   $0x11
   10b8a:	68 a0 00 00 00       	push   $0xa0
   10b8f:	e8 b0 fc ff ff       	call   10844 <outb>
   10b94:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10b97:	6a 28                	push   $0x28
   10b99:	68 a1 00 00 00       	push   $0xa1
   10b9e:	e8 a1 fc ff ff       	call   10844 <outb>
   10ba3:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10ba6:	6a 02                	push   $0x2
   10ba8:	68 a1 00 00 00       	push   $0xa1
   10bad:	e8 92 fc ff ff       	call   10844 <outb>
   10bb2:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10bb5:	6a 01                	push   $0x1
   10bb7:	68 a1 00 00 00       	push   $0xa1
   10bbc:	e8 83 fc ff ff       	call   10844 <outb>
   10bc1:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10bc4:	68 fb 00 00 00       	push   $0xfb
   10bc9:	6a 21                	push   $0x21
   10bcb:	e8 74 fc ff ff       	call   10844 <outb>
   10bd0:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10bd3:	68 ff 00 00 00       	push   $0xff
   10bd8:	68 a1 00 00 00       	push   $0xa1
   10bdd:	e8 62 fc ff ff       	call   10844 <outb>
   10be2:	83 c4 08             	add    $0x8,%esp
}
   10be5:	90                   	nop
   10be6:	c9                   	leave  
   10be7:	c3                   	ret    

00010be8 <irq_init>:

void irq_init () {
   10be8:	55                   	push   %ebp
   10be9:	89 e5                	mov    %esp,%ebp
   10beb:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10bee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10bf5:	eb 25                	jmp    10c1c <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10bf7:	ba 28 00 01 00       	mov    $0x10028,%edx
   10bfc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10bff:	c1 e0 03             	shl    $0x3,%eax
   10c02:	05 40 48 01 00       	add    $0x14840,%eax
   10c07:	68 00 8e 00 00       	push   $0x8e00
   10c0c:	52                   	push   %edx
   10c0d:	6a 08                	push   $0x8
   10c0f:	50                   	push   %eax
   10c10:	e8 c9 fe ff ff       	call   10ade <gate_desc_set>
   10c15:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10c18:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10c1c:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   10c20:	76 d5                	jbe    10bf7 <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10c22:	b8 40 48 01 00       	mov    $0x14840,%eax
   10c27:	68 00 04 00 00       	push   $0x400
   10c2c:	50                   	push   %eax
   10c2d:	e8 cd fb ff ff       	call   107ff <lidt>
   10c32:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   10c35:	b8 47 00 01 00       	mov    $0x10047,%eax
   10c3a:	50                   	push   %eax
   10c3b:	6a 00                	push   $0x0
   10c3d:	e8 e3 fe ff ff       	call   10b25 <irq_install>
   10c42:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   10c45:	b8 66 00 01 00       	mov    $0x10066,%eax
   10c4a:	50                   	push   %eax
   10c4b:	6a 01                	push   $0x1
   10c4d:	e8 d3 fe ff ff       	call   10b25 <irq_install>
   10c52:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   10c55:	b8 85 00 01 00       	mov    $0x10085,%eax
   10c5a:	50                   	push   %eax
   10c5b:	6a 02                	push   $0x2
   10c5d:	e8 c3 fe ff ff       	call   10b25 <irq_install>
   10c62:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   10c65:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   10c6a:	50                   	push   %eax
   10c6b:	6a 03                	push   $0x3
   10c6d:	e8 b3 fe ff ff       	call   10b25 <irq_install>
   10c72:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10c75:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   10c7a:	50                   	push   %eax
   10c7b:	6a 04                	push   $0x4
   10c7d:	e8 a3 fe ff ff       	call   10b25 <irq_install>
   10c82:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10c85:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   10c8a:	50                   	push   %eax
   10c8b:	6a 05                	push   $0x5
   10c8d:	e8 93 fe ff ff       	call   10b25 <irq_install>
   10c92:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10c95:	b8 01 01 01 00       	mov    $0x10101,%eax
   10c9a:	50                   	push   %eax
   10c9b:	6a 06                	push   $0x6
   10c9d:	e8 83 fe ff ff       	call   10b25 <irq_install>
   10ca2:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10ca5:	b8 20 01 01 00       	mov    $0x10120,%eax
   10caa:	50                   	push   %eax
   10cab:	6a 07                	push   $0x7
   10cad:	e8 73 fe ff ff       	call   10b25 <irq_install>
   10cb2:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10cb5:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   10cba:	50                   	push   %eax
   10cbb:	6a 08                	push   $0x8
   10cbd:	e8 63 fe ff ff       	call   10b25 <irq_install>
   10cc2:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10cc5:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   10cca:	50                   	push   %eax
   10ccb:	6a 0a                	push   $0xa
   10ccd:	e8 53 fe ff ff       	call   10b25 <irq_install>
   10cd2:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10cd5:	b8 79 01 01 00       	mov    $0x10179,%eax
   10cda:	50                   	push   %eax
   10cdb:	6a 0b                	push   $0xb
   10cdd:	e8 43 fe ff ff       	call   10b25 <irq_install>
   10ce2:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10ce5:	b8 96 01 01 00       	mov    $0x10196,%eax
   10cea:	50                   	push   %eax
   10ceb:	6a 0c                	push   $0xc
   10ced:	e8 33 fe ff ff       	call   10b25 <irq_install>
   10cf2:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10cf5:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   10cfa:	50                   	push   %eax
   10cfb:	6a 0d                	push   $0xd
   10cfd:	e8 23 fe ff ff       	call   10b25 <irq_install>
   10d02:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10d05:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   10d0a:	50                   	push   %eax
   10d0b:	6a 0e                	push   $0xe
   10d0d:	e8 13 fe ff ff       	call   10b25 <irq_install>
   10d12:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   10d15:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   10d1a:	50                   	push   %eax
   10d1b:	6a 10                	push   $0x10
   10d1d:	e8 03 fe ff ff       	call   10b25 <irq_install>
   10d22:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   10d25:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   10d2a:	50                   	push   %eax
   10d2b:	6a 11                	push   $0x11
   10d2d:	e8 f3 fd ff ff       	call   10b25 <irq_install>
   10d32:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   10d35:	b8 29 02 01 00       	mov    $0x10229,%eax
   10d3a:	50                   	push   %eax
   10d3b:	6a 12                	push   $0x12
   10d3d:	e8 e3 fd ff ff       	call   10b25 <irq_install>
   10d42:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   10d45:	b8 48 02 01 00       	mov    $0x10248,%eax
   10d4a:	50                   	push   %eax
   10d4b:	6a 13                	push   $0x13
   10d4d:	e8 d3 fd ff ff       	call   10b25 <irq_install>
   10d52:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   10d55:	b8 67 02 01 00       	mov    $0x10267,%eax
   10d5a:	50                   	push   %eax
   10d5b:	6a 14                	push   $0x14
   10d5d:	e8 c3 fd ff ff       	call   10b25 <irq_install>
   10d62:	83 c4 08             	add    $0x8,%esp

    init_pic();
   10d65:	e8 eb fd ff ff       	call   10b55 <init_pic>
}
   10d6a:	90                   	nop
   10d6b:	c9                   	leave  
   10d6c:	c3                   	ret    

00010d6d <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10d6d:	55                   	push   %ebp
   10d6e:	89 e5                	mov    %esp,%ebp
   10d70:	53                   	push   %ebx
   10d71:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10d74:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10d78:	7e 78                	jle    10df2 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10d7a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10d7e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d82:	7f 32                	jg     10db6 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10d84:	6a 21                	push   $0x21
   10d86:	e8 9c fa ff ff       	call   10827 <inb>
   10d8b:	83 c4 04             	add    $0x4,%esp
   10d8e:	89 c2                	mov    %eax,%edx
   10d90:	8b 45 08             	mov    0x8(%ebp),%eax
   10d93:	bb 01 00 00 00       	mov    $0x1,%ebx
   10d98:	89 c1                	mov    %eax,%ecx
   10d9a:	d3 e3                	shl    %cl,%ebx
   10d9c:	89 d8                	mov    %ebx,%eax
   10d9e:	f7 d0                	not    %eax
   10da0:	21 d0                	and    %edx,%eax
   10da2:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10da5:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10da9:	50                   	push   %eax
   10daa:	6a 21                	push   $0x21
   10dac:	e8 93 fa ff ff       	call   10844 <outb>
   10db1:	83 c4 08             	add    $0x8,%esp
   10db4:	eb 3d                	jmp    10df3 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10db6:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10dba:	68 a1 00 00 00       	push   $0xa1
   10dbf:	e8 63 fa ff ff       	call   10827 <inb>
   10dc4:	83 c4 04             	add    $0x4,%esp
   10dc7:	89 c2                	mov    %eax,%edx
   10dc9:	8b 45 08             	mov    0x8(%ebp),%eax
   10dcc:	bb 01 00 00 00       	mov    $0x1,%ebx
   10dd1:	89 c1                	mov    %eax,%ecx
   10dd3:	d3 e3                	shl    %cl,%ebx
   10dd5:	89 d8                	mov    %ebx,%eax
   10dd7:	f7 d0                	not    %eax
   10dd9:	21 d0                	and    %edx,%eax
   10ddb:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10dde:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10de2:	50                   	push   %eax
   10de3:	68 a1 00 00 00       	push   $0xa1
   10de8:	e8 57 fa ff ff       	call   10844 <outb>
   10ded:	83 c4 08             	add    $0x8,%esp
   10df0:	eb 01                	jmp    10df3 <irq_enable+0x86>
        return;
   10df2:	90                   	nop
    }
}
   10df3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10df6:	c9                   	leave  
   10df7:	c3                   	ret    

00010df8 <irq_disable>:

void irq_disable(int irq_num) {
   10df8:	55                   	push   %ebp
   10df9:	89 e5                	mov    %esp,%ebp
   10dfb:	53                   	push   %ebx
   10dfc:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10dff:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10e03:	7e 74                	jle    10e79 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10e05:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10e09:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e0d:	7f 30                	jg     10e3f <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10e0f:	6a 21                	push   $0x21
   10e11:	e8 11 fa ff ff       	call   10827 <inb>
   10e16:	83 c4 04             	add    $0x4,%esp
   10e19:	89 c3                	mov    %eax,%ebx
   10e1b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1e:	ba 01 00 00 00       	mov    $0x1,%edx
   10e23:	89 c1                	mov    %eax,%ecx
   10e25:	d3 e2                	shl    %cl,%edx
   10e27:	89 d0                	mov    %edx,%eax
   10e29:	09 d8                	or     %ebx,%eax
   10e2b:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10e2e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10e32:	50                   	push   %eax
   10e33:	6a 21                	push   $0x21
   10e35:	e8 0a fa ff ff       	call   10844 <outb>
   10e3a:	83 c4 08             	add    $0x8,%esp
   10e3d:	eb 3b                	jmp    10e7a <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10e3f:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10e43:	68 a1 00 00 00       	push   $0xa1
   10e48:	e8 da f9 ff ff       	call   10827 <inb>
   10e4d:	83 c4 04             	add    $0x4,%esp
   10e50:	89 c3                	mov    %eax,%ebx
   10e52:	8b 45 08             	mov    0x8(%ebp),%eax
   10e55:	ba 01 00 00 00       	mov    $0x1,%edx
   10e5a:	89 c1                	mov    %eax,%ecx
   10e5c:	d3 e2                	shl    %cl,%edx
   10e5e:	89 d0                	mov    %edx,%eax
   10e60:	09 d8                	or     %ebx,%eax
   10e62:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10e65:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10e69:	50                   	push   %eax
   10e6a:	68 a1 00 00 00       	push   $0xa1
   10e6f:	e8 d0 f9 ff ff       	call   10844 <outb>
   10e74:	83 c4 08             	add    $0x8,%esp
   10e77:	eb 01                	jmp    10e7a <irq_disable+0x82>
        return;
   10e79:	90                   	nop
    }
}
   10e7a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e7d:	c9                   	leave  
   10e7e:	c3                   	ret    

00010e7f <irq_disable_global>:

void irq_disable_global(void) {
   10e7f:	55                   	push   %ebp
   10e80:	89 e5                	mov    %esp,%ebp
    cli();
   10e82:	e8 6a f9 ff ff       	call   107f1 <cli>
}
   10e87:	90                   	nop
   10e88:	5d                   	pop    %ebp
   10e89:	c3                   	ret    

00010e8a <irq_enable_global>:

void irq_enable_global(void) {
   10e8a:	55                   	push   %ebp
   10e8b:	89 e5                	mov    %esp,%ebp
    sti();
   10e8d:	e8 66 f9 ff ff       	call   107f8 <sti>
}
   10e92:	90                   	nop
   10e93:	5d                   	pop    %ebp
   10e94:	c3                   	ret    

00010e95 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10e95:	55                   	push   %ebp
   10e96:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10e98:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10e9c:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ea0:	7e 0f                	jle    10eb1 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10ea2:	6a 20                	push   $0x20
   10ea4:	68 a0 00 00 00       	push   $0xa0
   10ea9:	e8 96 f9 ff ff       	call   10844 <outb>
   10eae:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10eb1:	6a 20                	push   $0x20
   10eb3:	6a 20                	push   $0x20
   10eb5:	e8 8a f9 ff ff       	call   10844 <outb>
   10eba:	83 c4 08             	add    $0x8,%esp
}
   10ebd:	90                   	nop
   10ebe:	c9                   	leave  
   10ebf:	c3                   	ret    

00010ec0 <irq_enter_proection>:


irq_state_t irq_enter_proection() {
   10ec0:	55                   	push   %ebp
   10ec1:	89 e5                	mov    %esp,%ebp
   10ec3:	83 ec 10             	sub    $0x10,%esp
    irq_state_t  state = read_eflags();
   10ec6:	e8 98 f9 ff ff       	call   10863 <read_eflags>
   10ecb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   10ece:	e8 ac ff ff ff       	call   10e7f <irq_disable_global>

    return state;
   10ed3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10ed6:	c9                   	leave  
   10ed7:	c3                   	ret    

00010ed8 <irq_leave_proection>:


void irq_leave_proection(irq_state_t state) {
   10ed8:	55                   	push   %ebp
   10ed9:	89 e5                	mov    %esp,%ebp

    write_eflags(state);
   10edb:	ff 75 08             	pushl  0x8(%ebp)
   10ede:	e8 90 f9 ff ff       	call   10873 <write_eflags>
   10ee3:	83 c4 04             	add    $0x4,%esp
}
   10ee6:	90                   	nop
   10ee7:	c9                   	leave  
   10ee8:	c3                   	ret    

00010ee9 <bitmap_byte_count>:
#include <bitmap.h>
#include <klib.h>

int bitmap_byte_count (int bit_count) {
   10ee9:	55                   	push   %ebp
   10eea:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         
   10eec:	8b 45 08             	mov    0x8(%ebp),%eax
   10eef:	83 c0 07             	add    $0x7,%eax
   10ef2:	8d 50 07             	lea    0x7(%eax),%edx
   10ef5:	85 c0                	test   %eax,%eax
   10ef7:	0f 48 c2             	cmovs  %edx,%eax
   10efa:	c1 f8 03             	sar    $0x3,%eax
}
   10efd:	5d                   	pop    %ebp
   10efe:	c3                   	ret    

00010eff <bitmap_init>:

void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   10eff:	55                   	push   %ebp
   10f00:	89 e5                	mov    %esp,%ebp
   10f02:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   10f05:	8b 45 08             	mov    0x8(%ebp),%eax
   10f08:	8b 55 10             	mov    0x10(%ebp),%edx
   10f0b:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   10f0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f10:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f13:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   10f16:	8b 45 08             	mov    0x8(%ebp),%eax
   10f19:	8b 00                	mov    (%eax),%eax
   10f1b:	50                   	push   %eax
   10f1c:	e8 c8 ff ff ff       	call   10ee9 <bitmap_byte_count>
   10f21:	83 c4 04             	add    $0x4,%esp
   10f24:	89 45 f4             	mov    %eax,-0xc(%ebp)
    k_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   10f27:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10f2b:	74 07                	je     10f34 <bitmap_init+0x35>
   10f2d:	ba ff 00 00 00       	mov    $0xff,%edx
   10f32:	eb 05                	jmp    10f39 <bitmap_init+0x3a>
   10f34:	ba 00 00 00 00       	mov    $0x0,%edx
   10f39:	8b 45 08             	mov    0x8(%ebp),%eax
   10f3c:	8b 40 04             	mov    0x4(%eax),%eax
   10f3f:	83 ec 04             	sub    $0x4,%esp
   10f42:	ff 75 f4             	pushl  -0xc(%ebp)
   10f45:	52                   	push   %edx
   10f46:	50                   	push   %eax
   10f47:	e8 9d 03 00 00       	call   112e9 <k_memset>
   10f4c:	83 c4 10             	add    $0x10,%esp
}
   10f4f:	90                   	nop
   10f50:	c9                   	leave  
   10f51:	c3                   	ret    

00010f52 <bitmap_get_bit>:


int bitmap_get_bit (bitmap_t * bitmap, int index) {
   10f52:	55                   	push   %ebp
   10f53:	89 e5                	mov    %esp,%ebp
   10f55:	53                   	push   %ebx

    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   10f56:	8b 45 08             	mov    0x8(%ebp),%eax
   10f59:	8b 50 04             	mov    0x4(%eax),%edx
   10f5c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f5f:	8d 48 07             	lea    0x7(%eax),%ecx
   10f62:	85 c0                	test   %eax,%eax
   10f64:	0f 48 c1             	cmovs  %ecx,%eax
   10f67:	c1 f8 03             	sar    $0x3,%eax
   10f6a:	01 d0                	add    %edx,%eax
   10f6c:	0f b6 00             	movzbl (%eax),%eax
   10f6f:	0f b6 d8             	movzbl %al,%ebx
   10f72:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f75:	99                   	cltd   
   10f76:	c1 ea 1d             	shr    $0x1d,%edx
   10f79:	01 d0                	add    %edx,%eax
   10f7b:	83 e0 07             	and    $0x7,%eax
   10f7e:	29 d0                	sub    %edx,%eax
   10f80:	89 c1                	mov    %eax,%ecx
   10f82:	d3 fb                	sar    %cl,%ebx
   10f84:	89 d8                	mov    %ebx,%eax
   10f86:	83 e0 01             	and    $0x1,%eax
}
   10f89:	5b                   	pop    %ebx
   10f8a:	5d                   	pop    %ebp
   10f8b:	c3                   	ret    

00010f8c <bitmap_is_set>:

int bitmap_is_set (bitmap_t * bitmap, int index) {
   10f8c:	55                   	push   %ebp
   10f8d:	89 e5                	mov    %esp,%ebp
    
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   10f8f:	ff 75 0c             	pushl  0xc(%ebp)
   10f92:	ff 75 08             	pushl  0x8(%ebp)
   10f95:	e8 b8 ff ff ff       	call   10f52 <bitmap_get_bit>
   10f9a:	83 c4 08             	add    $0x8,%esp
   10f9d:	85 c0                	test   %eax,%eax
   10f9f:	0f 95 c0             	setne  %al
   10fa2:	0f b6 c0             	movzbl %al,%eax
}
   10fa5:	c9                   	leave  
   10fa6:	c3                   	ret    

00010fa7 <bitmap_set_bit>:



void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   10fa7:	55                   	push   %ebp
   10fa8:	89 e5                	mov    %esp,%ebp
   10faa:	56                   	push   %esi
   10fab:	53                   	push   %ebx
   10fac:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   10faf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10fb6:	e9 a2 00 00 00       	jmp    1105d <bitmap_set_bit+0xb6>
        if (bit) {
   10fbb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10fbf:	74 4a                	je     1100b <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   10fc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc4:	8b 50 04             	mov    0x4(%eax),%edx
   10fc7:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fca:	8d 48 07             	lea    0x7(%eax),%ecx
   10fcd:	85 c0                	test   %eax,%eax
   10fcf:	0f 48 c1             	cmovs  %ecx,%eax
   10fd2:	c1 f8 03             	sar    $0x3,%eax
   10fd5:	89 c3                	mov    %eax,%ebx
   10fd7:	89 d8                	mov    %ebx,%eax
   10fd9:	01 d0                	add    %edx,%eax
   10fdb:	0f b6 00             	movzbl (%eax),%eax
   10fde:	89 c6                	mov    %eax,%esi
   10fe0:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fe3:	99                   	cltd   
   10fe4:	c1 ea 1d             	shr    $0x1d,%edx
   10fe7:	01 d0                	add    %edx,%eax
   10fe9:	83 e0 07             	and    $0x7,%eax
   10fec:	29 d0                	sub    %edx,%eax
   10fee:	ba 01 00 00 00       	mov    $0x1,%edx
   10ff3:	89 c1                	mov    %eax,%ecx
   10ff5:	d3 e2                	shl    %cl,%edx
   10ff7:	89 d0                	mov    %edx,%eax
   10ff9:	89 f2                	mov    %esi,%edx
   10ffb:	09 c2                	or     %eax,%edx
   10ffd:	8b 45 08             	mov    0x8(%ebp),%eax
   11000:	8b 40 04             	mov    0x4(%eax),%eax
   11003:	89 d9                	mov    %ebx,%ecx
   11005:	01 c8                	add    %ecx,%eax
   11007:	88 10                	mov    %dl,(%eax)
   11009:	eb 4a                	jmp    11055 <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   1100b:	8b 45 08             	mov    0x8(%ebp),%eax
   1100e:	8b 50 04             	mov    0x4(%eax),%edx
   11011:	8b 45 0c             	mov    0xc(%ebp),%eax
   11014:	8d 48 07             	lea    0x7(%eax),%ecx
   11017:	85 c0                	test   %eax,%eax
   11019:	0f 48 c1             	cmovs  %ecx,%eax
   1101c:	c1 f8 03             	sar    $0x3,%eax
   1101f:	89 c3                	mov    %eax,%ebx
   11021:	89 d8                	mov    %ebx,%eax
   11023:	01 d0                	add    %edx,%eax
   11025:	0f b6 00             	movzbl (%eax),%eax
   11028:	89 c6                	mov    %eax,%esi
   1102a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1102d:	99                   	cltd   
   1102e:	c1 ea 1d             	shr    $0x1d,%edx
   11031:	01 d0                	add    %edx,%eax
   11033:	83 e0 07             	and    $0x7,%eax
   11036:	29 d0                	sub    %edx,%eax
   11038:	ba 01 00 00 00       	mov    $0x1,%edx
   1103d:	89 c1                	mov    %eax,%ecx
   1103f:	d3 e2                	shl    %cl,%edx
   11041:	89 d0                	mov    %edx,%eax
   11043:	f7 d0                	not    %eax
   11045:	89 f2                	mov    %esi,%edx
   11047:	21 c2                	and    %eax,%edx
   11049:	8b 45 08             	mov    0x8(%ebp),%eax
   1104c:	8b 40 04             	mov    0x4(%eax),%eax
   1104f:	89 d9                	mov    %ebx,%ecx
   11051:	01 c8                	add    %ecx,%eax
   11053:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   11055:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11059:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1105d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11060:	3b 45 10             	cmp    0x10(%ebp),%eax
   11063:	7d 0e                	jge    11073 <bitmap_set_bit+0xcc>
   11065:	8b 45 08             	mov    0x8(%ebp),%eax
   11068:	8b 00                	mov    (%eax),%eax
   1106a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1106d:	0f 8c 48 ff ff ff    	jl     10fbb <bitmap_set_bit+0x14>
        }
    }
} 
   11073:	90                   	nop
   11074:	83 c4 10             	add    $0x10,%esp
   11077:	5b                   	pop    %ebx
   11078:	5e                   	pop    %esi
   11079:	5d                   	pop    %ebp
   1107a:	c3                   	ret    

0001107b <bitmap_alloc_nbits>:



int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   1107b:	55                   	push   %ebp
   1107c:	89 e5                	mov    %esp,%ebp
   1107e:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   11081:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   11088:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   1108f:	e9 85 00 00 00       	jmp    11119 <bitmap_alloc_nbits+0x9e>
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   11094:	ff 75 fc             	pushl  -0x4(%ebp)
   11097:	ff 75 08             	pushl  0x8(%ebp)
   1109a:	e8 b3 fe ff ff       	call   10f52 <bitmap_get_bit>
   1109f:	83 c4 08             	add    $0x8,%esp
   110a2:	39 45 0c             	cmp    %eax,0xc(%ebp)
   110a5:	74 06                	je     110ad <bitmap_alloc_nbits+0x32>
            search_idx++;
   110a7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   110ab:	eb 6c                	jmp    11119 <bitmap_alloc_nbits+0x9e>
        }

        ok_idx = search_idx;
   110ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110b0:	89 45 f8             	mov    %eax,-0x8(%ebp)

        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   110b3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   110ba:	eb 27                	jmp    110e3 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   110bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110bf:	8d 50 01             	lea    0x1(%eax),%edx
   110c2:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110c5:	50                   	push   %eax
   110c6:	ff 75 08             	pushl  0x8(%ebp)
   110c9:	e8 84 fe ff ff       	call   10f52 <bitmap_get_bit>
   110ce:	83 c4 08             	add    $0x8,%esp
   110d1:	39 45 0c             	cmp    %eax,0xc(%ebp)
   110d4:	74 09                	je     110df <bitmap_alloc_nbits+0x64>
                ok_idx = -1;
   110d6:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   110dd:	eb 16                	jmp    110f5 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   110df:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   110e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110e6:	3b 45 10             	cmp    0x10(%ebp),%eax
   110e9:	7d 0a                	jge    110f5 <bitmap_alloc_nbits+0x7a>
   110eb:	8b 45 08             	mov    0x8(%ebp),%eax
   110ee:	8b 00                	mov    (%eax),%eax
   110f0:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   110f3:	7c c7                	jl     110bc <bitmap_alloc_nbits+0x41>
            }
        }

        if (i >= count) {
   110f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110f8:	3b 45 10             	cmp    0x10(%ebp),%eax
   110fb:	7c 1c                	jl     11119 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   110fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   11100:	f7 d0                	not    %eax
   11102:	50                   	push   %eax
   11103:	ff 75 10             	pushl  0x10(%ebp)
   11106:	ff 75 f8             	pushl  -0x8(%ebp)
   11109:	ff 75 08             	pushl  0x8(%ebp)
   1110c:	e8 96 fe ff ff       	call   10fa7 <bitmap_set_bit>
   11111:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   11114:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11117:	eb 13                	jmp    1112c <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   11119:	8b 45 08             	mov    0x8(%ebp),%eax
   1111c:	8b 00                	mov    (%eax),%eax
   1111e:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11121:	0f 8c 6d ff ff ff    	jl     11094 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   11127:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1112c:	c9                   	leave  
   1112d:	c3                   	ret    

0001112e <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   1112e:	55                   	push   %ebp
   1112f:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   11131:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11135:	74 3b                	je     11172 <k_strcpy+0x44>
   11137:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1113b:	74 35                	je     11172 <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   1113d:	eb 17                	jmp    11156 <k_strcpy+0x28>
        *dest++ = *src++;
   1113f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11142:	8d 42 01             	lea    0x1(%edx),%eax
   11145:	89 45 0c             	mov    %eax,0xc(%ebp)
   11148:	8b 45 08             	mov    0x8(%ebp),%eax
   1114b:	8d 48 01             	lea    0x1(%eax),%ecx
   1114e:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11151:	0f b6 12             	movzbl (%edx),%edx
   11154:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   11156:	8b 45 08             	mov    0x8(%ebp),%eax
   11159:	0f b6 00             	movzbl (%eax),%eax
   1115c:	84 c0                	test   %al,%al
   1115e:	74 0a                	je     1116a <k_strcpy+0x3c>
   11160:	8b 45 0c             	mov    0xc(%ebp),%eax
   11163:	0f b6 00             	movzbl (%eax),%eax
   11166:	84 c0                	test   %al,%al
   11168:	75 d5                	jne    1113f <k_strcpy+0x11>
    }
    *dest = '\0'; 
   1116a:	8b 45 08             	mov    0x8(%ebp),%eax
   1116d:	c6 00 00             	movb   $0x0,(%eax)
   11170:	eb 01                	jmp    11173 <k_strcpy+0x45>
        return;
   11172:	90                   	nop
}
   11173:	5d                   	pop    %ebp
   11174:	c3                   	ret    

00011175 <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   11175:	55                   	push   %ebp
   11176:	89 e5                	mov    %esp,%ebp
   11178:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1117b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1117f:	74 61                	je     111e2 <k_strncpy+0x6d>
   11181:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11185:	74 5b                	je     111e2 <k_strncpy+0x6d>
   11187:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1118b:	74 55                	je     111e2 <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   1118d:	8b 45 08             	mov    0x8(%ebp),%eax
   11190:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   11193:	8b 45 0c             	mov    0xc(%ebp),%eax
   11196:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   11199:	eb 17                	jmp    111b2 <k_strncpy+0x3d>
        *d++ = *s++;
   1119b:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1119e:	8d 42 01             	lea    0x1(%edx),%eax
   111a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
   111a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111a7:	8d 48 01             	lea    0x1(%eax),%ecx
   111aa:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   111ad:	0f b6 12             	movzbl (%edx),%edx
   111b0:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   111b2:	8b 45 10             	mov    0x10(%ebp),%eax
   111b5:	8d 50 ff             	lea    -0x1(%eax),%edx
   111b8:	89 55 10             	mov    %edx,0x10(%ebp)
   111bb:	85 c0                	test   %eax,%eax
   111bd:	7e 0a                	jle    111c9 <k_strncpy+0x54>
   111bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111c2:	0f b6 00             	movzbl (%eax),%eax
   111c5:	84 c0                	test   %al,%al
   111c7:	75 d2                	jne    1119b <k_strncpy+0x26>
    } 
    if (size == 0) {
   111c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111cd:	75 0b                	jne    111da <k_strncpy+0x65>
        *(d - 1) = '\0';
   111cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111d2:	83 e8 01             	sub    $0x1,%eax
   111d5:	c6 00 00             	movb   $0x0,(%eax)
   111d8:	eb 09                	jmp    111e3 <k_strncpy+0x6e>
    } else {
        *d = '\0';
   111da:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111dd:	c6 00 00             	movb   $0x0,(%eax)
   111e0:	eb 01                	jmp    111e3 <k_strncpy+0x6e>
        return;
   111e2:	90                   	nop
    }
}
   111e3:	c9                   	leave  
   111e4:	c3                   	ret    

000111e5 <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   111e5:	55                   	push   %ebp
   111e6:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   111e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111ec:	74 06                	je     111f4 <k_strncmp+0xf>
   111ee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111f2:	75 0f                	jne    11203 <k_strncmp+0x1e>
   111f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   111f9:	eb 62                	jmp    1125d <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   111fb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   111ff:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   11203:	8b 45 08             	mov    0x8(%ebp),%eax
   11206:	0f b6 00             	movzbl (%eax),%eax
   11209:	84 c0                	test   %al,%al
   1120b:	74 20                	je     1122d <k_strncmp+0x48>
   1120d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11210:	0f b6 00             	movzbl (%eax),%eax
   11213:	84 c0                	test   %al,%al
   11215:	74 16                	je     1122d <k_strncmp+0x48>
   11217:	8b 45 08             	mov    0x8(%ebp),%eax
   1121a:	0f b6 10             	movzbl (%eax),%edx
   1121d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11220:	0f b6 00             	movzbl (%eax),%eax
   11223:	38 c2                	cmp    %al,%dl
   11225:	75 06                	jne    1122d <k_strncmp+0x48>
   11227:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1122b:	75 ce                	jne    111fb <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1122d:	8b 45 08             	mov    0x8(%ebp),%eax
   11230:	0f b6 00             	movzbl (%eax),%eax
   11233:	84 c0                	test   %al,%al
   11235:	74 21                	je     11258 <k_strncmp+0x73>
   11237:	8b 45 0c             	mov    0xc(%ebp),%eax
   1123a:	0f b6 00             	movzbl (%eax),%eax
   1123d:	84 c0                	test   %al,%al
   1123f:	74 17                	je     11258 <k_strncmp+0x73>
   11241:	8b 45 08             	mov    0x8(%ebp),%eax
   11244:	0f b6 10             	movzbl (%eax),%edx
   11247:	8b 45 0c             	mov    0xc(%ebp),%eax
   1124a:	0f b6 00             	movzbl (%eax),%eax
   1124d:	38 c2                	cmp    %al,%dl
   1124f:	74 07                	je     11258 <k_strncmp+0x73>
   11251:	b8 01 00 00 00       	mov    $0x1,%eax
   11256:	eb 05                	jmp    1125d <k_strncmp+0x78>
   11258:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1125d:	5d                   	pop    %ebp
   1125e:	c3                   	ret    

0001125f <k_strlen>:
int k_strlen(const char *str) {
   1125f:	55                   	push   %ebp
   11260:	89 e5                	mov    %esp,%ebp
   11262:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   11265:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11269:	75 07                	jne    11272 <k_strlen+0x13>
        return 0;
   1126b:	b8 00 00 00 00       	mov    $0x0,%eax
   11270:	eb 26                	jmp    11298 <k_strlen+0x39>
    }

    int len = 0;
   11272:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   11279:	8b 45 08             	mov    0x8(%ebp),%eax
   1127c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   1127f:	eb 04                	jmp    11285 <k_strlen+0x26>
        len++;
   11281:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   11285:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11288:	8d 50 01             	lea    0x1(%eax),%edx
   1128b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1128e:	0f b6 00             	movzbl (%eax),%eax
   11291:	84 c0                	test   %al,%al
   11293:	75 ec                	jne    11281 <k_strlen+0x22>
    }

    return len;
   11295:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11298:	c9                   	leave  
   11299:	c3                   	ret    

0001129a <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   1129a:	55                   	push   %ebp
   1129b:	89 e5                	mov    %esp,%ebp
   1129d:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || size) {
   112a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112a4:	74 40                	je     112e6 <k_memcpy+0x4c>
   112a6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112aa:	74 3a                	je     112e6 <k_memcpy+0x4c>
   112ac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112b0:	75 34                	jne    112e6 <k_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   112b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   112b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   112b8:	8b 45 08             	mov    0x8(%ebp),%eax
   112bb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   112be:	eb 17                	jmp    112d7 <k_memcpy+0x3d>
        *d++ = *s++;
   112c0:	8b 55 fc             	mov    -0x4(%ebp),%edx
   112c3:	8d 42 01             	lea    0x1(%edx),%eax
   112c6:	89 45 fc             	mov    %eax,-0x4(%ebp)
   112c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112cc:	8d 48 01             	lea    0x1(%eax),%ecx
   112cf:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   112d2:	0f b6 12             	movzbl (%edx),%edx
   112d5:	88 10                	mov    %dl,(%eax)
    while(size--) {
   112d7:	8b 45 10             	mov    0x10(%ebp),%eax
   112da:	8d 50 ff             	lea    -0x1(%eax),%edx
   112dd:	89 55 10             	mov    %edx,0x10(%ebp)
   112e0:	85 c0                	test   %eax,%eax
   112e2:	75 dc                	jne    112c0 <k_memcpy+0x26>
   112e4:	eb 01                	jmp    112e7 <k_memcpy+0x4d>
        return;
   112e6:	90                   	nop
    }
}
   112e7:	c9                   	leave  
   112e8:	c3                   	ret    

000112e9 <k_memset>:
void k_memset(void* dest, uint8_t v, int size) {
   112e9:	55                   	push   %ebp
   112ea:	89 e5                	mov    %esp,%ebp
   112ec:	83 ec 14             	sub    $0x14,%esp
   112ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   112f2:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   112f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112f9:	74 2c                	je     11327 <k_memset+0x3e>
   112fb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112ff:	74 26                	je     11327 <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   11301:	8b 45 08             	mov    0x8(%ebp),%eax
   11304:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   11307:	eb 0f                	jmp    11318 <k_memset+0x2f>
        *d++ = v;
   11309:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1130c:	8d 50 01             	lea    0x1(%eax),%edx
   1130f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11312:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11316:	88 10                	mov    %dl,(%eax)
    while(size--) {
   11318:	8b 45 10             	mov    0x10(%ebp),%eax
   1131b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1131e:	89 55 10             	mov    %edx,0x10(%ebp)
   11321:	85 c0                	test   %eax,%eax
   11323:	75 e4                	jne    11309 <k_memset+0x20>
   11325:	eb 01                	jmp    11328 <k_memset+0x3f>
    if(!dest || !size) return;
   11327:	90                   	nop
    }
}
   11328:	c9                   	leave  
   11329:	c3                   	ret    

0001132a <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   1132a:	55                   	push   %ebp
   1132b:	89 e5                	mov    %esp,%ebp
   1132d:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   11330:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11334:	74 0c                	je     11342 <k_memcmp+0x18>
   11336:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1133a:	74 06                	je     11342 <k_memcmp+0x18>
   1133c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11340:	74 07                	je     11349 <k_memcmp+0x1f>
        return 1;
   11342:	b8 01 00 00 00       	mov    $0x1,%eax
   11347:	eb 43                	jmp    1138c <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11349:	8b 45 08             	mov    0x8(%ebp),%eax
   1134c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   1134f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11352:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   11355:	eb 23                	jmp    1137a <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   11357:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1135a:	8d 50 01             	lea    0x1(%eax),%edx
   1135d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11360:	0f b6 08             	movzbl (%eax),%ecx
   11363:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11366:	8d 50 01             	lea    0x1(%eax),%edx
   11369:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1136c:	0f b6 00             	movzbl (%eax),%eax
   1136f:	38 c1                	cmp    %al,%cl
   11371:	74 07                	je     1137a <k_memcmp+0x50>
        return 1;
   11373:	b8 01 00 00 00       	mov    $0x1,%eax
   11378:	eb 12                	jmp    1138c <k_memcmp+0x62>
    while(size--) {
   1137a:	8b 45 10             	mov    0x10(%ebp),%eax
   1137d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11380:	89 55 10             	mov    %edx,0x10(%ebp)
   11383:	85 c0                	test   %eax,%eax
   11385:	75 d0                	jne    11357 <k_memcmp+0x2d>
    }

    return 0;
   11387:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1138c:	c9                   	leave  
   1138d:	c3                   	ret    

0001138e <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   1138e:	55                   	push   %ebp
   1138f:	89 e5                	mov    %esp,%ebp
   11391:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11394:	8b 45 08             	mov    0x8(%ebp),%eax
   11397:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   1139a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1139d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   113a0:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   113a4:	74 1d                	je     113c3 <k_itoa+0x35>
   113a6:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   113aa:	74 17                	je     113c3 <k_itoa+0x35>
   113ac:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   113b0:	74 11                	je     113c3 <k_itoa+0x35>
   113b2:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   113b6:	74 0b                	je     113c3 <k_itoa+0x35>
        *p = '\0';
   113b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113bb:	c6 00 00             	movb   $0x0,(%eax)
        return;
   113be:	e9 a0 00 00 00       	jmp    11463 <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   113c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113c7:	79 12                	jns    113db <k_itoa+0x4d>
   113c9:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   113cd:	75 0c                	jne    113db <k_itoa+0x4d>
        *p++ = '-';
   113cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113d2:	8d 50 01             	lea    0x1(%eax),%edx
   113d5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   113d8:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   113db:	8b 0d 00 30 01 00    	mov    0x13000,%ecx
   113e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   113e4:	99                   	cltd   
   113e5:	f7 7d 10             	idivl  0x10(%ebp)
   113e8:	89 d0                	mov    %edx,%eax
   113ea:	83 c0 0f             	add    $0xf,%eax
   113ed:	01 c8                	add    %ecx,%eax
   113ef:	0f b6 00             	movzbl (%eax),%eax
   113f2:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   113f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113f8:	8d 50 01             	lea    0x1(%eax),%edx
   113fb:	89 55 fc             	mov    %edx,-0x4(%ebp)
   113fe:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   11402:	88 10                	mov    %dl,(%eax)
        num /= base;
   11404:	8b 45 0c             	mov    0xc(%ebp),%eax
   11407:	99                   	cltd   
   11408:	f7 7d 10             	idivl  0x10(%ebp)
   1140b:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   1140e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11412:	75 c7                	jne    113db <k_itoa+0x4d>

    *p-- = '\0';
   11414:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11417:	8d 50 ff             	lea    -0x1(%eax),%edx
   1141a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1141d:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   11420:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11424:	7f 08                	jg     1142e <k_itoa+0xa0>
   11426:	8b 45 08             	mov    0x8(%ebp),%eax
   11429:	83 c0 01             	add    $0x1,%eax
   1142c:	eb 03                	jmp    11431 <k_itoa+0xa3>
   1142e:	8b 45 08             	mov    0x8(%ebp),%eax
   11431:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   11434:	eb 25                	jmp    1145b <k_itoa+0xcd>
        char ch = *start;
   11436:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11439:	0f b6 00             	movzbl (%eax),%eax
   1143c:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1143f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11442:	0f b6 10             	movzbl (%eax),%edx
   11445:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11448:	88 10                	mov    %dl,(%eax)
        *p = ch;
   1144a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1144d:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   11451:	88 10                	mov    %dl,(%eax)

        p--;
   11453:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11457:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   1145b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1145e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   11461:	72 d3                	jb     11436 <k_itoa+0xa8>
    }
}
   11463:	c9                   	leave  
   11464:	c3                   	ret    

00011465 <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   11465:	55                   	push   %ebp
   11466:	89 e5                	mov    %esp,%ebp
   11468:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   1146b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   11472:	8b 45 08             	mov    0x8(%ebp),%eax
   11475:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   11478:	e9 19 01 00 00       	jmp    11596 <k_vsprint+0x131>
        switch (state) {
   1147d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11480:	85 c0                	test   %eax,%eax
   11482:	74 0a                	je     1148e <k_vsprint+0x29>
   11484:	83 f8 01             	cmp    $0x1,%eax
   11487:	74 2b                	je     114b4 <k_vsprint+0x4f>
   11489:	e9 07 01 00 00       	jmp    11595 <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   1148e:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11492:	75 0c                	jne    114a0 <k_vsprint+0x3b>
                state = READ_FMT;
   11494:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1149b:	e9 f6 00 00 00       	jmp    11596 <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   114a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114a3:	8d 50 01             	lea    0x1(%eax),%edx
   114a6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   114a9:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   114ad:	88 10                	mov    %dl,(%eax)
            }
            break;
   114af:	e9 e2 00 00 00       	jmp    11596 <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   114b4:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   114b8:	75 31                	jne    114eb <k_vsprint+0x86>
                int num  = va_arg(args, int);
   114ba:	8b 45 10             	mov    0x10(%ebp),%eax
   114bd:	8d 50 04             	lea    0x4(%eax),%edx
   114c0:	89 55 10             	mov    %edx,0x10(%ebp)
   114c3:	8b 00                	mov    (%eax),%eax
   114c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   114c8:	6a 0a                	push   $0xa
   114ca:	ff 75 e4             	pushl  -0x1c(%ebp)
   114cd:	ff 75 f8             	pushl  -0x8(%ebp)
   114d0:	e8 b9 fe ff ff       	call   1138e <k_itoa>
   114d5:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   114d8:	ff 75 f8             	pushl  -0x8(%ebp)
   114db:	e8 7f fd ff ff       	call   1125f <k_strlen>
   114e0:	83 c4 04             	add    $0x4,%esp
   114e3:	01 45 f8             	add    %eax,-0x8(%ebp)
   114e6:	e9 a1 00 00 00       	jmp    1158c <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   114eb:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   114ef:	75 2e                	jne    1151f <k_vsprint+0xba>
                int num  = va_arg(args, int);
   114f1:	8b 45 10             	mov    0x10(%ebp),%eax
   114f4:	8d 50 04             	lea    0x4(%eax),%edx
   114f7:	89 55 10             	mov    %edx,0x10(%ebp)
   114fa:	8b 00                	mov    (%eax),%eax
   114fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   114ff:	6a 10                	push   $0x10
   11501:	ff 75 e8             	pushl  -0x18(%ebp)
   11504:	ff 75 f8             	pushl  -0x8(%ebp)
   11507:	e8 82 fe ff ff       	call   1138e <k_itoa>
   1150c:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   1150f:	ff 75 f8             	pushl  -0x8(%ebp)
   11512:	e8 48 fd ff ff       	call   1125f <k_strlen>
   11517:	83 c4 04             	add    $0x4,%esp
   1151a:	01 45 f8             	add    %eax,-0x8(%ebp)
   1151d:	eb 6d                	jmp    1158c <k_vsprint+0x127>

            }else if (ch == 'c') {
   1151f:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11523:	75 1f                	jne    11544 <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   11525:	8b 45 10             	mov    0x10(%ebp),%eax
   11528:	8d 50 04             	lea    0x4(%eax),%edx
   1152b:	89 55 10             	mov    %edx,0x10(%ebp)
   1152e:	8b 00                	mov    (%eax),%eax
   11530:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   11533:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11536:	8d 50 01             	lea    0x1(%eax),%edx
   11539:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1153c:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11540:	88 10                	mov    %dl,(%eax)
   11542:	eb 48                	jmp    1158c <k_vsprint+0x127>

            }else if (ch == 's') {
   11544:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11548:	75 42                	jne    1158c <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   1154a:	8b 45 10             	mov    0x10(%ebp),%eax
   1154d:	8d 50 04             	lea    0x4(%eax),%edx
   11550:	89 55 10             	mov    %edx,0x10(%ebp)
   11553:	8b 00                	mov    (%eax),%eax
   11555:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   11558:	ff 75 f4             	pushl  -0xc(%ebp)
   1155b:	e8 ff fc ff ff       	call   1125f <k_strlen>
   11560:	83 c4 04             	add    $0x4,%esp
   11563:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   11566:	eb 17                	jmp    1157f <k_vsprint+0x11a>
                    *curr++ = *str++;
   11568:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1156b:	8d 42 01             	lea    0x1(%edx),%eax
   1156e:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11571:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11574:	8d 48 01             	lea    0x1(%eax),%ecx
   11577:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1157a:	0f b6 12             	movzbl (%edx),%edx
   1157d:	88 10                	mov    %dl,(%eax)
                while(len--) {
   1157f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11582:	8d 50 ff             	lea    -0x1(%eax),%edx
   11585:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11588:	85 c0                	test   %eax,%eax
   1158a:	75 dc                	jne    11568 <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   1158c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11593:	eb 01                	jmp    11596 <k_vsprint+0x131>
        
        default:
            break;
   11595:	90                   	nop
    while((ch = *fmt++)) {
   11596:	8b 45 0c             	mov    0xc(%ebp),%eax
   11599:	8d 50 01             	lea    0x1(%eax),%edx
   1159c:	89 55 0c             	mov    %edx,0xc(%ebp)
   1159f:	0f b6 00             	movzbl (%eax),%eax
   115a2:	88 45 ef             	mov    %al,-0x11(%ebp)
   115a5:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   115a9:	0f 85 ce fe ff ff    	jne    1147d <k_vsprint+0x18>
        }
    }
   115af:	90                   	nop
   115b0:	c9                   	leave  
   115b1:	c3                   	ret    

000115b2 <list_is_empty>:
static inline int list_is_empty (list_t* list) {
   115b2:	55                   	push   %ebp
   115b3:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   115b5:	8b 45 08             	mov    0x8(%ebp),%eax
   115b8:	8b 40 08             	mov    0x8(%eax),%eax
   115bb:	85 c0                	test   %eax,%eax
   115bd:	0f 94 c0             	sete   %al
   115c0:	0f b6 c0             	movzbl %al,%eax
}
   115c3:	5d                   	pop    %ebp
   115c4:	c3                   	ret    

000115c5 <list_init>:
#include <list.h>

void list_init(list_t* list) {
   115c5:	55                   	push   %ebp
   115c6:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t*)0;
   115c8:	8b 45 08             	mov    0x8(%ebp),%eax
   115cb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   115d2:	8b 45 08             	mov    0x8(%ebp),%eax
   115d5:	8b 50 04             	mov    0x4(%eax),%edx
   115d8:	8b 45 08             	mov    0x8(%ebp),%eax
   115db:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   115dd:	8b 45 08             	mov    0x8(%ebp),%eax
   115e0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   115e7:	90                   	nop
   115e8:	5d                   	pop    %ebp
   115e9:	c3                   	ret    

000115ea <list_insert_first>:

void list_insert_first (list_t* list, list_node_t* node) {
   115ea:	55                   	push   %ebp
   115eb:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   115ed:	8b 45 08             	mov    0x8(%ebp),%eax
   115f0:	8b 10                	mov    (%eax),%edx
   115f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   115f5:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   115f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   115fb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if(list_is_empty(list)) {
   11601:	ff 75 08             	pushl  0x8(%ebp)
   11604:	e8 a9 ff ff ff       	call   115b2 <list_is_empty>
   11609:	83 c4 04             	add    $0x4,%esp
   1160c:	85 c0                	test   %eax,%eax
   1160e:	74 15                	je     11625 <list_insert_first+0x3b>
        list->last = list->first = node;
   11610:	8b 45 08             	mov    0x8(%ebp),%eax
   11613:	8b 55 0c             	mov    0xc(%ebp),%edx
   11616:	89 10                	mov    %edx,(%eax)
   11618:	8b 45 08             	mov    0x8(%ebp),%eax
   1161b:	8b 10                	mov    (%eax),%edx
   1161d:	8b 45 08             	mov    0x8(%ebp),%eax
   11620:	89 50 04             	mov    %edx,0x4(%eax)
   11623:	eb 12                	jmp    11637 <list_insert_first+0x4d>
    } else {
        list->first->pre = node;
   11625:	8b 45 08             	mov    0x8(%ebp),%eax
   11628:	8b 00                	mov    (%eax),%eax
   1162a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1162d:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1162f:	8b 45 08             	mov    0x8(%ebp),%eax
   11632:	8b 55 0c             	mov    0xc(%ebp),%edx
   11635:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11637:	8b 45 08             	mov    0x8(%ebp),%eax
   1163a:	8b 40 08             	mov    0x8(%eax),%eax
   1163d:	8d 50 01             	lea    0x1(%eax),%edx
   11640:	8b 45 08             	mov    0x8(%ebp),%eax
   11643:	89 50 08             	mov    %edx,0x8(%eax)
}
   11646:	90                   	nop
   11647:	c9                   	leave  
   11648:	c3                   	ret    

00011649 <list_insert_last>:

void list_insert_last (list_t* list, list_node_t* node) {
   11649:	55                   	push   %ebp
   1164a:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1164c:	8b 45 08             	mov    0x8(%ebp),%eax
   1164f:	8b 50 04             	mov    0x4(%eax),%edx
   11652:	8b 45 0c             	mov    0xc(%ebp),%eax
   11655:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11657:	8b 45 0c             	mov    0xc(%ebp),%eax
   1165a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   11661:	ff 75 08             	pushl  0x8(%ebp)
   11664:	e8 49 ff ff ff       	call   115b2 <list_is_empty>
   11669:	83 c4 04             	add    $0x4,%esp
   1166c:	85 c0                	test   %eax,%eax
   1166e:	74 16                	je     11686 <list_insert_last+0x3d>
        list->first = list->last = node;
   11670:	8b 45 08             	mov    0x8(%ebp),%eax
   11673:	8b 55 0c             	mov    0xc(%ebp),%edx
   11676:	89 50 04             	mov    %edx,0x4(%eax)
   11679:	8b 45 08             	mov    0x8(%ebp),%eax
   1167c:	8b 50 04             	mov    0x4(%eax),%edx
   1167f:	8b 45 08             	mov    0x8(%ebp),%eax
   11682:	89 10                	mov    %edx,(%eax)
   11684:	eb 15                	jmp    1169b <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11686:	8b 45 08             	mov    0x8(%ebp),%eax
   11689:	8b 40 04             	mov    0x4(%eax),%eax
   1168c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1168f:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11692:	8b 45 08             	mov    0x8(%ebp),%eax
   11695:	8b 55 0c             	mov    0xc(%ebp),%edx
   11698:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   1169b:	8b 45 08             	mov    0x8(%ebp),%eax
   1169e:	8b 40 08             	mov    0x8(%eax),%eax
   116a1:	8d 50 01             	lea    0x1(%eax),%edx
   116a4:	8b 45 08             	mov    0x8(%ebp),%eax
   116a7:	89 50 08             	mov    %edx,0x8(%eax)
}
   116aa:	90                   	nop
   116ab:	c9                   	leave  
   116ac:	c3                   	ret    

000116ad <list_delete_first>:


list_node_t* list_delete_first (list_t* list) {
   116ad:	55                   	push   %ebp
   116ae:	89 e5                	mov    %esp,%ebp
   116b0:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list)) {
   116b3:	ff 75 08             	pushl  0x8(%ebp)
   116b6:	e8 f7 fe ff ff       	call   115b2 <list_is_empty>
   116bb:	83 c4 04             	add    $0x4,%esp
   116be:	85 c0                	test   %eax,%eax
   116c0:	74 07                	je     116c9 <list_delete_first+0x1c>
        return (list_node_t*)0;
   116c2:	b8 00 00 00 00       	mov    $0x0,%eax
   116c7:	eb 5b                	jmp    11724 <list_delete_first+0x77>
    }

    list_node_t* remove_node = list->first;
   116c9:	8b 45 08             	mov    0x8(%ebp),%eax
   116cc:	8b 00                	mov    (%eax),%eax
   116ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   116d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116d4:	8b 50 04             	mov    0x4(%eax),%edx
   116d7:	8b 45 08             	mov    0x8(%ebp),%eax
   116da:	89 10                	mov    %edx,(%eax)

    if( list->first == (list_node_t*)0 ) {
   116dc:	8b 45 08             	mov    0x8(%ebp),%eax
   116df:	8b 00                	mov    (%eax),%eax
   116e1:	85 c0                	test   %eax,%eax
   116e3:	75 0c                	jne    116f1 <list_delete_first+0x44>
        list->last = (list_node_t*)0;
   116e5:	8b 45 08             	mov    0x8(%ebp),%eax
   116e8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116ef:	eb 0c                	jmp    116fd <list_delete_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t*)0;
   116f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116f4:	8b 40 04             	mov    0x4(%eax),%eax
   116f7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        //list->first->pre = (list_node_t*)0;
    }

    remove_node->pre = remove_node->next = (list_node_t*)0;
   116fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11700:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11707:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1170a:	8b 50 04             	mov    0x4(%eax),%edx
   1170d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11710:	89 10                	mov    %edx,(%eax)
    list->count--;
   11712:	8b 45 08             	mov    0x8(%ebp),%eax
   11715:	8b 40 08             	mov    0x8(%eax),%eax
   11718:	8d 50 ff             	lea    -0x1(%eax),%edx
   1171b:	8b 45 08             	mov    0x8(%ebp),%eax
   1171e:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   11721:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11724:	c9                   	leave  
   11725:	c3                   	ret    

00011726 <list_delete>:

list_node_t* list_delete (list_t* list, list_node_t* node) {
   11726:	55                   	push   %ebp
   11727:	89 e5                	mov    %esp,%ebp
    if(node == list->first) {
   11729:	8b 45 08             	mov    0x8(%ebp),%eax
   1172c:	8b 00                	mov    (%eax),%eax
   1172e:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11731:	75 0b                	jne    1173e <list_delete+0x18>
        list->first = node->next;
   11733:	8b 45 0c             	mov    0xc(%ebp),%eax
   11736:	8b 50 04             	mov    0x4(%eax),%edx
   11739:	8b 45 08             	mov    0x8(%ebp),%eax
   1173c:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last) {
   1173e:	8b 45 08             	mov    0x8(%ebp),%eax
   11741:	8b 40 04             	mov    0x4(%eax),%eax
   11744:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11747:	75 0b                	jne    11754 <list_delete+0x2e>
        list->last = node->pre;
   11749:	8b 45 0c             	mov    0xc(%ebp),%eax
   1174c:	8b 10                	mov    (%eax),%edx
   1174e:	8b 45 08             	mov    0x8(%ebp),%eax
   11751:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if(node->pre) {
   11754:	8b 45 0c             	mov    0xc(%ebp),%eax
   11757:	8b 00                	mov    (%eax),%eax
   11759:	85 c0                	test   %eax,%eax
   1175b:	74 0e                	je     1176b <list_delete+0x45>
        node->pre->next = node->next;
   1175d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11760:	8b 00                	mov    (%eax),%eax
   11762:	8b 55 0c             	mov    0xc(%ebp),%edx
   11765:	8b 52 04             	mov    0x4(%edx),%edx
   11768:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) {
   1176b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1176e:	8b 40 04             	mov    0x4(%eax),%eax
   11771:	85 c0                	test   %eax,%eax
   11773:	74 0d                	je     11782 <list_delete+0x5c>
        node->next->pre = node->pre;
   11775:	8b 45 0c             	mov    0xc(%ebp),%eax
   11778:	8b 40 04             	mov    0x4(%eax),%eax
   1177b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1177e:	8b 12                	mov    (%edx),%edx
   11780:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   11782:	8b 45 0c             	mov    0xc(%ebp),%eax
   11785:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1178c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1178f:	8b 50 04             	mov    0x4(%eax),%edx
   11792:	8b 45 0c             	mov    0xc(%ebp),%eax
   11795:	89 10                	mov    %edx,(%eax)

    list->count--;
   11797:	8b 45 08             	mov    0x8(%ebp),%eax
   1179a:	8b 40 08             	mov    0x8(%eax),%eax
   1179d:	8d 50 ff             	lea    -0x1(%eax),%edx
   117a0:	8b 45 08             	mov    0x8(%ebp),%eax
   117a3:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   117a6:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   117a9:	5d                   	pop    %ebp
   117aa:	c3                   	ret    

000117ab <inb>:
static inline uint8_t inb(uint16_t  port) {
   117ab:	55                   	push   %ebp
   117ac:	89 e5                	mov    %esp,%ebp
   117ae:	83 ec 14             	sub    $0x14,%esp
   117b1:	8b 45 08             	mov    0x8(%ebp),%eax
   117b4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   117b8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   117bc:	89 c2                	mov    %eax,%edx
   117be:	ec                   	in     (%dx),%al
   117bf:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   117c2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   117c6:	c9                   	leave  
   117c7:	c3                   	ret    

000117c8 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   117c8:	55                   	push   %ebp
   117c9:	89 e5                	mov    %esp,%ebp
   117cb:	83 ec 08             	sub    $0x8,%esp
   117ce:	8b 55 08             	mov    0x8(%ebp),%edx
   117d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   117d4:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   117d8:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   117db:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   117df:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   117e3:	ee                   	out    %al,(%dx)
}
   117e4:	90                   	nop
   117e5:	c9                   	leave  
   117e6:	c3                   	ret    

000117e7 <log_init>:

#define COM1_PORT       0x3f8

static mutex_t mutex;

void log_init() {
   117e7:	55                   	push   %ebp
   117e8:	89 e5                	mov    %esp,%ebp
   117ea:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   117ed:	83 ec 0c             	sub    $0xc,%esp
   117f0:	68 40 4c 01 00       	push   $0x14c40
   117f5:	e8 a9 07 00 00       	call   11fa3 <mutex_init>
   117fa:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   117fd:	83 ec 08             	sub    $0x8,%esp
   11800:	6a 00                	push   $0x0
   11802:	68 f9 03 00 00       	push   $0x3f9
   11807:	e8 bc ff ff ff       	call   117c8 <outb>
   1180c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   1180f:	83 ec 08             	sub    $0x8,%esp
   11812:	68 80 00 00 00       	push   $0x80
   11817:	68 fb 03 00 00       	push   $0x3fb
   1181c:	e8 a7 ff ff ff       	call   117c8 <outb>
   11821:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   11824:	83 ec 08             	sub    $0x8,%esp
   11827:	6a 03                	push   $0x3
   11829:	68 f8 03 00 00       	push   $0x3f8
   1182e:	e8 95 ff ff ff       	call   117c8 <outb>
   11833:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   11836:	83 ec 08             	sub    $0x8,%esp
   11839:	6a 00                	push   $0x0
   1183b:	68 f9 03 00 00       	push   $0x3f9
   11840:	e8 83 ff ff ff       	call   117c8 <outb>
   11845:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   11848:	83 ec 08             	sub    $0x8,%esp
   1184b:	6a 03                	push   $0x3
   1184d:	68 fb 03 00 00       	push   $0x3fb
   11852:	e8 71 ff ff ff       	call   117c8 <outb>
   11857:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   1185a:	83 ec 08             	sub    $0x8,%esp
   1185d:	68 c7 00 00 00       	push   $0xc7
   11862:	68 fa 03 00 00       	push   $0x3fa
   11867:	e8 5c ff ff ff       	call   117c8 <outb>
   1186c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   1186f:	83 ec 08             	sub    $0x8,%esp
   11872:	6a 0f                	push   $0xf
   11874:	68 fc 03 00 00       	push   $0x3fc
   11879:	e8 4a ff ff ff       	call   117c8 <outb>
   1187e:	83 c4 10             	add    $0x10,%esp
}
   11881:	90                   	nop
   11882:	c9                   	leave  
   11883:	c3                   	ret    

00011884 <klog>:


void klog(const char* fmt, ...) {
   11884:	55                   	push   %ebp
   11885:	89 e5                	mov    %esp,%ebp
   11887:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   1188d:	83 ec 04             	sub    $0x4,%esp
   11890:	68 80 00 00 00       	push   $0x80
   11895:	6a 00                	push   $0x0
   11897:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1189d:	50                   	push   %eax
   1189e:	e8 46 fa ff ff       	call   112e9 <k_memset>
   118a3:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   118a6:	8d 45 0c             	lea    0xc(%ebp),%eax
   118a9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    k_vsprint(buf, fmt, args);
   118af:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   118b5:	83 ec 04             	sub    $0x4,%esp
   118b8:	50                   	push   %eax
   118b9:	ff 75 08             	pushl  0x8(%ebp)
   118bc:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   118c2:	50                   	push   %eax
   118c3:	e8 9d fb ff ff       	call   11465 <k_vsprint>
   118c8:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   118cb:	83 ec 0c             	sub    $0xc,%esp
   118ce:	68 40 4c 01 00       	push   $0x14c40
   118d3:	e8 f9 06 00 00       	call   11fd1 <mutex_lock>
   118d8:	83 c4 10             	add    $0x10,%esp
    // irq_state_t state = irq_enter_proection();

    const char *p = buf;
   118db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   118e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   118e4:	eb 3b                	jmp    11921 <klog+0x9d>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   118e6:	90                   	nop
   118e7:	83 ec 0c             	sub    $0xc,%esp
   118ea:	68 fd 03 00 00       	push   $0x3fd
   118ef:	e8 b7 fe ff ff       	call   117ab <inb>
   118f4:	83 c4 10             	add    $0x10,%esp
   118f7:	0f b6 c0             	movzbl %al,%eax
   118fa:	83 e0 40             	and    $0x40,%eax
   118fd:	85 c0                	test   %eax,%eax
   118ff:	74 e6                	je     118e7 <klog+0x63>
        outb(COM1_PORT, *p++);
   11901:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11904:	8d 50 01             	lea    0x1(%eax),%edx
   11907:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1190a:	0f b6 00             	movzbl (%eax),%eax
   1190d:	0f b6 c0             	movzbl %al,%eax
   11910:	83 ec 08             	sub    $0x8,%esp
   11913:	50                   	push   %eax
   11914:	68 f8 03 00 00       	push   $0x3f8
   11919:	e8 aa fe ff ff       	call   117c8 <outb>
   1191e:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11921:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11924:	0f b6 00             	movzbl (%eax),%eax
   11927:	84 c0                	test   %al,%al
   11929:	75 bb                	jne    118e6 <klog+0x62>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   1192b:	83 ec 08             	sub    $0x8,%esp
   1192e:	6a 0d                	push   $0xd
   11930:	68 f8 03 00 00       	push   $0x3f8
   11935:	e8 8e fe ff ff       	call   117c8 <outb>
   1193a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   1193d:	83 ec 08             	sub    $0x8,%esp
   11940:	6a 0a                	push   $0xa
   11942:	68 f8 03 00 00       	push   $0x3f8
   11947:	e8 7c fe ff ff       	call   117c8 <outb>
   1194c:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   1194f:	83 ec 0c             	sub    $0xc,%esp
   11952:	68 40 4c 01 00       	push   $0x14c40
   11957:	e8 09 07 00 00       	call   12065 <mutex_unlock>
   1195c:	83 c4 10             	add    $0x10,%esp
    // irq_leave_proection(state);

}
   1195f:	90                   	nop
   11960:	c9                   	leave  
   11961:	c3                   	ret    

00011962 <down2>:

uint32_t memory_create_uvm();

void memory_init (boot_info_t* boot_info);

static inline uint32_t down2(uint32_t size, uint32_t bound) {
   11962:	55                   	push   %ebp
   11963:	89 e5                	mov    %esp,%ebp
    return size & ~ (bound - 1);
   11965:	8b 45 0c             	mov    0xc(%ebp),%eax
   11968:	f7 d8                	neg    %eax
   1196a:	23 45 08             	and    0x8(%ebp),%eax
}
   1196d:	5d                   	pop    %ebp
   1196e:	c3                   	ret    

0001196f <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   1196f:	55                   	push   %ebp
   11970:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~ (bound - 1);
   11972:	8b 55 08             	mov    0x8(%ebp),%edx
   11975:	8b 45 0c             	mov    0xc(%ebp),%eax
   11978:	01 d0                	add    %edx,%eax
   1197a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1197d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11980:	f7 d8                	neg    %eax
   11982:	21 d0                	and    %edx,%eax
}
   11984:	5d                   	pop    %ebp
   11985:	c3                   	ret    

00011986 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   11986:	55                   	push   %ebp
   11987:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   11989:	8b 45 08             	mov    0x8(%ebp),%eax
   1198c:	0f 22 d8             	mov    %eax,%cr3
}
   1198f:	90                   	nop
   11990:	5d                   	pop    %ebp
   11991:	c3                   	ret    

00011992 <mmu_set_page_dir>:
    };
}pte_t;
#pragma pack()


static inline void mmu_set_page_dir(uint32_t paddr) {
   11992:	55                   	push   %ebp
   11993:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11995:	ff 75 08             	pushl  0x8(%ebp)
   11998:	e8 e9 ff ff ff       	call   11986 <write_cr3>
   1199d:	83 c4 04             	add    $0x4,%esp
}
   119a0:	90                   	nop
   119a1:	c9                   	leave  
   119a2:	c3                   	ret    

000119a3 <pde_index>:

static inline uint32_t pde_index (uint32_t vaddr) {
   119a3:	55                   	push   %ebp
   119a4:	89 e5                	mov    %esp,%ebp
   119a6:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22);      // 只取高10位
   119a9:	8b 45 08             	mov    0x8(%ebp),%eax
   119ac:	c1 e8 16             	shr    $0x16,%eax
   119af:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   119b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   119b5:	c9                   	leave  
   119b6:	c3                   	ret    

000119b7 <pde_paddr>:


static inline uint32_t pde_paddr (pde_t * pde) {
   119b7:	55                   	push   %ebp
   119b8:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   119ba:	8b 45 08             	mov    0x8(%ebp),%eax
   119bd:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   119c1:	c0 ea 04             	shr    $0x4,%dl
   119c4:	0f b6 d2             	movzbl %dl,%edx
   119c7:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   119cb:	c1 e1 04             	shl    $0x4,%ecx
   119ce:	09 ca                	or     %ecx,%edx
   119d0:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   119d4:	c1 e0 0c             	shl    $0xc,%eax
   119d7:	09 d0                	or     %edx,%eax
   119d9:	c1 e0 0c             	shl    $0xc,%eax
}
   119dc:	5d                   	pop    %ebp
   119dd:	c3                   	ret    

000119de <pte_index>:


static inline int pte_index (uint32_t vaddr) {
   119de:	55                   	push   %ebp
   119df:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   119e1:	8b 45 08             	mov    0x8(%ebp),%eax
   119e4:	c1 e8 0c             	shr    $0xc,%eax
   119e7:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   119ec:	5d                   	pop    %ebp
   119ed:	c3                   	ret    

000119ee <addr_alloc_init>:
static pde_t g_kernel_page_dir[PDE_CNT] __attribute__( (aligned(MEM_PAGE_SIZE)) );


static void 
addr_alloc_init(addr_alloc_t * alloc, uint8_t* bits, uint32_t start, 
uint32_t size, uint32_t page_size) {
   119ee:	55                   	push   %ebp
   119ef:	89 e5                	mov    %esp,%ebp
   119f1:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   119f4:	8b 45 08             	mov    0x8(%ebp),%eax
   119f7:	83 ec 0c             	sub    $0xc,%esp
   119fa:	50                   	push   %eax
   119fb:	e8 a3 05 00 00       	call   11fa3 <mutex_init>
   11a00:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   11a03:	8b 45 08             	mov    0x8(%ebp),%eax
   11a06:	8b 55 10             	mov    0x10(%ebp),%edx
   11a09:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   11a0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0f:	8b 55 14             	mov    0x14(%ebp),%edx
   11a12:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   11a15:	8b 45 08             	mov    0x8(%ebp),%eax
   11a18:	8b 55 18             	mov    0x18(%ebp),%edx
   11a1b:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   11a1e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a21:	8b 40 20             	mov    0x20(%eax),%eax
   11a24:	ba 00 00 00 00       	mov    $0x0,%edx
   11a29:	f7 75 18             	divl   0x18(%ebp)
   11a2c:	89 c2                	mov    %eax,%edx
   11a2e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a31:	83 c0 14             	add    $0x14,%eax
   11a34:	6a 00                	push   $0x0
   11a36:	52                   	push   %edx
   11a37:	ff 75 0c             	pushl  0xc(%ebp)
   11a3a:	50                   	push   %eax
   11a3b:	e8 bf f4 ff ff       	call   10eff <bitmap_init>
   11a40:	83 c4 10             	add    $0x10,%esp
}
   11a43:	90                   	nop
   11a44:	c9                   	leave  
   11a45:	c3                   	ret    

00011a46 <addr_alloc_page>:


static uint32_t 
addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   11a46:	55                   	push   %ebp
   11a47:	89 e5                	mov    %esp,%ebp
   11a49:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   11a4c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   11a53:	8b 45 08             	mov    0x8(%ebp),%eax
   11a56:	83 ec 0c             	sub    $0xc,%esp
   11a59:	50                   	push   %eax
   11a5a:	e8 72 05 00 00       	call   11fd1 <mutex_lock>
   11a5f:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   11a62:	8b 45 08             	mov    0x8(%ebp),%eax
   11a65:	83 c0 14             	add    $0x14,%eax
   11a68:	83 ec 04             	sub    $0x4,%esp
   11a6b:	ff 75 0c             	pushl  0xc(%ebp)
   11a6e:	6a 00                	push   $0x0
   11a70:	50                   	push   %eax
   11a71:	e8 05 f6 ff ff       	call   1107b <bitmap_alloc_nbits>
   11a76:	83 c4 10             	add    $0x10,%esp
   11a79:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   11a7c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a80:	78 17                	js     11a99 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   11a82:	8b 45 08             	mov    0x8(%ebp),%eax
   11a85:	8b 50 1c             	mov    0x1c(%eax),%edx
   11a88:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8b:	8b 48 24             	mov    0x24(%eax),%ecx
   11a8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a91:	0f af c1             	imul   %ecx,%eax
   11a94:	01 d0                	add    %edx,%eax
   11a96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   11a99:	8b 45 08             	mov    0x8(%ebp),%eax
   11a9c:	83 ec 0c             	sub    $0xc,%esp
   11a9f:	50                   	push   %eax
   11aa0:	e8 c0 05 00 00       	call   12065 <mutex_unlock>
   11aa5:	83 c4 10             	add    $0x10,%esp
    return addr;
   11aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11aab:	c9                   	leave  
   11aac:	c3                   	ret    

00011aad <addr_free_page>:


static uint32_t
addr_free_page(addr_alloc_t * alloc, uint32_t addr, int page_count) {
   11aad:	55                   	push   %ebp
   11aae:	89 e5                	mov    %esp,%ebp
   11ab0:	53                   	push   %ebx
   11ab1:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   11ab4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab7:	83 ec 0c             	sub    $0xc,%esp
   11aba:	50                   	push   %eax
   11abb:	e8 11 05 00 00       	call   11fd1 <mutex_lock>
   11ac0:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   11ac3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac6:	8b 40 1c             	mov    0x1c(%eax),%eax
   11ac9:	8b 55 0c             	mov    0xc(%ebp),%edx
   11acc:	89 d1                	mov    %edx,%ecx
   11ace:	29 c1                	sub    %eax,%ecx
   11ad0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ad3:	8b 58 24             	mov    0x24(%eax),%ebx
   11ad6:	89 c8                	mov    %ecx,%eax
   11ad8:	ba 00 00 00 00       	mov    $0x0,%edx
   11add:	f7 f3                	div    %ebx
   11adf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   11ae2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ae5:	8b 55 08             	mov    0x8(%ebp),%edx
   11ae8:	83 c2 14             	add    $0x14,%edx
   11aeb:	6a 00                	push   $0x0
   11aed:	ff 75 10             	pushl  0x10(%ebp)
   11af0:	50                   	push   %eax
   11af1:	52                   	push   %edx
   11af2:	e8 b0 f4 ff ff       	call   10fa7 <bitmap_set_bit>
   11af7:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   11afa:	8b 45 08             	mov    0x8(%ebp),%eax
   11afd:	83 ec 0c             	sub    $0xc,%esp
   11b00:	50                   	push   %eax
   11b01:	e8 5f 05 00 00       	call   12065 <mutex_unlock>
   11b06:	83 c4 10             	add    $0x10,%esp
}
   11b09:	90                   	nop
   11b0a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11b0d:	c9                   	leave  
   11b0e:	c3                   	ret    

00011b0f <some_test>:


void some_test() {
   11b0f:	55                   	push   %ebp
   11b10:	89 e5                	mov    %esp,%ebp
   11b12:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t addr_alloc;
    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64*4096, 4096);
   11b15:	83 ec 0c             	sub    $0xc,%esp
   11b18:	68 00 10 00 00       	push   $0x1000
   11b1d:	68 00 00 04 00       	push   $0x40000
   11b22:	68 00 10 00 00       	push   $0x1000
   11b27:	8d 45 b8             	lea    -0x48(%ebp),%eax
   11b2a:	50                   	push   %eax
   11b2b:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11b2e:	50                   	push   %eax
   11b2f:	e8 ba fe ff ff       	call   119ee <addr_alloc_init>
   11b34:	83 c4 20             	add    $0x20,%esp
    for(int i=0; i<32; i++) {
   11b37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11b3e:	eb 2b                	jmp    11b6b <some_test+0x5c>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   11b40:	83 ec 08             	sub    $0x8,%esp
   11b43:	6a 02                	push   $0x2
   11b45:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11b48:	50                   	push   %eax
   11b49:	e8 f8 fe ff ff       	call   11a46 <addr_alloc_page>
   11b4e:	83 c4 10             	add    $0x10,%esp
   11b51:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("alloc addr: 0x%x", addr);
   11b54:	83 ec 08             	sub    $0x8,%esp
   11b57:	ff 75 e8             	pushl  -0x18(%ebp)
   11b5a:	68 a0 2a 01 00       	push   $0x12aa0
   11b5f:	e8 20 fd ff ff       	call   11884 <klog>
   11b64:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11b67:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11b6b:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   11b6f:	7e cf                	jle    11b40 <some_test+0x31>
    }
    uint32_t addr = 0x1000;
   11b71:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for(int i=0; i<32; i++) {
   11b78:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11b7f:	eb 32                	jmp    11bb3 <some_test+0xa4>
        addr_free_page(&addr_alloc, addr, 2);
   11b81:	83 ec 04             	sub    $0x4,%esp
   11b84:	6a 02                	push   $0x2
   11b86:	ff 75 f0             	pushl  -0x10(%ebp)
   11b89:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11b8c:	50                   	push   %eax
   11b8d:	e8 1b ff ff ff       	call   11aad <addr_free_page>
   11b92:	83 c4 10             	add    $0x10,%esp
        addr += 8192;
   11b95:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        klog("free addr: 0x%x", addr);
   11b9c:	83 ec 08             	sub    $0x8,%esp
   11b9f:	ff 75 f0             	pushl  -0x10(%ebp)
   11ba2:	68 b1 2a 01 00       	push   $0x12ab1
   11ba7:	e8 d8 fc ff ff       	call   11884 <klog>
   11bac:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11baf:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11bb3:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   11bb7:	7e c8                	jle    11b81 <some_test+0x72>
    }
}
   11bb9:	90                   	nop
   11bba:	c9                   	leave  
   11bbb:	c3                   	ret    

00011bbc <show_mem_info>:


static void        
show_mem_info(boot_info_t* boot_info) {
   11bbc:	55                   	push   %ebp
   11bbd:	89 e5                	mov    %esp,%ebp
   11bbf:	83 ec 18             	sub    $0x18,%esp
    klog("mem region");
   11bc2:	83 ec 0c             	sub    $0xc,%esp
   11bc5:	68 c1 2a 01 00       	push   $0x12ac1
   11bca:	e8 b5 fc ff ff       	call   11884 <klog>
   11bcf:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11bd2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11bd9:	eb 29                	jmp    11c04 <show_mem_info+0x48>
        klog("[%d]: 0x%x - 0x%x", i, 
   11bdb:	8b 45 08             	mov    0x8(%ebp),%eax
   11bde:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11be1:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   11be5:	8b 45 08             	mov    0x8(%ebp),%eax
   11be8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11beb:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   11bee:	52                   	push   %edx
   11bef:	50                   	push   %eax
   11bf0:	ff 75 f4             	pushl  -0xc(%ebp)
   11bf3:	68 cc 2a 01 00       	push   $0x12acc
   11bf8:	e8 87 fc ff ff       	call   11884 <klog>
   11bfd:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11c00:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11c04:	8b 45 08             	mov    0x8(%ebp),%eax
   11c07:	8b 40 50             	mov    0x50(%eax),%eax
   11c0a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11c0d:	7c cc                	jl     11bdb <show_mem_info+0x1f>
            boot_info->ram_region_cfg[i].start, 
            boot_info->ram_region_cfg[i].size );
    }
    klog("");
   11c0f:	83 ec 0c             	sub    $0xc,%esp
   11c12:	68 de 2a 01 00       	push   $0x12ade
   11c17:	e8 68 fc ff ff       	call   11884 <klog>
   11c1c:	83 c4 10             	add    $0x10,%esp
}
   11c1f:	90                   	nop
   11c20:	c9                   	leave  
   11c21:	c3                   	ret    

00011c22 <total_mem_size>:


static uint32_t 
total_mem_size(boot_info_t* boot_info) {
   11c22:	55                   	push   %ebp
   11c23:	89 e5                	mov    %esp,%ebp
   11c25:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   11c28:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11c2f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   11c36:	eb 11                	jmp    11c49 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   11c38:	8b 45 08             	mov    0x8(%ebp),%eax
   11c3b:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11c3e:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   11c42:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11c45:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   11c49:	8b 45 08             	mov    0x8(%ebp),%eax
   11c4c:	8b 40 50             	mov    0x50(%eax),%eax
   11c4f:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   11c52:	7c e4                	jl     11c38 <total_mem_size+0x16>
    }
    return mem_size;
   11c54:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11c57:	c9                   	leave  
   11c58:	c3                   	ret    

00011c59 <find_pte>:





pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   11c59:	55                   	push   %ebp
   11c5a:	89 e5                	mov    %esp,%ebp
   11c5c:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   11c5f:	ff 75 0c             	pushl  0xc(%ebp)
   11c62:	e8 3c fd ff ff       	call   119a3 <pde_index>
   11c67:	83 c4 04             	add    $0x4,%esp
   11c6a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11c71:	8b 45 08             	mov    0x8(%ebp),%eax
   11c74:	01 d0                	add    %edx,%eax
   11c76:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   11c79:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c7c:	0f b6 00             	movzbl (%eax),%eax
   11c7f:	83 e0 01             	and    $0x1,%eax
   11c82:	84 c0                	test   %al,%al
   11c84:	74 10                	je     11c96 <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   11c86:	ff 75 f0             	pushl  -0x10(%ebp)
   11c89:	e8 29 fd ff ff       	call   119b7 <pde_paddr>
   11c8e:	83 c4 04             	add    $0x4,%esp
   11c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11c94:	eb 57                	jmp    11ced <find_pte+0x94>
    } else {
        if (alloc == 0) {
   11c96:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11c9a:	75 07                	jne    11ca3 <find_pte+0x4a>
            return (pte_t *)0;
   11c9c:	b8 00 00 00 00       	mov    $0x0,%eax
   11ca1:	eb 64                	jmp    11d07 <find_pte+0xae>
        }
        uint32_t pg_paddr = addr_alloc_page(&g_paddr_alloc, 1);
   11ca3:	83 ec 08             	sub    $0x8,%esp
   11ca6:	6a 01                	push   $0x1
   11ca8:	68 00 50 01 00       	push   $0x15000
   11cad:	e8 94 fd ff ff       	call   11a46 <addr_alloc_page>
   11cb2:	83 c4 10             	add    $0x10,%esp
   11cb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   11cb8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11cbc:	75 07                	jne    11cc5 <find_pte+0x6c>
            return (pte_t *)0;
   11cbe:	b8 00 00 00 00       	mov    $0x0,%eax
   11cc3:	eb 42                	jmp    11d07 <find_pte+0xae>
        }
        pde->v = pg_paddr | PDE_P | PDE_W | PDE_U;
   11cc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cc8:	83 c8 07             	or     $0x7,%eax
   11ccb:	89 c2                	mov    %eax,%edx
   11ccd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cd0:	89 10                	mov    %edx,(%eax)

        page_table = (pte_t *)(pg_paddr);
   11cd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11cd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        k_memset(page_table, 0, MEM_PAGE_SIZE);
   11cd8:	83 ec 04             	sub    $0x4,%esp
   11cdb:	68 00 10 00 00       	push   $0x1000
   11ce0:	6a 00                	push   $0x0
   11ce2:	ff 75 f4             	pushl  -0xc(%ebp)
   11ce5:	e8 ff f5 ff ff       	call   112e9 <k_memset>
   11cea:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   11ced:	83 ec 0c             	sub    $0xc,%esp
   11cf0:	ff 75 0c             	pushl  0xc(%ebp)
   11cf3:	e8 e6 fc ff ff       	call   119de <pte_index>
   11cf8:	83 c4 10             	add    $0x10,%esp
   11cfb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d05:	01 d0                	add    %edx,%eax
}
   11d07:	c9                   	leave  
   11d08:	c3                   	ret    

00011d09 <memory_create_map>:

// 创建映射
int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   11d09:	55                   	push   %ebp
   11d0a:	89 e5                	mov    %esp,%ebp
   11d0c:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   11d0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11d16:	eb 62                	jmp    11d7a <memory_create_map+0x71>
        // klog("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   11d18:	83 ec 04             	sub    $0x4,%esp
   11d1b:	6a 01                	push   $0x1
   11d1d:	ff 75 0c             	pushl  0xc(%ebp)
   11d20:	ff 75 08             	pushl  0x8(%ebp)
   11d23:	e8 31 ff ff ff       	call   11c59 <find_pte>
   11d28:	83 c4 10             	add    $0x10,%esp
   11d2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   11d2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d32:	75 07                	jne    11d3b <memory_create_map+0x32>
            return -1;
   11d34:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d39:	eb 4c                	jmp    11d87 <memory_create_map+0x7e>
        }
        if (pte->present != 0) klog("error");
   11d3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d3e:	0f b6 00             	movzbl (%eax),%eax
   11d41:	83 e0 01             	and    $0x1,%eax
   11d44:	84 c0                	test   %al,%al
   11d46:	74 10                	je     11d58 <memory_create_map+0x4f>
   11d48:	83 ec 0c             	sub    $0xc,%esp
   11d4b:	68 df 2a 01 00       	push   $0x12adf
   11d50:	e8 2f fb ff ff       	call   11884 <klog>
   11d55:	83 c4 10             	add    $0x10,%esp

        // klog("pte addr: 0x%x", (uint32_t)pte);

        pte->v = paddr | perm | PTE_P;
   11d58:	8b 45 10             	mov    0x10(%ebp),%eax
   11d5b:	0b 45 18             	or     0x18(%ebp),%eax
   11d5e:	83 c8 01             	or     $0x1,%eax
   11d61:	89 c2                	mov    %eax,%edx
   11d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d66:	89 10                	mov    %edx,(%eax)
        vaddr += MEM_PAGE_SIZE;
   11d68:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   11d6f:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   11d76:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d7d:	3b 45 14             	cmp    0x14(%ebp),%eax
   11d80:	7c 96                	jl     11d18 <memory_create_map+0xf>
    }

    return 0;
   11d82:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d87:	c9                   	leave  
   11d88:	c3                   	ret    

00011d89 <create_kernel_table>:


void create_kernel_table (void) {
   11d89:	55                   	push   %ebp
   11d8a:	89 e5                	mov    %esp,%ebp
   11d8c:	83 ec 28             	sub    $0x28,%esp
        {s_text,                e_text,                         s_text,                 0    },      // 内核代码区
        {s_data,                (void *)(MEM_EBDA_START),       s_data,                 PTE_W},      // 内核数据区
        {(void*)MEM_EXT_START,  (void*)MEM_EXT_END,             (void*)MEM_EXT_START,   PTE_W},
    };

    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11d8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11d96:	eb 7d                	jmp    11e15 <create_kernel_table+0x8c>
        memory_map_t * map = kernel_map + i;
   11d98:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d9b:	c1 e0 04             	shl    $0x4,%eax
   11d9e:	05 20 30 01 00       	add    $0x13020,%eax
   11da3:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   11da6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11da9:	8b 00                	mov    (%eax),%eax
   11dab:	68 00 10 00 00       	push   $0x1000
   11db0:	50                   	push   %eax
   11db1:	e8 ac fb ff ff       	call   11962 <down2>
   11db6:	83 c4 08             	add    $0x8,%esp
   11db9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend   = up2  ((uint32_t)map->vend, MEM_PAGE_SIZE);
   11dbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11dbf:	8b 40 04             	mov    0x4(%eax),%eax
   11dc2:	68 00 10 00 00       	push   $0x1000
   11dc7:	50                   	push   %eax
   11dc8:	e8 a2 fb ff ff       	call   1196f <up2>
   11dcd:	83 c4 08             	add    $0x8,%esp
   11dd0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   11dd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11dd6:	2b 45 ec             	sub    -0x14(%ebp),%eax
   11dd9:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   11ddf:	85 c0                	test   %eax,%eax
   11de1:	0f 48 c2             	cmovs  %edx,%eax
   11de4:	c1 f8 0c             	sar    $0xc,%eax
   11de7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(g_kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   11dea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ded:	8b 50 0c             	mov    0xc(%eax),%edx
   11df0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11df3:	8b 40 08             	mov    0x8(%eax),%eax
   11df6:	89 c1                	mov    %eax,%ecx
   11df8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dfb:	83 ec 0c             	sub    $0xc,%esp
   11dfe:	52                   	push   %edx
   11dff:	ff 75 e4             	pushl  -0x1c(%ebp)
   11e02:	51                   	push   %ecx
   11e03:	50                   	push   %eax
   11e04:	68 00 60 01 00       	push   $0x16000
   11e09:	e8 fb fe ff ff       	call   11d09 <memory_create_map>
   11e0e:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11e11:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e18:	83 f8 03             	cmp    $0x3,%eax
   11e1b:	0f 86 77 ff ff ff    	jbe    11d98 <create_kernel_table+0xf>
    }
}
   11e21:	90                   	nop
   11e22:	c9                   	leave  
   11e23:	c3                   	ret    

00011e24 <memory_init>:


void memory_init (boot_info_t* boot_info) {
   11e24:	55                   	push   %ebp
   11e25:	89 e5                	mov    %esp,%ebp
   11e27:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;
    uint8_t * mem_free = (uint8_t*)&mem_free_start;
   11e2a:	c7 45 f4 20 f1 01 00 	movl   $0x1f120,-0xc(%ebp)
    klog("memory init");
   11e31:	83 ec 0c             	sub    $0xc,%esp
   11e34:	68 e5 2a 01 00       	push   $0x12ae5
   11e39:	e8 46 fa ff ff       	call   11884 <klog>
   11e3e:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   11e41:	83 ec 0c             	sub    $0xc,%esp
   11e44:	ff 75 08             	pushl  0x8(%ebp)
   11e47:	e8 70 fd ff ff       	call   11bbc <show_mem_info>
   11e4c:	83 c4 10             	add    $0x10,%esp

    
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   11e4f:	83 ec 0c             	sub    $0xc,%esp
   11e52:	ff 75 08             	pushl  0x8(%ebp)
   11e55:	e8 c8 fd ff ff       	call   11c22 <total_mem_size>
   11e5a:	83 c4 10             	add    $0x10,%esp
   11e5d:	2d 00 00 10 00       	sub    $0x100000,%eax
   11e62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   11e65:	83 ec 08             	sub    $0x8,%esp
   11e68:	68 00 10 00 00       	push   $0x1000
   11e6d:	ff 75 f0             	pushl  -0x10(%ebp)
   11e70:	e8 ed fa ff ff       	call   11962 <down2>
   11e75:	83 c4 10             	add    $0x10,%esp
   11e78:	89 45 f0             	mov    %eax,-0x10(%ebp)

    klog("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   11e7b:	83 ec 04             	sub    $0x4,%esp
   11e7e:	ff 75 f0             	pushl  -0x10(%ebp)
   11e81:	68 00 00 10 00       	push   $0x100000
   11e86:	68 f1 2a 01 00       	push   $0x12af1
   11e8b:	e8 f4 f9 ff ff       	call   11884 <klog>
   11e90:	83 c4 10             	add    $0x10,%esp
    addr_alloc_init(&g_paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   11e93:	83 ec 0c             	sub    $0xc,%esp
   11e96:	68 00 10 00 00       	push   $0x1000
   11e9b:	ff 75 f0             	pushl  -0x10(%ebp)
   11e9e:	68 00 00 10 00       	push   $0x100000
   11ea3:	ff 75 f4             	pushl  -0xc(%ebp)
   11ea6:	68 00 50 01 00       	push   $0x15000
   11eab:	e8 3e fb ff ff       	call   119ee <addr_alloc_init>
   11eb0:	83 c4 20             	add    $0x20,%esp

    mem_free += bitmap_byte_count(g_paddr_alloc.size / MEM_PAGE_SIZE);
   11eb3:	a1 20 50 01 00       	mov    0x15020,%eax
   11eb8:	c1 e8 0c             	shr    $0xc,%eax
   11ebb:	83 ec 0c             	sub    $0xc,%esp
   11ebe:	50                   	push   %eax
   11ebf:	e8 25 f0 ff ff       	call   10ee9 <bitmap_byte_count>
   11ec4:	83 c4 10             	add    $0x10,%esp
   11ec7:	01 45 f4             	add    %eax,-0xc(%ebp)
    if (mem_free < (uint8_t *)0x800000) {
   11eca:	81 7d f4 ff ff 7f 00 	cmpl   $0x7fffff,-0xc(%ebp)
   11ed1:	77 10                	ja     11ee3 <memory_init+0xbf>
        klog("simple test ok!");
   11ed3:	83 ec 0c             	sub    $0xc,%esp
   11ed6:	68 0f 2b 01 00       	push   $0x12b0f
   11edb:	e8 a4 f9 ff ff       	call   11884 <klog>
   11ee0:	83 c4 10             	add    $0x10,%esp
    }

    k_memset(g_kernel_page_dir, 0, sizeof(g_kernel_page_dir));  // 清空内核表
   11ee3:	83 ec 04             	sub    $0x4,%esp
   11ee6:	68 00 10 00 00       	push   $0x1000
   11eeb:	6a 00                	push   $0x0
   11eed:	68 00 60 01 00       	push   $0x16000
   11ef2:	e8 f2 f3 ff ff       	call   112e9 <k_memset>
   11ef7:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   11efa:	e8 8a fe ff ff       	call   11d89 <create_kernel_table>

    mmu_set_page_dir((uint32_t)g_kernel_page_dir);            // 重新设置页表
   11eff:	b8 00 60 01 00       	mov    $0x16000,%eax
   11f04:	83 ec 0c             	sub    $0xc,%esp
   11f07:	50                   	push   %eax
   11f08:	e8 85 fa ff ff       	call   11992 <mmu_set_page_dir>
   11f0d:	83 c4 10             	add    $0x10,%esp
    
}
   11f10:	90                   	nop
   11f11:	c9                   	leave  
   11f12:	c3                   	ret    

00011f13 <memory_create_uvm>:


uint32_t memory_create_uvm() {
   11f13:	55                   	push   %ebp
   11f14:	89 e5                	mov    %esp,%ebp
   11f16:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&g_paddr_alloc, 1);
   11f19:	83 ec 08             	sub    $0x8,%esp
   11f1c:	6a 01                	push   $0x1
   11f1e:	68 00 50 01 00       	push   $0x15000
   11f23:	e8 1e fb ff ff       	call   11a46 <addr_alloc_page>
   11f28:	83 c4 10             	add    $0x10,%esp
   11f2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == (pde_t*)0) {
   11f2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11f32:	75 07                	jne    11f3b <memory_create_uvm+0x28>
        return 0;  // error
   11f34:	b8 00 00 00 00       	mov    $0x0,%eax
   11f39:	eb 5b                	jmp    11f96 <memory_create_uvm+0x83>
    }

    k_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   11f3b:	83 ec 04             	sub    $0x4,%esp
   11f3e:	68 00 10 00 00       	push   $0x1000
   11f43:	6a 00                	push   $0x0
   11f45:	ff 75 f0             	pushl  -0x10(%ebp)
   11f48:	e8 9c f3 ff ff       	call   112e9 <k_memset>
   11f4d:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   11f50:	83 ec 0c             	sub    $0xc,%esp
   11f53:	68 00 00 00 80       	push   $0x80000000
   11f58:	e8 46 fa ff ff       	call   119a3 <pde_index>
   11f5d:	83 c4 10             	add    $0x10,%esp
   11f60:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(int i=0; i<user_pde_start; i++) {
   11f63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11f6a:	eb 1f                	jmp    11f8b <memory_create_uvm+0x78>
        page_dir[i].v = g_kernel_page_dir[i].v;
   11f6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11f76:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f79:	01 c2                	add    %eax,%edx
   11f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f7e:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   11f85:	89 02                	mov    %eax,(%edx)
    for(int i=0; i<user_pde_start; i++) {
   11f87:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11f8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f8e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   11f91:	77 d9                	ja     11f6c <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   11f93:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f96:	c9                   	leave  
   11f97:	c3                   	ret    

00011f98 <list_count>:
static inline int list_count (list_t* list) {
   11f98:	55                   	push   %ebp
   11f99:	89 e5                	mov    %esp,%ebp
    return list->count;
   11f9b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9e:	8b 40 08             	mov    0x8(%eax),%eax
}
   11fa1:	5d                   	pop    %ebp
   11fa2:	c3                   	ret    

00011fa3 <mutex_init>:
#include <mux.h>
#include <irq.h>
#include <log.h>

void mutex_init (mutex_t * mutex) {
   11fa3:	55                   	push   %ebp
   11fa4:	89 e5                	mov    %esp,%ebp
   11fa6:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   11fa9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fac:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   11fb3:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   11fbc:	8b 45 08             	mov    0x8(%ebp),%eax
   11fbf:	83 c0 08             	add    $0x8,%eax
   11fc2:	83 ec 0c             	sub    $0xc,%esp
   11fc5:	50                   	push   %eax
   11fc6:	e8 fa f5 ff ff       	call   115c5 <list_init>
   11fcb:	83 c4 10             	add    $0x10,%esp
}
   11fce:	90                   	nop
   11fcf:	c9                   	leave  
   11fd0:	c3                   	ret    

00011fd1 <mutex_lock>:

void mutex_lock (mutex_t * mutex) {
   11fd1:	55                   	push   %ebp
   11fd2:	89 e5                	mov    %esp,%ebp
   11fd4:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   11fd7:	e8 e4 ee ff ff       	call   10ec0 <irq_enter_proection>
   11fdc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   11fdf:	e8 31 05 00 00       	call   12515 <task_current>
   11fe4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11fe7:	8b 45 08             	mov    0x8(%ebp),%eax
   11fea:	8b 40 04             	mov    0x4(%eax),%eax
   11fed:	85 c0                	test   %eax,%eax
   11fef:	75 14                	jne    12005 <mutex_lock+0x34>
        mutex->locked_count = 1;
   11ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff4:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   11ffb:	8b 45 08             	mov    0x8(%ebp),%eax
   11ffe:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12001:	89 10                	mov    %edx,(%eax)
   12003:	eb 4f                	jmp    12054 <mutex_lock+0x83>
    } else if (mutex->owner == curr) {
   12005:	8b 45 08             	mov    0x8(%ebp),%eax
   12008:	8b 00                	mov    (%eax),%eax
   1200a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1200d:	75 11                	jne    12020 <mutex_lock+0x4f>
        mutex->locked_count++;
   1200f:	8b 45 08             	mov    0x8(%ebp),%eax
   12012:	8b 40 04             	mov    0x4(%eax),%eax
   12015:	8d 50 01             	lea    0x1(%eax),%edx
   12018:	8b 45 08             	mov    0x8(%ebp),%eax
   1201b:	89 50 04             	mov    %edx,0x4(%eax)
   1201e:	eb 34                	jmp    12054 <mutex_lock+0x83>
    } else {
        task_t * curr = task_current();
   12020:	e8 f0 04 00 00       	call   12515 <task_current>
   12025:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   12028:	83 ec 0c             	sub    $0xc,%esp
   1202b:	ff 75 ec             	pushl  -0x14(%ebp)
   1202e:	e8 21 05 00 00       	call   12554 <task_set_block>
   12033:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   12036:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12039:	8d 50 44             	lea    0x44(%eax),%edx
   1203c:	8b 45 08             	mov    0x8(%ebp),%eax
   1203f:	83 c0 08             	add    $0x8,%eax
   12042:	83 ec 08             	sub    $0x8,%esp
   12045:	52                   	push   %edx
   12046:	50                   	push   %eax
   12047:	e8 fd f5 ff ff       	call   11649 <list_insert_last>
   1204c:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1204f:	e8 cf 05 00 00       	call   12623 <task_dispatch>
    }

    irq_leave_proection(irq_state);
   12054:	83 ec 0c             	sub    $0xc,%esp
   12057:	ff 75 f4             	pushl  -0xc(%ebp)
   1205a:	e8 79 ee ff ff       	call   10ed8 <irq_leave_proection>
   1205f:	83 c4 10             	add    $0x10,%esp
}
   12062:	90                   	nop
   12063:	c9                   	leave  
   12064:	c3                   	ret    

00012065 <mutex_unlock>:

void mutex_unlock (mutex_t * mutex) {
   12065:	55                   	push   %ebp
   12066:	89 e5                	mov    %esp,%ebp
   12068:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   1206b:	e8 50 ee ff ff       	call   10ec0 <irq_enter_proection>
   12070:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * curr = task_current();
   12073:	e8 9d 04 00 00       	call   12515 <task_current>
   12078:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   1207b:	8b 45 08             	mov    0x8(%ebp),%eax
   1207e:	8b 00                	mov    (%eax),%eax
   12080:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12083:	0f 85 88 00 00 00    	jne    12111 <mutex_unlock+0xac>
        if (--mutex->locked_count == 0) {
   12089:	8b 45 08             	mov    0x8(%ebp),%eax
   1208c:	8b 40 04             	mov    0x4(%eax),%eax
   1208f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12092:	8b 45 08             	mov    0x8(%ebp),%eax
   12095:	89 50 04             	mov    %edx,0x4(%eax)
   12098:	8b 45 08             	mov    0x8(%ebp),%eax
   1209b:	8b 40 04             	mov    0x4(%eax),%eax
   1209e:	85 c0                	test   %eax,%eax
   120a0:	75 6f                	jne    12111 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   120a2:	8b 45 08             	mov    0x8(%ebp),%eax
   120a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   120ab:	8b 45 08             	mov    0x8(%ebp),%eax
   120ae:	83 c0 08             	add    $0x8,%eax
   120b1:	83 ec 0c             	sub    $0xc,%esp
   120b4:	50                   	push   %eax
   120b5:	e8 de fe ff ff       	call   11f98 <list_count>
   120ba:	83 c4 10             	add    $0x10,%esp
   120bd:	85 c0                	test   %eax,%eax
   120bf:	74 50                	je     12111 <mutex_unlock+0xac>
                list_node_t * task_node = list_delete_first(&mutex->wait_list);
   120c1:	8b 45 08             	mov    0x8(%ebp),%eax
   120c4:	83 c0 08             	add    $0x8,%eax
   120c7:	83 ec 0c             	sub    $0xc,%esp
   120ca:	50                   	push   %eax
   120cb:	e8 dd f5 ff ff       	call   116ad <list_delete_first>
   120d0:	83 c4 10             	add    $0x10,%esp
   120d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   120d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120da:	74 08                	je     120e4 <mutex_unlock+0x7f>
   120dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   120df:	83 e8 44             	sub    $0x44,%eax
   120e2:	eb 05                	jmp    120e9 <mutex_unlock+0x84>
   120e4:	b8 00 00 00 00       	mov    $0x0,%eax
   120e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   120ec:	83 ec 0c             	sub    $0xc,%esp
   120ef:	ff 75 e8             	pushl  -0x18(%ebp)
   120f2:	e8 28 04 00 00       	call   1251f <task_set_ready>
   120f7:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   120fa:	8b 45 08             	mov    0x8(%ebp),%eax
   120fd:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   12104:	8b 45 08             	mov    0x8(%ebp),%eax
   12107:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1210a:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   1210c:	e8 12 05 00 00       	call   12623 <task_dispatch>
            }
        }
    }

    irq_leave_proection(irq_state);
   12111:	83 ec 0c             	sub    $0xc,%esp
   12114:	ff 75 f4             	pushl  -0xc(%ebp)
   12117:	e8 bc ed ff ff       	call   10ed8 <irq_leave_proection>
   1211c:	83 c4 10             	add    $0x10,%esp
   1211f:	90                   	nop
   12120:	c9                   	leave  
   12121:	c3                   	ret    

00012122 <list_count>:
static inline int list_count (list_t* list) {
   12122:	55                   	push   %ebp
   12123:	89 e5                	mov    %esp,%ebp
    return list->count;
   12125:	8b 45 08             	mov    0x8(%ebp),%eax
   12128:	8b 40 08             	mov    0x8(%eax),%eax
}
   1212b:	5d                   	pop    %ebp
   1212c:	c3                   	ret    

0001212d <sem_init>:
#include <sem.h>
#include <irq.h>

void sem_init(sem_t* sem, int init_count) {
   1212d:	55                   	push   %ebp
   1212e:	89 e5                	mov    %esp,%ebp
   12130:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12133:	8b 45 08             	mov    0x8(%ebp),%eax
   12136:	8b 55 0c             	mov    0xc(%ebp),%edx
   12139:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1213b:	8b 45 08             	mov    0x8(%ebp),%eax
   1213e:	83 c0 04             	add    $0x4,%eax
   12141:	83 ec 0c             	sub    $0xc,%esp
   12144:	50                   	push   %eax
   12145:	e8 7b f4 ff ff       	call   115c5 <list_init>
   1214a:	83 c4 10             	add    $0x10,%esp
}
   1214d:	90                   	nop
   1214e:	c9                   	leave  
   1214f:	c3                   	ret    

00012150 <sem_wait>:

void sem_wait(sem_t* sem) {
   12150:	55                   	push   %ebp
   12151:	89 e5                	mov    %esp,%ebp
   12153:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12156:	e8 65 ed ff ff       	call   10ec0 <irq_enter_proection>
   1215b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0) {
   1215e:	8b 45 08             	mov    0x8(%ebp),%eax
   12161:	8b 00                	mov    (%eax),%eax
   12163:	85 c0                	test   %eax,%eax
   12165:	7e 0f                	jle    12176 <sem_wait+0x26>
        sem->count--;
   12167:	8b 45 08             	mov    0x8(%ebp),%eax
   1216a:	8b 00                	mov    (%eax),%eax
   1216c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1216f:	8b 45 08             	mov    0x8(%ebp),%eax
   12172:	89 10                	mov    %edx,(%eax)
   12174:	eb 34                	jmp    121aa <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   12176:	e8 9a 03 00 00       	call   12515 <task_current>
   1217b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   1217e:	83 ec 0c             	sub    $0xc,%esp
   12181:	ff 75 f0             	pushl  -0x10(%ebp)
   12184:	e8 cb 03 00 00       	call   12554 <task_set_block>
   12189:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   1218c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1218f:	8d 50 44             	lea    0x44(%eax),%edx
   12192:	8b 45 08             	mov    0x8(%ebp),%eax
   12195:	83 c0 04             	add    $0x4,%eax
   12198:	83 ec 08             	sub    $0x8,%esp
   1219b:	52                   	push   %edx
   1219c:	50                   	push   %eax
   1219d:	e8 a7 f4 ff ff       	call   11649 <list_insert_last>
   121a2:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   121a5:	e8 79 04 00 00       	call   12623 <task_dispatch>
    }
    irq_leave_proection(state);
   121aa:	83 ec 0c             	sub    $0xc,%esp
   121ad:	ff 75 f4             	pushl  -0xc(%ebp)
   121b0:	e8 23 ed ff ff       	call   10ed8 <irq_leave_proection>
   121b5:	83 c4 10             	add    $0x10,%esp
}
   121b8:	90                   	nop
   121b9:	c9                   	leave  
   121ba:	c3                   	ret    

000121bb <sem_notify>:

void sem_notify(sem_t* sem) {
   121bb:	55                   	push   %ebp
   121bc:	89 e5                	mov    %esp,%ebp
   121be:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();
   121c1:	e8 fa ec ff ff       	call   10ec0 <irq_enter_proection>
   121c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list)) {
   121c9:	8b 45 08             	mov    0x8(%ebp),%eax
   121cc:	83 c0 04             	add    $0x4,%eax
   121cf:	83 ec 0c             	sub    $0xc,%esp
   121d2:	50                   	push   %eax
   121d3:	e8 4a ff ff ff       	call   12122 <list_count>
   121d8:	83 c4 10             	add    $0x10,%esp
   121db:	85 c0                	test   %eax,%eax
   121dd:	74 40                	je     1221f <sem_notify+0x64>
        list_node_t* node = list_delete_first(&sem->wait_list);
   121df:	8b 45 08             	mov    0x8(%ebp),%eax
   121e2:	83 c0 04             	add    $0x4,%eax
   121e5:	83 ec 0c             	sub    $0xc,%esp
   121e8:	50                   	push   %eax
   121e9:	e8 bf f4 ff ff       	call   116ad <list_delete_first>
   121ee:	83 c4 10             	add    $0x10,%esp
   121f1:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_t* task = list_node_parent(node, task_t, wait_node);
   121f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   121f8:	74 08                	je     12202 <sem_notify+0x47>
   121fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121fd:	83 e8 44             	sub    $0x44,%eax
   12200:	eb 05                	jmp    12207 <sem_notify+0x4c>
   12202:	b8 00 00 00 00       	mov    $0x0,%eax
   12207:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   1220a:	83 ec 0c             	sub    $0xc,%esp
   1220d:	ff 75 ec             	pushl  -0x14(%ebp)
   12210:	e8 0a 03 00 00       	call   1251f <task_set_ready>
   12215:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12218:	e8 06 04 00 00       	call   12623 <task_dispatch>
   1221d:	eb 0d                	jmp    1222c <sem_notify+0x71>
    } else {
        sem->count++;
   1221f:	8b 45 08             	mov    0x8(%ebp),%eax
   12222:	8b 00                	mov    (%eax),%eax
   12224:	8d 50 01             	lea    0x1(%eax),%edx
   12227:	8b 45 08             	mov    0x8(%ebp),%eax
   1222a:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_proection(state);
   1222c:	83 ec 0c             	sub    $0xc,%esp
   1222f:	ff 75 f4             	pushl  -0xc(%ebp)
   12232:	e8 a1 ec ff ff       	call   10ed8 <irq_leave_proection>
   12237:	83 c4 10             	add    $0x10,%esp

}
   1223a:	90                   	nop
   1223b:	c9                   	leave  
   1223c:	c3                   	ret    

0001223d <sem_count>:

int  sem_count(sem_t* sem) {
   1223d:	55                   	push   %ebp
   1223e:	89 e5                	mov    %esp,%ebp
   12240:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12243:	e8 78 ec ff ff       	call   10ec0 <irq_enter_proection>
   12248:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1224b:	8b 45 08             	mov    0x8(%ebp),%eax
   1224e:	8b 00                	mov    (%eax),%eax
   12250:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_proection(state);
   12253:	83 ec 0c             	sub    $0xc,%esp
   12256:	ff 75 f4             	pushl  -0xc(%ebp)
   12259:	e8 7a ec ff ff       	call   10ed8 <irq_leave_proection>
   1225e:	83 c4 10             	add    $0x10,%esp
    return count;
   12261:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12264:	c9                   	leave  
   12265:	c3                   	ret    

00012266 <hlt>:
static inline void hlt() {
   12266:	55                   	push   %ebp
   12267:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   12269:	f4                   	hlt    
}
   1226a:	90                   	nop
   1226b:	5d                   	pop    %ebp
   1226c:	c3                   	ret    

0001226d <list_node_init>:
static inline void list_node_init(list_node_t* node) {
   1226d:	55                   	push   %ebp
   1226e:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t*)0;
   12270:	8b 45 08             	mov    0x8(%ebp),%eax
   12273:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1227a:	8b 45 08             	mov    0x8(%ebp),%eax
   1227d:	8b 50 04             	mov    0x4(%eax),%edx
   12280:	8b 45 08             	mov    0x8(%ebp),%eax
   12283:	89 10                	mov    %edx,(%eax)
}
   12285:	90                   	nop
   12286:	5d                   	pop    %ebp
   12287:	c3                   	ret    

00012288 <list_node_next>:
static inline list_node_t* list_node_next(list_node_t* node) {
   12288:	55                   	push   %ebp
   12289:	89 e5                	mov    %esp,%ebp
    return node->next;
   1228b:	8b 45 08             	mov    0x8(%ebp),%eax
   1228e:	8b 40 04             	mov    0x4(%eax),%eax
}
   12291:	5d                   	pop    %ebp
   12292:	c3                   	ret    

00012293 <list_count>:
static inline int list_count (list_t* list) {
   12293:	55                   	push   %ebp
   12294:	89 e5                	mov    %esp,%ebp
    return list->count;
   12296:	8b 45 08             	mov    0x8(%ebp),%eax
   12299:	8b 40 08             	mov    0x8(%eax),%eax
}
   1229c:	5d                   	pop    %ebp
   1229d:	c3                   	ret    

0001229e <list_first>:
static inline list_node_t* list_first (list_t* list) {
   1229e:	55                   	push   %ebp
   1229f:	89 e5                	mov    %esp,%ebp
    return list->first;
   122a1:	8b 45 08             	mov    0x8(%ebp),%eax
   122a4:	8b 00                	mov    (%eax),%eax
}
   122a6:	5d                   	pop    %ebp
   122a7:	c3                   	ret    

000122a8 <idle_task_func>:
#include <cpu.h>
#include <klib.h>
#include <log.h>
#include <mem.h>

static void idle_task_func() { for(;;) hlt(); }
   122a8:	55                   	push   %ebp
   122a9:	89 e5                	mov    %esp,%ebp
   122ab:	e8 b6 ff ff ff       	call   12266 <hlt>
   122b0:	eb f9                	jmp    122ab <idle_task_func+0x3>

000122b2 <task_switch_from_to>:

void simple_switch(uint32_t **from, uint32_t* to);

void task_switch_from_to(task_t* from, task_t* to) {
   122b2:	55                   	push   %ebp
   122b3:	89 e5                	mov    %esp,%ebp
   122b5:	83 ec 08             	sub    $0x8,%esp
#ifndef USE_TSS
    simple_switch(&from->stack, to->stack);  // 使用直接跳转机制
   122b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   122bb:	8b 10                	mov    (%eax),%edx
   122bd:	8b 45 08             	mov    0x8(%ebp),%eax
   122c0:	83 ec 08             	sub    $0x8,%esp
   122c3:	52                   	push   %edx
   122c4:	50                   	push   %eax
   122c5:	e8 db df ff ff       	call   102a5 <simple_switch>
   122ca:	83 c4 10             	add    $0x10,%esp
#else
    far_jump(to->tss_sel, 0);             // 使用 tss 机制
#endif
}
   122cd:	90                   	nop
   122ce:	c9                   	leave  
   122cf:	c3                   	ret    

000122d0 <task_init>:
    task->tss_sel = tss_sel;
}
#endif

// 初始化一个任务
int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   122d0:	55                   	push   %ebp
   122d1:	89 e5                	mov    %esp,%ebp
   122d3:	83 ec 18             	sub    $0x18,%esp
    
#ifndef USE_TSS
    uint32_t* pesp = (uint32_t*)esp;
   122d6:	8b 45 14             	mov    0x14(%ebp),%eax
   122d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pesp) {
   122dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   122e0:	74 48                	je     1232a <task_init+0x5a>
        *(--pesp) = entry;
   122e2:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   122e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122e9:	8b 55 10             	mov    0x10(%ebp),%edx
   122ec:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;
   122ee:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   122f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122f5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   122fb:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   122ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12302:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   12308:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   1230c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1230f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   12315:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   12319:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1231c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        task->stack = pesp;
   12322:	8b 45 08             	mov    0x8(%ebp),%eax
   12325:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12328:	89 10                	mov    %edx,(%eax)
    }
#else
    if (tss_init(task, entry, esp) == -1) return -1;  // 使用 tss 机制
#endif

    k_strncpy(task->name, name, TASK_NAME_SIZE);        // 进程名
   1232a:	8b 45 08             	mov    0x8(%ebp),%eax
   1232d:	83 c0 08             	add    $0x8,%eax
   12330:	83 ec 04             	sub    $0x4,%esp
   12333:	6a 20                	push   $0x20
   12335:	ff 75 0c             	pushl  0xc(%ebp)
   12338:	50                   	push   %eax
   12339:	e8 37 ee ff ff       	call   11175 <k_strncpy>
   1233e:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;                         // 状态  created
   12341:	8b 45 08             	mov    0x8(%ebp),%eax
   12344:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;         //  最大时间片
   1234b:	8b 45 08             	mov    0x8(%ebp),%eax
   1234e:	c7 40 2c 0a 00 00 00 	movl   $0xa,0x2c(%eax)
    task->slice_ticks = TASK_TIME_SLICE_DEFAULT;        //  当前时间片
   12355:	8b 45 08             	mov    0x8(%ebp),%eax
   12358:	c7 40 28 0a 00 00 00 	movl   $0xa,0x28(%eax)
    task->sleep_ticks = 0;
   1235f:	8b 45 08             	mov    0x8(%ebp),%eax
   12362:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node); 
   12369:	8b 45 08             	mov    0x8(%ebp),%eax
   1236c:	83 c0 3c             	add    $0x3c,%eax
   1236f:	83 ec 0c             	sub    $0xc,%esp
   12372:	50                   	push   %eax
   12373:	e8 f5 fe ff ff       	call   1226d <list_node_init>
   12378:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   1237b:	8b 45 08             	mov    0x8(%ebp),%eax
   1237e:	83 c0 34             	add    $0x34,%eax
   12381:	83 ec 0c             	sub    $0xc,%esp
   12384:	50                   	push   %eax
   12385:	e8 e3 fe ff ff       	call   1226d <list_node_init>
   1238a:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   1238d:	8b 45 08             	mov    0x8(%ebp),%eax
   12390:	83 c0 44             	add    $0x44,%eax
   12393:	83 ec 0c             	sub    $0xc,%esp
   12396:	50                   	push   %eax
   12397:	e8 d1 fe ff ff       	call   1226d <list_node_init>
   1239c:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   1239f:	e8 1c eb ff ff       	call   10ec0 <irq_enter_proection>
   123a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_ready(task);                                        // 加入到就绪队列
   123a7:	83 ec 0c             	sub    $0xc,%esp
   123aa:	ff 75 08             	pushl  0x8(%ebp)
   123ad:	e8 6d 01 00 00       	call   1251f <task_set_ready>
   123b2:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&g_task_manager.task_list, &task->all_node);  // 加入到所有队列
   123b5:	8b 45 08             	mov    0x8(%ebp),%eax
   123b8:	83 c0 3c             	add    $0x3c,%eax
   123bb:	83 ec 08             	sub    $0x8,%esp
   123be:	50                   	push   %eax
   123bf:	68 1c 70 01 00       	push   $0x1701c
   123c4:	e8 80 f2 ff ff       	call   11649 <list_insert_last>
   123c9:	83 c4 10             	add    $0x10,%esp
    irq_leave_proection(state);  //--leave protection
   123cc:	83 ec 0c             	sub    $0xc,%esp
   123cf:	ff 75 f0             	pushl  -0x10(%ebp)
   123d2:	e8 01 eb ff ff       	call   10ed8 <irq_leave_proection>
   123d7:	83 c4 10             	add    $0x10,%esp

    return 0;
   123da:	b8 00 00 00 00       	mov    $0x0,%eax
}
   123df:	c9                   	leave  
   123e0:	c3                   	ret    

000123e1 <task_manager_init>:

// 初始化任务管理
void task_manager_init() {
   123e1:	55                   	push   %ebp
   123e2:	89 e5                	mov    %esp,%ebp
   123e4:	83 ec 08             	sub    $0x8,%esp
    sem_init(&sem_test, 0);
   123e7:	83 ec 08             	sub    $0x8,%esp
   123ea:	6a 00                	push   $0x0
   123ec:	68 0c d1 01 00       	push   $0x1d10c
   123f1:	e8 37 fd ff ff       	call   1212d <sem_init>
   123f6:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.ready_list);
   123f9:	83 ec 0c             	sub    $0xc,%esp
   123fc:	68 04 70 01 00       	push   $0x17004
   12401:	e8 bf f1 ff ff       	call   115c5 <list_init>
   12406:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.task_list);
   12409:	83 ec 0c             	sub    $0xc,%esp
   1240c:	68 1c 70 01 00       	push   $0x1701c
   12411:	e8 af f1 ff ff       	call   115c5 <list_init>
   12416:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.sleep_list);
   12419:	83 ec 0c             	sub    $0xc,%esp
   1241c:	68 10 70 01 00       	push   $0x17010
   12421:	e8 9f f1 ff ff       	call   115c5 <list_init>
   12426:	83 c4 10             	add    $0x10,%esp
    g_task_manager.curr_task = get_first_task();
   12429:	e8 dd 00 00 00       	call   1250b <get_first_task>
   1242e:	a3 00 70 01 00       	mov    %eax,0x17000
}
   12433:	90                   	nop
   12434:	c9                   	leave  
   12435:	c3                   	ret    

00012436 <task1_func>:


void task1_func() {
   12436:	55                   	push   %ebp
   12437:	89 e5                	mov    %esp,%ebp
   12439:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   1243c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("-------------------------11111-----------------: %d", count--);
   12443:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12446:	8d 50 ff             	lea    -0x1(%eax),%edx
   12449:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1244c:	83 ec 08             	sub    $0x8,%esp
   1244f:	50                   	push   %eax
   12450:	68 20 2b 01 00       	push   $0x12b20
   12455:	e8 2a f4 ff ff       	call   11884 <klog>
   1245a:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   1245d:	83 ec 0c             	sub    $0xc,%esp
   12460:	68 e8 03 00 00       	push   $0x3e8
   12465:	e8 f3 02 00 00       	call   1275d <sys_sleep>
   1246a:	83 c4 10             	add    $0x10,%esp
        klog("-------------------------11111-----------------: %d", count--);
   1246d:	eb d4                	jmp    12443 <task1_func+0xd>

0001246f <task3_func>:
        // sem_notify(&sem_test);
    }
}


void task3_func() {
   1246f:	55                   	push   %ebp
   12470:	89 e5                	mov    %esp,%ebp
   12472:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   12475:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        // sem_wait(&sem_test);
        klog("-------------------------33333-----------------: %d", count++);
   1247c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1247f:	8d 50 01             	lea    0x1(%eax),%edx
   12482:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12485:	83 ec 08             	sub    $0x8,%esp
   12488:	50                   	push   %eax
   12489:	68 54 2b 01 00       	push   $0x12b54
   1248e:	e8 f1 f3 ff ff       	call   11884 <klog>
   12493:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   12496:	83 ec 0c             	sub    $0xc,%esp
   12499:	68 e8 03 00 00       	push   $0x3e8
   1249e:	e8 ba 02 00 00       	call   1275d <sys_sleep>
   124a3:	83 c4 10             	add    $0x10,%esp
        klog("-------------------------33333-----------------: %d", count++);
   124a6:	eb d4                	jmp    1247c <task3_func+0xd>

000124a8 <task1_func_init>:

    }
}


void task1_func_init() {
   124a8:	55                   	push   %ebp
   124a9:	89 e5                	mov    %esp,%ebp
   124ab:	83 ec 08             	sub    $0x8,%esp
    task_init(&g_task_manager.first_task, "first task", 
   124ae:	ba c0 90 01 00       	mov    $0x190c0,%edx
   124b3:	b8 36 24 01 00       	mov    $0x12436,%eax
   124b8:	52                   	push   %edx
   124b9:	50                   	push   %eax
   124ba:	68 88 2b 01 00       	push   $0x12b88
   124bf:	68 28 70 01 00       	push   $0x17028
   124c4:	e8 07 fe ff ff       	call   122d0 <task_init>
   124c9:	83 c4 10             	add    $0x10,%esp
        (uint32_t)task1_func, (uint32_t)&task1_stack[2048]);

    task_init(&g_task_manager.idle_task,  "idle  task", 
   124cc:	ba c0 b0 01 00       	mov    $0x1b0c0,%edx
   124d1:	b8 a8 22 01 00       	mov    $0x122a8,%eax
   124d6:	52                   	push   %edx
   124d7:	50                   	push   %eax
   124d8:	68 93 2b 01 00       	push   $0x12b93
   124dd:	68 74 70 01 00       	push   $0x17074
   124e2:	e8 e9 fd ff ff       	call   122d0 <task_init>
   124e7:	83 c4 10             	add    $0x10,%esp
        (uint32_t)idle_task_func, (uint32_t)&idle_task_stack[2048]);

    task_init(&task3,                   "test  task", 
   124ea:	ba c0 d0 01 00       	mov    $0x1d0c0,%edx
   124ef:	b8 6f 24 01 00       	mov    $0x1246f,%eax
   124f4:	52                   	push   %edx
   124f5:	50                   	push   %eax
   124f6:	68 9e 2b 01 00       	push   $0x12b9e
   124fb:	68 c0 d0 01 00       	push   $0x1d0c0
   12500:	e8 cb fd ff ff       	call   122d0 <task_init>
   12505:	83 c4 10             	add    $0x10,%esp
        (uint32_t)task3_func, (uint32_t)&task3_stack[2048]);
    
}
   12508:	90                   	nop
   12509:	c9                   	leave  
   1250a:	c3                   	ret    

0001250b <get_first_task>:


task_t* get_first_task() {
   1250b:	55                   	push   %ebp
   1250c:	89 e5                	mov    %esp,%ebp
    return &g_task_manager.first_task;
   1250e:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   12513:	5d                   	pop    %ebp
   12514:	c3                   	ret    

00012515 <task_current>:

task_t* task_current() {
   12515:	55                   	push   %ebp
   12516:	89 e5                	mov    %esp,%ebp
    return g_task_manager.curr_task;
   12518:	a1 00 70 01 00       	mov    0x17000,%eax
}
   1251d:	5d                   	pop    %ebp
   1251e:	c3                   	ret    

0001251f <task_set_ready>:


// 将任务添加到就绪队列 尾部 设置状态为 ready
void task_set_ready(task_t* task) {
   1251f:	55                   	push   %ebp
   12520:	89 e5                	mov    %esp,%ebp
   12522:	83 ec 08             	sub    $0x8,%esp
    if (task == &g_task_manager.idle_task) {  // 空进程不应该加入就绪队列
   12525:	81 7d 08 74 70 01 00 	cmpl   $0x17074,0x8(%ebp)
   1252c:	74 23                	je     12551 <task_set_ready+0x32>
        return;
    }

    list_insert_last(&g_task_manager.ready_list, &task->run_node);
   1252e:	8b 45 08             	mov    0x8(%ebp),%eax
   12531:	83 c0 34             	add    $0x34,%eax
   12534:	83 ec 08             	sub    $0x8,%esp
   12537:	50                   	push   %eax
   12538:	68 04 70 01 00       	push   $0x17004
   1253d:	e8 07 f1 ff ff       	call   11649 <list_insert_last>
   12542:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   12545:	8b 45 08             	mov    0x8(%ebp),%eax
   12548:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
   1254f:	eb 01                	jmp    12552 <task_set_ready+0x33>
        return;
   12551:	90                   	nop
}
   12552:	c9                   	leave  
   12553:	c3                   	ret    

00012554 <task_set_block>:

// 将 特定 任务从就绪队列删除
void task_set_block(task_t* task) {
   12554:	55                   	push   %ebp
   12555:	89 e5                	mov    %esp,%ebp
   12557:	83 ec 08             	sub    $0x8,%esp
    if (task == &g_task_manager.idle_task) {  // 空进程不应该删除
   1255a:	81 7d 08 74 70 01 00 	cmpl   $0x17074,0x8(%ebp)
   12561:	74 19                	je     1257c <task_set_block+0x28>
        return;
    }
    list_delete(&g_task_manager.ready_list, &task->run_node);
   12563:	8b 45 08             	mov    0x8(%ebp),%eax
   12566:	83 c0 34             	add    $0x34,%eax
   12569:	83 ec 08             	sub    $0x8,%esp
   1256c:	50                   	push   %eax
   1256d:	68 04 70 01 00       	push   $0x17004
   12572:	e8 af f1 ff ff       	call   11726 <list_delete>
   12577:	83 c4 10             	add    $0x10,%esp
   1257a:	eb 01                	jmp    1257d <task_set_block+0x29>
        return;
   1257c:	90                   	nop
    // list_delete_first(&g_task_manager.ready_list);
}
   1257d:	c9                   	leave  
   1257e:	c3                   	ret    

0001257f <sys_sched_yield>:

// 主动放弃cpu执行
int  sys_sched_yield() {
   1257f:	55                   	push   %ebp
   12580:	89 e5                	mov    %esp,%ebp
   12582:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12585:	e8 36 e9 ff ff       	call   10ec0 <irq_enter_proection>
   1258a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if(list_count(&g_task_manager.ready_list) > 1) {
   1258d:	83 ec 0c             	sub    $0xc,%esp
   12590:	68 04 70 01 00       	push   $0x17004
   12595:	e8 f9 fc ff ff       	call   12293 <list_count>
   1259a:	83 c4 10             	add    $0x10,%esp
   1259d:	83 f8 01             	cmp    $0x1,%eax
   125a0:	7e 29                	jle    125cb <sys_sched_yield+0x4c>
        task_t* curr = task_current();
   125a2:	e8 6e ff ff ff       	call   12515 <task_current>
   125a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   125aa:	83 ec 0c             	sub    $0xc,%esp
   125ad:	ff 75 f0             	pushl  -0x10(%ebp)
   125b0:	e8 9f ff ff ff       	call   12554 <task_set_block>
   125b5:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   125b8:	83 ec 0c             	sub    $0xc,%esp
   125bb:	ff 75 f0             	pushl  -0x10(%ebp)
   125be:	e8 5c ff ff ff       	call   1251f <task_set_ready>
   125c3:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   125c6:	e8 58 00 00 00       	call   12623 <task_dispatch>
    }
    
    irq_leave_proection(state);  //--leave protection
   125cb:	83 ec 0c             	sub    $0xc,%esp
   125ce:	ff 75 f4             	pushl  -0xc(%ebp)
   125d1:	e8 02 e9 ff ff       	call   10ed8 <irq_leave_proection>
   125d6:	83 c4 10             	add    $0x10,%esp

    return 0;
   125d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   125de:	c9                   	leave  
   125df:	c3                   	ret    

000125e0 <task_next_run>:

// 从就绪队列中找到一第一个任务
task_t * task_next_run() {
   125e0:	55                   	push   %ebp
   125e1:	89 e5                	mov    %esp,%ebp
   125e3:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&g_task_manager.ready_list) == 0) {
   125e6:	68 04 70 01 00       	push   $0x17004
   125eb:	e8 a3 fc ff ff       	call   12293 <list_count>
   125f0:	83 c4 04             	add    $0x4,%esp
   125f3:	85 c0                	test   %eax,%eax
   125f5:	75 07                	jne    125fe <task_next_run+0x1e>
        return &g_task_manager.idle_task;
   125f7:	b8 74 70 01 00       	mov    $0x17074,%eax
   125fc:	eb 23                	jmp    12621 <task_next_run+0x41>
    }

    list_node_t * task_node = list_first(&g_task_manager.ready_list);
   125fe:	68 04 70 01 00       	push   $0x17004
   12603:	e8 96 fc ff ff       	call   1229e <list_first>
   12608:	83 c4 04             	add    $0x4,%esp
   1260b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   1260e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   12612:	74 08                	je     1261c <task_next_run+0x3c>
   12614:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12617:	83 e8 34             	sub    $0x34,%eax
   1261a:	eb 05                	jmp    12621 <task_next_run+0x41>
   1261c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12621:	c9                   	leave  
   12622:	c3                   	ret    

00012623 <task_dispatch>:

// 分配一个任务并从当前任务切换过去
void task_dispatch() {
   12623:	55                   	push   %ebp
   12624:	89 e5                	mov    %esp,%ebp
   12626:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12629:	e8 92 e8 ff ff       	call   10ec0 <irq_enter_proection>
   1262e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * to = task_next_run();
   12631:	e8 aa ff ff ff       	call   125e0 <task_next_run>
   12636:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != g_task_manager.curr_task) {
   12639:	a1 00 70 01 00       	mov    0x17000,%eax
   1263e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12641:	74 2b                	je     1266e <task_dispatch+0x4b>
        task_t * from = task_current();
   12643:	e8 cd fe ff ff       	call   12515 <task_current>
   12648:	89 45 ec             	mov    %eax,-0x14(%ebp)

        g_task_manager.curr_task = to;   // 设置将要切换的任务为“当前任务”
   1264b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1264e:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;      // 设置 task running
   12653:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12656:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

        task_switch_from_to(from, to);
   1265d:	83 ec 08             	sub    $0x8,%esp
   12660:	ff 75 f0             	pushl  -0x10(%ebp)
   12663:	ff 75 ec             	pushl  -0x14(%ebp)
   12666:	e8 47 fc ff ff       	call   122b2 <task_switch_from_to>
   1266b:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_proection(state);  //--leave protection
   1266e:	83 ec 0c             	sub    $0xc,%esp
   12671:	ff 75 f4             	pushl  -0xc(%ebp)
   12674:	e8 5f e8 ff ff       	call   10ed8 <irq_leave_proection>
   12679:	83 c4 10             	add    $0x10,%esp
   
}
   1267c:	90                   	nop
   1267d:	c9                   	leave  
   1267e:	c3                   	ret    

0001267f <task_time_tick>:

// 检查当前任务的时间片是否用完，若用完强制切换到下一任务
void task_time_tick() {
   1267f:	55                   	push   %ebp
   12680:	89 e5                	mov    %esp,%ebp
   12682:	83 ec 28             	sub    $0x28,%esp
    task_t* curr = task_current();
   12685:	e8 8b fe ff ff       	call   12515 <task_current>
   1268a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int slice = --curr->slice_ticks;
   1268d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12690:	8b 40 28             	mov    0x28(%eax),%eax
   12693:	8d 50 ff             	lea    -0x1(%eax),%edx
   12696:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12699:	89 50 28             	mov    %edx,0x28(%eax)
   1269c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1269f:	8b 40 28             	mov    0x28(%eax),%eax
   126a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if( slice == 0 && &g_task_manager.ready_list.count > 0) {
   126a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   126a9:	75 2d                	jne    126d8 <task_time_tick+0x59>
        curr->slice_ticks = curr->time_ticks;
   126ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126ae:	8b 50 2c             	mov    0x2c(%eax),%edx
   126b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126b4:	89 50 28             	mov    %edx,0x28(%eax)

        task_set_block(curr);
   126b7:	83 ec 0c             	sub    $0xc,%esp
   126ba:	ff 75 f0             	pushl  -0x10(%ebp)
   126bd:	e8 92 fe ff ff       	call   12554 <task_set_block>
   126c2:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   126c5:	83 ec 0c             	sub    $0xc,%esp
   126c8:	ff 75 f0             	pushl  -0x10(%ebp)
   126cb:	e8 4f fe ff ff       	call   1251f <task_set_ready>
   126d0:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   126d3:	e8 4b ff ff ff       	call   12623 <task_dispatch>
    }

    list_node_t* sleep_lists_curr = list_first(&g_task_manager.sleep_list);
   126d8:	83 ec 0c             	sub    $0xc,%esp
   126db:	68 10 70 01 00       	push   $0x17010
   126e0:	e8 b9 fb ff ff       	call   1229e <list_first>
   126e5:	83 c4 10             	add    $0x10,%esp
   126e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   126eb:	eb 62                	jmp    1274f <task_time_tick+0xd0>
        list_node_t * next = list_node_next(sleep_lists_curr);
   126ed:	83 ec 0c             	sub    $0xc,%esp
   126f0:	ff 75 f4             	pushl  -0xc(%ebp)
   126f3:	e8 90 fb ff ff       	call   12288 <list_node_next>
   126f8:	83 c4 10             	add    $0x10,%esp
   126fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_t* task = list_node_parent(sleep_lists_curr, task_t, run_node);
   126fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12702:	74 08                	je     1270c <task_time_tick+0x8d>
   12704:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12707:	83 e8 34             	sub    $0x34,%eax
   1270a:	eb 05                	jmp    12711 <task_time_tick+0x92>
   1270c:	b8 00 00 00 00       	mov    $0x0,%eax
   12711:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        
        if(--task->sleep_ticks == 0) {
   12714:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12717:	8b 40 30             	mov    0x30(%eax),%eax
   1271a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1271d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12720:	89 50 30             	mov    %edx,0x30(%eax)
   12723:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12726:	8b 40 30             	mov    0x30(%eax),%eax
   12729:	85 c0                	test   %eax,%eax
   1272b:	75 1c                	jne    12749 <task_time_tick+0xca>
            task_set_wakeup(task);
   1272d:	83 ec 0c             	sub    $0xc,%esp
   12730:	ff 75 e4             	pushl  -0x1c(%ebp)
   12733:	e8 b8 00 00 00       	call   127f0 <task_set_wakeup>
   12738:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1273b:	83 ec 0c             	sub    $0xc,%esp
   1273e:	ff 75 e4             	pushl  -0x1c(%ebp)
   12741:	e8 d9 fd ff ff       	call   1251f <task_set_ready>
   12746:	83 c4 10             	add    $0x10,%esp
        }
        sleep_lists_curr = next;
   12749:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1274c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   1274f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12753:	75 98                	jne    126ed <task_time_tick+0x6e>
    }

    task_dispatch();
   12755:	e8 c9 fe ff ff       	call   12623 <task_dispatch>
}
   1275a:	90                   	nop
   1275b:	c9                   	leave  
   1275c:	c3                   	ret    

0001275d <sys_sleep>:



void sys_sleep(uint32_t ms) {
   1275d:	55                   	push   %ebp
   1275e:	89 e5                	mov    %esp,%ebp
   12760:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12763:	e8 58 e7 ff ff       	call   10ec0 <irq_enter_proection>
   12768:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   1276b:	e8 a5 fd ff ff       	call   12515 <task_current>
   12770:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_block(curr);
   12773:	83 ec 0c             	sub    $0xc,%esp
   12776:	ff 75 f0             	pushl  -0x10(%ebp)
   12779:	e8 d6 fd ff ff       	call   12554 <task_set_block>
   1277e:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(curr, ms / OS_TICK_MS);
   12781:	8b 45 08             	mov    0x8(%ebp),%eax
   12784:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   12789:	f7 e2                	mul    %edx
   1278b:	89 d0                	mov    %edx,%eax
   1278d:	c1 e8 03             	shr    $0x3,%eax
   12790:	83 ec 08             	sub    $0x8,%esp
   12793:	50                   	push   %eax
   12794:	ff 75 f0             	pushl  -0x10(%ebp)
   12797:	e8 19 00 00 00       	call   127b5 <task_set_sleep>
   1279c:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   1279f:	e8 7f fe ff ff       	call   12623 <task_dispatch>

    irq_leave_proection(state);
   127a4:	83 ec 0c             	sub    $0xc,%esp
   127a7:	ff 75 f4             	pushl  -0xc(%ebp)
   127aa:	e8 29 e7 ff ff       	call   10ed8 <irq_leave_proection>
   127af:	83 c4 10             	add    $0x10,%esp
}
   127b2:	90                   	nop
   127b3:	c9                   	leave  
   127b4:	c3                   	ret    

000127b5 <task_set_sleep>:

void task_set_sleep(task_t* task, uint32_t ticks) {
   127b5:	55                   	push   %ebp
   127b6:	89 e5                	mov    %esp,%ebp
   127b8:	83 ec 08             	sub    $0x8,%esp
    if(ticks <= 0) return;
   127bb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127bf:	74 2c                	je     127ed <task_set_sleep+0x38>
    task->sleep_ticks = ticks;
   127c1:	8b 55 0c             	mov    0xc(%ebp),%edx
   127c4:	8b 45 08             	mov    0x8(%ebp),%eax
   127c7:	89 50 30             	mov    %edx,0x30(%eax)
    task->state = TASK_SLEEP;
   127ca:	8b 45 08             	mov    0x8(%ebp),%eax
   127cd:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
    list_insert_last(&g_task_manager.sleep_list, 
   127d4:	8b 45 08             	mov    0x8(%ebp),%eax
   127d7:	83 c0 34             	add    $0x34,%eax
   127da:	83 ec 08             	sub    $0x8,%esp
   127dd:	50                   	push   %eax
   127de:	68 10 70 01 00       	push   $0x17010
   127e3:	e8 61 ee ff ff       	call   11649 <list_insert_last>
   127e8:	83 c4 10             	add    $0x10,%esp
   127eb:	eb 01                	jmp    127ee <task_set_sleep+0x39>
    if(ticks <= 0) return;
   127ed:	90                   	nop
        &task->run_node);
}
   127ee:	c9                   	leave  
   127ef:	c3                   	ret    

000127f0 <task_set_wakeup>:

void task_set_wakeup(task_t* task) {
   127f0:	55                   	push   %ebp
   127f1:	89 e5                	mov    %esp,%ebp
   127f3:	83 ec 08             	sub    $0x8,%esp
    list_delete(&g_task_manager.sleep_list, 
   127f6:	8b 45 08             	mov    0x8(%ebp),%eax
   127f9:	83 c0 34             	add    $0x34,%eax
   127fc:	83 ec 08             	sub    $0x8,%esp
   127ff:	50                   	push   %eax
   12800:	68 10 70 01 00       	push   $0x17010
   12805:	e8 1c ef ff ff       	call   11726 <list_delete>
   1280a:	83 c4 10             	add    $0x10,%esp
        &task->run_node);
   1280d:	90                   	nop
   1280e:	c9                   	leave  
   1280f:	c3                   	ret    
