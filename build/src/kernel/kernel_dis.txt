
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003713 memsz 0x00003713 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000060 memsz 0x0000e1e0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x000221e0 align 2**12
         filesz 0x000001d7 memsz 0x000001d7 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000328c  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000487  0001328c  0001328c  0000428c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000060  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000d1e0  00015000  00015000  00005060  2**12
                  ALLOC
  4 .first_task   000001d7  80000000  000221e0  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001610  00000000  00000000  000061d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fe9  00000000  00000000  000077e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001520  00000000  00000000  0000c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000200  00000000  00000000  0000dcf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001126  00000000  00000000  0000def0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000f016  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001510  00000000  00000000  0000f028  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00010538  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
0001328c l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/kernel.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 mtime.c
000102d9 l     F .text	0000001f outb
00015000 l     O .bss	00000004 sys_tick
00010320 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 gdt.c
00010399 l     F .text	00000028 lgdt
00015020 l     O .bss	00000800 g_gdt_table
00015820 l     O .bss	00000014 g_mutex
00000000 l    df *ABS*	00000000 init.c
00010590 l     F .text	0000000b list_count
0001059b l     F .text	0000000a list_first
000105a5 l     F .text	0000000b list_last
00000000 l    df *ABS*	00000000 irq.c
0001085a l     F .text	00000007 hlt
00010861 l     F .text	00000007 cli
00010868 l     F .text	00000007 sti
0001086f l     F .text	00000028 lidt
00010897 l     F .text	0000001d inb
000108b4 l     F .text	0000001f outb
000108d3 l     F .text	00000011 read_cr2
000108e4 l     F .text	00000010 read_eflags
000108f4 l     F .text	0000000b write_eflags
00015840 l     O .bss	00000400 idt_table
000108ff l     F .text	00000030 default_handler
00010c80 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00014000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 list.c
000116dd l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000118d6 l     F .text	0000001d inb
000118f3 l     F .text	0000001f outb
00015c40 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mem.c
00011a8d l     F .text	0000000d down2
00011a9a l     F .text	00000017 up2
00011ab1 l     F .text	0000000c write_cr3
00011abd l     F .text	00000011 mmu_set_page_dir
00011ace l     F .text	00000014 pde_index
00011ae2 l     F .text	00000027 pde_paddr
00011b09 l     F .text	00000010 pte_index
00011b19 l     F .text	00000027 pte_paddr
00011b40 l     F .text	0000000f get_pte_perm
00016000 l     O .bss	00000028 g_paddr_alloc
00017000 l     O .bss	00001000 g_kernel_page_dir
00011b4f l     F .text	00000058 addr_alloc_init
00011ba7 l     F .text	00000067 addr_alloc_page
00011c0e l     F .text	00000062 addr_free_page
00011d1d l     F .text	00000066 show_mem_info
00011d83 l     F .text	00000037 total_mem_size
00014020 l     O .data	00000040 kernel_map.2270
00012229 l     F .text	00000010 curr_page_dir
00000000 l    df *ABS*	00000000 mutex.c
00012502 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
0001268c l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 syscall.c
000136d0 l     O .rodata	00000010 sys_table
00000000 l    df *ABS*	00000000 task.c
0001287f l     F .text	00000007 hlt
00012886 l     F .text	0000000c write_cr3
00012892 l     F .text	0000001a far_jump
000128ac l     F .text	00000017 write_tr
000128c3 l     F .text	0000001b list_node_init
000128de l     F .text	0000000b list_node_next
000128e9 l     F .text	0000000b list_count
000128f4 l     F .text	0000000a list_first
000128fe l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	000001b0 g_task_manager
000181c0 l     O .bss	00002000 idle_task_stack
0001a1c0 l     O .bss	00006000 g_task_table
000201c0 l     O .bss	00000014 task_table_mutex
0001290f l     F .text	0000000a idle_task_func
00012933 l     F .text	00000156 tss_init
00013007 l     F .text	0000006c alloc_task
00013073 l     F .text	00000030 free_task
000130a3 l     F .text	00000080 task_uninit
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004e sys_call
8000005e l     F .first_task	0000002a msleep
80000088 l     F .first_task	0000001b getpid
800000a3 l     F .first_task	00000028 print_msg
800000cb l     F .first_task	0000001b fork
0001107d g     F .text	0000003a bitmap_get_bit
00012cf6 g     F .text	0000000a task_current
00010feb g     F .text	00000018 irq_enter_proection
00011851 g     F .text	00000085 list_delete
00010fb5 g     F .text	0000000b irq_enable_global
00011774 g     F .text	00000064 list_insert_last
00012d00 g     F .text	00000035 task_set_ready
000110b7 g     F .text	0000001b bitmap_is_set
000109bb g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
000127ea g     F .text	00000095 do_handler_syscall
00010bed g     F .text	0000001c handle_virtual_exception
00011912 g     F .text	0000009d log_init
00013123 g     F .text	00000169 sys_fork
00010828 g     F .text	00000032 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00010557 g     F .text	00000039 gdt_free_sel
000127d0 g     F .text	0000001a sys_print_msg
00014000 g       .data	00000000 s_data
00011310 g     F .text	0000007a k_strncmp
00010a63 g     F .text	0000001c handle_segment_not_present
00010e98 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
00010967 g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
00011e6a g     F .text	00000080 memory_create_map
000101b3 g       .text	00000000 exception_handler_general_protection
000127a7 g     F .text	00000029 sem_count
800000e6 g     F .first_task	00000095 first_task_main
000110d2 g     F .text	000000d4 bitmap_set_bit
00010ab7 g     F .text	000000c6 handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010fc0 g     F .text	0000002b pic_send_eoi
00010000 g       .text	00000000 s_text
00012074 g     F .text	00000085 memory_create_uvm
000126ba g     F .text	0000006b sem_wait
000121e2 g     F .text	00000027 memory_alloc_page_for
00011259 g     F .text	00000047 k_strcpy
000112a0 g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00010447 g     F .text	0000009b gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
000201e0 g     O .bss	00002000 stack
00012f3e g     F .text	00000058 sys_sleep
00012239 g     F .text	0000008d memory_free_page
00010620 g     F .text	00000163 list_test
000221e0 g       *ABS*	00000000 s_first_task
000109f3 g     F .text	0000001c handle_invalid_opcode
0001138a g     F .text	0000003b k_strlen
00011455 g     F .text	00000064 k_memcmp
000120f9 g     F .text	000000e9 memory_alloc_for_page_dir
000100e2 g       .text	00000000 exception_handler_bound_range
00012725 g     F .text	00000082 sem_notify
00012cec g     F .text	0000000a get_first_task
0001015c g       .text	00000000 exception_handler_invalid_tss
00011590 g     F .text	0000014d k_vsprint
00011715 g     F .text	0000005f list_insert_first
00012fd1 g     F .text	00000020 task_set_wakeup
00012c51 g     F .text	0000009b first_task_init
00010047 g       .text	00000000 exception_handler_divider
00011c70 g     F .text	000000ad some_test
00010b7d g     F .text	0000001c handle_fpu_error
00010faa g     F .text	0000000b irq_disable_global
00012d60 g     F .text	00000061 sys_sched_yield
000122c6 g     F .text	000000e7 memory_destory_uvm
000223b7 g       *ABS*	00000000 mem_free_start
0001092f g     F .text	0000001c handle_unknown
000105b0 g     F .text	0000002b kernel_init
00011414 g     F .text	00000041 k_memset
00012697 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
000105db g     F .text	00000045 show_list
000221e0 g       .bss	00000000 e_data
0001253b g     F .text	00000094 mutex_lock
00010229 g       .text	00000000 exception_handler_machine_check
00000000 g       *ABS*	00000000 kernel_base
000223b7 g       *ABS*	00000000 e_first_task
00012f96 g     F .text	0000003b task_set_sleep
00010c50 g     F .text	00000030 irq_install
00010bd1 g     F .text	0000001c handle_smd_exception
0001250d g     F .text	0000002e mutex_init
00010f23 g     F .text	00000087 irq_disable
00010a9b g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
00011003 g     F .text	00000011 irq_leave_proection
00011014 g     F .text	00000016 bitmap_byte_count
00010b99 g     F .text	0000001c handle_alignment_check
00012e04 g     F .text	0000005c task_dispatch
000123ad g     F .text	00000155 memory_copy_uvm
000107e3 g     F .text	00000045 move_to_first_task
00010bb5 g     F .text	0000001c handle_machine_check
00012dc1 g     F .text	00000043 task_next_run
00011eea g     F .text	0000009b create_kernel_table
000116f0 g     F .text	00000025 list_init
00010a7f g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
00012d35 g     F .text	0000002b task_set_block
000109d7 g     F .text	0000001c handle_bound_range
00012209 g     F .text	00000020 memory_alloc_page
000101ed g       .text	00000000 exception_handler_fpu_error
00012919 g     F .text	0000001a task_switch_from_to
00010d13 g     F .text	00000185 irq_init
000114b9 g     F .text	000000d7 k_itoa
000125cf g     F .text	000000bd mutex_unlock
00010a2b g     F .text	0000001c handle_double_fault
000102f8 g     F .text	00000028 handle_time
000102bb g       .text	00000000 exception_handle_syscall
000103c1 g     F .text	00000086 segment_desc_set
00010783 g     F .text	00000060 offset_test
00013713 g       .rodata	00000000 e_text
0001099f g     F .text	0000001c handle_breakpoint
0001102a g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
000111a6 g     F .text	000000b3 bitmap_alloc_nbits
00012b7c g     F .text	000000d5 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00012e60 g     F .text	000000de task_time_tick
00011f85 g     F .text	000000ef memory_init
00010a0f g     F .text	0000001c handle_device_unavailable
0001094b g     F .text	0000001c handle_divider
000113c5 g     F .text	0000004f k_memcpy
00012a89 g     F .text	000000f3 task_init
00012ff1 g     F .text	00000016 sys_getpid
000104e2 g     F .text	00000075 gdt_alloc_desc
000117d8 g     F .text	00000079 list_delete_first
00010c09 g     F .text	00000047 gate_desc_set
000119af g     F .text	000000de klog
00010983 g     F .text	0000001c handle_NMI
00010a47 g     F .text	0000001c handle_invalid_tss
00011dba g     F .text	000000b0 find_pte
00010381 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 a7 05 00 00       	call   105b0 <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc e0 21 02 00       	mov    $0x221e0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 00 08 00 00       	jmp    10828 <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 f6 08 00 00       	call   1092f <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 f3 08 00 00       	call   1094b <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 f0 08 00 00       	call   10967 <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 ed 08 00 00       	call   10983 <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 ea 08 00 00       	call   1099f <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 e7 08 00 00       	call   109bb <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 e4 08 00 00       	call   109d7 <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 e1 08 00 00       	call   109f3 <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 de 08 00 00       	call   10a0f <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 dd 08 00 00       	call   10a2b <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 dc 08 00 00       	call   10a47 <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 db 08 00 00       	call   10a63 <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 da 08 00 00       	call   10a7f <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 d9 08 00 00       	call   10a9b <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 d8 08 00 00       	call   10ab7 <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 7f 09 00 00       	call   10b7d <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 7e 09 00 00       	call   10b99 <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 7b 09 00 00       	call   10bb5 <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 78 09 00 00       	call   10bd1 <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 75 09 00 00       	call   10bed <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 61 00 00 00       	call   102f8 <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch

simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp
    
    sti
   102b9:	fb                   	sti    
    ret
   102ba:	c3                   	ret    

000102bb <exception_handle_syscall>:

    .global exception_handle_syscall
    .extern do_handler_syscall
exception_handle_syscall:

    pusha
   102bb:	60                   	pusha  
    push %ds
   102bc:	1e                   	push   %ds
    push %es
   102bd:	06                   	push   %es
    push %fs
   102be:	0f a0                	push   %fs
    push %gs
   102c0:	0f a8                	push   %gs
    pushf
   102c2:	9c                   	pushf  

    mov %esp, %eax
   102c3:	89 e0                	mov    %esp,%eax
    push %eax
   102c5:	50                   	push   %eax
    call do_handler_syscall
   102c6:	e8 1f 25 00 00       	call   127ea <do_handler_syscall>
    add $4, %esp
   102cb:	83 c4 04             	add    $0x4,%esp

    popf
   102ce:	9d                   	popf   
    pop %gs
   102cf:	0f a9                	pop    %gs
    pop %fs
   102d1:	0f a1                	pop    %fs
    pop %es
   102d3:	07                   	pop    %es
    pop %ds
   102d4:	1f                   	pop    %ds
    popa
   102d5:	61                   	popa   


   102d6:	ca 14 00             	lret   $0x14

000102d9 <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   102d9:	55                   	push   %ebp
   102da:	89 e5                	mov    %esp,%ebp
   102dc:	83 ec 08             	sub    $0x8,%esp
   102df:	8b 55 08             	mov    0x8(%ebp),%edx
   102e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   102e9:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   102ec:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   102f0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   102f4:	ee                   	out    %al,(%dx)
}
   102f5:	90                   	nop
   102f6:	c9                   	leave  
   102f7:	c3                   	ret    

000102f8 <handle_time>:


static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
   102fb:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   102fe:	a1 00 50 01 00       	mov    0x15000,%eax
   10303:	83 c0 01             	add    $0x1,%eax
   10306:	a3 00 50 01 00       	mov    %eax,0x15000
    pic_send_eoi(IRQ0_TIMER);
   1030b:	83 ec 0c             	sub    $0xc,%esp
   1030e:	6a 20                	push   $0x20
   10310:	e8 ab 0c 00 00       	call   10fc0 <pic_send_eoi>
   10315:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   10318:	e8 43 2b 00 00       	call   12e60 <task_time_tick>
} 
   1031d:	90                   	nop
   1031e:	c9                   	leave  
   1031f:	c3                   	ret    

00010320 <pit_init>:

static void pit_init (void) {
   10320:	55                   	push   %ebp
   10321:	89 e5                	mov    %esp,%ebp
   10323:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10326:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1032d:	6a 36                	push   $0x36
   1032f:	6a 43                	push   $0x43
   10331:	e8 a3 ff ff ff       	call   102d9 <outb>
   10336:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   10339:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1033c:	0f b6 c0             	movzbl %al,%eax
   1033f:	50                   	push   %eax
   10340:	6a 40                	push   $0x40
   10342:	e8 92 ff ff ff       	call   102d9 <outb>
   10347:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   1034a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1034d:	c1 e8 08             	shr    $0x8,%eax
   10350:	0f b6 c0             	movzbl %al,%eax
   10353:	50                   	push   %eax
   10354:	6a 40                	push   $0x40
   10356:	e8 7e ff ff ff       	call   102d9 <outb>
   1035b:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   1035e:	b8 86 02 01 00       	mov    $0x10286,%eax
   10363:	83 ec 08             	sub    $0x8,%esp
   10366:	50                   	push   %eax
   10367:	6a 20                	push   $0x20
   10369:	e8 e2 08 00 00       	call   10c50 <irq_install>
   1036e:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10371:	83 ec 0c             	sub    $0xc,%esp
   10374:	6a 20                	push   $0x20
   10376:	e8 1d 0b 00 00       	call   10e98 <irq_enable>
   1037b:	83 c4 10             	add    $0x10,%esp
}
   1037e:	90                   	nop
   1037f:	c9                   	leave  
   10380:	c3                   	ret    

00010381 <time_init>:

void time_init() {
   10381:	55                   	push   %ebp
   10382:	89 e5                	mov    %esp,%ebp
   10384:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10387:	c7 05 00 50 01 00 00 	movl   $0x0,0x15000
   1038e:	00 00 00 

    pit_init();
   10391:	e8 8a ff ff ff       	call   10320 <pit_init>
   10396:	90                   	nop
   10397:	c9                   	leave  
   10398:	c3                   	ret    

00010399 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   10399:	55                   	push   %ebp
   1039a:	89 e5                	mov    %esp,%ebp
   1039c:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   1039f:	8b 45 08             	mov    0x8(%ebp),%eax
   103a2:	c1 e8 10             	shr    $0x10,%eax
   103a5:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   103a9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ac:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   103b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   103b3:	83 e8 01             	sub    $0x1,%eax
   103b6:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   103ba:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   103be:	90                   	nop
   103bf:	c9                   	leave  
   103c0:	c3                   	ret    

000103c1 <segment_desc_set>:
#include <irq.h>

static segment_desc_t g_gdt_table[GDT_TABLE_SIZE];
static mutex_t g_mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   103c1:	55                   	push   %ebp
   103c2:	89 e5                	mov    %esp,%ebp
   103c4:	83 ec 14             	sub    $0x14,%esp
   103c7:	8b 45 14             	mov    0x14(%ebp),%eax
   103ca:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = g_gdt_table + (selector >> 3);
   103ce:	8b 45 08             	mov    0x8(%ebp),%eax
   103d1:	c1 f8 03             	sar    $0x3,%eax
   103d4:	c1 e0 03             	shl    $0x3,%eax
   103d7:	05 20 50 01 00       	add    $0x15020,%eax
   103dc:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   103df:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   103e6:	76 0f                	jbe    103f7 <segment_desc_set+0x36>
		attr |= 0x8000;
   103e8:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   103ee:	8b 45 10             	mov    0x10(%ebp),%eax
   103f1:	c1 e8 0c             	shr    $0xc,%eax
   103f4:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   103f7:	8b 45 10             	mov    0x10(%ebp),%eax
   103fa:	89 c2                	mov    %eax,%edx
   103fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103ff:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   10402:	8b 45 0c             	mov    0xc(%ebp),%eax
   10405:	89 c2                	mov    %eax,%edx
   10407:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1040a:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   1040e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10411:	c1 e8 10             	shr    $0x10,%eax
   10414:	89 c2                	mov    %eax,%edx
   10416:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10419:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1041c:	8b 45 10             	mov    0x10(%ebp),%eax
   1041f:	c1 e8 10             	shr    $0x10,%eax
   10422:	c1 e0 08             	shl    $0x8,%eax
   10425:	66 25 00 0f          	and    $0xf00,%ax
   10429:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1042d:	89 c2                	mov    %eax,%edx
   1042f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10432:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10436:	8b 45 0c             	mov    0xc(%ebp),%eax
   10439:	c1 e8 18             	shr    $0x18,%eax
   1043c:	89 c2                	mov    %eax,%edx
   1043e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10441:	88 50 07             	mov    %dl,0x7(%eax)
}
   10444:	90                   	nop
   10445:	c9                   	leave  
   10446:	c3                   	ret    

00010447 <gdt_init>:

void gdt_init() {
   10447:	55                   	push   %ebp
   10448:	89 e5                	mov    %esp,%ebp
   1044a:	83 ec 18             	sub    $0x18,%esp
    mutex_init(&g_mutex);
   1044d:	83 ec 0c             	sub    $0xc,%esp
   10450:	68 20 58 01 00       	push   $0x15820
   10455:	e8 b3 20 00 00       	call   1250d <mutex_init>
   1045a:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1045d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10464:	eb 19                	jmp    1047f <gdt_init+0x38>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10466:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10469:	c1 e0 03             	shl    $0x3,%eax
   1046c:	6a 00                	push   $0x0
   1046e:	6a 00                	push   $0x0
   10470:	6a 00                	push   $0x0
   10472:	50                   	push   %eax
   10473:	e8 49 ff ff ff       	call   103c1 <segment_desc_set>
   10478:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1047b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1047f:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10486:	7e de                	jle    10466 <gdt_init+0x1f>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10488:	68 92 c0 00 00       	push   $0xc092
   1048d:	6a ff                	push   $0xffffffff
   1048f:	6a 00                	push   $0x0
   10491:	6a 10                	push   $0x10
   10493:	e8 29 ff ff ff       	call   103c1 <segment_desc_set>
   10498:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1049b:	68 9a c0 00 00       	push   $0xc09a
   104a0:	6a ff                	push   $0xffffffff
   104a2:	6a 00                	push   $0x0
   104a4:	6a 08                	push   $0x8
   104a6:	e8 16 ff ff ff       	call   103c1 <segment_desc_set>
   104ab:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    gate_desc_set((gate_desc_t *)(g_gdt_table + (SELECTOR_SYSCALL >> 3)),
   104ae:	ba bb 02 01 00       	mov    $0x102bb,%edx
   104b3:	b8 38 50 01 00       	mov    $0x15038,%eax
   104b8:	68 05 ec 00 00       	push   $0xec05
   104bd:	52                   	push   %edx
   104be:	6a 08                	push   $0x8
   104c0:	50                   	push   %eax
   104c1:	e8 43 07 00 00       	call   10c09 <gate_desc_set>
   104c6:	83 c4 10             	add    $0x10,%esp
            KERNEL_SELECTOR_CS,
            (uint32_t)exception_handle_syscall,
            GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    lgdt((uint32_t)g_gdt_table, sizeof(g_gdt_table));
   104c9:	b8 20 50 01 00       	mov    $0x15020,%eax
   104ce:	83 ec 08             	sub    $0x8,%esp
   104d1:	68 00 08 00 00       	push   $0x800
   104d6:	50                   	push   %eax
   104d7:	e8 bd fe ff ff       	call   10399 <lgdt>
   104dc:	83 c4 10             	add    $0x10,%esp

}
   104df:	90                   	nop
   104e0:	c9                   	leave  
   104e1:	c3                   	ret    

000104e2 <gdt_alloc_desc>:

int  gdt_alloc_desc() {
   104e2:	55                   	push   %ebp
   104e3:	89 e5                	mov    %esp,%ebp
   104e5:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&g_mutex);
   104e8:	83 ec 0c             	sub    $0xc,%esp
   104eb:	68 20 58 01 00       	push   $0x15820
   104f0:	e8 46 20 00 00       	call   1253b <mutex_lock>
   104f5:	83 c4 10             	add    $0x10,%esp
    int i = 1;
   104f8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    for(; i < GDT_TABLE_SIZE; i++) {
   104ff:	eb 36                	jmp    10537 <gdt_alloc_desc+0x55>
        segment_desc_t* desc = g_gdt_table + i;
   10501:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10504:	c1 e0 03             	shl    $0x3,%eax
   10507:	05 20 50 01 00       	add    $0x15020,%eax
   1050c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(desc->attr == 0) {
   1050f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10512:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10516:	66 85 c0             	test   %ax,%ax
   10519:	75 18                	jne    10533 <gdt_alloc_desc+0x51>
            mutex_unlock(&g_mutex);
   1051b:	83 ec 0c             	sub    $0xc,%esp
   1051e:	68 20 58 01 00       	push   $0x15820
   10523:	e8 a7 20 00 00       	call   125cf <mutex_unlock>
   10528:	83 c4 10             	add    $0x10,%esp
            return ( i * sizeof(segment_desc_t) );
   1052b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1052e:	c1 e0 03             	shl    $0x3,%eax
   10531:	eb 22                	jmp    10555 <gdt_alloc_desc+0x73>
    for(; i < GDT_TABLE_SIZE; i++) {
   10533:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10537:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1053e:	7e c1                	jle    10501 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&g_mutex);
   10540:	83 ec 0c             	sub    $0xc,%esp
   10543:	68 20 58 01 00       	push   $0x15820
   10548:	e8 82 20 00 00       	call   125cf <mutex_unlock>
   1054d:	83 c4 10             	add    $0x10,%esp
    return -1;
   10550:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10555:	c9                   	leave  
   10556:	c3                   	ret    

00010557 <gdt_free_sel>:

void gdt_free_sel(int sel) {
   10557:	55                   	push   %ebp
   10558:	89 e5                	mov    %esp,%ebp
   1055a:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&g_mutex);
   1055d:	83 ec 0c             	sub    $0xc,%esp
   10560:	68 20 58 01 00       	push   $0x15820
   10565:	e8 d1 1f 00 00       	call   1253b <mutex_lock>
   1056a:	83 c4 10             	add    $0x10,%esp
    g_gdt_table[sel/sizeof(segment_desc_t)].attr = 0;
   1056d:	8b 45 08             	mov    0x8(%ebp),%eax
   10570:	c1 e8 03             	shr    $0x3,%eax
   10573:	66 c7 04 c5 25 50 01 	movw   $0x0,0x15025(,%eax,8)
   1057a:	00 00 00 
    mutex_unlock(&g_mutex);
   1057d:	83 ec 0c             	sub    $0xc,%esp
   10580:	68 20 58 01 00       	push   $0x15820
   10585:	e8 45 20 00 00       	call   125cf <mutex_unlock>
   1058a:	83 c4 10             	add    $0x10,%esp
}
   1058d:	90                   	nop
   1058e:	c9                   	leave  
   1058f:	c3                   	ret    

00010590 <list_count>:

static inline int list_is_empty (list_t* list) {
    return list->count == 0;
}

static inline int list_count (list_t* list) {
   10590:	55                   	push   %ebp
   10591:	89 e5                	mov    %esp,%ebp
    return list->count;
   10593:	8b 45 08             	mov    0x8(%ebp),%eax
   10596:	8b 40 08             	mov    0x8(%eax),%eax
}
   10599:	5d                   	pop    %ebp
   1059a:	c3                   	ret    

0001059b <list_first>:

static inline list_node_t* list_first (list_t* list) {
   1059b:	55                   	push   %ebp
   1059c:	89 e5                	mov    %esp,%ebp
    return list->first;
   1059e:	8b 45 08             	mov    0x8(%ebp),%eax
   105a1:	8b 00                	mov    (%eax),%eax
}
   105a3:	5d                   	pop    %ebp
   105a4:	c3                   	ret    

000105a5 <list_last>:

static inline list_node_t* list_last (list_t* list) {
   105a5:	55                   	push   %ebp
   105a6:	89 e5                	mov    %esp,%ebp
    return list->last;
   105a8:	8b 45 08             	mov    0x8(%ebp),%eax
   105ab:	8b 40 04             	mov    0x4(%eax),%eax
}
   105ae:	5d                   	pop    %ebp
   105af:	c3                   	ret    

000105b0 <kernel_init>:

// void test_mem_page() {}
// *(uint8_t*)test_mem_page = 0x12;
// *(uint8_t*)test_mem_page = 0x34;

void kernel_init (boot_info_t * boot_info) {
   105b0:	55                   	push   %ebp
   105b1:	89 e5                	mov    %esp,%ebp
   105b3:	83 ec 08             	sub    $0x8,%esp
    log_init();
   105b6:	e8 57 13 00 00       	call   11912 <log_init>
    gdt_init();
   105bb:	e8 87 fe ff ff       	call   10447 <gdt_init>
    memory_init(boot_info);
   105c0:	83 ec 0c             	sub    $0xc,%esp
   105c3:	ff 75 08             	pushl  0x8(%ebp)
   105c6:	e8 ba 19 00 00       	call   11f85 <memory_init>
   105cb:	83 c4 10             	add    $0x10,%esp
    irq_init();
   105ce:	e8 40 07 00 00       	call   10d13 <irq_init>
    time_init();
   105d3:	e8 a9 fd ff ff       	call   10381 <time_init>
}
   105d8:	90                   	nop
   105d9:	c9                   	leave  
   105da:	c3                   	ret    

000105db <show_list>:


void show_list(list_t list) {
   105db:	55                   	push   %ebp
   105dc:	89 e5                	mov    %esp,%ebp
   105de:	56                   	push   %esi
   105df:	53                   	push   %ebx
    klog("list: first=0x%x, last=0x%x, count=%d",
   105e0:	8d 45 08             	lea    0x8(%ebp),%eax
   105e3:	50                   	push   %eax
   105e4:	e8 a7 ff ff ff       	call   10590 <list_count>
   105e9:	83 c4 04             	add    $0x4,%esp
   105ec:	89 c6                	mov    %eax,%esi
   105ee:	8d 45 08             	lea    0x8(%ebp),%eax
   105f1:	50                   	push   %eax
   105f2:	e8 ae ff ff ff       	call   105a5 <list_last>
   105f7:	83 c4 04             	add    $0x4,%esp
   105fa:	89 c3                	mov    %eax,%ebx
   105fc:	8d 45 08             	lea    0x8(%ebp),%eax
   105ff:	50                   	push   %eax
   10600:	e8 96 ff ff ff       	call   1059b <list_first>
   10605:	83 c4 04             	add    $0x4,%esp
   10608:	56                   	push   %esi
   10609:	53                   	push   %ebx
   1060a:	50                   	push   %eax
   1060b:	68 8c 32 01 00       	push   $0x1328c
   10610:	e8 9a 13 00 00       	call   119af <klog>
   10615:	83 c4 10             	add    $0x10,%esp
         list_first(&list), list_last(&list), list_count(&list) );
}
   10618:	90                   	nop
   10619:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1061c:	5b                   	pop    %ebx
   1061d:	5e                   	pop    %esi
   1061e:	5d                   	pop    %ebp
   1061f:	c3                   	ret    

00010620 <list_test>:

void list_test() {
   10620:	55                   	push   %ebp
   10621:	89 e5                	mov    %esp,%ebp
   10623:	83 ec 58             	sub    $0x58,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   10626:	83 ec 0c             	sub    $0xc,%esp
   10629:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   1062c:	50                   	push   %eax
   1062d:	e8 be 10 00 00       	call   116f0 <list_init>
   10632:	83 c4 10             	add    $0x10,%esp

    show_list(list);
   10635:	83 ec 04             	sub    $0x4,%esp
   10638:	ff 75 dc             	pushl  -0x24(%ebp)
   1063b:	ff 75 d8             	pushl  -0x28(%ebp)
   1063e:	ff 75 d4             	pushl  -0x2c(%ebp)
   10641:	e8 95 ff ff ff       	call   105db <show_list>
   10646:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10649:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10650:	eb 3f                	jmp    10691 <list_test+0x71>
        list_node_t * node = nodes + i;
   10652:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10655:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1065c:	8d 45 ac             	lea    -0x54(%ebp),%eax
   1065f:	01 d0                	add    %edx,%eax
   10661:	89 45 e0             	mov    %eax,-0x20(%ebp)
        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   10664:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10667:	83 ec 04             	sub    $0x4,%esp
   1066a:	50                   	push   %eax
   1066b:	ff 75 f4             	pushl  -0xc(%ebp)
   1066e:	68 b4 32 01 00       	push   $0x132b4
   10673:	e8 37 13 00 00       	call   119af <klog>
   10678:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   1067b:	83 ec 08             	sub    $0x8,%esp
   1067e:	ff 75 e0             	pushl  -0x20(%ebp)
   10681:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10684:	50                   	push   %eax
   10685:	e8 8b 10 00 00       	call   11715 <list_insert_first>
   1068a:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   1068d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10691:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   10695:	7e bb                	jle    10652 <list_test+0x32>
    }
    show_list(list);
   10697:	83 ec 04             	sub    $0x4,%esp
   1069a:	ff 75 dc             	pushl  -0x24(%ebp)
   1069d:	ff 75 d8             	pushl  -0x28(%ebp)
   106a0:	ff 75 d4             	pushl  -0x2c(%ebp)
   106a3:	e8 33 ff ff ff       	call   105db <show_list>
   106a8:	83 c4 10             	add    $0x10,%esp

    list_init(&list);
   106ab:	83 ec 0c             	sub    $0xc,%esp
   106ae:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   106b1:	50                   	push   %eax
   106b2:	e8 39 10 00 00       	call   116f0 <list_init>
   106b7:	83 c4 10             	add    $0x10,%esp
    show_list(list);
   106ba:	83 ec 04             	sub    $0x4,%esp
   106bd:	ff 75 dc             	pushl  -0x24(%ebp)
   106c0:	ff 75 d8             	pushl  -0x28(%ebp)
   106c3:	ff 75 d4             	pushl  -0x2c(%ebp)
   106c6:	e8 10 ff ff ff       	call   105db <show_list>
   106cb:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   106ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   106d5:	eb 3f                	jmp    10716 <list_test+0xf6>
        list_node_t * node = nodes + i;
   106d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106da:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   106e1:	8d 45 ac             	lea    -0x54(%ebp),%eax
   106e4:	01 d0                	add    %edx,%eax
   106e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   106e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106ec:	83 ec 04             	sub    $0x4,%esp
   106ef:	50                   	push   %eax
   106f0:	ff 75 f0             	pushl  -0x10(%ebp)
   106f3:	68 b4 32 01 00       	push   $0x132b4
   106f8:	e8 b2 12 00 00       	call   119af <klog>
   106fd:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   10700:	83 ec 08             	sub    $0x8,%esp
   10703:	ff 75 e4             	pushl  -0x1c(%ebp)
   10706:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10709:	50                   	push   %eax
   1070a:	e8 65 10 00 00       	call   11774 <list_insert_last>
   1070f:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10712:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10716:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   1071a:	7e bb                	jle    106d7 <list_test+0xb7>
    }
    show_list(list);
   1071c:	83 ec 04             	sub    $0x4,%esp
   1071f:	ff 75 dc             	pushl  -0x24(%ebp)
   10722:	ff 75 d8             	pushl  -0x28(%ebp)
   10725:	ff 75 d4             	pushl  -0x2c(%ebp)
   10728:	e8 ae fe ff ff       	call   105db <show_list>
   1072d:	83 c4 10             	add    $0x10,%esp
    
    for(int i=0; i<5; i++) {
   10730:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10737:	eb 2d                	jmp    10766 <list_test+0x146>
        list_node_t* node = list_delete_first(&list);
   10739:	83 ec 0c             	sub    $0xc,%esp
   1073c:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   1073f:	50                   	push   %eax
   10740:	e8 93 10 00 00       	call   117d8 <list_delete_first>
   10745:	83 c4 10             	add    $0x10,%esp
   10748:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("delete first from list: %d, 0x%x", i, (uint32_t)node);
   1074b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1074e:	83 ec 04             	sub    $0x4,%esp
   10751:	50                   	push   %eax
   10752:	ff 75 ec             	pushl  -0x14(%ebp)
   10755:	68 d4 32 01 00       	push   $0x132d4
   1075a:	e8 50 12 00 00       	call   119af <klog>
   1075f:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10762:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   10766:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   1076a:	7e cd                	jle    10739 <list_test+0x119>
    }

    show_list(list);
   1076c:	83 ec 04             	sub    $0x4,%esp
   1076f:	ff 75 dc             	pushl  -0x24(%ebp)
   10772:	ff 75 d8             	pushl  -0x28(%ebp)
   10775:	ff 75 d4             	pushl  -0x2c(%ebp)
   10778:	e8 5e fe ff ff       	call   105db <show_list>
   1077d:	83 c4 10             	add    $0x10,%esp

}
   10780:	90                   	nop
   10781:	c9                   	leave  
   10782:	c3                   	ret    

00010783 <offset_test>:

void offset_test() {
   10783:	55                   	push   %ebp
   10784:	89 e5                	mov    %esp,%ebp
   10786:	83 ec 28             	sub    $0x28,%esp
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   10789:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   10790:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10797:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1079e:	c7 45 e4 56 34 12 00 	movl   $0x123456,-0x1c(%ebp)

    list_node_t * v_node = &v.node;
   107a5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   107a8:	83 c0 04             	add    $0x4,%eax
   107ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   107ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107b2:	74 08                	je     107bc <offset_test+0x39>
   107b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107b7:	83 e8 04             	sub    $0x4,%eax
   107ba:	eb 05                	jmp    107c1 <offset_test+0x3e>
   107bc:	b8 00 00 00 00       	mov    $0x0,%eax
   107c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    if(p->i != 0x123456) {
   107c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107c7:	8b 00                	mov    (%eax),%eax
   107c9:	3d 56 34 12 00       	cmp    $0x123456,%eax
   107ce:	74 10                	je     107e0 <offset_test+0x5d>
        klog("error");
   107d0:	83 ec 0c             	sub    $0xc,%esp
   107d3:	68 f5 32 01 00       	push   $0x132f5
   107d8:	e8 d2 11 00 00       	call   119af <klog>
   107dd:	83 c4 10             	add    $0x10,%esp
    }
}
   107e0:	90                   	nop
   107e1:	c9                   	leave  
   107e2:	c3                   	ret    

000107e3 <move_to_first_task>:



void move_to_first_task(void) {
   107e3:	55                   	push   %ebp
   107e4:	89 e5                	mov    %esp,%ebp
   107e6:	56                   	push   %esi
   107e7:	53                   	push   %ebx
   107e8:	83 ec 10             	sub    $0x10,%esp
    task_t * curr = task_current();
   107eb:	e8 06 25 00 00       	call   12cf6 <task_current>
   107f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    tss_t * tss = &(curr->tss);
   107f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f6:	83 c0 54             	add    $0x54,%eax
   107f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"
        ::[ss]"r"(tss->ss), 
   107fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107ff:	8b 40 50             	mov    0x50(%eax),%eax
        [esp]"r"(tss->esp),
   10802:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10805:	8b 52 38             	mov    0x38(%edx),%edx
        [eflags]"r"(tss->eflags),
   10808:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   1080b:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs),
   1080e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   10811:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
        [eip]"r"(tss->eip)
   10814:	8b 75 f0             	mov    -0x10(%ebp),%esi
   10817:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__( 
   1081a:	50                   	push   %eax
   1081b:	52                   	push   %edx
   1081c:	51                   	push   %ecx
   1081d:	53                   	push   %ebx
   1081e:	56                   	push   %esi
   1081f:	cf                   	iret   
    );
}
   10820:	90                   	nop
   10821:	83 c4 10             	add    $0x10,%esp
   10824:	5b                   	pop    %ebx
   10825:	5e                   	pop    %esi
   10826:	5d                   	pop    %ebp
   10827:	c3                   	ret    

00010828 <init_main>:

void init_main() {
   10828:	55                   	push   %ebp
   10829:	89 e5                	mov    %esp,%ebp
   1082b:	83 ec 08             	sub    $0x8,%esp
    klog("Kernal %s is running ... ", "1.0.0");
   1082e:	83 ec 08             	sub    $0x8,%esp
   10831:	68 fb 32 01 00       	push   $0x132fb
   10836:	68 01 33 01 00       	push   $0x13301
   1083b:	e8 6f 11 00 00       	call   119af <klog>
   10840:	83 c4 10             	add    $0x10,%esp

    task_manager_init();
   10843:	e8 34 23 00 00       	call   12b7c <task_manager_init>
    first_task_init();
   10848:	e8 04 24 00 00       	call   12c51 <first_task_init>
    irq_enable_global();
   1084d:	e8 63 07 00 00       	call   10fb5 <irq_enable_global>
    
    move_to_first_task();
   10852:	e8 8c ff ff ff       	call   107e3 <move_to_first_task>
   10857:	90                   	nop
   10858:	c9                   	leave  
   10859:	c3                   	ret    

0001085a <hlt>:
static inline void hlt() {
   1085a:	55                   	push   %ebp
   1085b:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   1085d:	f4                   	hlt    
}
   1085e:	90                   	nop
   1085f:	5d                   	pop    %ebp
   10860:	c3                   	ret    

00010861 <cli>:
static inline void cli() {
   10861:	55                   	push   %ebp
   10862:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   10864:	fa                   	cli    
}
   10865:	90                   	nop
   10866:	5d                   	pop    %ebp
   10867:	c3                   	ret    

00010868 <sti>:
static inline void sti() {
   10868:	55                   	push   %ebp
   10869:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   1086b:	fb                   	sti    
}
   1086c:	90                   	nop
   1086d:	5d                   	pop    %ebp
   1086e:	c3                   	ret    

0001086f <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   1086f:	55                   	push   %ebp
   10870:	89 e5                	mov    %esp,%ebp
   10872:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   10875:	8b 45 08             	mov    0x8(%ebp),%eax
   10878:	c1 e8 10             	shr    $0x10,%eax
   1087b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   1087f:	8b 45 08             	mov    0x8(%ebp),%eax
   10882:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   10886:	8b 45 0c             	mov    0xc(%ebp),%eax
   10889:	83 e8 01             	sub    $0x1,%eax
   1088c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   10890:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10894:	90                   	nop
   10895:	c9                   	leave  
   10896:	c3                   	ret    

00010897 <inb>:
static inline uint8_t inb(uint16_t  port) {
   10897:	55                   	push   %ebp
   10898:	89 e5                	mov    %esp,%ebp
   1089a:	83 ec 14             	sub    $0x14,%esp
   1089d:	8b 45 08             	mov    0x8(%ebp),%eax
   108a0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   108a4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   108a8:	89 c2                	mov    %eax,%edx
   108aa:	ec                   	in     (%dx),%al
   108ab:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   108ae:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   108b2:	c9                   	leave  
   108b3:	c3                   	ret    

000108b4 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   108b4:	55                   	push   %ebp
   108b5:	89 e5                	mov    %esp,%ebp
   108b7:	83 ec 08             	sub    $0x8,%esp
   108ba:	8b 55 08             	mov    0x8(%ebp),%edx
   108bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   108c0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   108c4:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   108c7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   108cb:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   108cf:	ee                   	out    %al,(%dx)
}
   108d0:	90                   	nop
   108d1:	c9                   	leave  
   108d2:	c3                   	ret    

000108d3 <read_cr2>:

static inline void write_cr0(uint32_t v) {
	__asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
}

static inline uint32_t read_cr2() {
   108d3:	55                   	push   %ebp
   108d4:	89 e5                	mov    %esp,%ebp
   108d6:	83 ec 10             	sub    $0x10,%esp
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   108d9:	0f 20 d0             	mov    %cr2,%eax
   108dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   108df:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   108e2:	c9                   	leave  
   108e3:	c3                   	ret    

000108e4 <read_eflags>:

static inline void write_tr (uint16_t tss_selector) {
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
}

static inline uint32_t read_eflags() {
   108e4:	55                   	push   %ebp
   108e5:	89 e5                	mov    %esp,%ebp
   108e7:	83 ec 10             	sub    $0x10,%esp
	uint32_t eflags;

	__asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   108ea:	9c                   	pushf  
   108eb:	58                   	pop    %eax
   108ec:	89 45 fc             	mov    %eax,-0x4(%ebp)

	return eflags;
   108ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   108f2:	c9                   	leave  
   108f3:	c3                   	ret    

000108f4 <write_eflags>:

static inline void write_eflags(uint32_t eflags) {
   108f4:	55                   	push   %ebp
   108f5:	89 e5                	mov    %esp,%ebp

	__asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   108f7:	8b 45 08             	mov    0x8(%ebp),%eax
   108fa:	50                   	push   %eax
   108fb:	9d                   	popf   


}
   108fc:	90                   	nop
   108fd:	5d                   	pop    %ebp
   108fe:	c3                   	ret    

000108ff <default_handler>:

//  -----------------------------------------   中断相关    -------------------------------------------
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void default_handler (exception_frame_t * frame, const char * message) {
   108ff:	55                   	push   %ebp
   10900:	89 e5                	mov    %esp,%ebp
   10902:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   10905:	83 ec 0c             	sub    $0xc,%esp
   10908:	68 1c 33 01 00       	push   $0x1331c
   1090d:	e8 9d 10 00 00       	call   119af <klog>
   10912:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   10915:	83 ec 08             	sub    $0x8,%esp
   10918:	ff 75 0c             	pushl  0xc(%ebp)
   1091b:	68 3d 33 01 00       	push   $0x1333d
   10920:	e8 8a 10 00 00       	call   119af <klog>
   10925:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   10928:	e8 2d ff ff ff       	call   1085a <hlt>
   1092d:	eb f9                	jmp    10928 <default_handler+0x29>

0001092f <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   1092f:	55                   	push   %ebp
   10930:	89 e5                	mov    %esp,%ebp
   10932:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   10935:	83 ec 08             	sub    $0x8,%esp
   10938:	68 58 33 01 00       	push   $0x13358
   1093d:	ff 75 08             	pushl  0x8(%ebp)
   10940:	e8 ba ff ff ff       	call   108ff <default_handler>
   10945:	83 c4 10             	add    $0x10,%esp
}
   10948:	90                   	nop
   10949:	c9                   	leave  
   1094a:	c3                   	ret    

0001094b <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   1094b:	55                   	push   %ebp
   1094c:	89 e5                	mov    %esp,%ebp
   1094e:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   10951:	83 ec 08             	sub    $0x8,%esp
   10954:	68 6b 33 01 00       	push   $0x1336b
   10959:	ff 75 08             	pushl  0x8(%ebp)
   1095c:	e8 9e ff ff ff       	call   108ff <default_handler>
   10961:	83 c4 10             	add    $0x10,%esp
}
   10964:	90                   	nop
   10965:	c9                   	leave  
   10966:	c3                   	ret    

00010967 <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   10967:	55                   	push   %ebp
   10968:	89 e5                	mov    %esp,%ebp
   1096a:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   1096d:	83 ec 08             	sub    $0x8,%esp
   10970:	68 7a 33 01 00       	push   $0x1337a
   10975:	ff 75 08             	pushl  0x8(%ebp)
   10978:	e8 82 ff ff ff       	call   108ff <default_handler>
   1097d:	83 c4 10             	add    $0x10,%esp
}
   10980:	90                   	nop
   10981:	c9                   	leave  
   10982:	c3                   	ret    

00010983 <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   10983:	55                   	push   %ebp
   10984:	89 e5                	mov    %esp,%ebp
   10986:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   10989:	83 ec 08             	sub    $0x8,%esp
   1098c:	68 8a 33 01 00       	push   $0x1338a
   10991:	ff 75 08             	pushl  0x8(%ebp)
   10994:	e8 66 ff ff ff       	call   108ff <default_handler>
   10999:	83 c4 10             	add    $0x10,%esp
}
   1099c:	90                   	nop
   1099d:	c9                   	leave  
   1099e:	c3                   	ret    

0001099f <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   1099f:	55                   	push   %ebp
   109a0:	89 e5                	mov    %esp,%ebp
   109a2:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   109a5:	83 ec 08             	sub    $0x8,%esp
   109a8:	68 99 33 01 00       	push   $0x13399
   109ad:	ff 75 08             	pushl  0x8(%ebp)
   109b0:	e8 4a ff ff ff       	call   108ff <default_handler>
   109b5:	83 c4 10             	add    $0x10,%esp
}
   109b8:	90                   	nop
   109b9:	c9                   	leave  
   109ba:	c3                   	ret    

000109bb <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   109bb:	55                   	push   %ebp
   109bc:	89 e5                	mov    %esp,%ebp
   109be:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   109c1:	83 ec 08             	sub    $0x8,%esp
   109c4:	68 a5 33 01 00       	push   $0x133a5
   109c9:	ff 75 08             	pushl  0x8(%ebp)
   109cc:	e8 2e ff ff ff       	call   108ff <default_handler>
   109d1:	83 c4 10             	add    $0x10,%esp
}
   109d4:	90                   	nop
   109d5:	c9                   	leave  
   109d6:	c3                   	ret    

000109d7 <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   109d7:	55                   	push   %ebp
   109d8:	89 e5                	mov    %esp,%ebp
   109da:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   109dd:	83 ec 08             	sub    $0x8,%esp
   109e0:	68 af 33 01 00       	push   $0x133af
   109e5:	ff 75 08             	pushl  0x8(%ebp)
   109e8:	e8 12 ff ff ff       	call   108ff <default_handler>
   109ed:	83 c4 10             	add    $0x10,%esp
}
   109f0:	90                   	nop
   109f1:	c9                   	leave  
   109f2:	c3                   	ret    

000109f3 <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   109f3:	55                   	push   %ebp
   109f4:	89 e5                	mov    %esp,%ebp
   109f6:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   109f9:	83 ec 08             	sub    $0x8,%esp
   109fc:	68 c5 33 01 00       	push   $0x133c5
   10a01:	ff 75 08             	pushl  0x8(%ebp)
   10a04:	e8 f6 fe ff ff       	call   108ff <default_handler>
   10a09:	83 c4 10             	add    $0x10,%esp
}
   10a0c:	90                   	nop
   10a0d:	c9                   	leave  
   10a0e:	c3                   	ret    

00010a0f <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   10a0f:	55                   	push   %ebp
   10a10:	89 e5                	mov    %esp,%ebp
   10a12:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   10a15:	83 ec 08             	sub    $0x8,%esp
   10a18:	68 d5 33 01 00       	push   $0x133d5
   10a1d:	ff 75 08             	pushl  0x8(%ebp)
   10a20:	e8 da fe ff ff       	call   108ff <default_handler>
   10a25:	83 c4 10             	add    $0x10,%esp
}
   10a28:	90                   	nop
   10a29:	c9                   	leave  
   10a2a:	c3                   	ret    

00010a2b <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   10a2b:	55                   	push   %ebp
   10a2c:	89 e5                	mov    %esp,%ebp
   10a2e:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   10a31:	83 ec 08             	sub    $0x8,%esp
   10a34:	68 eb 33 01 00       	push   $0x133eb
   10a39:	ff 75 08             	pushl  0x8(%ebp)
   10a3c:	e8 be fe ff ff       	call   108ff <default_handler>
   10a41:	83 c4 10             	add    $0x10,%esp
}
   10a44:	90                   	nop
   10a45:	c9                   	leave  
   10a46:	c3                   	ret    

00010a47 <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   10a47:	55                   	push   %ebp
   10a48:	89 e5                	mov    %esp,%ebp
   10a4a:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   10a4d:	83 ec 08             	sub    $0x8,%esp
   10a50:	68 f9 33 01 00       	push   $0x133f9
   10a55:	ff 75 08             	pushl  0x8(%ebp)
   10a58:	e8 a2 fe ff ff       	call   108ff <default_handler>
   10a5d:	83 c4 10             	add    $0x10,%esp
}
   10a60:	90                   	nop
   10a61:	c9                   	leave  
   10a62:	c3                   	ret    

00010a63 <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   10a63:	55                   	push   %ebp
   10a64:	89 e5                	mov    %esp,%ebp
   10a66:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   10a69:	83 ec 08             	sub    $0x8,%esp
   10a6c:	68 05 34 01 00       	push   $0x13405
   10a71:	ff 75 08             	pushl  0x8(%ebp)
   10a74:	e8 86 fe ff ff       	call   108ff <default_handler>
   10a79:	83 c4 10             	add    $0x10,%esp
}
   10a7c:	90                   	nop
   10a7d:	c9                   	leave  
   10a7e:	c3                   	ret    

00010a7f <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   10a7f:	55                   	push   %ebp
   10a80:	89 e5                	mov    %esp,%ebp
   10a82:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   10a85:	83 ec 08             	sub    $0x8,%esp
   10a88:	68 1a 34 01 00       	push   $0x1341a
   10a8d:	ff 75 08             	pushl  0x8(%ebp)
   10a90:	e8 6a fe ff ff       	call   108ff <default_handler>
   10a95:	83 c4 10             	add    $0x10,%esp
}
   10a98:	90                   	nop
   10a99:	c9                   	leave  
   10a9a:	c3                   	ret    

00010a9b <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   10a9b:	55                   	push   %ebp
   10a9c:	89 e5                	mov    %esp,%ebp
   10a9e:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   10aa1:	83 ec 08             	sub    $0x8,%esp
   10aa4:	68 30 34 01 00       	push   $0x13430
   10aa9:	ff 75 08             	pushl  0x8(%ebp)
   10aac:	e8 4e fe ff ff       	call   108ff <default_handler>
   10ab1:	83 c4 10             	add    $0x10,%esp
}
   10ab4:	90                   	nop
   10ab5:	c9                   	leave  
   10ab6:	c3                   	ret    

00010ab7 <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   10ab7:	55                   	push   %ebp
   10ab8:	89 e5                	mov    %esp,%ebp
   10aba:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   10abd:	83 ec 0c             	sub    $0xc,%esp
   10ac0:	68 1c 33 01 00       	push   $0x1331c
   10ac5:	e8 e5 0e 00 00       	call   119af <klog>
   10aca:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: Page fault.");
   10acd:	83 ec 0c             	sub    $0xc,%esp
   10ad0:	68 5c 34 01 00       	push   $0x1345c
   10ad5:	e8 d5 0e 00 00       	call   119af <klog>
   10ada:	83 c4 10             	add    $0x10,%esp
    if (frame->err_code & ERR_PAGE_P) {
   10add:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae0:	8b 40 34             	mov    0x34(%eax),%eax
   10ae3:	83 e0 01             	and    $0x1,%eax
   10ae6:	85 c0                	test   %eax,%eax
   10ae8:	74 18                	je     10b02 <handle_page_fault+0x4b>
        klog("\tpage-level protection violation: 0x%x.", read_cr2());
   10aea:	e8 e4 fd ff ff       	call   108d3 <read_cr2>
   10aef:	83 ec 08             	sub    $0x8,%esp
   10af2:	50                   	push   %eax
   10af3:	68 80 34 01 00       	push   $0x13480
   10af8:	e8 b2 0e 00 00       	call   119af <klog>
   10afd:	83 c4 10             	add    $0x10,%esp
   10b00:	eb 16                	jmp    10b18 <handle_page_fault+0x61>
    } else {
         klog("\tPage doesn't present 0x%x", read_cr2());
   10b02:	e8 cc fd ff ff       	call   108d3 <read_cr2>
   10b07:	83 ec 08             	sub    $0x8,%esp
   10b0a:	50                   	push   %eax
   10b0b:	68 a8 34 01 00       	push   $0x134a8
   10b10:	e8 9a 0e 00 00       	call   119af <klog>
   10b15:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->err_code & ERR_PAGE_WR) {
   10b18:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1b:	8b 40 34             	mov    0x34(%eax),%eax
   10b1e:	83 e0 02             	and    $0x2,%eax
   10b21:	85 c0                	test   %eax,%eax
   10b23:	74 12                	je     10b37 <handle_page_fault+0x80>
        klog("\tThe access causing the fault was a read.");
   10b25:	83 ec 0c             	sub    $0xc,%esp
   10b28:	68 c4 34 01 00       	push   $0x134c4
   10b2d:	e8 7d 0e 00 00       	call   119af <klog>
   10b32:	83 c4 10             	add    $0x10,%esp
   10b35:	eb 10                	jmp    10b47 <handle_page_fault+0x90>
    } else {
        klog("\tThe access causing the fault was a write.");
   10b37:	83 ec 0c             	sub    $0xc,%esp
   10b3a:	68 f0 34 01 00       	push   $0x134f0
   10b3f:	e8 6b 0e 00 00       	call   119af <klog>
   10b44:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->err_code & ERR_PAGE_US) {
   10b47:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4a:	8b 40 34             	mov    0x34(%eax),%eax
   10b4d:	83 e0 02             	and    $0x2,%eax
   10b50:	85 c0                	test   %eax,%eax
   10b52:	74 12                	je     10b66 <handle_page_fault+0xaf>
        klog("\tA supervisor-mode access caused the fault.");
   10b54:	83 ec 0c             	sub    $0xc,%esp
   10b57:	68 1c 35 01 00       	push   $0x1351c
   10b5c:	e8 4e 0e 00 00       	call   119af <klog>
   10b61:	83 c4 10             	add    $0x10,%esp
   10b64:	eb 10                	jmp    10b76 <handle_page_fault+0xbf>
    } else {
        klog("\tA user-mode access caused the fault.");
   10b66:	83 ec 0c             	sub    $0xc,%esp
   10b69:	68 48 35 01 00       	push   $0x13548
   10b6e:	e8 3c 0e 00 00       	call   119af <klog>
   10b73:	83 c4 10             	add    $0x10,%esp
    }

    while(1){hlt();}
   10b76:	e8 df fc ff ff       	call   1085a <hlt>
   10b7b:	eb f9                	jmp    10b76 <handle_page_fault+0xbf>

00010b7d <handle_fpu_error>:

	//default_handler(frame, "IRQ/Exception happend: Page fault.");
}
void handle_fpu_error(exception_frame_t * frame) {
   10b7d:	55                   	push   %ebp
   10b7e:	89 e5                	mov    %esp,%ebp
   10b80:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   10b83:	83 ec 08             	sub    $0x8,%esp
   10b86:	68 6e 35 01 00       	push   $0x1356e
   10b8b:	ff 75 08             	pushl  0x8(%ebp)
   10b8e:	e8 6c fd ff ff       	call   108ff <default_handler>
   10b93:	83 c4 10             	add    $0x10,%esp
}
   10b96:	90                   	nop
   10b97:	c9                   	leave  
   10b98:	c3                   	ret    

00010b99 <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   10b99:	55                   	push   %ebp
   10b9a:	89 e5                	mov    %esp,%ebp
   10b9c:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   10b9f:	83 ec 08             	sub    $0x8,%esp
   10ba2:	68 8c 35 01 00       	push   $0x1358c
   10ba7:	ff 75 08             	pushl  0x8(%ebp)
   10baa:	e8 50 fd ff ff       	call   108ff <default_handler>
   10baf:	83 c4 10             	add    $0x10,%esp
}
   10bb2:	90                   	nop
   10bb3:	c9                   	leave  
   10bb4:	c3                   	ret    

00010bb5 <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   10bb5:	55                   	push   %ebp
   10bb6:	89 e5                	mov    %esp,%ebp
   10bb8:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   10bbb:	83 ec 08             	sub    $0x8,%esp
   10bbe:	68 9d 35 01 00       	push   $0x1359d
   10bc3:	ff 75 08             	pushl  0x8(%ebp)
   10bc6:	e8 34 fd ff ff       	call   108ff <default_handler>
   10bcb:	83 c4 10             	add    $0x10,%esp
}
   10bce:	90                   	nop
   10bcf:	c9                   	leave  
   10bd0:	c3                   	ret    

00010bd1 <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   10bd1:	55                   	push   %ebp
   10bd2:	89 e5                	mov    %esp,%ebp
   10bd4:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10bd7:	83 ec 08             	sub    $0x8,%esp
   10bda:	68 ac 35 01 00       	push   $0x135ac
   10bdf:	ff 75 08             	pushl  0x8(%ebp)
   10be2:	e8 18 fd ff ff       	call   108ff <default_handler>
   10be7:	83 c4 10             	add    $0x10,%esp
}
   10bea:	90                   	nop
   10beb:	c9                   	leave  
   10bec:	c3                   	ret    

00010bed <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10bed:	55                   	push   %ebp
   10bee:	89 e5                	mov    %esp,%ebp
   10bf0:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   10bf3:	83 ec 08             	sub    $0x8,%esp
   10bf6:	68 cb 35 01 00       	push   $0x135cb
   10bfb:	ff 75 08             	pushl  0x8(%ebp)
   10bfe:	e8 fc fc ff ff       	call   108ff <default_handler>
   10c03:	83 c4 10             	add    $0x10,%esp
}
   10c06:	90                   	nop
   10c07:	c9                   	leave  
   10c08:	c3                   	ret    

00010c09 <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10c09:	55                   	push   %ebp
   10c0a:	89 e5                	mov    %esp,%ebp
   10c0c:	83 ec 08             	sub    $0x8,%esp
   10c0f:	8b 55 0c             	mov    0xc(%ebp),%edx
   10c12:	8b 45 14             	mov    0x14(%ebp),%eax
   10c15:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10c19:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10c1d:	8b 45 10             	mov    0x10(%ebp),%eax
   10c20:	89 c2                	mov    %eax,%edx
   10c22:	8b 45 08             	mov    0x8(%ebp),%eax
   10c25:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10c28:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10c2f:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10c33:	8b 45 08             	mov    0x8(%ebp),%eax
   10c36:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10c3a:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10c3e:	8b 45 10             	mov    0x10(%ebp),%eax
   10c41:	c1 e8 10             	shr    $0x10,%eax
   10c44:	89 c2                	mov    %eax,%edx
   10c46:	8b 45 08             	mov    0x8(%ebp),%eax
   10c49:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10c4d:	90                   	nop
   10c4e:	c9                   	leave  
   10c4f:	c3                   	ret    

00010c50 <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   10c50:	55                   	push   %ebp
   10c51:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   10c53:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10c57:	7e 07                	jle    10c60 <irq_install+0x10>
        return -1;
   10c59:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c5e:	eb 1e                	jmp    10c7e <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   10c60:	8b 45 08             	mov    0x8(%ebp),%eax
   10c63:	c1 e0 03             	shl    $0x3,%eax
   10c66:	05 40 58 01 00       	add    $0x15840,%eax
   10c6b:	68 00 8e 00 00       	push   $0x8e00
   10c70:	ff 75 0c             	pushl  0xc(%ebp)
   10c73:	6a 08                	push   $0x8
   10c75:	50                   	push   %eax
   10c76:	e8 8e ff ff ff       	call   10c09 <gate_desc_set>
   10c7b:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   10c7e:	c9                   	leave  
   10c7f:	c3                   	ret    

00010c80 <init_pic>:

static void init_pic() {
   10c80:	55                   	push   %ebp
   10c81:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10c83:	6a 11                	push   $0x11
   10c85:	6a 20                	push   $0x20
   10c87:	e8 28 fc ff ff       	call   108b4 <outb>
   10c8c:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10c8f:	6a 20                	push   $0x20
   10c91:	6a 21                	push   $0x21
   10c93:	e8 1c fc ff ff       	call   108b4 <outb>
   10c98:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10c9b:	6a 04                	push   $0x4
   10c9d:	6a 21                	push   $0x21
   10c9f:	e8 10 fc ff ff       	call   108b4 <outb>
   10ca4:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10ca7:	6a 01                	push   $0x1
   10ca9:	6a 21                	push   $0x21
   10cab:	e8 04 fc ff ff       	call   108b4 <outb>
   10cb0:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10cb3:	6a 11                	push   $0x11
   10cb5:	68 a0 00 00 00       	push   $0xa0
   10cba:	e8 f5 fb ff ff       	call   108b4 <outb>
   10cbf:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10cc2:	6a 28                	push   $0x28
   10cc4:	68 a1 00 00 00       	push   $0xa1
   10cc9:	e8 e6 fb ff ff       	call   108b4 <outb>
   10cce:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10cd1:	6a 02                	push   $0x2
   10cd3:	68 a1 00 00 00       	push   $0xa1
   10cd8:	e8 d7 fb ff ff       	call   108b4 <outb>
   10cdd:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10ce0:	6a 01                	push   $0x1
   10ce2:	68 a1 00 00 00       	push   $0xa1
   10ce7:	e8 c8 fb ff ff       	call   108b4 <outb>
   10cec:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10cef:	68 fb 00 00 00       	push   $0xfb
   10cf4:	6a 21                	push   $0x21
   10cf6:	e8 b9 fb ff ff       	call   108b4 <outb>
   10cfb:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10cfe:	68 ff 00 00 00       	push   $0xff
   10d03:	68 a1 00 00 00       	push   $0xa1
   10d08:	e8 a7 fb ff ff       	call   108b4 <outb>
   10d0d:	83 c4 08             	add    $0x8,%esp
}
   10d10:	90                   	nop
   10d11:	c9                   	leave  
   10d12:	c3                   	ret    

00010d13 <irq_init>:

void irq_init () {
   10d13:	55                   	push   %ebp
   10d14:	89 e5                	mov    %esp,%ebp
   10d16:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10d19:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10d20:	eb 25                	jmp    10d47 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10d22:	ba 28 00 01 00       	mov    $0x10028,%edx
   10d27:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d2a:	c1 e0 03             	shl    $0x3,%eax
   10d2d:	05 40 58 01 00       	add    $0x15840,%eax
   10d32:	68 00 8e 00 00       	push   $0x8e00
   10d37:	52                   	push   %edx
   10d38:	6a 08                	push   $0x8
   10d3a:	50                   	push   %eax
   10d3b:	e8 c9 fe ff ff       	call   10c09 <gate_desc_set>
   10d40:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10d43:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10d47:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   10d4b:	76 d5                	jbe    10d22 <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10d4d:	b8 40 58 01 00       	mov    $0x15840,%eax
   10d52:	68 00 04 00 00       	push   $0x400
   10d57:	50                   	push   %eax
   10d58:	e8 12 fb ff ff       	call   1086f <lidt>
   10d5d:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   10d60:	b8 47 00 01 00       	mov    $0x10047,%eax
   10d65:	50                   	push   %eax
   10d66:	6a 00                	push   $0x0
   10d68:	e8 e3 fe ff ff       	call   10c50 <irq_install>
   10d6d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   10d70:	b8 66 00 01 00       	mov    $0x10066,%eax
   10d75:	50                   	push   %eax
   10d76:	6a 01                	push   $0x1
   10d78:	e8 d3 fe ff ff       	call   10c50 <irq_install>
   10d7d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   10d80:	b8 85 00 01 00       	mov    $0x10085,%eax
   10d85:	50                   	push   %eax
   10d86:	6a 02                	push   $0x2
   10d88:	e8 c3 fe ff ff       	call   10c50 <irq_install>
   10d8d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   10d90:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   10d95:	50                   	push   %eax
   10d96:	6a 03                	push   $0x3
   10d98:	e8 b3 fe ff ff       	call   10c50 <irq_install>
   10d9d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10da0:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   10da5:	50                   	push   %eax
   10da6:	6a 04                	push   $0x4
   10da8:	e8 a3 fe ff ff       	call   10c50 <irq_install>
   10dad:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10db0:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   10db5:	50                   	push   %eax
   10db6:	6a 05                	push   $0x5
   10db8:	e8 93 fe ff ff       	call   10c50 <irq_install>
   10dbd:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10dc0:	b8 01 01 01 00       	mov    $0x10101,%eax
   10dc5:	50                   	push   %eax
   10dc6:	6a 06                	push   $0x6
   10dc8:	e8 83 fe ff ff       	call   10c50 <irq_install>
   10dcd:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10dd0:	b8 20 01 01 00       	mov    $0x10120,%eax
   10dd5:	50                   	push   %eax
   10dd6:	6a 07                	push   $0x7
   10dd8:	e8 73 fe ff ff       	call   10c50 <irq_install>
   10ddd:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10de0:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   10de5:	50                   	push   %eax
   10de6:	6a 08                	push   $0x8
   10de8:	e8 63 fe ff ff       	call   10c50 <irq_install>
   10ded:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10df0:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   10df5:	50                   	push   %eax
   10df6:	6a 0a                	push   $0xa
   10df8:	e8 53 fe ff ff       	call   10c50 <irq_install>
   10dfd:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10e00:	b8 79 01 01 00       	mov    $0x10179,%eax
   10e05:	50                   	push   %eax
   10e06:	6a 0b                	push   $0xb
   10e08:	e8 43 fe ff ff       	call   10c50 <irq_install>
   10e0d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10e10:	b8 96 01 01 00       	mov    $0x10196,%eax
   10e15:	50                   	push   %eax
   10e16:	6a 0c                	push   $0xc
   10e18:	e8 33 fe ff ff       	call   10c50 <irq_install>
   10e1d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10e20:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   10e25:	50                   	push   %eax
   10e26:	6a 0d                	push   $0xd
   10e28:	e8 23 fe ff ff       	call   10c50 <irq_install>
   10e2d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10e30:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   10e35:	50                   	push   %eax
   10e36:	6a 0e                	push   $0xe
   10e38:	e8 13 fe ff ff       	call   10c50 <irq_install>
   10e3d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   10e40:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   10e45:	50                   	push   %eax
   10e46:	6a 10                	push   $0x10
   10e48:	e8 03 fe ff ff       	call   10c50 <irq_install>
   10e4d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   10e50:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   10e55:	50                   	push   %eax
   10e56:	6a 11                	push   $0x11
   10e58:	e8 f3 fd ff ff       	call   10c50 <irq_install>
   10e5d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   10e60:	b8 29 02 01 00       	mov    $0x10229,%eax
   10e65:	50                   	push   %eax
   10e66:	6a 12                	push   $0x12
   10e68:	e8 e3 fd ff ff       	call   10c50 <irq_install>
   10e6d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   10e70:	b8 48 02 01 00       	mov    $0x10248,%eax
   10e75:	50                   	push   %eax
   10e76:	6a 13                	push   $0x13
   10e78:	e8 d3 fd ff ff       	call   10c50 <irq_install>
   10e7d:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   10e80:	b8 67 02 01 00       	mov    $0x10267,%eax
   10e85:	50                   	push   %eax
   10e86:	6a 14                	push   $0x14
   10e88:	e8 c3 fd ff ff       	call   10c50 <irq_install>
   10e8d:	83 c4 08             	add    $0x8,%esp

    init_pic();
   10e90:	e8 eb fd ff ff       	call   10c80 <init_pic>
}
   10e95:	90                   	nop
   10e96:	c9                   	leave  
   10e97:	c3                   	ret    

00010e98 <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10e98:	55                   	push   %ebp
   10e99:	89 e5                	mov    %esp,%ebp
   10e9b:	53                   	push   %ebx
   10e9c:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10e9f:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ea3:	7e 78                	jle    10f1d <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10ea5:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10ea9:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ead:	7f 32                	jg     10ee1 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10eaf:	6a 21                	push   $0x21
   10eb1:	e8 e1 f9 ff ff       	call   10897 <inb>
   10eb6:	83 c4 04             	add    $0x4,%esp
   10eb9:	89 c2                	mov    %eax,%edx
   10ebb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ebe:	bb 01 00 00 00       	mov    $0x1,%ebx
   10ec3:	89 c1                	mov    %eax,%ecx
   10ec5:	d3 e3                	shl    %cl,%ebx
   10ec7:	89 d8                	mov    %ebx,%eax
   10ec9:	f7 d0                	not    %eax
   10ecb:	21 d0                	and    %edx,%eax
   10ecd:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10ed0:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10ed4:	50                   	push   %eax
   10ed5:	6a 21                	push   $0x21
   10ed7:	e8 d8 f9 ff ff       	call   108b4 <outb>
   10edc:	83 c4 08             	add    $0x8,%esp
   10edf:	eb 3d                	jmp    10f1e <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10ee1:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10ee5:	68 a1 00 00 00       	push   $0xa1
   10eea:	e8 a8 f9 ff ff       	call   10897 <inb>
   10eef:	83 c4 04             	add    $0x4,%esp
   10ef2:	89 c2                	mov    %eax,%edx
   10ef4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ef7:	bb 01 00 00 00       	mov    $0x1,%ebx
   10efc:	89 c1                	mov    %eax,%ecx
   10efe:	d3 e3                	shl    %cl,%ebx
   10f00:	89 d8                	mov    %ebx,%eax
   10f02:	f7 d0                	not    %eax
   10f04:	21 d0                	and    %edx,%eax
   10f06:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10f09:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10f0d:	50                   	push   %eax
   10f0e:	68 a1 00 00 00       	push   $0xa1
   10f13:	e8 9c f9 ff ff       	call   108b4 <outb>
   10f18:	83 c4 08             	add    $0x8,%esp
   10f1b:	eb 01                	jmp    10f1e <irq_enable+0x86>
        return;
   10f1d:	90                   	nop
    }
}
   10f1e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f21:	c9                   	leave  
   10f22:	c3                   	ret    

00010f23 <irq_disable>:

void irq_disable(int irq_num) {
   10f23:	55                   	push   %ebp
   10f24:	89 e5                	mov    %esp,%ebp
   10f26:	53                   	push   %ebx
   10f27:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10f2a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10f2e:	7e 74                	jle    10fa4 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10f30:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10f34:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f38:	7f 30                	jg     10f6a <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10f3a:	6a 21                	push   $0x21
   10f3c:	e8 56 f9 ff ff       	call   10897 <inb>
   10f41:	83 c4 04             	add    $0x4,%esp
   10f44:	89 c3                	mov    %eax,%ebx
   10f46:	8b 45 08             	mov    0x8(%ebp),%eax
   10f49:	ba 01 00 00 00       	mov    $0x1,%edx
   10f4e:	89 c1                	mov    %eax,%ecx
   10f50:	d3 e2                	shl    %cl,%edx
   10f52:	89 d0                	mov    %edx,%eax
   10f54:	09 d8                	or     %ebx,%eax
   10f56:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10f59:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10f5d:	50                   	push   %eax
   10f5e:	6a 21                	push   $0x21
   10f60:	e8 4f f9 ff ff       	call   108b4 <outb>
   10f65:	83 c4 08             	add    $0x8,%esp
   10f68:	eb 3b                	jmp    10fa5 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10f6a:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10f6e:	68 a1 00 00 00       	push   $0xa1
   10f73:	e8 1f f9 ff ff       	call   10897 <inb>
   10f78:	83 c4 04             	add    $0x4,%esp
   10f7b:	89 c3                	mov    %eax,%ebx
   10f7d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f80:	ba 01 00 00 00       	mov    $0x1,%edx
   10f85:	89 c1                	mov    %eax,%ecx
   10f87:	d3 e2                	shl    %cl,%edx
   10f89:	89 d0                	mov    %edx,%eax
   10f8b:	09 d8                	or     %ebx,%eax
   10f8d:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10f90:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10f94:	50                   	push   %eax
   10f95:	68 a1 00 00 00       	push   $0xa1
   10f9a:	e8 15 f9 ff ff       	call   108b4 <outb>
   10f9f:	83 c4 08             	add    $0x8,%esp
   10fa2:	eb 01                	jmp    10fa5 <irq_disable+0x82>
        return;
   10fa4:	90                   	nop
    }
}
   10fa5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10fa8:	c9                   	leave  
   10fa9:	c3                   	ret    

00010faa <irq_disable_global>:

void irq_disable_global(void) {
   10faa:	55                   	push   %ebp
   10fab:	89 e5                	mov    %esp,%ebp
    cli();
   10fad:	e8 af f8 ff ff       	call   10861 <cli>
}
   10fb2:	90                   	nop
   10fb3:	5d                   	pop    %ebp
   10fb4:	c3                   	ret    

00010fb5 <irq_enable_global>:

void irq_enable_global(void) {
   10fb5:	55                   	push   %ebp
   10fb6:	89 e5                	mov    %esp,%ebp
    sti();
   10fb8:	e8 ab f8 ff ff       	call   10868 <sti>
}
   10fbd:	90                   	nop
   10fbe:	5d                   	pop    %ebp
   10fbf:	c3                   	ret    

00010fc0 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10fc0:	55                   	push   %ebp
   10fc1:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10fc3:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10fc7:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10fcb:	7e 0f                	jle    10fdc <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10fcd:	6a 20                	push   $0x20
   10fcf:	68 a0 00 00 00       	push   $0xa0
   10fd4:	e8 db f8 ff ff       	call   108b4 <outb>
   10fd9:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10fdc:	6a 20                	push   $0x20
   10fde:	6a 20                	push   $0x20
   10fe0:	e8 cf f8 ff ff       	call   108b4 <outb>
   10fe5:	83 c4 08             	add    $0x8,%esp
}
   10fe8:	90                   	nop
   10fe9:	c9                   	leave  
   10fea:	c3                   	ret    

00010feb <irq_enter_proection>:


irq_state_t irq_enter_proection() {
   10feb:	55                   	push   %ebp
   10fec:	89 e5                	mov    %esp,%ebp
   10fee:	83 ec 10             	sub    $0x10,%esp
    irq_state_t  state = read_eflags();
   10ff1:	e8 ee f8 ff ff       	call   108e4 <read_eflags>
   10ff6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   10ff9:	e8 ac ff ff ff       	call   10faa <irq_disable_global>

    return state;
   10ffe:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11001:	c9                   	leave  
   11002:	c3                   	ret    

00011003 <irq_leave_proection>:


void irq_leave_proection(irq_state_t state) {
   11003:	55                   	push   %ebp
   11004:	89 e5                	mov    %esp,%ebp

    write_eflags(state);
   11006:	ff 75 08             	pushl  0x8(%ebp)
   11009:	e8 e6 f8 ff ff       	call   108f4 <write_eflags>
   1100e:	83 c4 04             	add    $0x4,%esp
}
   11011:	90                   	nop
   11012:	c9                   	leave  
   11013:	c3                   	ret    

00011014 <bitmap_byte_count>:
#include <bitmap.h>
#include <klib.h>

int bitmap_byte_count (int bit_count) {
   11014:	55                   	push   %ebp
   11015:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         
   11017:	8b 45 08             	mov    0x8(%ebp),%eax
   1101a:	83 c0 07             	add    $0x7,%eax
   1101d:	8d 50 07             	lea    0x7(%eax),%edx
   11020:	85 c0                	test   %eax,%eax
   11022:	0f 48 c2             	cmovs  %edx,%eax
   11025:	c1 f8 03             	sar    $0x3,%eax
}
   11028:	5d                   	pop    %ebp
   11029:	c3                   	ret    

0001102a <bitmap_init>:

void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   1102a:	55                   	push   %ebp
   1102b:	89 e5                	mov    %esp,%ebp
   1102d:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   11030:	8b 45 08             	mov    0x8(%ebp),%eax
   11033:	8b 55 10             	mov    0x10(%ebp),%edx
   11036:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   11038:	8b 45 08             	mov    0x8(%ebp),%eax
   1103b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1103e:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   11041:	8b 45 08             	mov    0x8(%ebp),%eax
   11044:	8b 00                	mov    (%eax),%eax
   11046:	50                   	push   %eax
   11047:	e8 c8 ff ff ff       	call   11014 <bitmap_byte_count>
   1104c:	83 c4 04             	add    $0x4,%esp
   1104f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    k_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   11052:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11056:	74 07                	je     1105f <bitmap_init+0x35>
   11058:	ba ff 00 00 00       	mov    $0xff,%edx
   1105d:	eb 05                	jmp    11064 <bitmap_init+0x3a>
   1105f:	ba 00 00 00 00       	mov    $0x0,%edx
   11064:	8b 45 08             	mov    0x8(%ebp),%eax
   11067:	8b 40 04             	mov    0x4(%eax),%eax
   1106a:	83 ec 04             	sub    $0x4,%esp
   1106d:	ff 75 f4             	pushl  -0xc(%ebp)
   11070:	52                   	push   %edx
   11071:	50                   	push   %eax
   11072:	e8 9d 03 00 00       	call   11414 <k_memset>
   11077:	83 c4 10             	add    $0x10,%esp
}
   1107a:	90                   	nop
   1107b:	c9                   	leave  
   1107c:	c3                   	ret    

0001107d <bitmap_get_bit>:


int bitmap_get_bit (bitmap_t * bitmap, int index) {
   1107d:	55                   	push   %ebp
   1107e:	89 e5                	mov    %esp,%ebp
   11080:	53                   	push   %ebx

    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   11081:	8b 45 08             	mov    0x8(%ebp),%eax
   11084:	8b 50 04             	mov    0x4(%eax),%edx
   11087:	8b 45 0c             	mov    0xc(%ebp),%eax
   1108a:	8d 48 07             	lea    0x7(%eax),%ecx
   1108d:	85 c0                	test   %eax,%eax
   1108f:	0f 48 c1             	cmovs  %ecx,%eax
   11092:	c1 f8 03             	sar    $0x3,%eax
   11095:	01 d0                	add    %edx,%eax
   11097:	0f b6 00             	movzbl (%eax),%eax
   1109a:	0f b6 d8             	movzbl %al,%ebx
   1109d:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a0:	99                   	cltd   
   110a1:	c1 ea 1d             	shr    $0x1d,%edx
   110a4:	01 d0                	add    %edx,%eax
   110a6:	83 e0 07             	and    $0x7,%eax
   110a9:	29 d0                	sub    %edx,%eax
   110ab:	89 c1                	mov    %eax,%ecx
   110ad:	d3 fb                	sar    %cl,%ebx
   110af:	89 d8                	mov    %ebx,%eax
   110b1:	83 e0 01             	and    $0x1,%eax
}
   110b4:	5b                   	pop    %ebx
   110b5:	5d                   	pop    %ebp
   110b6:	c3                   	ret    

000110b7 <bitmap_is_set>:

int bitmap_is_set (bitmap_t * bitmap, int index) {
   110b7:	55                   	push   %ebp
   110b8:	89 e5                	mov    %esp,%ebp
    
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   110ba:	ff 75 0c             	pushl  0xc(%ebp)
   110bd:	ff 75 08             	pushl  0x8(%ebp)
   110c0:	e8 b8 ff ff ff       	call   1107d <bitmap_get_bit>
   110c5:	83 c4 08             	add    $0x8,%esp
   110c8:	85 c0                	test   %eax,%eax
   110ca:	0f 95 c0             	setne  %al
   110cd:	0f b6 c0             	movzbl %al,%eax
}
   110d0:	c9                   	leave  
   110d1:	c3                   	ret    

000110d2 <bitmap_set_bit>:



void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   110d2:	55                   	push   %ebp
   110d3:	89 e5                	mov    %esp,%ebp
   110d5:	56                   	push   %esi
   110d6:	53                   	push   %ebx
   110d7:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   110da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   110e1:	e9 a2 00 00 00       	jmp    11188 <bitmap_set_bit+0xb6>
        if (bit) {
   110e6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110ea:	74 4a                	je     11136 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   110ec:	8b 45 08             	mov    0x8(%ebp),%eax
   110ef:	8b 50 04             	mov    0x4(%eax),%edx
   110f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   110f5:	8d 48 07             	lea    0x7(%eax),%ecx
   110f8:	85 c0                	test   %eax,%eax
   110fa:	0f 48 c1             	cmovs  %ecx,%eax
   110fd:	c1 f8 03             	sar    $0x3,%eax
   11100:	89 c3                	mov    %eax,%ebx
   11102:	89 d8                	mov    %ebx,%eax
   11104:	01 d0                	add    %edx,%eax
   11106:	0f b6 00             	movzbl (%eax),%eax
   11109:	89 c6                	mov    %eax,%esi
   1110b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1110e:	99                   	cltd   
   1110f:	c1 ea 1d             	shr    $0x1d,%edx
   11112:	01 d0                	add    %edx,%eax
   11114:	83 e0 07             	and    $0x7,%eax
   11117:	29 d0                	sub    %edx,%eax
   11119:	ba 01 00 00 00       	mov    $0x1,%edx
   1111e:	89 c1                	mov    %eax,%ecx
   11120:	d3 e2                	shl    %cl,%edx
   11122:	89 d0                	mov    %edx,%eax
   11124:	89 f2                	mov    %esi,%edx
   11126:	09 c2                	or     %eax,%edx
   11128:	8b 45 08             	mov    0x8(%ebp),%eax
   1112b:	8b 40 04             	mov    0x4(%eax),%eax
   1112e:	89 d9                	mov    %ebx,%ecx
   11130:	01 c8                	add    %ecx,%eax
   11132:	88 10                	mov    %dl,(%eax)
   11134:	eb 4a                	jmp    11180 <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   11136:	8b 45 08             	mov    0x8(%ebp),%eax
   11139:	8b 50 04             	mov    0x4(%eax),%edx
   1113c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1113f:	8d 48 07             	lea    0x7(%eax),%ecx
   11142:	85 c0                	test   %eax,%eax
   11144:	0f 48 c1             	cmovs  %ecx,%eax
   11147:	c1 f8 03             	sar    $0x3,%eax
   1114a:	89 c3                	mov    %eax,%ebx
   1114c:	89 d8                	mov    %ebx,%eax
   1114e:	01 d0                	add    %edx,%eax
   11150:	0f b6 00             	movzbl (%eax),%eax
   11153:	89 c6                	mov    %eax,%esi
   11155:	8b 45 0c             	mov    0xc(%ebp),%eax
   11158:	99                   	cltd   
   11159:	c1 ea 1d             	shr    $0x1d,%edx
   1115c:	01 d0                	add    %edx,%eax
   1115e:	83 e0 07             	and    $0x7,%eax
   11161:	29 d0                	sub    %edx,%eax
   11163:	ba 01 00 00 00       	mov    $0x1,%edx
   11168:	89 c1                	mov    %eax,%ecx
   1116a:	d3 e2                	shl    %cl,%edx
   1116c:	89 d0                	mov    %edx,%eax
   1116e:	f7 d0                	not    %eax
   11170:	89 f2                	mov    %esi,%edx
   11172:	21 c2                	and    %eax,%edx
   11174:	8b 45 08             	mov    0x8(%ebp),%eax
   11177:	8b 40 04             	mov    0x4(%eax),%eax
   1117a:	89 d9                	mov    %ebx,%ecx
   1117c:	01 c8                	add    %ecx,%eax
   1117e:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   11180:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11184:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   11188:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1118b:	3b 45 10             	cmp    0x10(%ebp),%eax
   1118e:	7d 0e                	jge    1119e <bitmap_set_bit+0xcc>
   11190:	8b 45 08             	mov    0x8(%ebp),%eax
   11193:	8b 00                	mov    (%eax),%eax
   11195:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11198:	0f 8c 48 ff ff ff    	jl     110e6 <bitmap_set_bit+0x14>
        }
    }
} 
   1119e:	90                   	nop
   1119f:	83 c4 10             	add    $0x10,%esp
   111a2:	5b                   	pop    %ebx
   111a3:	5e                   	pop    %esi
   111a4:	5d                   	pop    %ebp
   111a5:	c3                   	ret    

000111a6 <bitmap_alloc_nbits>:



int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   111a6:	55                   	push   %ebp
   111a7:	89 e5                	mov    %esp,%ebp
   111a9:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   111ac:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   111b3:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   111ba:	e9 85 00 00 00       	jmp    11244 <bitmap_alloc_nbits+0x9e>
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   111bf:	ff 75 fc             	pushl  -0x4(%ebp)
   111c2:	ff 75 08             	pushl  0x8(%ebp)
   111c5:	e8 b3 fe ff ff       	call   1107d <bitmap_get_bit>
   111ca:	83 c4 08             	add    $0x8,%esp
   111cd:	39 45 0c             	cmp    %eax,0xc(%ebp)
   111d0:	74 06                	je     111d8 <bitmap_alloc_nbits+0x32>
            search_idx++;
   111d2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   111d6:	eb 6c                	jmp    11244 <bitmap_alloc_nbits+0x9e>
        }

        ok_idx = search_idx;
   111d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111db:	89 45 f8             	mov    %eax,-0x8(%ebp)

        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   111de:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   111e5:	eb 27                	jmp    1120e <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   111e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111ea:	8d 50 01             	lea    0x1(%eax),%edx
   111ed:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111f0:	50                   	push   %eax
   111f1:	ff 75 08             	pushl  0x8(%ebp)
   111f4:	e8 84 fe ff ff       	call   1107d <bitmap_get_bit>
   111f9:	83 c4 08             	add    $0x8,%esp
   111fc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   111ff:	74 09                	je     1120a <bitmap_alloc_nbits+0x64>
                ok_idx = -1;
   11201:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   11208:	eb 16                	jmp    11220 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   1120a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1120e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11211:	3b 45 10             	cmp    0x10(%ebp),%eax
   11214:	7d 0a                	jge    11220 <bitmap_alloc_nbits+0x7a>
   11216:	8b 45 08             	mov    0x8(%ebp),%eax
   11219:	8b 00                	mov    (%eax),%eax
   1121b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1121e:	7c c7                	jl     111e7 <bitmap_alloc_nbits+0x41>
            }
        }

        if (i >= count) {
   11220:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11223:	3b 45 10             	cmp    0x10(%ebp),%eax
   11226:	7c 1c                	jl     11244 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   11228:	8b 45 0c             	mov    0xc(%ebp),%eax
   1122b:	f7 d0                	not    %eax
   1122d:	50                   	push   %eax
   1122e:	ff 75 10             	pushl  0x10(%ebp)
   11231:	ff 75 f8             	pushl  -0x8(%ebp)
   11234:	ff 75 08             	pushl  0x8(%ebp)
   11237:	e8 96 fe ff ff       	call   110d2 <bitmap_set_bit>
   1123c:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   1123f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11242:	eb 13                	jmp    11257 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   11244:	8b 45 08             	mov    0x8(%ebp),%eax
   11247:	8b 00                	mov    (%eax),%eax
   11249:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1124c:	0f 8c 6d ff ff ff    	jl     111bf <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   11252:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11257:	c9                   	leave  
   11258:	c3                   	ret    

00011259 <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   11259:	55                   	push   %ebp
   1125a:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   1125c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11260:	74 3b                	je     1129d <k_strcpy+0x44>
   11262:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11266:	74 35                	je     1129d <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   11268:	eb 17                	jmp    11281 <k_strcpy+0x28>
        *dest++ = *src++;
   1126a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1126d:	8d 42 01             	lea    0x1(%edx),%eax
   11270:	89 45 0c             	mov    %eax,0xc(%ebp)
   11273:	8b 45 08             	mov    0x8(%ebp),%eax
   11276:	8d 48 01             	lea    0x1(%eax),%ecx
   11279:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1127c:	0f b6 12             	movzbl (%edx),%edx
   1127f:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   11281:	8b 45 08             	mov    0x8(%ebp),%eax
   11284:	0f b6 00             	movzbl (%eax),%eax
   11287:	84 c0                	test   %al,%al
   11289:	74 0a                	je     11295 <k_strcpy+0x3c>
   1128b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1128e:	0f b6 00             	movzbl (%eax),%eax
   11291:	84 c0                	test   %al,%al
   11293:	75 d5                	jne    1126a <k_strcpy+0x11>
    }
    *dest = '\0'; 
   11295:	8b 45 08             	mov    0x8(%ebp),%eax
   11298:	c6 00 00             	movb   $0x0,(%eax)
   1129b:	eb 01                	jmp    1129e <k_strcpy+0x45>
        return;
   1129d:	90                   	nop
}
   1129e:	5d                   	pop    %ebp
   1129f:	c3                   	ret    

000112a0 <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   112a0:	55                   	push   %ebp
   112a1:	89 e5                	mov    %esp,%ebp
   112a3:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   112a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112aa:	74 61                	je     1130d <k_strncpy+0x6d>
   112ac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112b0:	74 5b                	je     1130d <k_strncpy+0x6d>
   112b2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112b6:	74 55                	je     1130d <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   112b8:	8b 45 08             	mov    0x8(%ebp),%eax
   112bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   112be:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   112c4:	eb 17                	jmp    112dd <k_strncpy+0x3d>
        *d++ = *s++;
   112c6:	8b 55 f8             	mov    -0x8(%ebp),%edx
   112c9:	8d 42 01             	lea    0x1(%edx),%eax
   112cc:	89 45 f8             	mov    %eax,-0x8(%ebp)
   112cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112d2:	8d 48 01             	lea    0x1(%eax),%ecx
   112d5:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   112d8:	0f b6 12             	movzbl (%edx),%edx
   112db:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   112dd:	8b 45 10             	mov    0x10(%ebp),%eax
   112e0:	8d 50 ff             	lea    -0x1(%eax),%edx
   112e3:	89 55 10             	mov    %edx,0x10(%ebp)
   112e6:	85 c0                	test   %eax,%eax
   112e8:	7e 0a                	jle    112f4 <k_strncpy+0x54>
   112ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112ed:	0f b6 00             	movzbl (%eax),%eax
   112f0:	84 c0                	test   %al,%al
   112f2:	75 d2                	jne    112c6 <k_strncpy+0x26>
    } 
    if (size == 0) {
   112f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112f8:	75 0b                	jne    11305 <k_strncpy+0x65>
        *(d - 1) = '\0';
   112fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112fd:	83 e8 01             	sub    $0x1,%eax
   11300:	c6 00 00             	movb   $0x0,(%eax)
   11303:	eb 09                	jmp    1130e <k_strncpy+0x6e>
    } else {
        *d = '\0';
   11305:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11308:	c6 00 00             	movb   $0x0,(%eax)
   1130b:	eb 01                	jmp    1130e <k_strncpy+0x6e>
        return;
   1130d:	90                   	nop
    }
}
   1130e:	c9                   	leave  
   1130f:	c3                   	ret    

00011310 <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   11310:	55                   	push   %ebp
   11311:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   11313:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11317:	74 06                	je     1131f <k_strncmp+0xf>
   11319:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1131d:	75 0f                	jne    1132e <k_strncmp+0x1e>
   1131f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11324:	eb 62                	jmp    11388 <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   11326:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   1132a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   1132e:	8b 45 08             	mov    0x8(%ebp),%eax
   11331:	0f b6 00             	movzbl (%eax),%eax
   11334:	84 c0                	test   %al,%al
   11336:	74 20                	je     11358 <k_strncmp+0x48>
   11338:	8b 45 0c             	mov    0xc(%ebp),%eax
   1133b:	0f b6 00             	movzbl (%eax),%eax
   1133e:	84 c0                	test   %al,%al
   11340:	74 16                	je     11358 <k_strncmp+0x48>
   11342:	8b 45 08             	mov    0x8(%ebp),%eax
   11345:	0f b6 10             	movzbl (%eax),%edx
   11348:	8b 45 0c             	mov    0xc(%ebp),%eax
   1134b:	0f b6 00             	movzbl (%eax),%eax
   1134e:	38 c2                	cmp    %al,%dl
   11350:	75 06                	jne    11358 <k_strncmp+0x48>
   11352:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11356:	75 ce                	jne    11326 <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11358:	8b 45 08             	mov    0x8(%ebp),%eax
   1135b:	0f b6 00             	movzbl (%eax),%eax
   1135e:	84 c0                	test   %al,%al
   11360:	74 21                	je     11383 <k_strncmp+0x73>
   11362:	8b 45 0c             	mov    0xc(%ebp),%eax
   11365:	0f b6 00             	movzbl (%eax),%eax
   11368:	84 c0                	test   %al,%al
   1136a:	74 17                	je     11383 <k_strncmp+0x73>
   1136c:	8b 45 08             	mov    0x8(%ebp),%eax
   1136f:	0f b6 10             	movzbl (%eax),%edx
   11372:	8b 45 0c             	mov    0xc(%ebp),%eax
   11375:	0f b6 00             	movzbl (%eax),%eax
   11378:	38 c2                	cmp    %al,%dl
   1137a:	74 07                	je     11383 <k_strncmp+0x73>
   1137c:	b8 01 00 00 00       	mov    $0x1,%eax
   11381:	eb 05                	jmp    11388 <k_strncmp+0x78>
   11383:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11388:	5d                   	pop    %ebp
   11389:	c3                   	ret    

0001138a <k_strlen>:
int k_strlen(const char *str) {
   1138a:	55                   	push   %ebp
   1138b:	89 e5                	mov    %esp,%ebp
   1138d:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   11390:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11394:	75 07                	jne    1139d <k_strlen+0x13>
        return 0;
   11396:	b8 00 00 00 00       	mov    $0x0,%eax
   1139b:	eb 26                	jmp    113c3 <k_strlen+0x39>
    }

    int len = 0;
   1139d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   113a4:	8b 45 08             	mov    0x8(%ebp),%eax
   113a7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   113aa:	eb 04                	jmp    113b0 <k_strlen+0x26>
        len++;
   113ac:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   113b0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113b3:	8d 50 01             	lea    0x1(%eax),%edx
   113b6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   113b9:	0f b6 00             	movzbl (%eax),%eax
   113bc:	84 c0                	test   %al,%al
   113be:	75 ec                	jne    113ac <k_strlen+0x22>
    }

    return len;
   113c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   113c3:	c9                   	leave  
   113c4:	c3                   	ret    

000113c5 <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   113c5:	55                   	push   %ebp
   113c6:	89 e5                	mov    %esp,%ebp
   113c8:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   113cb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113cf:	74 40                	je     11411 <k_memcpy+0x4c>
   113d1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113d5:	74 3a                	je     11411 <k_memcpy+0x4c>
   113d7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   113db:	74 34                	je     11411 <k_memcpy+0x4c>
        return;
    }
    uint8_t * s = (uint8_t *)src;
   113dd:	8b 45 0c             	mov    0xc(%ebp),%eax
   113e0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   113e3:	8b 45 08             	mov    0x8(%ebp),%eax
   113e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   113e9:	eb 17                	jmp    11402 <k_memcpy+0x3d>
        *d++ = *s++;
   113eb:	8b 55 fc             	mov    -0x4(%ebp),%edx
   113ee:	8d 42 01             	lea    0x1(%edx),%eax
   113f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
   113f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113f7:	8d 48 01             	lea    0x1(%eax),%ecx
   113fa:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113fd:	0f b6 12             	movzbl (%edx),%edx
   11400:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11402:	8b 45 10             	mov    0x10(%ebp),%eax
   11405:	8d 50 ff             	lea    -0x1(%eax),%edx
   11408:	89 55 10             	mov    %edx,0x10(%ebp)
   1140b:	85 c0                	test   %eax,%eax
   1140d:	75 dc                	jne    113eb <k_memcpy+0x26>
   1140f:	eb 01                	jmp    11412 <k_memcpy+0x4d>
        return;
   11411:	90                   	nop
    }
}
   11412:	c9                   	leave  
   11413:	c3                   	ret    

00011414 <k_memset>:


void k_memset(void* dest, uint8_t v, int size) {
   11414:	55                   	push   %ebp
   11415:	89 e5                	mov    %esp,%ebp
   11417:	83 ec 14             	sub    $0x14,%esp
   1141a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1141d:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   11420:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11424:	74 2c                	je     11452 <k_memset+0x3e>
   11426:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1142a:	74 26                	je     11452 <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   1142c:	8b 45 08             	mov    0x8(%ebp),%eax
   1142f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   11432:	eb 0f                	jmp    11443 <k_memset+0x2f>
        *d++ = v;
   11434:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11437:	8d 50 01             	lea    0x1(%eax),%edx
   1143a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1143d:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11441:	88 10                	mov    %dl,(%eax)
    while(size--) {
   11443:	8b 45 10             	mov    0x10(%ebp),%eax
   11446:	8d 50 ff             	lea    -0x1(%eax),%edx
   11449:	89 55 10             	mov    %edx,0x10(%ebp)
   1144c:	85 c0                	test   %eax,%eax
   1144e:	75 e4                	jne    11434 <k_memset+0x20>
   11450:	eb 01                	jmp    11453 <k_memset+0x3f>
    if(!dest || !size) return;
   11452:	90                   	nop
    }
}
   11453:	c9                   	leave  
   11454:	c3                   	ret    

00011455 <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   11455:	55                   	push   %ebp
   11456:	89 e5                	mov    %esp,%ebp
   11458:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   1145b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1145f:	74 0c                	je     1146d <k_memcmp+0x18>
   11461:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11465:	74 06                	je     1146d <k_memcmp+0x18>
   11467:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1146b:	74 07                	je     11474 <k_memcmp+0x1f>
        return 1;
   1146d:	b8 01 00 00 00       	mov    $0x1,%eax
   11472:	eb 43                	jmp    114b7 <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11474:	8b 45 08             	mov    0x8(%ebp),%eax
   11477:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   1147a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1147d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   11480:	eb 23                	jmp    114a5 <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   11482:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11485:	8d 50 01             	lea    0x1(%eax),%edx
   11488:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1148b:	0f b6 08             	movzbl (%eax),%ecx
   1148e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11491:	8d 50 01             	lea    0x1(%eax),%edx
   11494:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11497:	0f b6 00             	movzbl (%eax),%eax
   1149a:	38 c1                	cmp    %al,%cl
   1149c:	74 07                	je     114a5 <k_memcmp+0x50>
        return 1;
   1149e:	b8 01 00 00 00       	mov    $0x1,%eax
   114a3:	eb 12                	jmp    114b7 <k_memcmp+0x62>
    while(size--) {
   114a5:	8b 45 10             	mov    0x10(%ebp),%eax
   114a8:	8d 50 ff             	lea    -0x1(%eax),%edx
   114ab:	89 55 10             	mov    %edx,0x10(%ebp)
   114ae:	85 c0                	test   %eax,%eax
   114b0:	75 d0                	jne    11482 <k_memcmp+0x2d>
    }

    return 0;
   114b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   114b7:	c9                   	leave  
   114b8:	c3                   	ret    

000114b9 <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   114b9:	55                   	push   %ebp
   114ba:	89 e5                	mov    %esp,%ebp
   114bc:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   114bf:	8b 45 08             	mov    0x8(%ebp),%eax
   114c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   114c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   114c8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   114cb:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   114cf:	74 1d                	je     114ee <k_itoa+0x35>
   114d1:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   114d5:	74 17                	je     114ee <k_itoa+0x35>
   114d7:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   114db:	74 11                	je     114ee <k_itoa+0x35>
   114dd:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   114e1:	74 0b                	je     114ee <k_itoa+0x35>
        *p = '\0';
   114e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114e6:	c6 00 00             	movb   $0x0,(%eax)
        return;
   114e9:	e9 a0 00 00 00       	jmp    1158e <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   114ee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114f2:	79 12                	jns    11506 <k_itoa+0x4d>
   114f4:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   114f8:	75 0c                	jne    11506 <k_itoa+0x4d>
        *p++ = '-';
   114fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114fd:	8d 50 01             	lea    0x1(%eax),%edx
   11500:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11503:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   11506:	8b 0d 00 40 01 00    	mov    0x14000,%ecx
   1150c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1150f:	99                   	cltd   
   11510:	f7 7d 10             	idivl  0x10(%ebp)
   11513:	89 d0                	mov    %edx,%eax
   11515:	83 c0 0f             	add    $0xf,%eax
   11518:	01 c8                	add    %ecx,%eax
   1151a:	0f b6 00             	movzbl (%eax),%eax
   1151d:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11520:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11523:	8d 50 01             	lea    0x1(%eax),%edx
   11526:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11529:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1152d:	88 10                	mov    %dl,(%eax)
        num /= base;
   1152f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11532:	99                   	cltd   
   11533:	f7 7d 10             	idivl  0x10(%ebp)
   11536:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   11539:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1153d:	75 c7                	jne    11506 <k_itoa+0x4d>

    *p-- = '\0';
   1153f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11542:	8d 50 ff             	lea    -0x1(%eax),%edx
   11545:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11548:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   1154b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1154f:	7f 08                	jg     11559 <k_itoa+0xa0>
   11551:	8b 45 08             	mov    0x8(%ebp),%eax
   11554:	83 c0 01             	add    $0x1,%eax
   11557:	eb 03                	jmp    1155c <k_itoa+0xa3>
   11559:	8b 45 08             	mov    0x8(%ebp),%eax
   1155c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   1155f:	eb 25                	jmp    11586 <k_itoa+0xcd>
        char ch = *start;
   11561:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11564:	0f b6 00             	movzbl (%eax),%eax
   11567:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1156a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1156d:	0f b6 10             	movzbl (%eax),%edx
   11570:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11573:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11575:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11578:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1157c:	88 10                	mov    %dl,(%eax)

        p--;
   1157e:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11582:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   11586:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11589:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1158c:	72 d3                	jb     11561 <k_itoa+0xa8>
    }
}
   1158e:	c9                   	leave  
   1158f:	c3                   	ret    

00011590 <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   11590:	55                   	push   %ebp
   11591:	89 e5                	mov    %esp,%ebp
   11593:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   11596:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   1159d:	8b 45 08             	mov    0x8(%ebp),%eax
   115a0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   115a3:	e9 19 01 00 00       	jmp    116c1 <k_vsprint+0x131>
        switch (state) {
   115a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115ab:	85 c0                	test   %eax,%eax
   115ad:	74 0a                	je     115b9 <k_vsprint+0x29>
   115af:	83 f8 01             	cmp    $0x1,%eax
   115b2:	74 2b                	je     115df <k_vsprint+0x4f>
   115b4:	e9 07 01 00 00       	jmp    116c0 <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   115b9:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   115bd:	75 0c                	jne    115cb <k_vsprint+0x3b>
                state = READ_FMT;
   115bf:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   115c6:	e9 f6 00 00 00       	jmp    116c1 <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   115cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115ce:	8d 50 01             	lea    0x1(%eax),%edx
   115d1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   115d4:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   115d8:	88 10                	mov    %dl,(%eax)
            }
            break;
   115da:	e9 e2 00 00 00       	jmp    116c1 <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   115df:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   115e3:	75 31                	jne    11616 <k_vsprint+0x86>
                int num  = va_arg(args, int);
   115e5:	8b 45 10             	mov    0x10(%ebp),%eax
   115e8:	8d 50 04             	lea    0x4(%eax),%edx
   115eb:	89 55 10             	mov    %edx,0x10(%ebp)
   115ee:	8b 00                	mov    (%eax),%eax
   115f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   115f3:	6a 0a                	push   $0xa
   115f5:	ff 75 e4             	pushl  -0x1c(%ebp)
   115f8:	ff 75 f8             	pushl  -0x8(%ebp)
   115fb:	e8 b9 fe ff ff       	call   114b9 <k_itoa>
   11600:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   11603:	ff 75 f8             	pushl  -0x8(%ebp)
   11606:	e8 7f fd ff ff       	call   1138a <k_strlen>
   1160b:	83 c4 04             	add    $0x4,%esp
   1160e:	01 45 f8             	add    %eax,-0x8(%ebp)
   11611:	e9 a1 00 00 00       	jmp    116b7 <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   11616:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1161a:	75 2e                	jne    1164a <k_vsprint+0xba>
                int num  = va_arg(args, int);
   1161c:	8b 45 10             	mov    0x10(%ebp),%eax
   1161f:	8d 50 04             	lea    0x4(%eax),%edx
   11622:	89 55 10             	mov    %edx,0x10(%ebp)
   11625:	8b 00                	mov    (%eax),%eax
   11627:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   1162a:	6a 10                	push   $0x10
   1162c:	ff 75 e8             	pushl  -0x18(%ebp)
   1162f:	ff 75 f8             	pushl  -0x8(%ebp)
   11632:	e8 82 fe ff ff       	call   114b9 <k_itoa>
   11637:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   1163a:	ff 75 f8             	pushl  -0x8(%ebp)
   1163d:	e8 48 fd ff ff       	call   1138a <k_strlen>
   11642:	83 c4 04             	add    $0x4,%esp
   11645:	01 45 f8             	add    %eax,-0x8(%ebp)
   11648:	eb 6d                	jmp    116b7 <k_vsprint+0x127>

            }else if (ch == 'c') {
   1164a:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1164e:	75 1f                	jne    1166f <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   11650:	8b 45 10             	mov    0x10(%ebp),%eax
   11653:	8d 50 04             	lea    0x4(%eax),%edx
   11656:	89 55 10             	mov    %edx,0x10(%ebp)
   11659:	8b 00                	mov    (%eax),%eax
   1165b:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   1165e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11661:	8d 50 01             	lea    0x1(%eax),%edx
   11664:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11667:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1166b:	88 10                	mov    %dl,(%eax)
   1166d:	eb 48                	jmp    116b7 <k_vsprint+0x127>

            }else if (ch == 's') {
   1166f:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11673:	75 42                	jne    116b7 <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   11675:	8b 45 10             	mov    0x10(%ebp),%eax
   11678:	8d 50 04             	lea    0x4(%eax),%edx
   1167b:	89 55 10             	mov    %edx,0x10(%ebp)
   1167e:	8b 00                	mov    (%eax),%eax
   11680:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   11683:	ff 75 f4             	pushl  -0xc(%ebp)
   11686:	e8 ff fc ff ff       	call   1138a <k_strlen>
   1168b:	83 c4 04             	add    $0x4,%esp
   1168e:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   11691:	eb 17                	jmp    116aa <k_vsprint+0x11a>
                    *curr++ = *str++;
   11693:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11696:	8d 42 01             	lea    0x1(%edx),%eax
   11699:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1169c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1169f:	8d 48 01             	lea    0x1(%eax),%ecx
   116a2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   116a5:	0f b6 12             	movzbl (%edx),%edx
   116a8:	88 10                	mov    %dl,(%eax)
                while(len--) {
   116aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116ad:	8d 50 ff             	lea    -0x1(%eax),%edx
   116b0:	89 55 f0             	mov    %edx,-0x10(%ebp)
   116b3:	85 c0                	test   %eax,%eax
   116b5:	75 dc                	jne    11693 <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   116b7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   116be:	eb 01                	jmp    116c1 <k_vsprint+0x131>
        
        default:
            break;
   116c0:	90                   	nop
    while((ch = *fmt++)) {
   116c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   116c4:	8d 50 01             	lea    0x1(%eax),%edx
   116c7:	89 55 0c             	mov    %edx,0xc(%ebp)
   116ca:	0f b6 00             	movzbl (%eax),%eax
   116cd:	88 45 ef             	mov    %al,-0x11(%ebp)
   116d0:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   116d4:	0f 85 ce fe ff ff    	jne    115a8 <k_vsprint+0x18>
        }
    }
   116da:	90                   	nop
   116db:	c9                   	leave  
   116dc:	c3                   	ret    

000116dd <list_is_empty>:
static inline int list_is_empty (list_t* list) {
   116dd:	55                   	push   %ebp
   116de:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   116e0:	8b 45 08             	mov    0x8(%ebp),%eax
   116e3:	8b 40 08             	mov    0x8(%eax),%eax
   116e6:	85 c0                	test   %eax,%eax
   116e8:	0f 94 c0             	sete   %al
   116eb:	0f b6 c0             	movzbl %al,%eax
}
   116ee:	5d                   	pop    %ebp
   116ef:	c3                   	ret    

000116f0 <list_init>:
#include <list.h>

void list_init(list_t* list) {
   116f0:	55                   	push   %ebp
   116f1:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t*)0;
   116f3:	8b 45 08             	mov    0x8(%ebp),%eax
   116f6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11700:	8b 50 04             	mov    0x4(%eax),%edx
   11703:	8b 45 08             	mov    0x8(%ebp),%eax
   11706:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11708:	8b 45 08             	mov    0x8(%ebp),%eax
   1170b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11712:	90                   	nop
   11713:	5d                   	pop    %ebp
   11714:	c3                   	ret    

00011715 <list_insert_first>:

void list_insert_first (list_t* list, list_node_t* node) {
   11715:	55                   	push   %ebp
   11716:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   11718:	8b 45 08             	mov    0x8(%ebp),%eax
   1171b:	8b 10                	mov    (%eax),%edx
   1171d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11720:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   11723:	8b 45 0c             	mov    0xc(%ebp),%eax
   11726:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if(list_is_empty(list)) {
   1172c:	ff 75 08             	pushl  0x8(%ebp)
   1172f:	e8 a9 ff ff ff       	call   116dd <list_is_empty>
   11734:	83 c4 04             	add    $0x4,%esp
   11737:	85 c0                	test   %eax,%eax
   11739:	74 15                	je     11750 <list_insert_first+0x3b>
        list->last = list->first = node;
   1173b:	8b 45 08             	mov    0x8(%ebp),%eax
   1173e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11741:	89 10                	mov    %edx,(%eax)
   11743:	8b 45 08             	mov    0x8(%ebp),%eax
   11746:	8b 10                	mov    (%eax),%edx
   11748:	8b 45 08             	mov    0x8(%ebp),%eax
   1174b:	89 50 04             	mov    %edx,0x4(%eax)
   1174e:	eb 12                	jmp    11762 <list_insert_first+0x4d>
    } else {
        list->first->pre = node;
   11750:	8b 45 08             	mov    0x8(%ebp),%eax
   11753:	8b 00                	mov    (%eax),%eax
   11755:	8b 55 0c             	mov    0xc(%ebp),%edx
   11758:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1175a:	8b 45 08             	mov    0x8(%ebp),%eax
   1175d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11760:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11762:	8b 45 08             	mov    0x8(%ebp),%eax
   11765:	8b 40 08             	mov    0x8(%eax),%eax
   11768:	8d 50 01             	lea    0x1(%eax),%edx
   1176b:	8b 45 08             	mov    0x8(%ebp),%eax
   1176e:	89 50 08             	mov    %edx,0x8(%eax)
}
   11771:	90                   	nop
   11772:	c9                   	leave  
   11773:	c3                   	ret    

00011774 <list_insert_last>:

void list_insert_last (list_t* list, list_node_t* node) {
   11774:	55                   	push   %ebp
   11775:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11777:	8b 45 08             	mov    0x8(%ebp),%eax
   1177a:	8b 50 04             	mov    0x4(%eax),%edx
   1177d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11780:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11782:	8b 45 0c             	mov    0xc(%ebp),%eax
   11785:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   1178c:	ff 75 08             	pushl  0x8(%ebp)
   1178f:	e8 49 ff ff ff       	call   116dd <list_is_empty>
   11794:	83 c4 04             	add    $0x4,%esp
   11797:	85 c0                	test   %eax,%eax
   11799:	74 16                	je     117b1 <list_insert_last+0x3d>
        list->first = list->last = node;
   1179b:	8b 45 08             	mov    0x8(%ebp),%eax
   1179e:	8b 55 0c             	mov    0xc(%ebp),%edx
   117a1:	89 50 04             	mov    %edx,0x4(%eax)
   117a4:	8b 45 08             	mov    0x8(%ebp),%eax
   117a7:	8b 50 04             	mov    0x4(%eax),%edx
   117aa:	8b 45 08             	mov    0x8(%ebp),%eax
   117ad:	89 10                	mov    %edx,(%eax)
   117af:	eb 15                	jmp    117c6 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   117b1:	8b 45 08             	mov    0x8(%ebp),%eax
   117b4:	8b 40 04             	mov    0x4(%eax),%eax
   117b7:	8b 55 0c             	mov    0xc(%ebp),%edx
   117ba:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   117bd:	8b 45 08             	mov    0x8(%ebp),%eax
   117c0:	8b 55 0c             	mov    0xc(%ebp),%edx
   117c3:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   117c6:	8b 45 08             	mov    0x8(%ebp),%eax
   117c9:	8b 40 08             	mov    0x8(%eax),%eax
   117cc:	8d 50 01             	lea    0x1(%eax),%edx
   117cf:	8b 45 08             	mov    0x8(%ebp),%eax
   117d2:	89 50 08             	mov    %edx,0x8(%eax)
}
   117d5:	90                   	nop
   117d6:	c9                   	leave  
   117d7:	c3                   	ret    

000117d8 <list_delete_first>:


list_node_t* list_delete_first (list_t* list) {
   117d8:	55                   	push   %ebp
   117d9:	89 e5                	mov    %esp,%ebp
   117db:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list)) {
   117de:	ff 75 08             	pushl  0x8(%ebp)
   117e1:	e8 f7 fe ff ff       	call   116dd <list_is_empty>
   117e6:	83 c4 04             	add    $0x4,%esp
   117e9:	85 c0                	test   %eax,%eax
   117eb:	74 07                	je     117f4 <list_delete_first+0x1c>
        return (list_node_t*)0;
   117ed:	b8 00 00 00 00       	mov    $0x0,%eax
   117f2:	eb 5b                	jmp    1184f <list_delete_first+0x77>
    }

    list_node_t* remove_node = list->first;
   117f4:	8b 45 08             	mov    0x8(%ebp),%eax
   117f7:	8b 00                	mov    (%eax),%eax
   117f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   117fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117ff:	8b 50 04             	mov    0x4(%eax),%edx
   11802:	8b 45 08             	mov    0x8(%ebp),%eax
   11805:	89 10                	mov    %edx,(%eax)

    if( list->first == (list_node_t*)0 ) {
   11807:	8b 45 08             	mov    0x8(%ebp),%eax
   1180a:	8b 00                	mov    (%eax),%eax
   1180c:	85 c0                	test   %eax,%eax
   1180e:	75 0c                	jne    1181c <list_delete_first+0x44>
        list->last = (list_node_t*)0;
   11810:	8b 45 08             	mov    0x8(%ebp),%eax
   11813:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1181a:	eb 0c                	jmp    11828 <list_delete_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t*)0;
   1181c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1181f:	8b 40 04             	mov    0x4(%eax),%eax
   11822:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        //list->first->pre = (list_node_t*)0;
    }

    remove_node->pre = remove_node->next = (list_node_t*)0;
   11828:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1182b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11832:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11835:	8b 50 04             	mov    0x4(%eax),%edx
   11838:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1183b:	89 10                	mov    %edx,(%eax)
    list->count--;
   1183d:	8b 45 08             	mov    0x8(%ebp),%eax
   11840:	8b 40 08             	mov    0x8(%eax),%eax
   11843:	8d 50 ff             	lea    -0x1(%eax),%edx
   11846:	8b 45 08             	mov    0x8(%ebp),%eax
   11849:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   1184c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1184f:	c9                   	leave  
   11850:	c3                   	ret    

00011851 <list_delete>:

list_node_t* list_delete (list_t* list, list_node_t* node) {
   11851:	55                   	push   %ebp
   11852:	89 e5                	mov    %esp,%ebp
    if(node == list->first) {
   11854:	8b 45 08             	mov    0x8(%ebp),%eax
   11857:	8b 00                	mov    (%eax),%eax
   11859:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1185c:	75 0b                	jne    11869 <list_delete+0x18>
        list->first = node->next;
   1185e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11861:	8b 50 04             	mov    0x4(%eax),%edx
   11864:	8b 45 08             	mov    0x8(%ebp),%eax
   11867:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last) {
   11869:	8b 45 08             	mov    0x8(%ebp),%eax
   1186c:	8b 40 04             	mov    0x4(%eax),%eax
   1186f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11872:	75 0b                	jne    1187f <list_delete+0x2e>
        list->last = node->pre;
   11874:	8b 45 0c             	mov    0xc(%ebp),%eax
   11877:	8b 10                	mov    (%eax),%edx
   11879:	8b 45 08             	mov    0x8(%ebp),%eax
   1187c:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if(node->pre) {
   1187f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11882:	8b 00                	mov    (%eax),%eax
   11884:	85 c0                	test   %eax,%eax
   11886:	74 0e                	je     11896 <list_delete+0x45>
        node->pre->next = node->next;
   11888:	8b 45 0c             	mov    0xc(%ebp),%eax
   1188b:	8b 00                	mov    (%eax),%eax
   1188d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11890:	8b 52 04             	mov    0x4(%edx),%edx
   11893:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) {
   11896:	8b 45 0c             	mov    0xc(%ebp),%eax
   11899:	8b 40 04             	mov    0x4(%eax),%eax
   1189c:	85 c0                	test   %eax,%eax
   1189e:	74 0d                	je     118ad <list_delete+0x5c>
        node->next->pre = node->pre;
   118a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   118a3:	8b 40 04             	mov    0x4(%eax),%eax
   118a6:	8b 55 0c             	mov    0xc(%ebp),%edx
   118a9:	8b 12                	mov    (%edx),%edx
   118ab:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   118ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   118b0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   118b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   118ba:	8b 50 04             	mov    0x4(%eax),%edx
   118bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   118c0:	89 10                	mov    %edx,(%eax)

    list->count--;
   118c2:	8b 45 08             	mov    0x8(%ebp),%eax
   118c5:	8b 40 08             	mov    0x8(%eax),%eax
   118c8:	8d 50 ff             	lea    -0x1(%eax),%edx
   118cb:	8b 45 08             	mov    0x8(%ebp),%eax
   118ce:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   118d1:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   118d4:	5d                   	pop    %ebp
   118d5:	c3                   	ret    

000118d6 <inb>:
static inline uint8_t inb(uint16_t  port) {
   118d6:	55                   	push   %ebp
   118d7:	89 e5                	mov    %esp,%ebp
   118d9:	83 ec 14             	sub    $0x14,%esp
   118dc:	8b 45 08             	mov    0x8(%ebp),%eax
   118df:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   118e3:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   118e7:	89 c2                	mov    %eax,%edx
   118e9:	ec                   	in     (%dx),%al
   118ea:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   118ed:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   118f1:	c9                   	leave  
   118f2:	c3                   	ret    

000118f3 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   118f3:	55                   	push   %ebp
   118f4:	89 e5                	mov    %esp,%ebp
   118f6:	83 ec 08             	sub    $0x8,%esp
   118f9:	8b 55 08             	mov    0x8(%ebp),%edx
   118fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   118ff:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11903:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   11906:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1190a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1190e:	ee                   	out    %al,(%dx)
}
   1190f:	90                   	nop
   11910:	c9                   	leave  
   11911:	c3                   	ret    

00011912 <log_init>:

#define COM1_PORT       0x3f8

static mutex_t mutex;

void log_init() {
   11912:	55                   	push   %ebp
   11913:	89 e5                	mov    %esp,%ebp
   11915:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   11918:	83 ec 0c             	sub    $0xc,%esp
   1191b:	68 40 5c 01 00       	push   $0x15c40
   11920:	e8 e8 0b 00 00       	call   1250d <mutex_init>
   11925:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   11928:	83 ec 08             	sub    $0x8,%esp
   1192b:	6a 00                	push   $0x0
   1192d:	68 f9 03 00 00       	push   $0x3f9
   11932:	e8 bc ff ff ff       	call   118f3 <outb>
   11937:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   1193a:	83 ec 08             	sub    $0x8,%esp
   1193d:	68 80 00 00 00       	push   $0x80
   11942:	68 fb 03 00 00       	push   $0x3fb
   11947:	e8 a7 ff ff ff       	call   118f3 <outb>
   1194c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   1194f:	83 ec 08             	sub    $0x8,%esp
   11952:	6a 03                	push   $0x3
   11954:	68 f8 03 00 00       	push   $0x3f8
   11959:	e8 95 ff ff ff       	call   118f3 <outb>
   1195e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   11961:	83 ec 08             	sub    $0x8,%esp
   11964:	6a 00                	push   $0x0
   11966:	68 f9 03 00 00       	push   $0x3f9
   1196b:	e8 83 ff ff ff       	call   118f3 <outb>
   11970:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   11973:	83 ec 08             	sub    $0x8,%esp
   11976:	6a 03                	push   $0x3
   11978:	68 fb 03 00 00       	push   $0x3fb
   1197d:	e8 71 ff ff ff       	call   118f3 <outb>
   11982:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   11985:	83 ec 08             	sub    $0x8,%esp
   11988:	68 c7 00 00 00       	push   $0xc7
   1198d:	68 fa 03 00 00       	push   $0x3fa
   11992:	e8 5c ff ff ff       	call   118f3 <outb>
   11997:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   1199a:	83 ec 08             	sub    $0x8,%esp
   1199d:	6a 0f                	push   $0xf
   1199f:	68 fc 03 00 00       	push   $0x3fc
   119a4:	e8 4a ff ff ff       	call   118f3 <outb>
   119a9:	83 c4 10             	add    $0x10,%esp
}
   119ac:	90                   	nop
   119ad:	c9                   	leave  
   119ae:	c3                   	ret    

000119af <klog>:


void klog(const char* fmt, ...) {
   119af:	55                   	push   %ebp
   119b0:	89 e5                	mov    %esp,%ebp
   119b2:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   119b8:	83 ec 04             	sub    $0x4,%esp
   119bb:	68 80 00 00 00       	push   $0x80
   119c0:	6a 00                	push   $0x0
   119c2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   119c8:	50                   	push   %eax
   119c9:	e8 46 fa ff ff       	call   11414 <k_memset>
   119ce:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   119d1:	8d 45 0c             	lea    0xc(%ebp),%eax
   119d4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    k_vsprint(buf, fmt, args);
   119da:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   119e0:	83 ec 04             	sub    $0x4,%esp
   119e3:	50                   	push   %eax
   119e4:	ff 75 08             	pushl  0x8(%ebp)
   119e7:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   119ed:	50                   	push   %eax
   119ee:	e8 9d fb ff ff       	call   11590 <k_vsprint>
   119f3:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   119f6:	83 ec 0c             	sub    $0xc,%esp
   119f9:	68 40 5c 01 00       	push   $0x15c40
   119fe:	e8 38 0b 00 00       	call   1253b <mutex_lock>
   11a03:	83 c4 10             	add    $0x10,%esp
    // irq_state_t state = irq_enter_proection();

    const char *p = buf;
   11a06:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11a0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11a0f:	eb 3b                	jmp    11a4c <klog+0x9d>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   11a11:	90                   	nop
   11a12:	83 ec 0c             	sub    $0xc,%esp
   11a15:	68 fd 03 00 00       	push   $0x3fd
   11a1a:	e8 b7 fe ff ff       	call   118d6 <inb>
   11a1f:	83 c4 10             	add    $0x10,%esp
   11a22:	0f b6 c0             	movzbl %al,%eax
   11a25:	83 e0 40             	and    $0x40,%eax
   11a28:	85 c0                	test   %eax,%eax
   11a2a:	74 e6                	je     11a12 <klog+0x63>
        outb(COM1_PORT, *p++);
   11a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a2f:	8d 50 01             	lea    0x1(%eax),%edx
   11a32:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11a35:	0f b6 00             	movzbl (%eax),%eax
   11a38:	0f b6 c0             	movzbl %al,%eax
   11a3b:	83 ec 08             	sub    $0x8,%esp
   11a3e:	50                   	push   %eax
   11a3f:	68 f8 03 00 00       	push   $0x3f8
   11a44:	e8 aa fe ff ff       	call   118f3 <outb>
   11a49:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11a4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a4f:	0f b6 00             	movzbl (%eax),%eax
   11a52:	84 c0                	test   %al,%al
   11a54:	75 bb                	jne    11a11 <klog+0x62>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   11a56:	83 ec 08             	sub    $0x8,%esp
   11a59:	6a 0d                	push   $0xd
   11a5b:	68 f8 03 00 00       	push   $0x3f8
   11a60:	e8 8e fe ff ff       	call   118f3 <outb>
   11a65:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   11a68:	83 ec 08             	sub    $0x8,%esp
   11a6b:	6a 0a                	push   $0xa
   11a6d:	68 f8 03 00 00       	push   $0x3f8
   11a72:	e8 7c fe ff ff       	call   118f3 <outb>
   11a77:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   11a7a:	83 ec 0c             	sub    $0xc,%esp
   11a7d:	68 40 5c 01 00       	push   $0x15c40
   11a82:	e8 48 0b 00 00       	call   125cf <mutex_unlock>
   11a87:	83 c4 10             	add    $0x10,%esp
    // irq_leave_proection(state);

}
   11a8a:	90                   	nop
   11a8b:	c9                   	leave  
   11a8c:	c3                   	ret    

00011a8d <down2>:

uint32_t memory_create_uvm();

void memory_init (boot_info_t* boot_info);

static inline uint32_t down2(uint32_t size, uint32_t bound) {
   11a8d:	55                   	push   %ebp
   11a8e:	89 e5                	mov    %esp,%ebp
    return size & ~ (bound - 1);
   11a90:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a93:	f7 d8                	neg    %eax
   11a95:	23 45 08             	and    0x8(%ebp),%eax
}
   11a98:	5d                   	pop    %ebp
   11a99:	c3                   	ret    

00011a9a <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11a9a:	55                   	push   %ebp
   11a9b:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~ (bound - 1);
   11a9d:	8b 55 08             	mov    0x8(%ebp),%edx
   11aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11aa3:	01 d0                	add    %edx,%eax
   11aa5:	8d 50 ff             	lea    -0x1(%eax),%edx
   11aa8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11aab:	f7 d8                	neg    %eax
   11aad:	21 d0                	and    %edx,%eax
}
   11aaf:	5d                   	pop    %ebp
   11ab0:	c3                   	ret    

00011ab1 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   11ab1:	55                   	push   %ebp
   11ab2:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   11ab4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab7:	0f 22 d8             	mov    %eax,%cr3
}
   11aba:	90                   	nop
   11abb:	5d                   	pop    %ebp
   11abc:	c3                   	ret    

00011abd <mmu_set_page_dir>:
    };
}pte_t;
#pragma pack()


static inline void mmu_set_page_dir(uint32_t paddr) {
   11abd:	55                   	push   %ebp
   11abe:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11ac0:	ff 75 08             	pushl  0x8(%ebp)
   11ac3:	e8 e9 ff ff ff       	call   11ab1 <write_cr3>
   11ac8:	83 c4 04             	add    $0x4,%esp
}
   11acb:	90                   	nop
   11acc:	c9                   	leave  
   11acd:	c3                   	ret    

00011ace <pde_index>:

static inline uint32_t pde_index (uint32_t vaddr) {
   11ace:	55                   	push   %ebp
   11acf:	89 e5                	mov    %esp,%ebp
   11ad1:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22);      // 只取高10位
   11ad4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ad7:	c1 e8 16             	shr    $0x16,%eax
   11ada:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   11add:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11ae0:	c9                   	leave  
   11ae1:	c3                   	ret    

00011ae2 <pde_paddr>:


static inline uint32_t pde_paddr (pde_t * pde) {
   11ae2:	55                   	push   %ebp
   11ae3:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   11ae5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   11aec:	c0 ea 04             	shr    $0x4,%dl
   11aef:	0f b6 d2             	movzbl %dl,%edx
   11af2:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   11af6:	c1 e1 04             	shl    $0x4,%ecx
   11af9:	09 ca                	or     %ecx,%edx
   11afb:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   11aff:	c1 e0 0c             	shl    $0xc,%eax
   11b02:	09 d0                	or     %edx,%eax
   11b04:	c1 e0 0c             	shl    $0xc,%eax
}
   11b07:	5d                   	pop    %ebp
   11b08:	c3                   	ret    

00011b09 <pte_index>:


static inline int pte_index (uint32_t vaddr) {
   11b09:	55                   	push   %ebp
   11b0a:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   11b0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b0f:	c1 e8 0c             	shr    $0xc,%eax
   11b12:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   11b17:	5d                   	pop    %ebp
   11b18:	c3                   	ret    

00011b19 <pte_paddr>:


static inline uint32_t pte_paddr (pte_t * pte) {
   11b19:	55                   	push   %ebp
   11b1a:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   11b1c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b1f:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   11b23:	c0 ea 04             	shr    $0x4,%dl
   11b26:	0f b6 d2             	movzbl %dl,%edx
   11b29:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   11b2d:	c1 e1 04             	shl    $0x4,%ecx
   11b30:	09 ca                	or     %ecx,%edx
   11b32:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   11b36:	c1 e0 0c             	shl    $0xc,%eax
   11b39:	09 d0                	or     %edx,%eax
   11b3b:	c1 e0 0c             	shl    $0xc,%eax
}
   11b3e:	5d                   	pop    %ebp
   11b3f:	c3                   	ret    

00011b40 <get_pte_perm>:

static inline uint32_t get_pte_perm (pte_t * pte) {
   11b40:	55                   	push   %ebp
   11b41:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x1FF);                   
   11b43:	8b 45 08             	mov    0x8(%ebp),%eax
   11b46:	8b 00                	mov    (%eax),%eax
   11b48:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   11b4d:	5d                   	pop    %ebp
   11b4e:	c3                   	ret    

00011b4f <addr_alloc_init>:
static pde_t g_kernel_page_dir[PDE_CNT] __attribute__( (aligned(MEM_PAGE_SIZE)) );


static void 
addr_alloc_init(addr_alloc_t * alloc, uint8_t* bits, uint32_t start, 
uint32_t size, uint32_t page_size) {
   11b4f:	55                   	push   %ebp
   11b50:	89 e5                	mov    %esp,%ebp
   11b52:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   11b55:	8b 45 08             	mov    0x8(%ebp),%eax
   11b58:	83 ec 0c             	sub    $0xc,%esp
   11b5b:	50                   	push   %eax
   11b5c:	e8 ac 09 00 00       	call   1250d <mutex_init>
   11b61:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   11b64:	8b 45 08             	mov    0x8(%ebp),%eax
   11b67:	8b 55 10             	mov    0x10(%ebp),%edx
   11b6a:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   11b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b70:	8b 55 14             	mov    0x14(%ebp),%edx
   11b73:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   11b76:	8b 45 08             	mov    0x8(%ebp),%eax
   11b79:	8b 55 18             	mov    0x18(%ebp),%edx
   11b7c:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   11b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b82:	8b 40 20             	mov    0x20(%eax),%eax
   11b85:	ba 00 00 00 00       	mov    $0x0,%edx
   11b8a:	f7 75 18             	divl   0x18(%ebp)
   11b8d:	89 c2                	mov    %eax,%edx
   11b8f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b92:	83 c0 14             	add    $0x14,%eax
   11b95:	6a 00                	push   $0x0
   11b97:	52                   	push   %edx
   11b98:	ff 75 0c             	pushl  0xc(%ebp)
   11b9b:	50                   	push   %eax
   11b9c:	e8 89 f4 ff ff       	call   1102a <bitmap_init>
   11ba1:	83 c4 10             	add    $0x10,%esp
}
   11ba4:	90                   	nop
   11ba5:	c9                   	leave  
   11ba6:	c3                   	ret    

00011ba7 <addr_alloc_page>:


static uint32_t 
addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   11ba7:	55                   	push   %ebp
   11ba8:	89 e5                	mov    %esp,%ebp
   11baa:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   11bad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   11bb4:	8b 45 08             	mov    0x8(%ebp),%eax
   11bb7:	83 ec 0c             	sub    $0xc,%esp
   11bba:	50                   	push   %eax
   11bbb:	e8 7b 09 00 00       	call   1253b <mutex_lock>
   11bc0:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   11bc3:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc6:	83 c0 14             	add    $0x14,%eax
   11bc9:	83 ec 04             	sub    $0x4,%esp
   11bcc:	ff 75 0c             	pushl  0xc(%ebp)
   11bcf:	6a 00                	push   $0x0
   11bd1:	50                   	push   %eax
   11bd2:	e8 cf f5 ff ff       	call   111a6 <bitmap_alloc_nbits>
   11bd7:	83 c4 10             	add    $0x10,%esp
   11bda:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   11bdd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11be1:	78 17                	js     11bfa <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   11be3:	8b 45 08             	mov    0x8(%ebp),%eax
   11be6:	8b 50 1c             	mov    0x1c(%eax),%edx
   11be9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bec:	8b 48 24             	mov    0x24(%eax),%ecx
   11bef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bf2:	0f af c1             	imul   %ecx,%eax
   11bf5:	01 d0                	add    %edx,%eax
   11bf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   11bfa:	8b 45 08             	mov    0x8(%ebp),%eax
   11bfd:	83 ec 0c             	sub    $0xc,%esp
   11c00:	50                   	push   %eax
   11c01:	e8 c9 09 00 00       	call   125cf <mutex_unlock>
   11c06:	83 c4 10             	add    $0x10,%esp
    return addr;
   11c09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11c0c:	c9                   	leave  
   11c0d:	c3                   	ret    

00011c0e <addr_free_page>:


static uint32_t
addr_free_page(addr_alloc_t * alloc, uint32_t addr, int page_count) {
   11c0e:	55                   	push   %ebp
   11c0f:	89 e5                	mov    %esp,%ebp
   11c11:	53                   	push   %ebx
   11c12:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   11c15:	8b 45 08             	mov    0x8(%ebp),%eax
   11c18:	83 ec 0c             	sub    $0xc,%esp
   11c1b:	50                   	push   %eax
   11c1c:	e8 1a 09 00 00       	call   1253b <mutex_lock>
   11c21:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   11c24:	8b 45 08             	mov    0x8(%ebp),%eax
   11c27:	8b 40 1c             	mov    0x1c(%eax),%eax
   11c2a:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c2d:	89 d1                	mov    %edx,%ecx
   11c2f:	29 c1                	sub    %eax,%ecx
   11c31:	8b 45 08             	mov    0x8(%ebp),%eax
   11c34:	8b 58 24             	mov    0x24(%eax),%ebx
   11c37:	89 c8                	mov    %ecx,%eax
   11c39:	ba 00 00 00 00       	mov    $0x0,%edx
   11c3e:	f7 f3                	div    %ebx
   11c40:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   11c43:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c46:	8b 55 08             	mov    0x8(%ebp),%edx
   11c49:	83 c2 14             	add    $0x14,%edx
   11c4c:	6a 00                	push   $0x0
   11c4e:	ff 75 10             	pushl  0x10(%ebp)
   11c51:	50                   	push   %eax
   11c52:	52                   	push   %edx
   11c53:	e8 7a f4 ff ff       	call   110d2 <bitmap_set_bit>
   11c58:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   11c5b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c5e:	83 ec 0c             	sub    $0xc,%esp
   11c61:	50                   	push   %eax
   11c62:	e8 68 09 00 00       	call   125cf <mutex_unlock>
   11c67:	83 c4 10             	add    $0x10,%esp
}
   11c6a:	90                   	nop
   11c6b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11c6e:	c9                   	leave  
   11c6f:	c3                   	ret    

00011c70 <some_test>:


void some_test() {
   11c70:	55                   	push   %ebp
   11c71:	89 e5                	mov    %esp,%ebp
   11c73:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t addr_alloc;
    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64*4096, 4096);
   11c76:	83 ec 0c             	sub    $0xc,%esp
   11c79:	68 00 10 00 00       	push   $0x1000
   11c7e:	68 00 00 04 00       	push   $0x40000
   11c83:	68 00 10 00 00       	push   $0x1000
   11c88:	8d 45 b8             	lea    -0x48(%ebp),%eax
   11c8b:	50                   	push   %eax
   11c8c:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11c8f:	50                   	push   %eax
   11c90:	e8 ba fe ff ff       	call   11b4f <addr_alloc_init>
   11c95:	83 c4 20             	add    $0x20,%esp
    for(int i=0; i<32; i++) {
   11c98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11c9f:	eb 2b                	jmp    11ccc <some_test+0x5c>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   11ca1:	83 ec 08             	sub    $0x8,%esp
   11ca4:	6a 02                	push   $0x2
   11ca6:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11ca9:	50                   	push   %eax
   11caa:	e8 f8 fe ff ff       	call   11ba7 <addr_alloc_page>
   11caf:	83 c4 10             	add    $0x10,%esp
   11cb2:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("alloc addr: 0x%x", addr);
   11cb5:	83 ec 08             	sub    $0x8,%esp
   11cb8:	ff 75 e8             	pushl  -0x18(%ebp)
   11cbb:	68 08 36 01 00       	push   $0x13608
   11cc0:	e8 ea fc ff ff       	call   119af <klog>
   11cc5:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11cc8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11ccc:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   11cd0:	7e cf                	jle    11ca1 <some_test+0x31>
    }
    uint32_t addr = 0x1000;
   11cd2:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for(int i=0; i<32; i++) {
   11cd9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11ce0:	eb 32                	jmp    11d14 <some_test+0xa4>
        addr_free_page(&addr_alloc, addr, 2);
   11ce2:	83 ec 04             	sub    $0x4,%esp
   11ce5:	6a 02                	push   $0x2
   11ce7:	ff 75 f0             	pushl  -0x10(%ebp)
   11cea:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11ced:	50                   	push   %eax
   11cee:	e8 1b ff ff ff       	call   11c0e <addr_free_page>
   11cf3:	83 c4 10             	add    $0x10,%esp
        addr += 8192;
   11cf6:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        klog("free addr: 0x%x", addr);
   11cfd:	83 ec 08             	sub    $0x8,%esp
   11d00:	ff 75 f0             	pushl  -0x10(%ebp)
   11d03:	68 19 36 01 00       	push   $0x13619
   11d08:	e8 a2 fc ff ff       	call   119af <klog>
   11d0d:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11d10:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11d14:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   11d18:	7e c8                	jle    11ce2 <some_test+0x72>
    }
}
   11d1a:	90                   	nop
   11d1b:	c9                   	leave  
   11d1c:	c3                   	ret    

00011d1d <show_mem_info>:


static void        
show_mem_info(boot_info_t* boot_info) {
   11d1d:	55                   	push   %ebp
   11d1e:	89 e5                	mov    %esp,%ebp
   11d20:	83 ec 18             	sub    $0x18,%esp
    klog("mem region");
   11d23:	83 ec 0c             	sub    $0xc,%esp
   11d26:	68 29 36 01 00       	push   $0x13629
   11d2b:	e8 7f fc ff ff       	call   119af <klog>
   11d30:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11d3a:	eb 29                	jmp    11d65 <show_mem_info+0x48>
        klog("[%d]: 0x%x - 0x%x", i, 
   11d3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d42:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   11d46:	8b 45 08             	mov    0x8(%ebp),%eax
   11d49:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11d4c:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   11d4f:	52                   	push   %edx
   11d50:	50                   	push   %eax
   11d51:	ff 75 f4             	pushl  -0xc(%ebp)
   11d54:	68 34 36 01 00       	push   $0x13634
   11d59:	e8 51 fc ff ff       	call   119af <klog>
   11d5e:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d61:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d65:	8b 45 08             	mov    0x8(%ebp),%eax
   11d68:	8b 40 50             	mov    0x50(%eax),%eax
   11d6b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11d6e:	7c cc                	jl     11d3c <show_mem_info+0x1f>
            boot_info->ram_region_cfg[i].start, 
            boot_info->ram_region_cfg[i].size );
    }
    klog("");
   11d70:	83 ec 0c             	sub    $0xc,%esp
   11d73:	68 46 36 01 00       	push   $0x13646
   11d78:	e8 32 fc ff ff       	call   119af <klog>
   11d7d:	83 c4 10             	add    $0x10,%esp
}
   11d80:	90                   	nop
   11d81:	c9                   	leave  
   11d82:	c3                   	ret    

00011d83 <total_mem_size>:


static uint32_t 
total_mem_size(boot_info_t* boot_info) {
   11d83:	55                   	push   %ebp
   11d84:	89 e5                	mov    %esp,%ebp
   11d86:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   11d89:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d90:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   11d97:	eb 11                	jmp    11daa <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   11d99:	8b 45 08             	mov    0x8(%ebp),%eax
   11d9c:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11d9f:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   11da3:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11da6:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   11daa:	8b 45 08             	mov    0x8(%ebp),%eax
   11dad:	8b 40 50             	mov    0x50(%eax),%eax
   11db0:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   11db3:	7c e4                	jl     11d99 <total_mem_size+0x16>
    }
    return mem_size;
   11db5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11db8:	c9                   	leave  
   11db9:	c3                   	ret    

00011dba <find_pte>:




pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   11dba:	55                   	push   %ebp
   11dbb:	89 e5                	mov    %esp,%ebp
   11dbd:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   11dc0:	ff 75 0c             	pushl  0xc(%ebp)
   11dc3:	e8 06 fd ff ff       	call   11ace <pde_index>
   11dc8:	83 c4 04             	add    $0x4,%esp
   11dcb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11dd2:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd5:	01 d0                	add    %edx,%eax
   11dd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   11dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ddd:	0f b6 00             	movzbl (%eax),%eax
   11de0:	83 e0 01             	and    $0x1,%eax
   11de3:	84 c0                	test   %al,%al
   11de5:	74 10                	je     11df7 <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   11de7:	ff 75 f0             	pushl  -0x10(%ebp)
   11dea:	e8 f3 fc ff ff       	call   11ae2 <pde_paddr>
   11def:	83 c4 04             	add    $0x4,%esp
   11df2:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11df5:	eb 57                	jmp    11e4e <find_pte+0x94>
    } else {
        if (alloc == 0) {
   11df7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11dfb:	75 07                	jne    11e04 <find_pte+0x4a>
            return (pte_t *)0;
   11dfd:	b8 00 00 00 00       	mov    $0x0,%eax
   11e02:	eb 64                	jmp    11e68 <find_pte+0xae>
        }
        uint32_t pg_paddr = addr_alloc_page(&g_paddr_alloc, 1);
   11e04:	83 ec 08             	sub    $0x8,%esp
   11e07:	6a 01                	push   $0x1
   11e09:	68 00 60 01 00       	push   $0x16000
   11e0e:	e8 94 fd ff ff       	call   11ba7 <addr_alloc_page>
   11e13:	83 c4 10             	add    $0x10,%esp
   11e16:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   11e19:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e1d:	75 07                	jne    11e26 <find_pte+0x6c>
            return (pte_t *)0;
   11e1f:	b8 00 00 00 00       	mov    $0x0,%eax
   11e24:	eb 42                	jmp    11e68 <find_pte+0xae>
        }
        pde->v = pg_paddr | PDE_P | PDE_W | PDE_U;
   11e26:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e29:	83 c8 07             	or     $0x7,%eax
   11e2c:	89 c2                	mov    %eax,%edx
   11e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e31:	89 10                	mov    %edx,(%eax)

        page_table = (pte_t *)(pg_paddr);
   11e33:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e36:	89 45 f4             	mov    %eax,-0xc(%ebp)
        k_memset(page_table, 0, MEM_PAGE_SIZE);
   11e39:	83 ec 04             	sub    $0x4,%esp
   11e3c:	68 00 10 00 00       	push   $0x1000
   11e41:	6a 00                	push   $0x0
   11e43:	ff 75 f4             	pushl  -0xc(%ebp)
   11e46:	e8 c9 f5 ff ff       	call   11414 <k_memset>
   11e4b:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   11e4e:	83 ec 0c             	sub    $0xc,%esp
   11e51:	ff 75 0c             	pushl  0xc(%ebp)
   11e54:	e8 b0 fc ff ff       	call   11b09 <pte_index>
   11e59:	83 c4 10             	add    $0x10,%esp
   11e5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11e63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e66:	01 d0                	add    %edx,%eax
}
   11e68:	c9                   	leave  
   11e69:	c3                   	ret    

00011e6a <memory_create_map>:

// 创建映射
int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   11e6a:	55                   	push   %ebp
   11e6b:	89 e5                	mov    %esp,%ebp
   11e6d:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   11e70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11e77:	eb 62                	jmp    11edb <memory_create_map+0x71>
        // klog("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   11e79:	83 ec 04             	sub    $0x4,%esp
   11e7c:	6a 01                	push   $0x1
   11e7e:	ff 75 0c             	pushl  0xc(%ebp)
   11e81:	ff 75 08             	pushl  0x8(%ebp)
   11e84:	e8 31 ff ff ff       	call   11dba <find_pte>
   11e89:	83 c4 10             	add    $0x10,%esp
   11e8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   11e8f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e93:	75 07                	jne    11e9c <memory_create_map+0x32>
            return -1;
   11e95:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e9a:	eb 4c                	jmp    11ee8 <memory_create_map+0x7e>
        }
        if (pte->present != 0) klog("error");
   11e9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e9f:	0f b6 00             	movzbl (%eax),%eax
   11ea2:	83 e0 01             	and    $0x1,%eax
   11ea5:	84 c0                	test   %al,%al
   11ea7:	74 10                	je     11eb9 <memory_create_map+0x4f>
   11ea9:	83 ec 0c             	sub    $0xc,%esp
   11eac:	68 47 36 01 00       	push   $0x13647
   11eb1:	e8 f9 fa ff ff       	call   119af <klog>
   11eb6:	83 c4 10             	add    $0x10,%esp

        // klog("pte addr: 0x%x", (uint32_t)pte);

        pte->v = paddr | perm | PTE_P;
   11eb9:	8b 45 10             	mov    0x10(%ebp),%eax
   11ebc:	0b 45 18             	or     0x18(%ebp),%eax
   11ebf:	83 c8 01             	or     $0x1,%eax
   11ec2:	89 c2                	mov    %eax,%edx
   11ec4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ec7:	89 10                	mov    %edx,(%eax)
        vaddr += MEM_PAGE_SIZE;
   11ec9:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   11ed0:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   11ed7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ede:	3b 45 14             	cmp    0x14(%ebp),%eax
   11ee1:	7c 96                	jl     11e79 <memory_create_map+0xf>
    }

    return 0;
   11ee3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11ee8:	c9                   	leave  
   11ee9:	c3                   	ret    

00011eea <create_kernel_table>:


void create_kernel_table (void) {
   11eea:	55                   	push   %ebp
   11eeb:	89 e5                	mov    %esp,%ebp
   11eed:	83 ec 28             	sub    $0x28,%esp
        {s_text,                e_text,                         s_text,                 0    },      // 内核代码区
        {s_data,                (void *)(MEM_EBDA_START),       s_data,                 PTE_W},      // 内核数据区
        {(void*)MEM_EXT_START,  (void*)MEM_EXT_END,             (void*)MEM_EXT_START,   PTE_W},
    };

    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11ef0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11ef7:	eb 7d                	jmp    11f76 <create_kernel_table+0x8c>
        memory_map_t * map = kernel_map + i;
   11ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11efc:	c1 e0 04             	shl    $0x4,%eax
   11eff:	05 20 40 01 00       	add    $0x14020,%eax
   11f04:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   11f07:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f0a:	8b 00                	mov    (%eax),%eax
   11f0c:	68 00 10 00 00       	push   $0x1000
   11f11:	50                   	push   %eax
   11f12:	e8 76 fb ff ff       	call   11a8d <down2>
   11f17:	83 c4 08             	add    $0x8,%esp
   11f1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend   = up2  ((uint32_t)map->vend, MEM_PAGE_SIZE);
   11f1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f20:	8b 40 04             	mov    0x4(%eax),%eax
   11f23:	68 00 10 00 00       	push   $0x1000
   11f28:	50                   	push   %eax
   11f29:	e8 6c fb ff ff       	call   11a9a <up2>
   11f2e:	83 c4 08             	add    $0x8,%esp
   11f31:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   11f34:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11f37:	2b 45 ec             	sub    -0x14(%ebp),%eax
   11f3a:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   11f40:	85 c0                	test   %eax,%eax
   11f42:	0f 48 c2             	cmovs  %edx,%eax
   11f45:	c1 f8 0c             	sar    $0xc,%eax
   11f48:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(g_kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   11f4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f4e:	8b 50 0c             	mov    0xc(%eax),%edx
   11f51:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f54:	8b 40 08             	mov    0x8(%eax),%eax
   11f57:	89 c1                	mov    %eax,%ecx
   11f59:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f5c:	83 ec 0c             	sub    $0xc,%esp
   11f5f:	52                   	push   %edx
   11f60:	ff 75 e4             	pushl  -0x1c(%ebp)
   11f63:	51                   	push   %ecx
   11f64:	50                   	push   %eax
   11f65:	68 00 70 01 00       	push   $0x17000
   11f6a:	e8 fb fe ff ff       	call   11e6a <memory_create_map>
   11f6f:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11f72:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11f76:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f79:	83 f8 03             	cmp    $0x3,%eax
   11f7c:	0f 86 77 ff ff ff    	jbe    11ef9 <create_kernel_table+0xf>
    }
}
   11f82:	90                   	nop
   11f83:	c9                   	leave  
   11f84:	c3                   	ret    

00011f85 <memory_init>:


void memory_init (boot_info_t* boot_info) {
   11f85:	55                   	push   %ebp
   11f86:	89 e5                	mov    %esp,%ebp
   11f88:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;
    uint8_t * mem_free = (uint8_t*)&mem_free_start;
   11f8b:	c7 45 f4 b7 23 02 00 	movl   $0x223b7,-0xc(%ebp)
    klog("memory init");
   11f92:	83 ec 0c             	sub    $0xc,%esp
   11f95:	68 4d 36 01 00       	push   $0x1364d
   11f9a:	e8 10 fa ff ff       	call   119af <klog>
   11f9f:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   11fa2:	83 ec 0c             	sub    $0xc,%esp
   11fa5:	ff 75 08             	pushl  0x8(%ebp)
   11fa8:	e8 70 fd ff ff       	call   11d1d <show_mem_info>
   11fad:	83 c4 10             	add    $0x10,%esp

    
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   11fb0:	83 ec 0c             	sub    $0xc,%esp
   11fb3:	ff 75 08             	pushl  0x8(%ebp)
   11fb6:	e8 c8 fd ff ff       	call   11d83 <total_mem_size>
   11fbb:	83 c4 10             	add    $0x10,%esp
   11fbe:	2d 00 00 10 00       	sub    $0x100000,%eax
   11fc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   11fc6:	83 ec 08             	sub    $0x8,%esp
   11fc9:	68 00 10 00 00       	push   $0x1000
   11fce:	ff 75 f0             	pushl  -0x10(%ebp)
   11fd1:	e8 b7 fa ff ff       	call   11a8d <down2>
   11fd6:	83 c4 10             	add    $0x10,%esp
   11fd9:	89 45 f0             	mov    %eax,-0x10(%ebp)

    klog("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   11fdc:	83 ec 04             	sub    $0x4,%esp
   11fdf:	ff 75 f0             	pushl  -0x10(%ebp)
   11fe2:	68 00 00 10 00       	push   $0x100000
   11fe7:	68 59 36 01 00       	push   $0x13659
   11fec:	e8 be f9 ff ff       	call   119af <klog>
   11ff1:	83 c4 10             	add    $0x10,%esp
    addr_alloc_init(&g_paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   11ff4:	83 ec 0c             	sub    $0xc,%esp
   11ff7:	68 00 10 00 00       	push   $0x1000
   11ffc:	ff 75 f0             	pushl  -0x10(%ebp)
   11fff:	68 00 00 10 00       	push   $0x100000
   12004:	ff 75 f4             	pushl  -0xc(%ebp)
   12007:	68 00 60 01 00       	push   $0x16000
   1200c:	e8 3e fb ff ff       	call   11b4f <addr_alloc_init>
   12011:	83 c4 20             	add    $0x20,%esp

    mem_free += bitmap_byte_count(g_paddr_alloc.size / MEM_PAGE_SIZE);
   12014:	a1 20 60 01 00       	mov    0x16020,%eax
   12019:	c1 e8 0c             	shr    $0xc,%eax
   1201c:	83 ec 0c             	sub    $0xc,%esp
   1201f:	50                   	push   %eax
   12020:	e8 ef ef ff ff       	call   11014 <bitmap_byte_count>
   12025:	83 c4 10             	add    $0x10,%esp
   12028:	01 45 f4             	add    %eax,-0xc(%ebp)
    if (mem_free < (uint8_t *)0x800000) {
   1202b:	81 7d f4 ff ff 7f 00 	cmpl   $0x7fffff,-0xc(%ebp)
   12032:	77 10                	ja     12044 <memory_init+0xbf>
        klog("simple test ok!");
   12034:	83 ec 0c             	sub    $0xc,%esp
   12037:	68 77 36 01 00       	push   $0x13677
   1203c:	e8 6e f9 ff ff       	call   119af <klog>
   12041:	83 c4 10             	add    $0x10,%esp
    }

    k_memset(g_kernel_page_dir, 0, sizeof(g_kernel_page_dir));  // 清空内核表
   12044:	83 ec 04             	sub    $0x4,%esp
   12047:	68 00 10 00 00       	push   $0x1000
   1204c:	6a 00                	push   $0x0
   1204e:	68 00 70 01 00       	push   $0x17000
   12053:	e8 bc f3 ff ff       	call   11414 <k_memset>
   12058:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   1205b:	e8 8a fe ff ff       	call   11eea <create_kernel_table>

    mmu_set_page_dir((uint32_t)g_kernel_page_dir);            // 重新设置页表
   12060:	b8 00 70 01 00       	mov    $0x17000,%eax
   12065:	83 ec 0c             	sub    $0xc,%esp
   12068:	50                   	push   %eax
   12069:	e8 4f fa ff ff       	call   11abd <mmu_set_page_dir>
   1206e:	83 c4 10             	add    $0x10,%esp
    
}
   12071:	90                   	nop
   12072:	c9                   	leave  
   12073:	c3                   	ret    

00012074 <memory_create_uvm>:


uint32_t memory_create_uvm() {
   12074:	55                   	push   %ebp
   12075:	89 e5                	mov    %esp,%ebp
   12077:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&g_paddr_alloc, 1);
   1207a:	83 ec 08             	sub    $0x8,%esp
   1207d:	6a 01                	push   $0x1
   1207f:	68 00 60 01 00       	push   $0x16000
   12084:	e8 1e fb ff ff       	call   11ba7 <addr_alloc_page>
   12089:	83 c4 10             	add    $0x10,%esp
   1208c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == (pde_t*)0) {
   1208f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12093:	75 07                	jne    1209c <memory_create_uvm+0x28>
        return 0;  // error
   12095:	b8 00 00 00 00       	mov    $0x0,%eax
   1209a:	eb 5b                	jmp    120f7 <memory_create_uvm+0x83>
    }

    k_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   1209c:	83 ec 04             	sub    $0x4,%esp
   1209f:	68 00 10 00 00       	push   $0x1000
   120a4:	6a 00                	push   $0x0
   120a6:	ff 75 f0             	pushl  -0x10(%ebp)
   120a9:	e8 66 f3 ff ff       	call   11414 <k_memset>
   120ae:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index( MEMORY_TASK_BASE );
   120b1:	83 ec 0c             	sub    $0xc,%esp
   120b4:	68 00 00 00 80       	push   $0x80000000
   120b9:	e8 10 fa ff ff       	call   11ace <pde_index>
   120be:	83 c4 10             	add    $0x10,%esp
   120c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    for(int i=0; i<user_pde_start; i++) {
   120c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   120cb:	eb 1f                	jmp    120ec <memory_create_uvm+0x78>
        page_dir[i].v = g_kernel_page_dir[i].v;
   120cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   120d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120da:	01 c2                	add    %eax,%edx
   120dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120df:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   120e6:	89 02                	mov    %eax,(%edx)
    for(int i=0; i<user_pde_start; i++) {
   120e8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   120ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120ef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   120f2:	77 d9                	ja     120cd <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   120f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   120f7:	c9                   	leave  
   120f8:	c3                   	ret    

000120f9 <memory_alloc_for_page_dir>:


uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   120f9:	55                   	push   %ebp
   120fa:	89 e5                	mov    %esp,%ebp
   120fc:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   120ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   12102:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   12105:	68 00 10 00 00       	push   $0x1000
   1210a:	ff 75 10             	pushl  0x10(%ebp)
   1210d:	e8 88 f9 ff ff       	call   11a9a <up2>
   12112:	83 c4 08             	add    $0x8,%esp
   12115:	c1 e8 0c             	shr    $0xc,%eax
   12118:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   1211b:	68 00 10 00 00       	push   $0x1000
   12120:	ff 75 0c             	pushl  0xc(%ebp)
   12123:	e8 65 f9 ff ff       	call   11a8d <down2>
   12128:	83 c4 08             	add    $0x8,%esp
   1212b:	89 45 0c             	mov    %eax,0xc(%ebp)

    for (int i = 0; i < page_count; i++) {
   1212e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12135:	e9 95 00 00 00       	jmp    121cf <memory_alloc_for_page_dir+0xd6>
        uint32_t paddr = addr_alloc_page(&g_paddr_alloc, 1);
   1213a:	83 ec 08             	sub    $0x8,%esp
   1213d:	6a 01                	push   $0x1
   1213f:	68 00 60 01 00       	push   $0x16000
   12144:	e8 5e fa ff ff       	call   11ba7 <addr_alloc_page>
   12149:	83 c4 10             	add    $0x10,%esp
   1214c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   1214f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12153:	75 17                	jne    1216c <memory_alloc_for_page_dir+0x73>
            klog("mem alloc failed. no memory");
   12155:	83 ec 0c             	sub    $0xc,%esp
   12158:	68 87 36 01 00       	push   $0x13687
   1215d:	e8 4d f8 ff ff       	call   119af <klog>
   12162:	83 c4 10             	add    $0x10,%esp
            return 0;
   12165:	b8 00 00 00 00       	mov    $0x0,%eax
   1216a:	eb 74                	jmp    121e0 <memory_alloc_for_page_dir+0xe7>
        }

        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   1216c:	8b 55 14             	mov    0x14(%ebp),%edx
   1216f:	8b 45 08             	mov    0x8(%ebp),%eax
   12172:	83 ec 0c             	sub    $0xc,%esp
   12175:	52                   	push   %edx
   12176:	6a 01                	push   $0x1
   12178:	ff 75 e8             	pushl  -0x18(%ebp)
   1217b:	ff 75 f4             	pushl  -0xc(%ebp)
   1217e:	50                   	push   %eax
   1217f:	e8 e6 fc ff ff       	call   11e6a <memory_create_map>
   12184:	83 c4 20             	add    $0x20,%esp
   12187:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   1218a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1218e:	79 34                	jns    121c4 <memory_alloc_for_page_dir+0xcb>
            klog("create memory map failed. err = %d", err);
   12190:	83 ec 08             	sub    $0x8,%esp
   12193:	ff 75 e4             	pushl  -0x1c(%ebp)
   12196:	68 a4 36 01 00       	push   $0x136a4
   1219b:	e8 0f f8 ff ff       	call   119af <klog>
   121a0:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&g_paddr_alloc, vaddr, i + 1);
   121a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121a6:	83 c0 01             	add    $0x1,%eax
   121a9:	83 ec 04             	sub    $0x4,%esp
   121ac:	50                   	push   %eax
   121ad:	ff 75 0c             	pushl  0xc(%ebp)
   121b0:	68 00 60 01 00       	push   $0x16000
   121b5:	e8 54 fa ff ff       	call   11c0e <addr_free_page>
   121ba:	83 c4 10             	add    $0x10,%esp
            return -1;
   121bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   121c2:	eb 1c                	jmp    121e0 <memory_alloc_for_page_dir+0xe7>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   121c4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   121cb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   121cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121d2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   121d5:	0f 8c 5f ff ff ff    	jl     1213a <memory_alloc_for_page_dir+0x41>
    }

    return 0;
   121db:	b8 00 00 00 00       	mov    $0x0,%eax
}
   121e0:	c9                   	leave  
   121e1:	c3                   	ret    

000121e2 <memory_alloc_page_for>:


int memory_alloc_page_for(uint32_t addr, uint32_t size, int perm) {
   121e2:	55                   	push   %ebp
   121e3:	89 e5                	mov    %esp,%ebp
   121e5:	83 ec 18             	sub    $0x18,%esp
    
    uint32_t cr3 = task_current()->tss.cr3;
   121e8:	e8 09 0b 00 00       	call   12cf6 <task_current>
   121ed:	8b 40 70             	mov    0x70(%eax),%eax
   121f0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return memory_alloc_for_page_dir(cr3, addr, size, perm);
   121f3:	ff 75 10             	pushl  0x10(%ebp)
   121f6:	ff 75 0c             	pushl  0xc(%ebp)
   121f9:	ff 75 08             	pushl  0x8(%ebp)
   121fc:	ff 75 f4             	pushl  -0xc(%ebp)
   121ff:	e8 f5 fe ff ff       	call   120f9 <memory_alloc_for_page_dir>
   12204:	83 c4 10             	add    $0x10,%esp
}
   12207:	c9                   	leave  
   12208:	c3                   	ret    

00012209 <memory_alloc_page>:


// 0x80000000 以下
uint32_t memory_alloc_page() {
   12209:	55                   	push   %ebp
   1220a:	89 e5                	mov    %esp,%ebp
   1220c:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&g_paddr_alloc, 1);
   1220f:	83 ec 08             	sub    $0x8,%esp
   12212:	6a 01                	push   $0x1
   12214:	68 00 60 01 00       	push   $0x16000
   12219:	e8 89 f9 ff ff       	call   11ba7 <addr_alloc_page>
   1221e:	83 c4 10             	add    $0x10,%esp
   12221:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   12224:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   12227:	c9                   	leave  
   12228:	c3                   	ret    

00012229 <curr_page_dir>:

static pde_t* curr_page_dir() {
   12229:	55                   	push   %ebp
   1222a:	89 e5                	mov    %esp,%ebp
   1222c:	83 ec 08             	sub    $0x8,%esp

    return (pde_t*)( task_current()->tss.cr3 );
   1222f:	e8 c2 0a 00 00       	call   12cf6 <task_current>
   12234:	8b 40 70             	mov    0x70(%eax),%eax
}
   12237:	c9                   	leave  
   12238:	c3                   	ret    

00012239 <memory_free_page>:

void memory_free_page(uint32_t addr) {
   12239:	55                   	push   %ebp
   1223a:	89 e5                	mov    %esp,%ebp
   1223c:	83 ec 18             	sub    $0x18,%esp
    if( addr < MEMORY_TASK_BASE ) {
   1223f:	8b 45 08             	mov    0x8(%ebp),%eax
   12242:	85 c0                	test   %eax,%eax
   12244:	78 17                	js     1225d <memory_free_page+0x24>
        addr_free_page(&g_paddr_alloc, addr, 1);
   12246:	83 ec 04             	sub    $0x4,%esp
   12249:	6a 01                	push   $0x1
   1224b:	ff 75 08             	pushl  0x8(%ebp)
   1224e:	68 00 60 01 00       	push   $0x16000
   12253:	e8 b6 f9 ff ff       	call   11c0e <addr_free_page>
   12258:	83 c4 10             	add    $0x10,%esp
        if(pte == 0 && !pte->present) klog("free err");

        addr_free_page(&g_paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
}
   1225b:	eb 66                	jmp    122c3 <memory_free_page+0x8a>
        pte_t* pte = find_pte(curr_page_dir(), addr, 0);
   1225d:	e8 c7 ff ff ff       	call   12229 <curr_page_dir>
   12262:	83 ec 04             	sub    $0x4,%esp
   12265:	6a 00                	push   $0x0
   12267:	ff 75 08             	pushl  0x8(%ebp)
   1226a:	50                   	push   %eax
   1226b:	e8 4a fb ff ff       	call   11dba <find_pte>
   12270:	83 c4 10             	add    $0x10,%esp
   12273:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(pte == 0 && !pte->present) klog("free err");
   12276:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1227a:	75 1d                	jne    12299 <memory_free_page+0x60>
   1227c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1227f:	0f b6 00             	movzbl (%eax),%eax
   12282:	83 e0 01             	and    $0x1,%eax
   12285:	84 c0                	test   %al,%al
   12287:	75 10                	jne    12299 <memory_free_page+0x60>
   12289:	83 ec 0c             	sub    $0xc,%esp
   1228c:	68 c7 36 01 00       	push   $0x136c7
   12291:	e8 19 f7 ff ff       	call   119af <klog>
   12296:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&g_paddr_alloc, pte_paddr(pte), 1);
   12299:	83 ec 0c             	sub    $0xc,%esp
   1229c:	ff 75 f4             	pushl  -0xc(%ebp)
   1229f:	e8 75 f8 ff ff       	call   11b19 <pte_paddr>
   122a4:	83 c4 10             	add    $0x10,%esp
   122a7:	83 ec 04             	sub    $0x4,%esp
   122aa:	6a 01                	push   $0x1
   122ac:	50                   	push   %eax
   122ad:	68 00 60 01 00       	push   $0x16000
   122b2:	e8 57 f9 ff ff       	call   11c0e <addr_free_page>
   122b7:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   122ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122bd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   122c3:	90                   	nop
   122c4:	c9                   	leave  
   122c5:	c3                   	ret    

000122c6 <memory_destory_uvm>:



void memory_destory_uvm (uint32_t page_dir) {
   122c6:	55                   	push   %ebp
   122c7:	89 e5                	mov    %esp,%ebp
   122c9:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   122cc:	68 00 00 00 80       	push   $0x80000000
   122d1:	e8 f8 f7 ff ff       	call   11ace <pde_index>
   122d6:	83 c4 04             	add    $0x4,%esp
   122d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   122dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   122df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   122e6:	8b 45 08             	mov    0x8(%ebp),%eax
   122e9:	01 d0                	add    %edx,%eax
   122eb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   122ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   122f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
   122f4:	e9 8f 00 00 00       	jmp    12388 <memory_destory_uvm+0xc2>
        if (!pde->present) {
   122f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122fc:	0f b6 00             	movzbl (%eax),%eax
   122ff:	83 e0 01             	and    $0x1,%eax
   12302:	84 c0                	test   %al,%al
   12304:	74 79                	je     1237f <memory_destory_uvm+0xb9>
            continue;
        }
        pte_t * pte = (pte_t *)pde_paddr(pde);
   12306:	ff 75 f4             	pushl  -0xc(%ebp)
   12309:	e8 d4 f7 ff ff       	call   11ae2 <pde_paddr>
   1230e:	83 c4 04             	add    $0x4,%esp
   12311:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   12314:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1231b:	eb 36                	jmp    12353 <memory_destory_uvm+0x8d>
            if (!pte->present) {
   1231d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12320:	0f b6 00             	movzbl (%eax),%eax
   12323:	83 e0 01             	and    $0x1,%eax
   12326:	84 c0                	test   %al,%al
   12328:	74 20                	je     1234a <memory_destory_uvm+0x84>
                continue;
            }
            addr_free_page(&g_paddr_alloc, pte_paddr(pte), 1);
   1232a:	ff 75 ec             	pushl  -0x14(%ebp)
   1232d:	e8 e7 f7 ff ff       	call   11b19 <pte_paddr>
   12332:	83 c4 04             	add    $0x4,%esp
   12335:	83 ec 04             	sub    $0x4,%esp
   12338:	6a 01                	push   $0x1
   1233a:	50                   	push   %eax
   1233b:	68 00 60 01 00       	push   $0x16000
   12340:	e8 c9 f8 ff ff       	call   11c0e <addr_free_page>
   12345:	83 c4 10             	add    $0x10,%esp
   12348:	eb 01                	jmp    1234b <memory_destory_uvm+0x85>
                continue;
   1234a:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   1234b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   1234f:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   12353:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   1235a:	7e c1                	jle    1231d <memory_destory_uvm+0x57>
        }
        addr_free_page(&g_paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   1235c:	83 ec 0c             	sub    $0xc,%esp
   1235f:	ff 75 f4             	pushl  -0xc(%ebp)
   12362:	e8 7b f7 ff ff       	call   11ae2 <pde_paddr>
   12367:	83 c4 10             	add    $0x10,%esp
   1236a:	83 ec 04             	sub    $0x4,%esp
   1236d:	6a 01                	push   $0x1
   1236f:	50                   	push   %eax
   12370:	68 00 60 01 00       	push   $0x16000
   12375:	e8 94 f8 ff ff       	call   11c0e <addr_free_page>
   1237a:	83 c4 10             	add    $0x10,%esp
   1237d:	eb 01                	jmp    12380 <memory_destory_uvm+0xba>
            continue;
   1237f:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   12380:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12384:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   12388:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   1238f:	0f 8e 64 ff ff ff    	jle    122f9 <memory_destory_uvm+0x33>
    }
    addr_free_page(&g_paddr_alloc, page_dir, 1);
   12395:	83 ec 04             	sub    $0x4,%esp
   12398:	6a 01                	push   $0x1
   1239a:	ff 75 08             	pushl  0x8(%ebp)
   1239d:	68 00 60 01 00       	push   $0x16000
   123a2:	e8 67 f8 ff ff       	call   11c0e <addr_free_page>
   123a7:	83 c4 10             	add    $0x10,%esp
}
   123aa:	90                   	nop
   123ab:	c9                   	leave  
   123ac:	c3                   	ret    

000123ad <memory_copy_uvm>:


uint32_t memory_copy_uvm (uint32_t page_dir) {
   123ad:	55                   	push   %ebp
   123ae:	89 e5                	mov    %esp,%ebp
   123b0:	83 ec 38             	sub    $0x38,%esp
    uint32_t to_page_dir = memory_create_uvm();
   123b3:	e8 bc fc ff ff       	call   12074 <memory_create_uvm>
   123b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0) {
   123bb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   123bf:	0f 84 1b 01 00 00    	je     124e0 <memory_copy_uvm+0x133>
        goto copy_uvm_failed;
    }

    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   123c5:	83 ec 0c             	sub    $0xc,%esp
   123c8:	68 00 00 00 80       	push   $0x80000000
   123cd:	e8 fc f6 ff ff       	call   11ace <pde_index>
   123d2:	83 c4 10             	add    $0x10,%esp
   123d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   123d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
   123db:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   123e2:	8b 45 08             	mov    0x8(%ebp),%eax
   123e5:	01 d0                	add    %edx,%eax
   123e7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   123ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
   123ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
   123f0:	e9 d9 00 00 00       	jmp    124ce <memory_copy_uvm+0x121>
        if (!pde->present) {
   123f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123f8:	0f b6 00             	movzbl (%eax),%eax
   123fb:	83 e0 01             	and    $0x1,%eax
   123fe:	84 c0                	test   %al,%al
   12400:	0f 84 bf 00 00 00    	je     124c5 <memory_copy_uvm+0x118>
            continue;
        }
        pte_t * pte = (pte_t *)pde_paddr(pde);
   12406:	83 ec 0c             	sub    $0xc,%esp
   12409:	ff 75 f4             	pushl  -0xc(%ebp)
   1240c:	e8 d1 f6 ff ff       	call   11ae2 <pde_paddr>
   12411:	83 c4 10             	add    $0x10,%esp
   12414:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   12417:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1241e:	e9 93 00 00 00       	jmp    124b6 <memory_copy_uvm+0x109>
            if (!pte->present) {
   12423:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12426:	0f b6 00             	movzbl (%eax),%eax
   12429:	83 e0 01             	and    $0x1,%eax
   1242c:	84 c0                	test   %al,%al
   1242e:	74 7d                	je     124ad <memory_copy_uvm+0x100>
                continue;
            }
            uint32_t page = addr_alloc_page(&g_paddr_alloc, 1);
   12430:	83 ec 08             	sub    $0x8,%esp
   12433:	6a 01                	push   $0x1
   12435:	68 00 60 01 00       	push   $0x16000
   1243a:	e8 68 f7 ff ff       	call   11ba7 <addr_alloc_page>
   1243f:	83 c4 10             	add    $0x10,%esp
   12442:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0) {
   12445:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   12449:	0f 84 94 00 00 00    	je     124e3 <memory_copy_uvm+0x136>
                goto copy_uvm_failed;
            }
            uint32_t vaddr = (i << 22) | (j << 12);
   1244f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12452:	c1 e0 16             	shl    $0x16,%eax
   12455:	89 c2                	mov    %eax,%edx
   12457:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1245a:	c1 e0 0c             	shl    $0xc,%eax
   1245d:	09 d0                	or     %edx,%eax
   1245f:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   12462:	83 ec 0c             	sub    $0xc,%esp
   12465:	ff 75 ec             	pushl  -0x14(%ebp)
   12468:	e8 d3 f6 ff ff       	call   11b40 <get_pte_perm>
   1246d:	83 c4 10             	add    $0x10,%esp
   12470:	89 c2                	mov    %eax,%edx
   12472:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12475:	83 ec 0c             	sub    $0xc,%esp
   12478:	52                   	push   %edx
   12479:	6a 01                	push   $0x1
   1247b:	ff 75 dc             	pushl  -0x24(%ebp)
   1247e:	ff 75 d8             	pushl  -0x28(%ebp)
   12481:	50                   	push   %eax
   12482:	e8 e3 f9 ff ff       	call   11e6a <memory_create_map>
   12487:	83 c4 20             	add    $0x20,%esp
   1248a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   1248d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   12491:	78 53                	js     124e6 <memory_copy_uvm+0x139>
                goto copy_uvm_failed;
            }
            k_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   12493:	8b 55 d8             	mov    -0x28(%ebp),%edx
   12496:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12499:	83 ec 04             	sub    $0x4,%esp
   1249c:	68 00 10 00 00       	push   $0x1000
   124a1:	52                   	push   %edx
   124a2:	50                   	push   %eax
   124a3:	e8 1d ef ff ff       	call   113c5 <k_memcpy>
   124a8:	83 c4 10             	add    $0x10,%esp
   124ab:	eb 01                	jmp    124ae <memory_copy_uvm+0x101>
                continue;
   124ad:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   124ae:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   124b2:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   124b6:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   124bd:	0f 8e 60 ff ff ff    	jle    12423 <memory_copy_uvm+0x76>
   124c3:	eb 01                	jmp    124c6 <memory_copy_uvm+0x119>
            continue;
   124c5:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   124c6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   124ca:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   124ce:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   124d5:	0f 8e 1a ff ff ff    	jle    123f5 <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   124db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   124de:	eb 20                	jmp    12500 <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   124e0:	90                   	nop
   124e1:	eb 04                	jmp    124e7 <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   124e3:	90                   	nop
   124e4:	eb 01                	jmp    124e7 <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   124e6:	90                   	nop


copy_uvm_failed:
    if (to_page_dir) {
   124e7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   124eb:	74 0e                	je     124fb <memory_copy_uvm+0x14e>
        memory_destory_uvm(to_page_dir);
   124ed:	83 ec 0c             	sub    $0xc,%esp
   124f0:	ff 75 e4             	pushl  -0x1c(%ebp)
   124f3:	e8 ce fd ff ff       	call   122c6 <memory_destory_uvm>
   124f8:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   124fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12500:	c9                   	leave  
   12501:	c3                   	ret    

00012502 <list_count>:
static inline int list_count (list_t* list) {
   12502:	55                   	push   %ebp
   12503:	89 e5                	mov    %esp,%ebp
    return list->count;
   12505:	8b 45 08             	mov    0x8(%ebp),%eax
   12508:	8b 40 08             	mov    0x8(%eax),%eax
}
   1250b:	5d                   	pop    %ebp
   1250c:	c3                   	ret    

0001250d <mutex_init>:
#include <mux.h>
#include <irq.h>
#include <log.h>

void mutex_init (mutex_t * mutex) {
   1250d:	55                   	push   %ebp
   1250e:	89 e5                	mov    %esp,%ebp
   12510:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   12513:	8b 45 08             	mov    0x8(%ebp),%eax
   12516:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   1251d:	8b 45 08             	mov    0x8(%ebp),%eax
   12520:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   12526:	8b 45 08             	mov    0x8(%ebp),%eax
   12529:	83 c0 08             	add    $0x8,%eax
   1252c:	83 ec 0c             	sub    $0xc,%esp
   1252f:	50                   	push   %eax
   12530:	e8 bb f1 ff ff       	call   116f0 <list_init>
   12535:	83 c4 10             	add    $0x10,%esp
}
   12538:	90                   	nop
   12539:	c9                   	leave  
   1253a:	c3                   	ret    

0001253b <mutex_lock>:

void mutex_lock (mutex_t * mutex) {
   1253b:	55                   	push   %ebp
   1253c:	89 e5                	mov    %esp,%ebp
   1253e:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   12541:	e8 a5 ea ff ff       	call   10feb <irq_enter_proection>
   12546:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   12549:	e8 a8 07 00 00       	call   12cf6 <task_current>
   1254e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   12551:	8b 45 08             	mov    0x8(%ebp),%eax
   12554:	8b 40 04             	mov    0x4(%eax),%eax
   12557:	85 c0                	test   %eax,%eax
   12559:	75 14                	jne    1256f <mutex_lock+0x34>
        mutex->locked_count = 1;
   1255b:	8b 45 08             	mov    0x8(%ebp),%eax
   1255e:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   12565:	8b 45 08             	mov    0x8(%ebp),%eax
   12568:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1256b:	89 10                	mov    %edx,(%eax)
   1256d:	eb 4f                	jmp    125be <mutex_lock+0x83>
    } else if (mutex->owner == curr) {
   1256f:	8b 45 08             	mov    0x8(%ebp),%eax
   12572:	8b 00                	mov    (%eax),%eax
   12574:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12577:	75 11                	jne    1258a <mutex_lock+0x4f>
        mutex->locked_count++;
   12579:	8b 45 08             	mov    0x8(%ebp),%eax
   1257c:	8b 40 04             	mov    0x4(%eax),%eax
   1257f:	8d 50 01             	lea    0x1(%eax),%edx
   12582:	8b 45 08             	mov    0x8(%ebp),%eax
   12585:	89 50 04             	mov    %edx,0x4(%eax)
   12588:	eb 34                	jmp    125be <mutex_lock+0x83>
    } else {
        task_t * curr = task_current();
   1258a:	e8 67 07 00 00       	call   12cf6 <task_current>
   1258f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   12592:	83 ec 0c             	sub    $0xc,%esp
   12595:	ff 75 ec             	pushl  -0x14(%ebp)
   12598:	e8 98 07 00 00       	call   12d35 <task_set_block>
   1259d:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   125a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   125a3:	8d 50 4c             	lea    0x4c(%eax),%edx
   125a6:	8b 45 08             	mov    0x8(%ebp),%eax
   125a9:	83 c0 08             	add    $0x8,%eax
   125ac:	83 ec 08             	sub    $0x8,%esp
   125af:	52                   	push   %edx
   125b0:	50                   	push   %eax
   125b1:	e8 be f1 ff ff       	call   11774 <list_insert_last>
   125b6:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   125b9:	e8 46 08 00 00       	call   12e04 <task_dispatch>
    }

    irq_leave_proection(irq_state);
   125be:	83 ec 0c             	sub    $0xc,%esp
   125c1:	ff 75 f4             	pushl  -0xc(%ebp)
   125c4:	e8 3a ea ff ff       	call   11003 <irq_leave_proection>
   125c9:	83 c4 10             	add    $0x10,%esp
}
   125cc:	90                   	nop
   125cd:	c9                   	leave  
   125ce:	c3                   	ret    

000125cf <mutex_unlock>:

void mutex_unlock (mutex_t * mutex) {
   125cf:	55                   	push   %ebp
   125d0:	89 e5                	mov    %esp,%ebp
   125d2:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   125d5:	e8 11 ea ff ff       	call   10feb <irq_enter_proection>
   125da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * curr = task_current();
   125dd:	e8 14 07 00 00       	call   12cf6 <task_current>
   125e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   125e5:	8b 45 08             	mov    0x8(%ebp),%eax
   125e8:	8b 00                	mov    (%eax),%eax
   125ea:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   125ed:	0f 85 88 00 00 00    	jne    1267b <mutex_unlock+0xac>
        if (--mutex->locked_count == 0) {
   125f3:	8b 45 08             	mov    0x8(%ebp),%eax
   125f6:	8b 40 04             	mov    0x4(%eax),%eax
   125f9:	8d 50 ff             	lea    -0x1(%eax),%edx
   125fc:	8b 45 08             	mov    0x8(%ebp),%eax
   125ff:	89 50 04             	mov    %edx,0x4(%eax)
   12602:	8b 45 08             	mov    0x8(%ebp),%eax
   12605:	8b 40 04             	mov    0x4(%eax),%eax
   12608:	85 c0                	test   %eax,%eax
   1260a:	75 6f                	jne    1267b <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   1260c:	8b 45 08             	mov    0x8(%ebp),%eax
   1260f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   12615:	8b 45 08             	mov    0x8(%ebp),%eax
   12618:	83 c0 08             	add    $0x8,%eax
   1261b:	83 ec 0c             	sub    $0xc,%esp
   1261e:	50                   	push   %eax
   1261f:	e8 de fe ff ff       	call   12502 <list_count>
   12624:	83 c4 10             	add    $0x10,%esp
   12627:	85 c0                	test   %eax,%eax
   12629:	74 50                	je     1267b <mutex_unlock+0xac>
                list_node_t * task_node = list_delete_first(&mutex->wait_list);
   1262b:	8b 45 08             	mov    0x8(%ebp),%eax
   1262e:	83 c0 08             	add    $0x8,%eax
   12631:	83 ec 0c             	sub    $0xc,%esp
   12634:	50                   	push   %eax
   12635:	e8 9e f1 ff ff       	call   117d8 <list_delete_first>
   1263a:	83 c4 10             	add    $0x10,%esp
   1263d:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   12640:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12644:	74 08                	je     1264e <mutex_unlock+0x7f>
   12646:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12649:	83 e8 4c             	sub    $0x4c,%eax
   1264c:	eb 05                	jmp    12653 <mutex_unlock+0x84>
   1264e:	b8 00 00 00 00       	mov    $0x0,%eax
   12653:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   12656:	83 ec 0c             	sub    $0xc,%esp
   12659:	ff 75 e8             	pushl  -0x18(%ebp)
   1265c:	e8 9f 06 00 00       	call   12d00 <task_set_ready>
   12661:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   12664:	8b 45 08             	mov    0x8(%ebp),%eax
   12667:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   1266e:	8b 45 08             	mov    0x8(%ebp),%eax
   12671:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12674:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   12676:	e8 89 07 00 00       	call   12e04 <task_dispatch>
            }
        }
    }

    irq_leave_proection(irq_state);
   1267b:	83 ec 0c             	sub    $0xc,%esp
   1267e:	ff 75 f4             	pushl  -0xc(%ebp)
   12681:	e8 7d e9 ff ff       	call   11003 <irq_leave_proection>
   12686:	83 c4 10             	add    $0x10,%esp
   12689:	90                   	nop
   1268a:	c9                   	leave  
   1268b:	c3                   	ret    

0001268c <list_count>:
static inline int list_count (list_t* list) {
   1268c:	55                   	push   %ebp
   1268d:	89 e5                	mov    %esp,%ebp
    return list->count;
   1268f:	8b 45 08             	mov    0x8(%ebp),%eax
   12692:	8b 40 08             	mov    0x8(%eax),%eax
}
   12695:	5d                   	pop    %ebp
   12696:	c3                   	ret    

00012697 <sem_init>:
#include <sem.h>
#include <irq.h>

void sem_init(sem_t* sem, int init_count) {
   12697:	55                   	push   %ebp
   12698:	89 e5                	mov    %esp,%ebp
   1269a:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   1269d:	8b 45 08             	mov    0x8(%ebp),%eax
   126a0:	8b 55 0c             	mov    0xc(%ebp),%edx
   126a3:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   126a5:	8b 45 08             	mov    0x8(%ebp),%eax
   126a8:	83 c0 04             	add    $0x4,%eax
   126ab:	83 ec 0c             	sub    $0xc,%esp
   126ae:	50                   	push   %eax
   126af:	e8 3c f0 ff ff       	call   116f0 <list_init>
   126b4:	83 c4 10             	add    $0x10,%esp
}
   126b7:	90                   	nop
   126b8:	c9                   	leave  
   126b9:	c3                   	ret    

000126ba <sem_wait>:

void sem_wait(sem_t* sem) {
   126ba:	55                   	push   %ebp
   126bb:	89 e5                	mov    %esp,%ebp
   126bd:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   126c0:	e8 26 e9 ff ff       	call   10feb <irq_enter_proection>
   126c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0) {
   126c8:	8b 45 08             	mov    0x8(%ebp),%eax
   126cb:	8b 00                	mov    (%eax),%eax
   126cd:	85 c0                	test   %eax,%eax
   126cf:	7e 0f                	jle    126e0 <sem_wait+0x26>
        sem->count--;
   126d1:	8b 45 08             	mov    0x8(%ebp),%eax
   126d4:	8b 00                	mov    (%eax),%eax
   126d6:	8d 50 ff             	lea    -0x1(%eax),%edx
   126d9:	8b 45 08             	mov    0x8(%ebp),%eax
   126dc:	89 10                	mov    %edx,(%eax)
   126de:	eb 34                	jmp    12714 <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   126e0:	e8 11 06 00 00       	call   12cf6 <task_current>
   126e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   126e8:	83 ec 0c             	sub    $0xc,%esp
   126eb:	ff 75 f0             	pushl  -0x10(%ebp)
   126ee:	e8 42 06 00 00       	call   12d35 <task_set_block>
   126f3:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   126f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   126f9:	8d 50 4c             	lea    0x4c(%eax),%edx
   126fc:	8b 45 08             	mov    0x8(%ebp),%eax
   126ff:	83 c0 04             	add    $0x4,%eax
   12702:	83 ec 08             	sub    $0x8,%esp
   12705:	52                   	push   %edx
   12706:	50                   	push   %eax
   12707:	e8 68 f0 ff ff       	call   11774 <list_insert_last>
   1270c:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1270f:	e8 f0 06 00 00       	call   12e04 <task_dispatch>
    }
    irq_leave_proection(state);
   12714:	83 ec 0c             	sub    $0xc,%esp
   12717:	ff 75 f4             	pushl  -0xc(%ebp)
   1271a:	e8 e4 e8 ff ff       	call   11003 <irq_leave_proection>
   1271f:	83 c4 10             	add    $0x10,%esp
}
   12722:	90                   	nop
   12723:	c9                   	leave  
   12724:	c3                   	ret    

00012725 <sem_notify>:

void sem_notify(sem_t* sem) {
   12725:	55                   	push   %ebp
   12726:	89 e5                	mov    %esp,%ebp
   12728:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();
   1272b:	e8 bb e8 ff ff       	call   10feb <irq_enter_proection>
   12730:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list)) {
   12733:	8b 45 08             	mov    0x8(%ebp),%eax
   12736:	83 c0 04             	add    $0x4,%eax
   12739:	83 ec 0c             	sub    $0xc,%esp
   1273c:	50                   	push   %eax
   1273d:	e8 4a ff ff ff       	call   1268c <list_count>
   12742:	83 c4 10             	add    $0x10,%esp
   12745:	85 c0                	test   %eax,%eax
   12747:	74 40                	je     12789 <sem_notify+0x64>
        list_node_t* node = list_delete_first(&sem->wait_list);
   12749:	8b 45 08             	mov    0x8(%ebp),%eax
   1274c:	83 c0 04             	add    $0x4,%eax
   1274f:	83 ec 0c             	sub    $0xc,%esp
   12752:	50                   	push   %eax
   12753:	e8 80 f0 ff ff       	call   117d8 <list_delete_first>
   12758:	83 c4 10             	add    $0x10,%esp
   1275b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_t* task = list_node_parent(node, task_t, wait_node);
   1275e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12762:	74 08                	je     1276c <sem_notify+0x47>
   12764:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12767:	83 e8 4c             	sub    $0x4c,%eax
   1276a:	eb 05                	jmp    12771 <sem_notify+0x4c>
   1276c:	b8 00 00 00 00       	mov    $0x0,%eax
   12771:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12774:	83 ec 0c             	sub    $0xc,%esp
   12777:	ff 75 ec             	pushl  -0x14(%ebp)
   1277a:	e8 81 05 00 00       	call   12d00 <task_set_ready>
   1277f:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12782:	e8 7d 06 00 00       	call   12e04 <task_dispatch>
   12787:	eb 0d                	jmp    12796 <sem_notify+0x71>
    } else {
        sem->count++;
   12789:	8b 45 08             	mov    0x8(%ebp),%eax
   1278c:	8b 00                	mov    (%eax),%eax
   1278e:	8d 50 01             	lea    0x1(%eax),%edx
   12791:	8b 45 08             	mov    0x8(%ebp),%eax
   12794:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_proection(state);
   12796:	83 ec 0c             	sub    $0xc,%esp
   12799:	ff 75 f4             	pushl  -0xc(%ebp)
   1279c:	e8 62 e8 ff ff       	call   11003 <irq_leave_proection>
   127a1:	83 c4 10             	add    $0x10,%esp

}
   127a4:	90                   	nop
   127a5:	c9                   	leave  
   127a6:	c3                   	ret    

000127a7 <sem_count>:

int  sem_count(sem_t* sem) {
   127a7:	55                   	push   %ebp
   127a8:	89 e5                	mov    %esp,%ebp
   127aa:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   127ad:	e8 39 e8 ff ff       	call   10feb <irq_enter_proection>
   127b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   127b5:	8b 45 08             	mov    0x8(%ebp),%eax
   127b8:	8b 00                	mov    (%eax),%eax
   127ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_proection(state);
   127bd:	83 ec 0c             	sub    $0xc,%esp
   127c0:	ff 75 f4             	pushl  -0xc(%ebp)
   127c3:	e8 3b e8 ff ff       	call   11003 <irq_leave_proection>
   127c8:	83 c4 10             	add    $0x10,%esp
    return count;
   127cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   127ce:	c9                   	leave  
   127cf:	c3                   	ret    

000127d0 <sys_print_msg>:
#include <log.h>

typedef int (*sys_handle_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

// 临时使用
void sys_print_msg(const char* fmt, int arg) {
   127d0:	55                   	push   %ebp
   127d1:	89 e5                	mov    %esp,%ebp
   127d3:	83 ec 08             	sub    $0x8,%esp
    klog(fmt, arg);
   127d6:	83 ec 08             	sub    $0x8,%esp
   127d9:	ff 75 0c             	pushl  0xc(%ebp)
   127dc:	ff 75 08             	pushl  0x8(%ebp)
   127df:	e8 cb f1 ff ff       	call   119af <klog>
   127e4:	83 c4 10             	add    $0x10,%esp
}
   127e7:	90                   	nop
   127e8:	c9                   	leave  
   127e9:	c3                   	ret    

000127ea <do_handler_syscall>:
    [SYS_fork] = (sys_handle_t)sys_fork,
};



void do_handler_syscall(syscall_frame_t * frame) {
   127ea:	55                   	push   %ebp
   127eb:	89 e5                	mov    %esp,%ebp
   127ed:	53                   	push   %ebx
   127ee:	83 ec 14             	sub    $0x14,%esp
    if(frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   127f1:	8b 45 08             	mov    0x8(%ebp),%eax
   127f4:	8b 40 3c             	mov    0x3c(%eax),%eax
   127f7:	83 f8 03             	cmp    $0x3,%eax
   127fa:	77 4e                	ja     1284a <do_handler_syscall+0x60>
        sys_handle_t handler = sys_table[frame->func_id];
   127fc:	8b 45 08             	mov    0x8(%ebp),%eax
   127ff:	8b 40 3c             	mov    0x3c(%eax),%eax
   12802:	8b 04 85 d0 36 01 00 	mov    0x136d0(,%eax,4),%eax
   12809:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler) {
   1280c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12810:	74 38                	je     1284a <do_handler_syscall+0x60>
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   12812:	8b 45 08             	mov    0x8(%ebp),%eax
   12815:	8b 40 4c             	mov    0x4c(%eax),%eax
   12818:	89 c3                	mov    %eax,%ebx
   1281a:	8b 45 08             	mov    0x8(%ebp),%eax
   1281d:	8b 40 48             	mov    0x48(%eax),%eax
   12820:	89 c1                	mov    %eax,%ecx
   12822:	8b 45 08             	mov    0x8(%ebp),%eax
   12825:	8b 40 44             	mov    0x44(%eax),%eax
   12828:	89 c2                	mov    %eax,%edx
   1282a:	8b 45 08             	mov    0x8(%ebp),%eax
   1282d:	8b 40 40             	mov    0x40(%eax),%eax
   12830:	53                   	push   %ebx
   12831:	51                   	push   %ecx
   12832:	52                   	push   %edx
   12833:	50                   	push   %eax
   12834:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12837:	ff d0                	call   *%eax
   12839:	83 c4 10             	add    $0x10,%esp
   1283c:	89 45 f0             	mov    %eax,-0x10(%ebp)
            frame->eax = ret;   // eax 防止返回值
   1283f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12842:	8b 45 08             	mov    0x8(%ebp),%eax
   12845:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   12848:	eb 30                	jmp    1287a <do_handler_syscall+0x90>
        }
    }

    task_t * task = task_current();
   1284a:	e8 a7 04 00 00       	call   12cf6 <task_current>
   1284f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    klog("task: %s, Unkown syscall: %d", task->name, frame->func_id);
   12852:	8b 45 08             	mov    0x8(%ebp),%eax
   12855:	8b 40 3c             	mov    0x3c(%eax),%eax
   12858:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1285b:	83 c2 08             	add    $0x8,%edx
   1285e:	83 ec 04             	sub    $0x4,%esp
   12861:	50                   	push   %eax
   12862:	52                   	push   %edx
   12863:	68 e0 36 01 00       	push   $0x136e0
   12868:	e8 42 f1 ff ff       	call   119af <klog>
   1286d:	83 c4 10             	add    $0x10,%esp

    frame->eax = -1;
   12870:	8b 45 08             	mov    0x8(%ebp),%eax
   12873:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
   1287a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1287d:	c9                   	leave  
   1287e:	c3                   	ret    

0001287f <hlt>:
static inline void hlt() {
   1287f:	55                   	push   %ebp
   12880:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   12882:	f4                   	hlt    
}
   12883:	90                   	nop
   12884:	5d                   	pop    %ebp
   12885:	c3                   	ret    

00012886 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   12886:	55                   	push   %ebp
   12887:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   12889:	8b 45 08             	mov    0x8(%ebp),%eax
   1288c:	0f 22 d8             	mov    %eax,%cr3
}
   1288f:	90                   	nop
   12890:	5d                   	pop    %ebp
   12891:	c3                   	ret    

00012892 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   12892:	55                   	push   %ebp
   12893:	89 e5                	mov    %esp,%ebp
   12895:	83 ec 10             	sub    $0x10,%esp
	volatile uint32_t addr[] = {offset, selector };
   12898:	8b 45 0c             	mov    0xc(%ebp),%eax
   1289b:	8b 55 08             	mov    0x8(%ebp),%edx
   1289e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   128a1:	89 55 fc             	mov    %edx,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   128a4:	8d 45 f8             	lea    -0x8(%ebp),%eax
   128a7:	ff 28                	ljmp   *(%eax)
}
   128a9:	90                   	nop
   128aa:	c9                   	leave  
   128ab:	c3                   	ret    

000128ac <write_tr>:
static inline void write_tr (uint16_t tss_selector) {
   128ac:	55                   	push   %ebp
   128ad:	89 e5                	mov    %esp,%ebp
   128af:	83 ec 04             	sub    $0x4,%esp
   128b2:	8b 45 08             	mov    0x8(%ebp),%eax
   128b5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   128b9:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   128bd:	0f 00 d8             	ltr    %ax
}
   128c0:	90                   	nop
   128c1:	c9                   	leave  
   128c2:	c3                   	ret    

000128c3 <list_node_init>:
static inline void list_node_init(list_node_t* node) {
   128c3:	55                   	push   %ebp
   128c4:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t*)0;
   128c6:	8b 45 08             	mov    0x8(%ebp),%eax
   128c9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   128d0:	8b 45 08             	mov    0x8(%ebp),%eax
   128d3:	8b 50 04             	mov    0x4(%eax),%edx
   128d6:	8b 45 08             	mov    0x8(%ebp),%eax
   128d9:	89 10                	mov    %edx,(%eax)
}
   128db:	90                   	nop
   128dc:	5d                   	pop    %ebp
   128dd:	c3                   	ret    

000128de <list_node_next>:
static inline list_node_t* list_node_next(list_node_t* node) {
   128de:	55                   	push   %ebp
   128df:	89 e5                	mov    %esp,%ebp
    return node->next;
   128e1:	8b 45 08             	mov    0x8(%ebp),%eax
   128e4:	8b 40 04             	mov    0x4(%eax),%eax
}
   128e7:	5d                   	pop    %ebp
   128e8:	c3                   	ret    

000128e9 <list_count>:
static inline int list_count (list_t* list) {
   128e9:	55                   	push   %ebp
   128ea:	89 e5                	mov    %esp,%ebp
    return list->count;
   128ec:	8b 45 08             	mov    0x8(%ebp),%eax
   128ef:	8b 40 08             	mov    0x8(%eax),%eax
}
   128f2:	5d                   	pop    %ebp
   128f3:	c3                   	ret    

000128f4 <list_first>:
static inline list_node_t* list_first (list_t* list) {
   128f4:	55                   	push   %ebp
   128f5:	89 e5                	mov    %esp,%ebp
    return list->first;
   128f7:	8b 45 08             	mov    0x8(%ebp),%eax
   128fa:	8b 00                	mov    (%eax),%eax
}
   128fc:	5d                   	pop    %ebp
   128fd:	c3                   	ret    

000128fe <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   128fe:	55                   	push   %ebp
   128ff:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   12901:	ff 75 08             	pushl  0x8(%ebp)
   12904:	e8 7d ff ff ff       	call   12886 <write_cr3>
   12909:	83 c4 04             	add    $0x4,%esp
}
   1290c:	90                   	nop
   1290d:	c9                   	leave  
   1290e:	c3                   	ret    

0001290f <idle_task_func>:
static task_manager_t   g_task_manager;
static uint32_t         idle_task_stack[2048];
static task_t           g_task_table[128];
static mutex_t          task_table_mutex;

static void idle_task_func() { for(;;) hlt(); }
   1290f:	55                   	push   %ebp
   12910:	89 e5                	mov    %esp,%ebp
   12912:	e8 68 ff ff ff       	call   1287f <hlt>
   12917:	eb f9                	jmp    12912 <idle_task_func+0x3>

00012919 <task_switch_from_to>:

void simple_switch(uint32_t **from, uint32_t* to);

void task_switch_from_to(task_t* from, task_t* to) {
   12919:	55                   	push   %ebp
   1291a:	89 e5                	mov    %esp,%ebp
    #ifndef USE_TSS
    simple_switch(&from->stack, to->stack);  // 使用直接跳转机制
    #else
    far_jump(to->tss_sel, 0);             // 使用 tss 机制
   1291c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1291f:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
   12925:	6a 00                	push   $0x0
   12927:	50                   	push   %eax
   12928:	e8 65 ff ff ff       	call   12892 <far_jump>
   1292d:	83 c4 08             	add    $0x8,%esp
    #endif
}
   12930:	90                   	nop
   12931:	c9                   	leave  
   12932:	c3                   	ret    

00012933 <tss_init>:


#ifdef USE_TSS
static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   12933:	55                   	push   %ebp
   12934:	89 e5                	mov    %esp,%ebp
   12936:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   12939:	e8 a4 db ff ff       	call   104e2 <gdt_alloc_desc>
   1293e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), 
   12941:	8b 45 08             	mov    0x8(%ebp),%eax
   12944:	83 c0 54             	add    $0x54,%eax
   12947:	68 89 00 00 00       	push   $0x89
   1294c:	6a 68                	push   $0x68
   1294e:	50                   	push   %eax
   1294f:	ff 75 ec             	pushl  -0x14(%ebp)
   12952:	e8 6a da ff ff       	call   103c1 <segment_desc_set>
   12957:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS );

    k_memset(&task->tss, 0, sizeof(tss_t));
   1295a:	8b 45 08             	mov    0x8(%ebp),%eax
   1295d:	83 c0 54             	add    $0x54,%eax
   12960:	83 ec 04             	sub    $0x4,%esp
   12963:	6a 68                	push   $0x68
   12965:	6a 00                	push   $0x0
   12967:	50                   	push   %eax
   12968:	e8 a7 ea ff ff       	call   11414 <k_memset>
   1296d:	83 c4 10             	add    $0x10,%esp

    uint32_t kernel_stack = memory_alloc_page();
   12970:	e8 94 f8 ff ff       	call   12209 <memory_alloc_page>
   12975:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   12978:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1297c:	0f 84 da 00 00 00    	je     12a5c <tss_init+0x129>
        goto tss_init_failed;
    }

    int code_sel, data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   12982:	8b 45 0c             	mov    0xc(%ebp),%eax
   12985:	83 e0 01             	and    $0x1,%eax
   12988:	85 c0                	test   %eax,%eax
   1298a:	74 10                	je     1299c <tss_init+0x69>
        code_sel = KERNEL_SELECTOR_CS;
   1298c:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   12993:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   1299a:	eb 16                	jmp    129b2 <tss_init+0x7f>
    } else {
        code_sel = g_task_manager.app_code_sel | SEG_RPL3;
   1299c:	a1 a8 81 01 00       	mov    0x181a8,%eax
   129a1:	83 c8 03             	or     $0x3,%eax
   129a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = g_task_manager.app_data_sel | SEG_RPL3;
   129a7:	a1 ac 81 01 00       	mov    0x181ac,%eax
   129ac:	83 c8 03             	or     $0x3,%eax
   129af:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip  = entry;
   129b2:	8b 45 08             	mov    0x8(%ebp),%eax
   129b5:	8b 55 10             	mov    0x10(%ebp),%edx
   129b8:	89 50 74             	mov    %edx,0x74(%eax)
    task->tss.esp  = esp;
   129bb:	8b 45 08             	mov    0x8(%ebp),%eax
   129be:	8b 55 14             	mov    0x14(%ebp),%edx
   129c1:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   129c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   129ca:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   129d0:	8b 45 08             	mov    0x8(%ebp),%eax
   129d3:	89 50 58             	mov    %edx,0x58(%eax)
    task->tss.ss  = data_sel;
   129d6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   129d9:	8b 45 08             	mov    0x8(%ebp),%eax
   129dc:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   129e2:	8b 45 08             	mov    0x8(%ebp),%eax
   129e5:	c7 40 5c 10 00 00 00 	movl   $0x10,0x5c(%eax)
    task->tss.es  = data_sel;
   129ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
   129ef:	8b 45 08             	mov    0x8(%ebp),%eax
   129f2:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.ds  = data_sel;
   129f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   129fb:	8b 45 08             	mov    0x8(%ebp),%eax
   129fe:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    task->tss.fs  = data_sel;
   12a04:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12a07:	8b 45 08             	mov    0x8(%ebp),%eax
   12a0a:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    task->tss.gs  = data_sel;
   12a10:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12a13:	8b 45 08             	mov    0x8(%ebp),%eax
   12a16:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    task->tss.cs  = code_sel;
   12a1c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12a1f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a22:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    
    task->tss.eflags = EFLAGES_DEFAULT | EFLAGS_IF;
   12a28:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2b:	c7 40 78 02 02 00 00 	movl   $0x202,0x78(%eax)

    uint32_t page_dir = memory_create_uvm();
   12a32:	e8 3d f6 ff ff       	call   12074 <memory_create_uvm>
   12a37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(page_dir == 0) {
   12a3a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12a3e:	74 1f                	je     12a5f <tss_init+0x12c>
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   12a40:	8b 45 08             	mov    0x8(%ebp),%eax
   12a43:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   12a46:	89 50 70             	mov    %edx,0x70(%eax)
    task->tss_sel = tss_sel;
   12a49:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4f:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)

    return 0;
   12a55:	b8 00 00 00 00       	mov    $0x0,%eax
   12a5a:	eb 2b                	jmp    12a87 <tss_init+0x154>
        goto tss_init_failed;
   12a5c:	90                   	nop
   12a5d:	eb 01                	jmp    12a60 <tss_init+0x12d>
        goto tss_init_failed;
   12a5f:	90                   	nop

tss_init_failed:

    gdt_free_sel(tss_sel);
   12a60:	83 ec 0c             	sub    $0xc,%esp
   12a63:	ff 75 ec             	pushl  -0x14(%ebp)
   12a66:	e8 ec da ff ff       	call   10557 <gdt_free_sel>
   12a6b:	83 c4 10             	add    $0x10,%esp
    if(kernel_stack) {
   12a6e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12a72:	74 0e                	je     12a82 <tss_init+0x14f>
        memory_free_page(kernel_stack);
   12a74:	83 ec 0c             	sub    $0xc,%esp
   12a77:	ff 75 e8             	pushl  -0x18(%ebp)
   12a7a:	e8 ba f7 ff ff       	call   12239 <memory_free_page>
   12a7f:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   12a82:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12a87:	c9                   	leave  
   12a88:	c3                   	ret    

00012a89 <task_init>:
#endif

// 初始化一个任务
int task_init(task_t* task, const char* name, int flag, uint32_t entry, uint32_t esp) {
   12a89:	55                   	push   %ebp
   12a8a:	89 e5                	mov    %esp,%ebp
   12a8c:	83 ec 18             	sub    $0x18,%esp
        *(--pesp) = 0;
        *(--pesp) = 0;
        task->stack = pesp;
    }
    #else
    if (tss_init(task, flag, entry, esp) == -1) return -1;  // 使用 tss 机制
   12a8f:	ff 75 18             	pushl  0x18(%ebp)
   12a92:	ff 75 14             	pushl  0x14(%ebp)
   12a95:	ff 75 10             	pushl  0x10(%ebp)
   12a98:	ff 75 08             	pushl  0x8(%ebp)
   12a9b:	e8 93 fe ff ff       	call   12933 <tss_init>
   12aa0:	83 c4 10             	add    $0x10,%esp
   12aa3:	83 f8 ff             	cmp    $0xffffffff,%eax
   12aa6:	75 0a                	jne    12ab2 <task_init+0x29>
   12aa8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12aad:	e9 c8 00 00 00       	jmp    12b7a <task_init+0xf1>
    #endif

    k_strncpy(task->name, name, TASK_NAME_SIZE);        // 进程名
   12ab2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab5:	83 c0 08             	add    $0x8,%eax
   12ab8:	83 ec 04             	sub    $0x4,%esp
   12abb:	6a 20                	push   $0x20
   12abd:	ff 75 0c             	pushl  0xc(%ebp)
   12ac0:	50                   	push   %eax
   12ac1:	e8 da e7 ff ff       	call   112a0 <k_strncpy>
   12ac6:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;                         // 状态  created
   12ac9:	8b 45 08             	mov    0x8(%ebp),%eax
   12acc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;         //  最大时间片
   12ad3:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad6:	c7 40 34 0a 00 00 00 	movl   $0xa,0x34(%eax)
    task->slice_ticks = TASK_TIME_SLICE_DEFAULT;        //  当前时间片
   12add:	8b 45 08             	mov    0x8(%ebp),%eax
   12ae0:	c7 40 30 0a 00 00 00 	movl   $0xa,0x30(%eax)
    task->sleep_ticks = 0;
   12ae7:	8b 45 08             	mov    0x8(%ebp),%eax
   12aea:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    task->parent = (task_t*)0;
   12af1:	8b 45 08             	mov    0x8(%ebp),%eax
   12af4:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    list_node_init(&task->all_node); 
   12afb:	8b 45 08             	mov    0x8(%ebp),%eax
   12afe:	83 c0 44             	add    $0x44,%eax
   12b01:	83 ec 0c             	sub    $0xc,%esp
   12b04:	50                   	push   %eax
   12b05:	e8 b9 fd ff ff       	call   128c3 <list_node_init>
   12b0a:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   12b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b10:	83 c0 3c             	add    $0x3c,%eax
   12b13:	83 ec 0c             	sub    $0xc,%esp
   12b16:	50                   	push   %eax
   12b17:	e8 a7 fd ff ff       	call   128c3 <list_node_init>
   12b1c:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   12b1f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b22:	83 c0 4c             	add    $0x4c,%eax
   12b25:	83 ec 0c             	sub    $0xc,%esp
   12b28:	50                   	push   %eax
   12b29:	e8 95 fd ff ff       	call   128c3 <list_node_init>
   12b2e:	83 c4 10             	add    $0x10,%esp
    
    task->pid = (uint32_t)task;
   12b31:	8b 55 08             	mov    0x8(%ebp),%edx
   12b34:	8b 45 08             	mov    0x8(%ebp),%eax
   12b37:	89 50 28             	mov    %edx,0x28(%eax)

    irq_state_t state = irq_enter_proection();   //--enter protection
   12b3a:	e8 ac e4 ff ff       	call   10feb <irq_enter_proection>
   12b3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        task_set_ready(task);                                        // 加入到就绪队列
   12b42:	83 ec 0c             	sub    $0xc,%esp
   12b45:	ff 75 08             	pushl  0x8(%ebp)
   12b48:	e8 b3 01 00 00       	call   12d00 <task_set_ready>
   12b4d:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&g_task_manager.task_list, &task->all_node);  // 加入到所有队列
   12b50:	8b 45 08             	mov    0x8(%ebp),%eax
   12b53:	83 c0 44             	add    $0x44,%eax
   12b56:	83 ec 08             	sub    $0x8,%esp
   12b59:	50                   	push   %eax
   12b5a:	68 1c 80 01 00       	push   $0x1801c
   12b5f:	e8 10 ec ff ff       	call   11774 <list_insert_last>
   12b64:	83 c4 10             	add    $0x10,%esp
    irq_leave_proection(state);  //--leave protection
   12b67:	83 ec 0c             	sub    $0xc,%esp
   12b6a:	ff 75 f4             	pushl  -0xc(%ebp)
   12b6d:	e8 91 e4 ff ff       	call   11003 <irq_leave_proection>
   12b72:	83 c4 10             	add    $0x10,%esp

    return 0;
   12b75:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12b7a:	c9                   	leave  
   12b7b:	c3                   	ret    

00012b7c <task_manager_init>:

// 初始化任务管理
void task_manager_init() {
   12b7c:	55                   	push   %ebp
   12b7d:	89 e5                	mov    %esp,%ebp
   12b7f:	83 ec 18             	sub    $0x18,%esp
    k_memset(g_task_table, 0, sizeof(g_task_table));
   12b82:	83 ec 04             	sub    $0x4,%esp
   12b85:	68 00 60 00 00       	push   $0x6000
   12b8a:	6a 00                	push   $0x0
   12b8c:	68 c0 a1 01 00       	push   $0x1a1c0
   12b91:	e8 7e e8 ff ff       	call   11414 <k_memset>
   12b96:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   12b99:	83 ec 0c             	sub    $0xc,%esp
   12b9c:	68 c0 01 02 00       	push   $0x201c0
   12ba1:	e8 67 f9 ff ff       	call   1250d <mutex_init>
   12ba6:	83 c4 10             	add    $0x10,%esp


    int seld = gdt_alloc_desc();
   12ba9:	e8 34 d9 ff ff       	call   104e2 <gdt_alloc_desc>
   12bae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(seld, 0x00000000, 0xffffffff, 
   12bb1:	68 f2 40 00 00       	push   $0x40f2
   12bb6:	6a ff                	push   $0xffffffff
   12bb8:	6a 00                	push   $0x0
   12bba:	ff 75 f4             	pushl  -0xc(%ebp)
   12bbd:	e8 ff d7 ff ff       	call   103c1 <segment_desc_set>
   12bc2:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D
    );
    g_task_manager.app_data_sel = seld;
   12bc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12bc8:	a3 ac 81 01 00       	mov    %eax,0x181ac

    int selc = gdt_alloc_desc();
   12bcd:	e8 10 d9 ff ff       	call   104e2 <gdt_alloc_desc>
   12bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(selc, 0x00000000, 0xffffffff, 
   12bd5:	68 fa 40 00 00       	push   $0x40fa
   12bda:	6a ff                	push   $0xffffffff
   12bdc:	6a 00                	push   $0x0
   12bde:	ff 75 f0             	pushl  -0x10(%ebp)
   12be1:	e8 db d7 ff ff       	call   103c1 <segment_desc_set>
   12be6:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_CODE 
        | SEG_TYPE_RW | SEG_D
    );
    g_task_manager.app_code_sel = selc;
   12be9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12bec:	a3 a8 81 01 00       	mov    %eax,0x181a8

    list_init(&g_task_manager.ready_list);
   12bf1:	83 ec 0c             	sub    $0xc,%esp
   12bf4:	68 04 80 01 00       	push   $0x18004
   12bf9:	e8 f2 ea ff ff       	call   116f0 <list_init>
   12bfe:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.task_list);
   12c01:	83 ec 0c             	sub    $0xc,%esp
   12c04:	68 1c 80 01 00       	push   $0x1801c
   12c09:	e8 e2 ea ff ff       	call   116f0 <list_init>
   12c0e:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.sleep_list);
   12c11:	83 ec 0c             	sub    $0xc,%esp
   12c14:	68 10 80 01 00       	push   $0x18010
   12c19:	e8 d2 ea ff ff       	call   116f0 <list_init>
   12c1e:	83 c4 10             	add    $0x10,%esp
    g_task_manager.curr_task = get_first_task();
   12c21:	e8 c6 00 00 00       	call   12cec <get_first_task>
   12c26:	a3 00 80 01 00       	mov    %eax,0x18000
    
    task_init(&g_task_manager.idle_task,  
   12c2b:	ba c0 a1 01 00       	mov    $0x1a1c0,%edx
   12c30:	b8 0f 29 01 00       	mov    $0x1290f,%eax
   12c35:	83 ec 0c             	sub    $0xc,%esp
   12c38:	52                   	push   %edx
   12c39:	50                   	push   %eax
   12c3a:	6a 01                	push   $0x1
   12c3c:	68 fd 36 01 00       	push   $0x136fd
   12c41:	68 e8 80 01 00       	push   $0x180e8
   12c46:	e8 3e fe ff ff       	call   12a89 <task_init>
   12c4b:	83 c4 20             	add    $0x20,%esp
            "idle  task", 
            TASK_FLAGS_SYSTEM,
            (uint32_t)idle_task_func, 
            (uint32_t)&idle_task_stack[2048]
    );
}
   12c4e:	90                   	nop
   12c4f:	c9                   	leave  
   12c50:	c3                   	ret    

00012c51 <first_task_init>:


void first_task_init() {
   12c51:	55                   	push   %ebp
   12c52:	89 e5                	mov    %esp,%ebp
   12c54:	83 ec 18             	sub    $0x18,%esp

    void first_task_entry();
    extern uint8_t s_first_task[], e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   12c57:	ba b7 23 02 00       	mov    $0x223b7,%edx
   12c5c:	b8 e0 21 02 00       	mov    $0x221e0,%eax
   12c61:	29 c2                	sub    %eax,%edx
   12c63:	89 d0                	mov    %edx,%eax
   12c65:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   12c68:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)

    uint32_t first_start = (uint32_t)first_task_entry;
   12c6f:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    // first_start + alloc_size 栈顶
    task_init(&g_task_manager.first_task, 
   12c76:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12c79:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12c7c:	01 d0                	add    %edx,%eax
   12c7e:	83 ec 0c             	sub    $0xc,%esp
   12c81:	50                   	push   %eax
   12c82:	ff 75 ec             	pushl  -0x14(%ebp)
   12c85:	6a 00                	push   $0x0
   12c87:	68 08 37 01 00       	push   $0x13708
   12c8c:	68 28 80 01 00       	push   $0x18028
   12c91:	e8 f3 fd ff ff       	call   12a89 <task_init>
   12c96:	83 c4 20             	add    $0x20,%esp
            "first task", 0, 
            first_start, 
            first_start + alloc_size );
    
    mmu_set_page_dir((&g_task_manager)->first_task.tss.cr3);
   12c99:	a1 98 80 01 00       	mov    0x18098,%eax
   12c9e:	83 ec 0c             	sub    $0xc,%esp
   12ca1:	50                   	push   %eax
   12ca2:	e8 57 fc ff ff       	call   128fe <mmu_set_page_dir>
   12ca7:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   12caa:	83 ec 04             	sub    $0x4,%esp
   12cad:	6a 07                	push   $0x7
   12caf:	ff 75 f0             	pushl  -0x10(%ebp)
   12cb2:	ff 75 ec             	pushl  -0x14(%ebp)
   12cb5:	e8 28 f5 ff ff       	call   121e2 <memory_alloc_page_for>
   12cba:	83 c4 10             	add    $0x10,%esp
    k_memcpy( (void*)first_start, (void *)&s_first_task, copy_size );
   12cbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12cc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12cc3:	83 ec 04             	sub    $0x4,%esp
   12cc6:	52                   	push   %edx
   12cc7:	68 e0 21 02 00       	push   $0x221e0
   12ccc:	50                   	push   %eax
   12ccd:	e8 f3 e6 ff ff       	call   113c5 <k_memcpy>
   12cd2:	83 c4 10             	add    $0x10,%esp


    write_tr((&g_task_manager)->first_task.tss_sel);
   12cd5:	a1 e4 80 01 00       	mov    0x180e4,%eax
   12cda:	0f b7 c0             	movzwl %ax,%eax
   12cdd:	83 ec 0c             	sub    $0xc,%esp
   12ce0:	50                   	push   %eax
   12ce1:	e8 c6 fb ff ff       	call   128ac <write_tr>
   12ce6:	83 c4 10             	add    $0x10,%esp
}
   12ce9:	90                   	nop
   12cea:	c9                   	leave  
   12ceb:	c3                   	ret    

00012cec <get_first_task>:



task_t* get_first_task() {
   12cec:	55                   	push   %ebp
   12ced:	89 e5                	mov    %esp,%ebp
    return &g_task_manager.first_task;
   12cef:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   12cf4:	5d                   	pop    %ebp
   12cf5:	c3                   	ret    

00012cf6 <task_current>:

task_t* task_current() {
   12cf6:	55                   	push   %ebp
   12cf7:	89 e5                	mov    %esp,%ebp
    return g_task_manager.curr_task;
   12cf9:	a1 00 80 01 00       	mov    0x18000,%eax
}
   12cfe:	5d                   	pop    %ebp
   12cff:	c3                   	ret    

00012d00 <task_set_ready>:


// 将任务添加到就绪队列 尾部 设置状态为 ready
void task_set_ready(task_t* task) {
   12d00:	55                   	push   %ebp
   12d01:	89 e5                	mov    %esp,%ebp
   12d03:	83 ec 08             	sub    $0x8,%esp
    if (task == &g_task_manager.idle_task) {  // 空进程不应该加入就绪队列
   12d06:	81 7d 08 e8 80 01 00 	cmpl   $0x180e8,0x8(%ebp)
   12d0d:	74 23                	je     12d32 <task_set_ready+0x32>
        return;
    }

    list_insert_last(&g_task_manager.ready_list, &task->run_node);
   12d0f:	8b 45 08             	mov    0x8(%ebp),%eax
   12d12:	83 c0 3c             	add    $0x3c,%eax
   12d15:	83 ec 08             	sub    $0x8,%esp
   12d18:	50                   	push   %eax
   12d19:	68 04 80 01 00       	push   $0x18004
   12d1e:	e8 51 ea ff ff       	call   11774 <list_insert_last>
   12d23:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   12d26:	8b 45 08             	mov    0x8(%ebp),%eax
   12d29:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
   12d30:	eb 01                	jmp    12d33 <task_set_ready+0x33>
        return;
   12d32:	90                   	nop
}
   12d33:	c9                   	leave  
   12d34:	c3                   	ret    

00012d35 <task_set_block>:

// 将 特定 任务从就绪队列删除
void task_set_block(task_t* task) {
   12d35:	55                   	push   %ebp
   12d36:	89 e5                	mov    %esp,%ebp
   12d38:	83 ec 08             	sub    $0x8,%esp
    if (task == &g_task_manager.idle_task) {  // 空进程不应该删除
   12d3b:	81 7d 08 e8 80 01 00 	cmpl   $0x180e8,0x8(%ebp)
   12d42:	74 19                	je     12d5d <task_set_block+0x28>
        return;
    }
    list_delete(&g_task_manager.ready_list, &task->run_node);
   12d44:	8b 45 08             	mov    0x8(%ebp),%eax
   12d47:	83 c0 3c             	add    $0x3c,%eax
   12d4a:	83 ec 08             	sub    $0x8,%esp
   12d4d:	50                   	push   %eax
   12d4e:	68 04 80 01 00       	push   $0x18004
   12d53:	e8 f9 ea ff ff       	call   11851 <list_delete>
   12d58:	83 c4 10             	add    $0x10,%esp
   12d5b:	eb 01                	jmp    12d5e <task_set_block+0x29>
        return;
   12d5d:	90                   	nop
    // list_delete_first(&g_task_manager.ready_list);
}
   12d5e:	c9                   	leave  
   12d5f:	c3                   	ret    

00012d60 <sys_sched_yield>:

// 主动放弃cpu执行
int  sys_sched_yield() {
   12d60:	55                   	push   %ebp
   12d61:	89 e5                	mov    %esp,%ebp
   12d63:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12d66:	e8 80 e2 ff ff       	call   10feb <irq_enter_proection>
   12d6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if(list_count(&g_task_manager.ready_list) > 1) {
   12d6e:	83 ec 0c             	sub    $0xc,%esp
   12d71:	68 04 80 01 00       	push   $0x18004
   12d76:	e8 6e fb ff ff       	call   128e9 <list_count>
   12d7b:	83 c4 10             	add    $0x10,%esp
   12d7e:	83 f8 01             	cmp    $0x1,%eax
   12d81:	7e 29                	jle    12dac <sys_sched_yield+0x4c>
        task_t* curr = task_current();
   12d83:	e8 6e ff ff ff       	call   12cf6 <task_current>
   12d88:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   12d8b:	83 ec 0c             	sub    $0xc,%esp
   12d8e:	ff 75 f0             	pushl  -0x10(%ebp)
   12d91:	e8 9f ff ff ff       	call   12d35 <task_set_block>
   12d96:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   12d99:	83 ec 0c             	sub    $0xc,%esp
   12d9c:	ff 75 f0             	pushl  -0x10(%ebp)
   12d9f:	e8 5c ff ff ff       	call   12d00 <task_set_ready>
   12da4:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12da7:	e8 58 00 00 00       	call   12e04 <task_dispatch>
    }
    
    irq_leave_proection(state);  //--leave protection
   12dac:	83 ec 0c             	sub    $0xc,%esp
   12daf:	ff 75 f4             	pushl  -0xc(%ebp)
   12db2:	e8 4c e2 ff ff       	call   11003 <irq_leave_proection>
   12db7:	83 c4 10             	add    $0x10,%esp

    return 0;
   12dba:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12dbf:	c9                   	leave  
   12dc0:	c3                   	ret    

00012dc1 <task_next_run>:

// 从就绪队列中找到一第一个任务
task_t * task_next_run() {
   12dc1:	55                   	push   %ebp
   12dc2:	89 e5                	mov    %esp,%ebp
   12dc4:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&g_task_manager.ready_list) == 0) {
   12dc7:	68 04 80 01 00       	push   $0x18004
   12dcc:	e8 18 fb ff ff       	call   128e9 <list_count>
   12dd1:	83 c4 04             	add    $0x4,%esp
   12dd4:	85 c0                	test   %eax,%eax
   12dd6:	75 07                	jne    12ddf <task_next_run+0x1e>
        return &g_task_manager.idle_task;
   12dd8:	b8 e8 80 01 00       	mov    $0x180e8,%eax
   12ddd:	eb 23                	jmp    12e02 <task_next_run+0x41>
    }

    list_node_t * task_node = list_first(&g_task_manager.ready_list);
   12ddf:	68 04 80 01 00       	push   $0x18004
   12de4:	e8 0b fb ff ff       	call   128f4 <list_first>
   12de9:	83 c4 04             	add    $0x4,%esp
   12dec:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   12def:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   12df3:	74 08                	je     12dfd <task_next_run+0x3c>
   12df5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12df8:	83 e8 3c             	sub    $0x3c,%eax
   12dfb:	eb 05                	jmp    12e02 <task_next_run+0x41>
   12dfd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12e02:	c9                   	leave  
   12e03:	c3                   	ret    

00012e04 <task_dispatch>:

// 分配一个任务并从当前任务切换过去
void task_dispatch() {
   12e04:	55                   	push   %ebp
   12e05:	89 e5                	mov    %esp,%ebp
   12e07:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12e0a:	e8 dc e1 ff ff       	call   10feb <irq_enter_proection>
   12e0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * to = task_next_run();
   12e12:	e8 aa ff ff ff       	call   12dc1 <task_next_run>
   12e17:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != g_task_manager.curr_task) {
   12e1a:	a1 00 80 01 00       	mov    0x18000,%eax
   12e1f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12e22:	74 2b                	je     12e4f <task_dispatch+0x4b>
        task_t * from = task_current();
   12e24:	e8 cd fe ff ff       	call   12cf6 <task_current>
   12e29:	89 45 ec             	mov    %eax,-0x14(%ebp)

        g_task_manager.curr_task = to;   // 设置将要切换的任务为“当前任务”
   12e2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12e2f:	a3 00 80 01 00       	mov    %eax,0x18000
        to->state = TASK_RUNNING;      // 设置 task running
   12e34:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12e37:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

        task_switch_from_to(from, to);
   12e3e:	83 ec 08             	sub    $0x8,%esp
   12e41:	ff 75 f0             	pushl  -0x10(%ebp)
   12e44:	ff 75 ec             	pushl  -0x14(%ebp)
   12e47:	e8 cd fa ff ff       	call   12919 <task_switch_from_to>
   12e4c:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_proection(state);  //--leave protection
   12e4f:	83 ec 0c             	sub    $0xc,%esp
   12e52:	ff 75 f4             	pushl  -0xc(%ebp)
   12e55:	e8 a9 e1 ff ff       	call   11003 <irq_leave_proection>
   12e5a:	83 c4 10             	add    $0x10,%esp
   
}
   12e5d:	90                   	nop
   12e5e:	c9                   	leave  
   12e5f:	c3                   	ret    

00012e60 <task_time_tick>:

// 检查当前任务的时间片是否用完，若用完强制切换到下一任务
void task_time_tick() {
   12e60:	55                   	push   %ebp
   12e61:	89 e5                	mov    %esp,%ebp
   12e63:	83 ec 28             	sub    $0x28,%esp
    task_t* curr = task_current();
   12e66:	e8 8b fe ff ff       	call   12cf6 <task_current>
   12e6b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int slice = --curr->slice_ticks;
   12e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12e71:	8b 40 30             	mov    0x30(%eax),%eax
   12e74:	8d 50 ff             	lea    -0x1(%eax),%edx
   12e77:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12e7a:	89 50 30             	mov    %edx,0x30(%eax)
   12e7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12e80:	8b 40 30             	mov    0x30(%eax),%eax
   12e83:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if( slice == 0 && &g_task_manager.ready_list.count > 0) {
   12e86:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12e8a:	75 2d                	jne    12eb9 <task_time_tick+0x59>
        curr->slice_ticks = curr->time_ticks;
   12e8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12e8f:	8b 50 34             	mov    0x34(%eax),%edx
   12e92:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12e95:	89 50 30             	mov    %edx,0x30(%eax)

        task_set_block(curr);
   12e98:	83 ec 0c             	sub    $0xc,%esp
   12e9b:	ff 75 f0             	pushl  -0x10(%ebp)
   12e9e:	e8 92 fe ff ff       	call   12d35 <task_set_block>
   12ea3:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   12ea6:	83 ec 0c             	sub    $0xc,%esp
   12ea9:	ff 75 f0             	pushl  -0x10(%ebp)
   12eac:	e8 4f fe ff ff       	call   12d00 <task_set_ready>
   12eb1:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12eb4:	e8 4b ff ff ff       	call   12e04 <task_dispatch>
    }

    list_node_t* sleep_lists_curr = list_first(&g_task_manager.sleep_list);
   12eb9:	83 ec 0c             	sub    $0xc,%esp
   12ebc:	68 10 80 01 00       	push   $0x18010
   12ec1:	e8 2e fa ff ff       	call   128f4 <list_first>
   12ec6:	83 c4 10             	add    $0x10,%esp
   12ec9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   12ecc:	eb 62                	jmp    12f30 <task_time_tick+0xd0>
        list_node_t * next = list_node_next(sleep_lists_curr);
   12ece:	83 ec 0c             	sub    $0xc,%esp
   12ed1:	ff 75 f4             	pushl  -0xc(%ebp)
   12ed4:	e8 05 fa ff ff       	call   128de <list_node_next>
   12ed9:	83 c4 10             	add    $0x10,%esp
   12edc:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_t* task = list_node_parent(sleep_lists_curr, task_t, run_node);
   12edf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12ee3:	74 08                	je     12eed <task_time_tick+0x8d>
   12ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ee8:	83 e8 3c             	sub    $0x3c,%eax
   12eeb:	eb 05                	jmp    12ef2 <task_time_tick+0x92>
   12eed:	b8 00 00 00 00       	mov    $0x0,%eax
   12ef2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        
        if(--task->sleep_ticks == 0) {
   12ef5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12ef8:	8b 40 38             	mov    0x38(%eax),%eax
   12efb:	8d 50 ff             	lea    -0x1(%eax),%edx
   12efe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12f01:	89 50 38             	mov    %edx,0x38(%eax)
   12f04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12f07:	8b 40 38             	mov    0x38(%eax),%eax
   12f0a:	85 c0                	test   %eax,%eax
   12f0c:	75 1c                	jne    12f2a <task_time_tick+0xca>
            task_set_wakeup(task);
   12f0e:	83 ec 0c             	sub    $0xc,%esp
   12f11:	ff 75 e4             	pushl  -0x1c(%ebp)
   12f14:	e8 b8 00 00 00       	call   12fd1 <task_set_wakeup>
   12f19:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   12f1c:	83 ec 0c             	sub    $0xc,%esp
   12f1f:	ff 75 e4             	pushl  -0x1c(%ebp)
   12f22:	e8 d9 fd ff ff       	call   12d00 <task_set_ready>
   12f27:	83 c4 10             	add    $0x10,%esp
        }
        sleep_lists_curr = next;
   12f2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12f2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   12f30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12f34:	75 98                	jne    12ece <task_time_tick+0x6e>
    }

    task_dispatch();
   12f36:	e8 c9 fe ff ff       	call   12e04 <task_dispatch>
}
   12f3b:	90                   	nop
   12f3c:	c9                   	leave  
   12f3d:	c3                   	ret    

00012f3e <sys_sleep>:



void sys_sleep(uint32_t ms) {
   12f3e:	55                   	push   %ebp
   12f3f:	89 e5                	mov    %esp,%ebp
   12f41:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12f44:	e8 a2 e0 ff ff       	call   10feb <irq_enter_proection>
   12f49:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12f4c:	e8 a5 fd ff ff       	call   12cf6 <task_current>
   12f51:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_block(curr);
   12f54:	83 ec 0c             	sub    $0xc,%esp
   12f57:	ff 75 f0             	pushl  -0x10(%ebp)
   12f5a:	e8 d6 fd ff ff       	call   12d35 <task_set_block>
   12f5f:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(curr, ms / OS_TICK_MS);
   12f62:	8b 45 08             	mov    0x8(%ebp),%eax
   12f65:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   12f6a:	f7 e2                	mul    %edx
   12f6c:	89 d0                	mov    %edx,%eax
   12f6e:	c1 e8 03             	shr    $0x3,%eax
   12f71:	83 ec 08             	sub    $0x8,%esp
   12f74:	50                   	push   %eax
   12f75:	ff 75 f0             	pushl  -0x10(%ebp)
   12f78:	e8 19 00 00 00       	call   12f96 <task_set_sleep>
   12f7d:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   12f80:	e8 7f fe ff ff       	call   12e04 <task_dispatch>

    irq_leave_proection(state);
   12f85:	83 ec 0c             	sub    $0xc,%esp
   12f88:	ff 75 f4             	pushl  -0xc(%ebp)
   12f8b:	e8 73 e0 ff ff       	call   11003 <irq_leave_proection>
   12f90:	83 c4 10             	add    $0x10,%esp
}
   12f93:	90                   	nop
   12f94:	c9                   	leave  
   12f95:	c3                   	ret    

00012f96 <task_set_sleep>:

void task_set_sleep(task_t* task, uint32_t ticks) {
   12f96:	55                   	push   %ebp
   12f97:	89 e5                	mov    %esp,%ebp
   12f99:	83 ec 08             	sub    $0x8,%esp
    if(ticks <= 0) return;
   12f9c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12fa0:	74 2c                	je     12fce <task_set_sleep+0x38>
    task->sleep_ticks = ticks;
   12fa2:	8b 55 0c             	mov    0xc(%ebp),%edx
   12fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   12fa8:	89 50 38             	mov    %edx,0x38(%eax)
    task->state = TASK_SLEEP;
   12fab:	8b 45 08             	mov    0x8(%ebp),%eax
   12fae:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
    list_insert_last(&g_task_manager.sleep_list, 
   12fb5:	8b 45 08             	mov    0x8(%ebp),%eax
   12fb8:	83 c0 3c             	add    $0x3c,%eax
   12fbb:	83 ec 08             	sub    $0x8,%esp
   12fbe:	50                   	push   %eax
   12fbf:	68 10 80 01 00       	push   $0x18010
   12fc4:	e8 ab e7 ff ff       	call   11774 <list_insert_last>
   12fc9:	83 c4 10             	add    $0x10,%esp
   12fcc:	eb 01                	jmp    12fcf <task_set_sleep+0x39>
    if(ticks <= 0) return;
   12fce:	90                   	nop
        &task->run_node);
}
   12fcf:	c9                   	leave  
   12fd0:	c3                   	ret    

00012fd1 <task_set_wakeup>:

void task_set_wakeup(task_t* task) {
   12fd1:	55                   	push   %ebp
   12fd2:	89 e5                	mov    %esp,%ebp
   12fd4:	83 ec 08             	sub    $0x8,%esp
    list_delete(&g_task_manager.sleep_list, 
   12fd7:	8b 45 08             	mov    0x8(%ebp),%eax
   12fda:	83 c0 3c             	add    $0x3c,%eax
   12fdd:	83 ec 08             	sub    $0x8,%esp
   12fe0:	50                   	push   %eax
   12fe1:	68 10 80 01 00       	push   $0x18010
   12fe6:	e8 66 e8 ff ff       	call   11851 <list_delete>
   12feb:	83 c4 10             	add    $0x10,%esp
        &task->run_node);
}
   12fee:	90                   	nop
   12fef:	c9                   	leave  
   12ff0:	c3                   	ret    

00012ff1 <sys_getpid>:

int sys_getpid () {
   12ff1:	55                   	push   %ebp
   12ff2:	89 e5                	mov    %esp,%ebp
   12ff4:	83 ec 10             	sub    $0x10,%esp

    task_t* curr = task_current();
   12ff7:	e8 fa fc ff ff       	call   12cf6 <task_current>
   12ffc:	89 45 fc             	mov    %eax,-0x4(%ebp)

    return curr->pid;
   12fff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13002:	8b 40 28             	mov    0x28(%eax),%eax
}
   13005:	c9                   	leave  
   13006:	c3                   	ret    

00013007 <alloc_task>:


static task_t* alloc_task() {
   13007:	55                   	push   %ebp
   13008:	89 e5                	mov    %esp,%ebp
   1300a:	83 ec 18             	sub    $0x18,%esp
    task_t* task = (task_t*)0;
   1300d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&task_table_mutex);
   13014:	83 ec 0c             	sub    $0xc,%esp
   13017:	68 c0 01 02 00       	push   $0x201c0
   1301c:	e8 1a f5 ff ff       	call   1253b <mutex_lock>
   13021:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<128; i++) {
   13024:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1302b:	eb 2b                	jmp    13058 <alloc_task+0x51>
        task_t* curr = g_task_table + i;
   1302d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13030:	89 d0                	mov    %edx,%eax
   13032:	01 c0                	add    %eax,%eax
   13034:	01 d0                	add    %edx,%eax
   13036:	c1 e0 06             	shl    $0x6,%eax
   13039:	05 c0 a1 01 00       	add    $0x1a1c0,%eax
   1303e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if(curr->name[0] == '\0') {
   13041:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13044:	0f b6 40 08          	movzbl 0x8(%eax),%eax
   13048:	84 c0                	test   %al,%al
   1304a:	75 08                	jne    13054 <alloc_task+0x4d>
            task = curr;
   1304c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1304f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   13052:	eb 0a                	jmp    1305e <alloc_task+0x57>
    for(int i=0; i<128; i++) {
   13054:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13058:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   1305c:	7e cf                	jle    1302d <alloc_task+0x26>
        }
    }
    mutex_unlock(&task_table_mutex);
   1305e:	83 ec 0c             	sub    $0xc,%esp
   13061:	68 c0 01 02 00       	push   $0x201c0
   13066:	e8 64 f5 ff ff       	call   125cf <mutex_unlock>
   1306b:	83 c4 10             	add    $0x10,%esp
    return task;
   1306e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13071:	c9                   	leave  
   13072:	c3                   	ret    

00013073 <free_task>:

static void free_task(task_t* task) {
   13073:	55                   	push   %ebp
   13074:	89 e5                	mov    %esp,%ebp
   13076:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   13079:	83 ec 0c             	sub    $0xc,%esp
   1307c:	68 c0 01 02 00       	push   $0x201c0
   13081:	e8 b5 f4 ff ff       	call   1253b <mutex_lock>
   13086:	83 c4 10             	add    $0x10,%esp
    task->name[0] = '\0';
   13089:	8b 45 08             	mov    0x8(%ebp),%eax
   1308c:	c6 40 08 00          	movb   $0x0,0x8(%eax)
    mutex_unlock(&task_table_mutex);
   13090:	83 ec 0c             	sub    $0xc,%esp
   13093:	68 c0 01 02 00       	push   $0x201c0
   13098:	e8 32 f5 ff ff       	call   125cf <mutex_unlock>
   1309d:	83 c4 10             	add    $0x10,%esp
}
   130a0:	90                   	nop
   130a1:	c9                   	leave  
   130a2:	c3                   	ret    

000130a3 <task_uninit>:

static void task_uninit(task_t* task) {
   130a3:	55                   	push   %ebp
   130a4:	89 e5                	mov    %esp,%ebp
   130a6:	83 ec 08             	sub    $0x8,%esp
    if(task->tss_sel) {
   130a9:	8b 45 08             	mov    0x8(%ebp),%eax
   130ac:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
   130b2:	85 c0                	test   %eax,%eax
   130b4:	74 15                	je     130cb <task_uninit+0x28>
        gdt_free_sel(task->tss_sel);
   130b6:	8b 45 08             	mov    0x8(%ebp),%eax
   130b9:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
   130bf:	83 ec 0c             	sub    $0xc,%esp
   130c2:	50                   	push   %eax
   130c3:	e8 8f d4 ff ff       	call   10557 <gdt_free_sel>
   130c8:	83 c4 10             	add    $0x10,%esp
    }
    if(task->tss.esp0) {
   130cb:	8b 45 08             	mov    0x8(%ebp),%eax
   130ce:	8b 40 58             	mov    0x58(%eax),%eax
   130d1:	85 c0                	test   %eax,%eax
   130d3:	74 1a                	je     130ef <task_uninit+0x4c>
        memory_free_page(task->tss.esp - MEM_PAGE_SIZE);
   130d5:	8b 45 08             	mov    0x8(%ebp),%eax
   130d8:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
   130de:	2d 00 10 00 00       	sub    $0x1000,%eax
   130e3:	83 ec 0c             	sub    $0xc,%esp
   130e6:	50                   	push   %eax
   130e7:	e8 4d f1 ff ff       	call   12239 <memory_free_page>
   130ec:	83 c4 10             	add    $0x10,%esp
    }
    if(task->tss.cr3) {
   130ef:	8b 45 08             	mov    0x8(%ebp),%eax
   130f2:	8b 40 70             	mov    0x70(%eax),%eax
   130f5:	85 c0                	test   %eax,%eax
   130f7:	74 12                	je     1310b <task_uninit+0x68>
        memory_destory_uvm(task->tss.cr3);
   130f9:	8b 45 08             	mov    0x8(%ebp),%eax
   130fc:	8b 40 70             	mov    0x70(%eax),%eax
   130ff:	83 ec 0c             	sub    $0xc,%esp
   13102:	50                   	push   %eax
   13103:	e8 be f1 ff ff       	call   122c6 <memory_destory_uvm>
   13108:	83 c4 10             	add    $0x10,%esp
    }

    k_memset(task, 0, sizeof(task_t));
   1310b:	83 ec 04             	sub    $0x4,%esp
   1310e:	68 c0 00 00 00       	push   $0xc0
   13113:	6a 00                	push   $0x0
   13115:	ff 75 08             	pushl  0x8(%ebp)
   13118:	e8 f7 e2 ff ff       	call   11414 <k_memset>
   1311d:	83 c4 10             	add    $0x10,%esp
}
   13120:	90                   	nop
   13121:	c9                   	leave  
   13122:	c3                   	ret    

00013123 <sys_fork>:


int sys_fork() {
   13123:	55                   	push   %ebp
   13124:	89 e5                	mov    %esp,%ebp
   13126:	83 ec 28             	sub    $0x28,%esp
    task_t* parent_task = task_current();
   13129:	e8 c8 fb ff ff       	call   12cf6 <task_current>
   1312e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* child_task = alloc_task();
   13131:	e8 d1 fe ff ff       	call   13007 <alloc_task>
   13136:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t*)0) goto fork_failed;
   13139:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1313d:	0f 84 1c 01 00 00    	je     1325f <sys_fork+0x13c>


    syscall_frame_t* frame = (syscall_frame_t*)( parent_task->tss.esp0 
   13143:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13146:	8b 40 58             	mov    0x58(%eax),%eax
        - sizeof(syscall_frame_t));
   13149:	83 e8 58             	sub    $0x58,%eax
    syscall_frame_t* frame = (syscall_frame_t*)( parent_task->tss.esp0 
   1314c:	89 45 ec             	mov    %eax,-0x14(%ebp)


    int err = task_init(child_task, parent_task->name, 0, frame->eip, 
        frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT );
   1314f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13152:	8b 40 50             	mov    0x50(%eax),%eax
   13155:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task, parent_task->name, 0, frame->eip, 
   13158:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1315b:	8b 40 34             	mov    0x34(%eax),%eax
   1315e:	89 c1                	mov    %eax,%ecx
   13160:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13163:	83 c0 08             	add    $0x8,%eax
   13166:	83 ec 0c             	sub    $0xc,%esp
   13169:	52                   	push   %edx
   1316a:	51                   	push   %ecx
   1316b:	6a 00                	push   $0x0
   1316d:	50                   	push   %eax
   1316e:	ff 75 f0             	pushl  -0x10(%ebp)
   13171:	e8 13 f9 ff ff       	call   12a89 <task_init>
   13176:	83 c4 20             	add    $0x20,%esp
   13179:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) goto fork_failed;
   1317c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   13180:	0f 88 dc 00 00 00    	js     13262 <sys_fork+0x13f>

    tss_t* tss = &child_task->tss;
   13186:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13189:	83 c0 54             	add    $0x54,%eax
   1318c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0;                       // 子进程返回0
   1318f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   13192:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   13199:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1319c:	8b 50 24             	mov    0x24(%eax),%edx
   1319f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   131a2:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   131a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   131a8:	8b 50 2c             	mov    0x2c(%eax),%edx
   131ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   131ae:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   131b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   131b4:	8b 50 28             	mov    0x28(%eax),%edx
   131b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   131ba:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   131bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   131c0:	8b 50 18             	mov    0x18(%eax),%edx
   131c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   131c6:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   131c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   131cc:	8b 50 14             	mov    0x14(%eax),%edx
   131cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   131d2:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   131d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   131d8:	8b 50 1c             	mov    0x1c(%eax),%edx
   131db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   131de:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs  = frame->cs;
   131e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   131e4:	8b 40 38             	mov    0x38(%eax),%eax
   131e7:	89 c2                	mov    %eax,%edx
   131e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   131ec:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds  = frame->ds;
   131ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
   131f2:	8b 40 10             	mov    0x10(%eax),%eax
   131f5:	89 c2                	mov    %eax,%edx
   131f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   131fa:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es  = frame->es;
   131fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13200:	8b 40 0c             	mov    0xc(%eax),%eax
   13203:	89 c2                	mov    %eax,%edx
   13205:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   13208:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs  = frame->fs;
   1320b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1320e:	8b 40 08             	mov    0x8(%eax),%eax
   13211:	89 c2                	mov    %eax,%edx
   13213:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   13216:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs  = frame->gs;
   13219:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1321c:	8b 40 04             	mov    0x4(%eax),%eax
   1321f:	89 c2                	mov    %eax,%edx
   13221:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   13224:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   13227:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1322a:	8b 00                	mov    (%eax),%eax
   1322c:	89 c2                	mov    %eax,%edx
   1322e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   13231:	89 50 24             	mov    %edx,0x24(%eax)
    

    child_task->parent = parent_task;
   13234:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13237:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1323a:	89 50 2c             	mov    %edx,0x2c(%eax)

    if( (tss->cr3 = memory_copy_uvm(parent_task->tss.cr3) ) < 0) {
   1323d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13240:	8b 40 70             	mov    0x70(%eax),%eax
   13243:	83 ec 0c             	sub    $0xc,%esp
   13246:	50                   	push   %eax
   13247:	e8 61 f1 ff ff       	call   123ad <memory_copy_uvm>
   1324c:	83 c4 10             	add    $0x10,%esp
   1324f:	89 c2                	mov    %eax,%edx
   13251:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   13254:	89 50 1c             	mov    %edx,0x1c(%eax)
    }


    // tss->cr3 = parent_task->tss.cr3;

    return child_task->pid;
   13257:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1325a:	8b 40 28             	mov    0x28(%eax),%eax
   1325d:	eb 2b                	jmp    1328a <sys_fork+0x167>
    if (child_task == (task_t*)0) goto fork_failed;
   1325f:	90                   	nop
   13260:	eb 01                	jmp    13263 <sys_fork+0x140>
    if (err < 0) goto fork_failed;
   13262:	90                   	nop


fork_failed:
    if(child_task) {
   13263:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13267:	74 1c                	je     13285 <sys_fork+0x162>
        task_uninit(child_task);
   13269:	83 ec 0c             	sub    $0xc,%esp
   1326c:	ff 75 f0             	pushl  -0x10(%ebp)
   1326f:	e8 2f fe ff ff       	call   130a3 <task_uninit>
   13274:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   13277:	83 ec 0c             	sub    $0xc,%esp
   1327a:	ff 75 f0             	pushl  -0x10(%ebp)
   1327d:	e8 f1 fd ff ff       	call   13073 <free_task>
   13282:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   13285:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1328a:	c9                   	leave  
   1328b:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
    .text
    .global first_task_entry
    .extern first_task_main
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
8000000b:	e9 d6 00 00 00       	jmp    800000e6 <first_task_main>

80000010 <sys_call>:
} syscall_arg_t ;



static inline int 
sys_call (syscall_arg_t * args) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    int ret;
	volatile uint32_t addr[] = {0,  SELECTOR_SYSCALL | 0};
80000019:	b8 00 00 00 00       	mov    $0x0,%eax
8000001e:	ba 18 00 00 00       	mov    $0x18,%edx
80000023:	89 45 e8             	mov    %eax,-0x18(%ebp)
80000026:	89 55 ec             	mov    %edx,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[a])"       
        :"=a"(ret)              //  output
        :[arg3]"r"(args->arg3), //  input
80000029:	8b 45 08             	mov    0x8(%ebp),%eax
8000002c:	8b 40 10             	mov    0x10(%eax),%eax
        [arg2]"r"(args->arg2), 
8000002f:	8b 55 08             	mov    0x8(%ebp),%edx
80000032:	8b 52 0c             	mov    0xc(%edx),%edx
        [arg1]"r"(args->arg1), 
80000035:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000038:	8b 49 08             	mov    0x8(%ecx),%ecx
        [arg0]"r"(args->arg0), 
8000003b:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003e:	8b 5b 04             	mov    0x4(%ebx),%ebx
        [id]"r"(args->id), 
80000041:	8b 75 08             	mov    0x8(%ebp),%esi
80000044:	8b 36                	mov    (%esi),%esi
	__asm__ __volatile__(
80000046:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000049:	50                   	push   %eax
8000004a:	52                   	push   %edx
8000004b:	51                   	push   %ecx
8000004c:	53                   	push   %ebx
8000004d:	56                   	push   %esi
8000004e:	ff 1f                	lcall  *(%edi)
80000050:	89 45 f0             	mov    %eax,-0x10(%ebp)
        [a]"r"(addr)
    );

    return ret;
80000053:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000056:	83 c4 10             	add    $0x10,%esp
80000059:	5b                   	pop    %ebx
8000005a:	5e                   	pop    %esi
8000005b:	5f                   	pop    %edi
8000005c:	5d                   	pop    %ebp
8000005d:	c3                   	ret    

8000005e <msleep>:


static inline void 
msleep(int ms) {
8000005e:	55                   	push   %ebp
8000005f:	89 e5                	mov    %esp,%ebp
80000061:	83 ec 20             	sub    $0x20,%esp
    if(ms <= 0) { return; }
80000064:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000068:	7e 1b                	jle    80000085 <msleep+0x27>
    syscall_arg_t args;
    args.id = SYS_sleep;
8000006a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000071:	8b 45 08             	mov    0x8(%ebp),%eax
80000074:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000077:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000007a:	50                   	push   %eax
8000007b:	e8 90 ff ff ff       	call   80000010 <sys_call>
80000080:	83 c4 04             	add    $0x4,%esp
80000083:	eb 01                	jmp    80000086 <msleep+0x28>
    if(ms <= 0) { return; }
80000085:	90                   	nop
}
80000086:	c9                   	leave  
80000087:	c3                   	ret    

80000088 <getpid>:

static inline int
getpid() {
80000088:	55                   	push   %ebp
80000089:	89 e5                	mov    %esp,%ebp
8000008b:	83 ec 20             	sub    $0x20,%esp
    syscall_arg_t args;
    args.id = SYS_getpid;
8000008e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000095:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000098:	50                   	push   %eax
80000099:	e8 72 ff ff ff       	call   80000010 <sys_call>
8000009e:	83 c4 04             	add    $0x4,%esp
}
800000a1:	c9                   	leave  
800000a2:	c3                   	ret    

800000a3 <print_msg>:

static inline void 
print_msg (const char*fmt, int arg) {
800000a3:	55                   	push   %ebp
800000a4:	89 e5                	mov    %esp,%ebp
800000a6:	83 ec 20             	sub    $0x20,%esp
    syscall_arg_t args;
    args.id = SYS_print_msg;
800000a9:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    args.arg0 = (int)fmt;
800000b0:	8b 45 08             	mov    0x8(%ebp),%eax
800000b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800000b6:	8b 45 0c             	mov    0xc(%ebp),%eax
800000b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
800000bc:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000bf:	50                   	push   %eax
800000c0:	e8 4b ff ff ff       	call   80000010 <sys_call>
800000c5:	83 c4 04             	add    $0x4,%esp
}
800000c8:	90                   	nop
800000c9:	c9                   	leave  
800000ca:	c3                   	ret    

800000cb <fork>:

static inline int
fork() {
800000cb:	55                   	push   %ebp
800000cc:	89 e5                	mov    %esp,%ebp
800000ce:	83 ec 20             	sub    $0x20,%esp
    syscall_arg_t args;
    args.id = SYS_fork;
800000d1:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    return sys_call(&args);
800000d8:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000db:	50                   	push   %eax
800000dc:	e8 2f ff ff ff       	call   80000010 <sys_call>
800000e1:	83 c4 04             	add    $0x4,%esp
}
800000e4:	c9                   	leave  
800000e5:	c3                   	ret    

800000e6 <first_task_main>:
#include <applib/lib_syscall.h>



int first_task_main() {
800000e6:	55                   	push   %ebp
800000e7:	89 e5                	mov    %esp,%ebp
800000e9:	83 ec 10             	sub    $0x10,%esp
    int count = 1;
800000ec:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    int pare_pid = getpid();
800000f3:	e8 90 ff ff ff       	call   80000088 <getpid>
800000f8:	89 45 f8             	mov    %eax,-0x8(%ebp)

    int pid = fork();
800000fb:	e8 cb ff ff ff       	call   800000cb <fork>
80000100:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pid < 0) {
80000103:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80000107:	79 11                	jns    8000011a <first_task_main+0x34>
        print_msg("fork failed %d", 0);
80000109:	6a 00                	push   $0x0
8000010b:	68 7b 01 00 80       	push   $0x8000017b
80000110:	e8 8e ff ff ff       	call   800000a3 <print_msg>
80000115:	83 c4 08             	add    $0x8,%esp
80000118:	eb 42                	jmp    8000015c <first_task_main+0x76>

    } else if (pid == 0) {
8000011a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8000011e:	75 15                	jne    80000135 <first_task_main+0x4f>
        count += 20;
80000120:	83 45 fc 14          	addl   $0x14,-0x4(%ebp)
        print_msg("create child:  id=%d", 0);
80000124:	6a 00                	push   $0x0
80000126:	68 8a 01 00 80       	push   $0x8000018a
8000012b:	e8 73 ff ff ff       	call   800000a3 <print_msg>
80000130:	83 c4 08             	add    $0x8,%esp
80000133:	eb 27                	jmp    8000015c <first_task_main+0x76>

    } else {
        count += 1000;
80000135:	81 45 fc e8 03 00 00 	addl   $0x3e8,-0x4(%ebp)
        print_msg("child task  :  id=%d", pid);
8000013c:	ff 75 f4             	pushl  -0xc(%ebp)
8000013f:	68 9f 01 00 80       	push   $0x8000019f
80000144:	e8 5a ff ff ff       	call   800000a3 <print_msg>
80000149:	83 c4 08             	add    $0x8,%esp
        print_msg("parent      :  id=%d", pare_pid);
8000014c:	ff 75 f8             	pushl  -0x8(%ebp)
8000014f:	68 b4 01 00 80       	push   $0x800001b4
80000154:	e8 4a ff ff ff       	call   800000a3 <print_msg>
80000159:	83 c4 08             	add    $0x8,%esp
    }

    for(;;) {

        print_msg("current id=%d", pid);
8000015c:	ff 75 f4             	pushl  -0xc(%ebp)
8000015f:	68 c9 01 00 80       	push   $0x800001c9
80000164:	e8 3a ff ff ff       	call   800000a3 <print_msg>
80000169:	83 c4 08             	add    $0x8,%esp
        msleep(1000);
8000016c:	68 e8 03 00 00       	push   $0x3e8
80000171:	e8 e8 fe ff ff       	call   8000005e <msleep>
80000176:	83 c4 04             	add    $0x4,%esp
        print_msg("current id=%d", pid);
80000179:	eb e1                	jmp    8000015c <first_task_main+0x76>
8000017b:	66 6f                	outsw  %ds:(%esi),(%dx)
8000017d:	72 6b                	jb     800001ea <first_task_main+0x104>
8000017f:	20 66 61             	and    %ah,0x61(%esi)
80000182:	69 6c 65 64 20 25 64 	imul   $0x642520,0x64(%ebp,%eiz,2),%ebp
80000189:	00 
8000018a:	63 72 65             	arpl   %si,0x65(%edx)
8000018d:	61                   	popa   
8000018e:	74 65                	je     800001f5 <first_task_main+0x10f>
80000190:	20 63 68             	and    %ah,0x68(%ebx)
80000193:	69 6c 64 3a 20 20 69 	imul   $0x64692020,0x3a(%esp,%eiz,2),%ebp
8000019a:	64 
8000019b:	3d 25 64 00 63       	cmp    $0x63006425,%eax
800001a0:	68 69 6c 64 20       	push   $0x20646c69
800001a5:	74 61                	je     80000208 <first_task_main+0x122>
800001a7:	73 6b                	jae    80000214 <first_task_main+0x12e>
800001a9:	20 20                	and    %ah,(%eax)
800001ab:	3a 20                	cmp    (%eax),%ah
800001ad:	20 69 64             	and    %ch,0x64(%ecx)
800001b0:	3d 25 64 00 70       	cmp    $0x70006425,%eax
800001b5:	61                   	popa   
800001b6:	72 65                	jb     8000021d <first_task_main+0x137>
800001b8:	6e                   	outsb  %ds:(%esi),(%dx)
800001b9:	74 20                	je     800001db <first_task_main+0xf5>
800001bb:	20 20                	and    %ah,(%eax)
800001bd:	20 20                	and    %ah,(%eax)
800001bf:	20 3a                	and    %bh,(%edx)
800001c1:	20 20                	and    %ah,(%eax)
800001c3:	69 64 3d 25 64 00 63 	imul   $0x75630064,0x25(%ebp,%edi,1),%esp
800001ca:	75 
800001cb:	72 72                	jb     8000023f <first_task_main+0x159>
800001cd:	65 6e                	outsb  %gs:(%esi),(%dx)
800001cf:	74 20                	je     800001f1 <first_task_main+0x10b>
800001d1:	69                   	.byte 0x69
800001d2:	64                   	fs
800001d3:	3d                   	.byte 0x3d
800001d4:	25                   	.byte 0x25
800001d5:	64                   	fs
	...
