
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000154c memsz 0x0000154c flags r-x
    LOAD off    0x00003000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000004 memsz 0x00004c60 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001308  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000244  00011308  00011308  00002308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00020000  00020000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004c40  00020020  00020020  00003004  2**5
                  ALLOC
  4 .debug_line   00000878  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013f5  00000000  00000000  0000387c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ba  00000000  00000000  00004c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000000e0  00000000  00000000  00005330  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000006e7  00000000  00000000  00005410  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00005af7  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000848  00000000  00000000  00005b08  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011308 l    d  .rodata	00000000 .rodata
00020000 l    d  .data	00000000 .data
00020020 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
00000000 l    df *ABS*	00000000 cpu.c
00010339 l     F .text	00000007 hlt
00010340 l     F .text	00000007 cli
00010347 l     F .text	00000007 sti
0001034e l     F .text	00000028 lgdt
00010376 l     F .text	00000028 lidt
0001039e l     F .text	0000001d inb
000103bb l     F .text	0000001f outb
00020020 l     O .bss	00000800 gdt_table2
00020820 l     O .bss	00000400 idt_table
00010512 l     F .text	00000030 default_handler
000107e9 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010b54 l     F .text	0000001f outb
00020c20 l     O .bss	00000004 sys_tick
00010b96 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 init.c
00020c40 l     O .bss	00000004 task1
00020c44 l     O .bss	00000004 task2
00020c60 l     O .bss	00001000 task1_stack
00021c60 l     O .bss	00001000 task2_stack
00000000 l    df *ABS*	00000000 klib.c
00020000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 log.c
00011199 l     F .text	0000001d inb
000111b6 l     F .text	0000001f outb
00010b1e g     F .text	0000000b irq_enable_global
000105ce g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
00010756 g     F .text	0000001c handle_virtual_exception
000111d5 g     F .text	00000075 log_init
00010cad g     F .text	00000068 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00010c6f g     F .text	0000003e task2_func
00010dcc g     F .text	0000007a k_strncmp
00010676 g     F .text	0000001c handle_segment_not_present
00010a01 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
0001057a g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
000101b3 g       .text	00000000 exception_handler_general_protection
000106ca g     F .text	0000001c handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010b29 g     F .text	0000002b pic_send_eoi
00010c31 g     F .text	0000003e task1_func
00010d15 g     F .text	00000047 k_strcpy
00010d5c g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010460 g     F .text	0000006d gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
00022c60 g     O .bss	00002000 stack
00010606 g     F .text	0000001c handle_invalid_opcode
00010e46 g     F .text	0000003b k_strlen
00010f11 g     F .text	00000064 k_memcmp
000100e2 g       .text	00000000 exception_handler_bound_range
0001015c g       .text	00000000 exception_handler_invalid_tss
0001104c g     F .text	0000014d k_vsprint
00010047 g       .text	00000000 exception_handler_divider
000106e6 g     F .text	0000001c handle_fpu_error
00010b13 g     F .text	0000000b irq_disable_global
00010542 g     F .text	0000001c handle_unknown
00010c0f g     F .text	00000022 kernel_init
00010ed0 g     F .text	00000041 k_memset
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010229 g       .text	00000000 exception_handler_machine_check
000107b9 g     F .text	00000030 irq_install
0001073a g     F .text	0000001c handle_smd_exception
00010a8c g     F .text	00000087 irq_disable
000106ae g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
00010702 g     F .text	0000001c handle_alignment_check
0001071e g     F .text	0000001c handle_machine_check
00010692 g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
000105ea g     F .text	0000001c handle_bound_range
000101ed g       .text	00000000 exception_handler_fpu_error
000102ba g     F .text	0000001e task_switch_from_to
0001087c g     F .text	00000185 irq_init
00010f75 g     F .text	000000d7 k_itoa
0001063e g     F .text	0000001c handle_double_fault
00010b73 g     F .text	00000023 handle_time
000103da g     F .text	00000086 segment_desc_set
000105b2 g     F .text	0000001c handle_breakpoint
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010066 g       .text	00000000 exception_handler_Debug
00010622 g     F .text	0000001c handle_device_unavailable
0001055e g     F .text	0000001c handle_divider
00010e81 g     F .text	0000004f k_memcpy
000102d8 g     F .text	00000061 task_init
000104cd g     F .text	00000045 gdt_alloc_desc
00010772 g     F .text	00000047 gate_desc_set
0001124a g     F .text	000000be klog
00010596 g     F .text	0000001c handle_NMI
0001065a g     F .text	0000001c handle_invalid_tss
00010bf7 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 06 0c 00 00       	call   10c0f <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc 60 4c 02 00       	mov    $0x24c60,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 85 0c 00 00       	jmp    10cad <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 09 05 00 00       	call   10542 <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 06 05 00 00       	call   1055e <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 03 05 00 00       	call   1057a <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 00 05 00 00       	call   10596 <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 fd 04 00 00       	call   105b2 <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 fa 04 00 00       	call   105ce <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 f7 04 00 00       	call   105ea <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 f4 04 00 00       	call   10606 <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 f1 04 00 00       	call   10622 <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 f0 04 00 00       	call   1063e <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 ef 04 00 00       	call   1065a <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 ee 04 00 00       	call   10676 <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 ed 04 00 00       	call   10692 <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 ec 04 00 00       	call   106ae <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 eb 04 00 00       	call   106ca <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 e8 04 00 00       	call   106e6 <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 e7 04 00 00       	call   10702 <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 e4 04 00 00       	call   1071e <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 e1 04 00 00       	call   1073a <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 de 04 00 00       	call   10756 <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 dc 08 00 00       	call   10b73 <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch
    
simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)


    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp

   102b9:	c3                   	ret    

000102ba <task_switch_from_to>:
#include <log.h>
#include <comm/cpu_ins.h>

void simple_switch(uint32_t **from, uint32_t* to);

void task_switch_from_to(task_t* from, task_t* to) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
   102bd:	83 ec 08             	sub    $0x8,%esp

    simple_switch(&from->stack, to->stack);
   102c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c3:	8b 10                	mov    (%eax),%edx
   102c5:	8b 45 08             	mov    0x8(%ebp),%eax
   102c8:	83 ec 08             	sub    $0x8,%esp
   102cb:	52                   	push   %edx
   102cc:	50                   	push   %eax
   102cd:	e8 d3 ff ff ff       	call   102a5 <simple_switch>
   102d2:	83 c4 10             	add    $0x10,%esp
}
   102d5:	90                   	nop
   102d6:	c9                   	leave  
   102d7:	c3                   	ret    

000102d8 <task_init>:

int task_init(task_t* task, uint32_t entry, uint32_t esp) {
   102d8:	55                   	push   %ebp
   102d9:	89 e5                	mov    %esp,%ebp
   102db:	83 ec 10             	sub    $0x10,%esp

    uint32_t* pesp = (uint32_t*)esp;
   102de:	8b 45 10             	mov    0x10(%ebp),%eax
   102e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(pesp) {
   102e4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   102e8:	74 48                	je     10332 <task_init+0x5a>
        *(--pesp) = entry;
   102ea:	83 6d fc 04          	subl   $0x4,-0x4(%ebp)
   102ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   102f1:	8b 55 0c             	mov    0xc(%ebp),%edx
   102f4:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;
   102f6:	83 6d fc 04          	subl   $0x4,-0x4(%ebp)
   102fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   102fd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   10303:	83 6d fc 04          	subl   $0x4,-0x4(%ebp)
   10307:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1030a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   10310:	83 6d fc 04          	subl   $0x4,-0x4(%ebp)
   10314:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10317:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   1031d:	83 6d fc 04          	subl   $0x4,-0x4(%ebp)
   10321:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10324:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        task->stack = pesp;
   1032a:	8b 45 08             	mov    0x8(%ebp),%eax
   1032d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   10330:	89 10                	mov    %edx,(%eax)
    }

    return 0;
   10332:	b8 00 00 00 00       	mov    $0x0,%eax
   10337:	c9                   	leave  
   10338:	c3                   	ret    

00010339 <hlt>:
#ifndef CPU_INS_H
#define CPU_INS_H

#include <comm/types.h>

static inline void hlt() {
   10339:	55                   	push   %ebp
   1033a:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   1033c:	f4                   	hlt    
}
   1033d:	90                   	nop
   1033e:	5d                   	pop    %ebp
   1033f:	c3                   	ret    

00010340 <cli>:

static inline void cli() {
   10340:	55                   	push   %ebp
   10341:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   10343:	fa                   	cli    
}
   10344:	90                   	nop
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <sti>:

static inline void sti() {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   1034a:	fb                   	sti    
}
   1034b:	90                   	nop
   1034c:	5d                   	pop    %ebp
   1034d:	c3                   	ret    

0001034e <lgdt>:

static inline void lgdt(uint32_t start, uint32_t size) {
   1034e:	55                   	push   %ebp
   1034f:	89 e5                	mov    %esp,%ebp
   10351:	83 ec 10             	sub    $0x10,%esp
		uint16_t limit;
		uint16_t start15_0;
		uint16_t start31_16;
	} gdt;

	gdt.start31_16 = start >> 16;
   10354:	8b 45 08             	mov    0x8(%ebp),%eax
   10357:	c1 e8 10             	shr    $0x10,%eax
   1035a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   1035e:	8b 45 08             	mov    0x8(%ebp),%eax
   10361:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   10365:	8b 45 0c             	mov    0xc(%ebp),%eax
   10368:	83 e8 01             	sub    $0x1,%eax
   1036b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1036f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10373:	90                   	nop
   10374:	c9                   	leave  
   10375:	c3                   	ret    

00010376 <lidt>:

static inline void lidt(uint32_t start, uint32_t size) {
   10376:	55                   	push   %ebp
   10377:	89 e5                	mov    %esp,%ebp
   10379:	83 ec 10             	sub    $0x10,%esp
		uint16_t limit;
		uint16_t start15_0;
		uint16_t start31_16;
	} idt;

	idt.start31_16 = start >> 16;
   1037c:	8b 45 08             	mov    0x8(%ebp),%eax
   1037f:	c1 e8 10             	shr    $0x10,%eax
   10382:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   1038d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10390:	83 e8 01             	sub    $0x1,%eax
   10393:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

	__asm__ __volatile__("lidt %0"::"m"(idt));
   10397:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1039b:	90                   	nop
   1039c:	c9                   	leave  
   1039d:	c3                   	ret    

0001039e <inb>:

static inline uint8_t inb(uint16_t  port) {
   1039e:	55                   	push   %ebp
   1039f:	89 e5                	mov    %esp,%ebp
   103a1:	83 ec 14             	sub    $0x14,%esp
   103a4:	8b 45 08             	mov    0x8(%ebp),%eax
   103a7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint8_t rv;
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   103ab:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   103af:	89 c2                	mov    %eax,%edx
   103b1:	ec                   	in     (%dx),%al
   103b2:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   103b5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   103b9:	c9                   	leave  
   103ba:	c3                   	ret    

000103bb <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   103bb:	55                   	push   %ebp
   103bc:	89 e5                	mov    %esp,%ebp
   103be:	83 ec 08             	sub    $0x8,%esp
   103c1:	8b 55 08             	mov    0x8(%ebp),%edx
   103c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103c7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   103cb:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   103ce:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   103d2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   103d6:	ee                   	out    %al,(%dx)
}
   103d7:	90                   	nop
   103d8:	c9                   	leave  
   103d9:	c3                   	ret    

000103da <segment_desc_set>:
#define IDT_TABLE_NR 128
static segment_desc_t gdt_table2[GDT_TABLE_SIZE];
static gate_desc_t idt_table[IDT_TABLE_NR];


void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   103da:	55                   	push   %ebp
   103db:	89 e5                	mov    %esp,%ebp
   103dd:	83 ec 14             	sub    $0x14,%esp
   103e0:	8b 45 14             	mov    0x14(%ebp),%eax
   103e3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table2 + (selector >> 3);
   103e7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ea:	c1 f8 03             	sar    $0x3,%eax
   103ed:	c1 e0 03             	shl    $0x3,%eax
   103f0:	05 20 00 02 00       	add    $0x20020,%eax
   103f5:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   103f8:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   103ff:	76 0f                	jbe    10410 <segment_desc_set+0x36>
		attr |= 0x8000;
   10401:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   10407:	8b 45 10             	mov    0x10(%ebp),%eax
   1040a:	c1 e8 0c             	shr    $0xc,%eax
   1040d:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   10410:	8b 45 10             	mov    0x10(%ebp),%eax
   10413:	89 c2                	mov    %eax,%edx
   10415:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10418:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   1041b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1041e:	89 c2                	mov    %eax,%edx
   10420:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10423:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   10427:	8b 45 0c             	mov    0xc(%ebp),%eax
   1042a:	c1 e8 10             	shr    $0x10,%eax
   1042d:	89 c2                	mov    %eax,%edx
   1042f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10432:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   10435:	8b 45 10             	mov    0x10(%ebp),%eax
   10438:	c1 e8 10             	shr    $0x10,%eax
   1043b:	c1 e0 08             	shl    $0x8,%eax
   1043e:	66 25 00 0f          	and    $0xf00,%ax
   10442:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10446:	89 c2                	mov    %eax,%edx
   10448:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1044b:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   1044f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10452:	c1 e8 18             	shr    $0x18,%eax
   10455:	89 c2                	mov    %eax,%edx
   10457:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1045a:	88 50 07             	mov    %dl,0x7(%eax)
}
   1045d:	90                   	nop
   1045e:	c9                   	leave  
   1045f:	c3                   	ret    

00010460 <gdt_init>:

void gdt_init() {
   10460:	55                   	push   %ebp
   10461:	89 e5                	mov    %esp,%ebp
   10463:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10466:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1046d:	eb 19                	jmp    10488 <gdt_init+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   1046f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10472:	c1 e0 03             	shl    $0x3,%eax
   10475:	6a 00                	push   $0x0
   10477:	6a 00                	push   $0x0
   10479:	6a 00                	push   $0x0
   1047b:	50                   	push   %eax
   1047c:	e8 59 ff ff ff       	call   103da <segment_desc_set>
   10481:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10484:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10488:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1048f:	7e de                	jle    1046f <gdt_init+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10491:	68 92 c0 00 00       	push   $0xc092
   10496:	6a ff                	push   $0xffffffff
   10498:	6a 00                	push   $0x0
   1049a:	6a 10                	push   $0x10
   1049c:	e8 39 ff ff ff       	call   103da <segment_desc_set>
   104a1:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   104a4:	68 9a c0 00 00       	push   $0xc09a
   104a9:	6a ff                	push   $0xffffffff
   104ab:	6a 00                	push   $0x0
   104ad:	6a 08                	push   $0x8
   104af:	e8 26 ff ff ff       	call   103da <segment_desc_set>
   104b4:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)gdt_table2, sizeof(gdt_table2));
   104b7:	b8 20 00 02 00       	mov    $0x20020,%eax
   104bc:	68 00 08 00 00       	push   $0x800
   104c1:	50                   	push   %eax
   104c2:	e8 87 fe ff ff       	call   1034e <lgdt>
   104c7:	83 c4 08             	add    $0x8,%esp

}
   104ca:	90                   	nop
   104cb:	c9                   	leave  
   104cc:	c3                   	ret    

000104cd <gdt_alloc_desc>:

int gdt_alloc_desc() {
   104cd:	55                   	push   %ebp
   104ce:	89 e5                	mov    %esp,%ebp
   104d0:	83 ec 10             	sub    $0x10,%esp

    int i=1;
   104d3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

    for(; i<GDT_TABLE_SIZE; i++) {
   104da:	eb 26                	jmp    10502 <gdt_alloc_desc+0x35>
        segment_desc_t* desc = gdt_table2 + i;
   104dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104df:	c1 e0 03             	shl    $0x3,%eax
   104e2:	05 20 00 02 00       	add    $0x20020,%eax
   104e7:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   104ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
   104ed:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104f1:	66 85 c0             	test   %ax,%ax
   104f4:	75 08                	jne    104fe <gdt_alloc_desc+0x31>
            return (i * sizeof(segment_desc_t));
   104f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104f9:	c1 e0 03             	shl    $0x3,%eax
   104fc:	eb 12                	jmp    10510 <gdt_alloc_desc+0x43>
    for(; i<GDT_TABLE_SIZE; i++) {
   104fe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10502:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10509:	7e d1                	jle    104dc <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   1050b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10510:	c9                   	leave  
   10511:	c3                   	ret    

00010512 <default_handler>:



//  -----------------------------------------   中断相关    -------------------------------------------

static void default_handler (exception_frame_t * frame, const char * message) {
   10512:	55                   	push   %ebp
   10513:	89 e5                	mov    %esp,%ebp
   10515:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   10518:	83 ec 0c             	sub    $0xc,%esp
   1051b:	68 08 13 01 00       	push   $0x11308
   10520:	e8 25 0d 00 00       	call   1124a <klog>
   10525:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   10528:	83 ec 08             	sub    $0x8,%esp
   1052b:	ff 75 0c             	pushl  0xc(%ebp)
   1052e:	68 29 13 01 00       	push   $0x11329
   10533:	e8 12 0d 00 00       	call   1124a <klog>
   10538:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1053b:	e8 f9 fd ff ff       	call   10339 <hlt>
   10540:	eb f9                	jmp    1053b <default_handler+0x29>

00010542 <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   10542:	55                   	push   %ebp
   10543:	89 e5                	mov    %esp,%ebp
   10545:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   10548:	83 ec 08             	sub    $0x8,%esp
   1054b:	68 44 13 01 00       	push   $0x11344
   10550:	ff 75 08             	pushl  0x8(%ebp)
   10553:	e8 ba ff ff ff       	call   10512 <default_handler>
   10558:	83 c4 10             	add    $0x10,%esp
}
   1055b:	90                   	nop
   1055c:	c9                   	leave  
   1055d:	c3                   	ret    

0001055e <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   1055e:	55                   	push   %ebp
   1055f:	89 e5                	mov    %esp,%ebp
   10561:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   10564:	83 ec 08             	sub    $0x8,%esp
   10567:	68 57 13 01 00       	push   $0x11357
   1056c:	ff 75 08             	pushl  0x8(%ebp)
   1056f:	e8 9e ff ff ff       	call   10512 <default_handler>
   10574:	83 c4 10             	add    $0x10,%esp
}
   10577:	90                   	nop
   10578:	c9                   	leave  
   10579:	c3                   	ret    

0001057a <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   1057a:	55                   	push   %ebp
   1057b:	89 e5                	mov    %esp,%ebp
   1057d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   10580:	83 ec 08             	sub    $0x8,%esp
   10583:	68 66 13 01 00       	push   $0x11366
   10588:	ff 75 08             	pushl  0x8(%ebp)
   1058b:	e8 82 ff ff ff       	call   10512 <default_handler>
   10590:	83 c4 10             	add    $0x10,%esp
}
   10593:	90                   	nop
   10594:	c9                   	leave  
   10595:	c3                   	ret    

00010596 <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   10596:	55                   	push   %ebp
   10597:	89 e5                	mov    %esp,%ebp
   10599:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   1059c:	83 ec 08             	sub    $0x8,%esp
   1059f:	68 76 13 01 00       	push   $0x11376
   105a4:	ff 75 08             	pushl  0x8(%ebp)
   105a7:	e8 66 ff ff ff       	call   10512 <default_handler>
   105ac:	83 c4 10             	add    $0x10,%esp
}
   105af:	90                   	nop
   105b0:	c9                   	leave  
   105b1:	c3                   	ret    

000105b2 <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   105b2:	55                   	push   %ebp
   105b3:	89 e5                	mov    %esp,%ebp
   105b5:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   105b8:	83 ec 08             	sub    $0x8,%esp
   105bb:	68 85 13 01 00       	push   $0x11385
   105c0:	ff 75 08             	pushl  0x8(%ebp)
   105c3:	e8 4a ff ff ff       	call   10512 <default_handler>
   105c8:	83 c4 10             	add    $0x10,%esp
}
   105cb:	90                   	nop
   105cc:	c9                   	leave  
   105cd:	c3                   	ret    

000105ce <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   105ce:	55                   	push   %ebp
   105cf:	89 e5                	mov    %esp,%ebp
   105d1:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   105d4:	83 ec 08             	sub    $0x8,%esp
   105d7:	68 91 13 01 00       	push   $0x11391
   105dc:	ff 75 08             	pushl  0x8(%ebp)
   105df:	e8 2e ff ff ff       	call   10512 <default_handler>
   105e4:	83 c4 10             	add    $0x10,%esp
}
   105e7:	90                   	nop
   105e8:	c9                   	leave  
   105e9:	c3                   	ret    

000105ea <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   105ea:	55                   	push   %ebp
   105eb:	89 e5                	mov    %esp,%ebp
   105ed:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   105f0:	83 ec 08             	sub    $0x8,%esp
   105f3:	68 9b 13 01 00       	push   $0x1139b
   105f8:	ff 75 08             	pushl  0x8(%ebp)
   105fb:	e8 12 ff ff ff       	call   10512 <default_handler>
   10600:	83 c4 10             	add    $0x10,%esp
}
   10603:	90                   	nop
   10604:	c9                   	leave  
   10605:	c3                   	ret    

00010606 <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   10606:	55                   	push   %ebp
   10607:	89 e5                	mov    %esp,%ebp
   10609:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   1060c:	83 ec 08             	sub    $0x8,%esp
   1060f:	68 b1 13 01 00       	push   $0x113b1
   10614:	ff 75 08             	pushl  0x8(%ebp)
   10617:	e8 f6 fe ff ff       	call   10512 <default_handler>
   1061c:	83 c4 10             	add    $0x10,%esp
}
   1061f:	90                   	nop
   10620:	c9                   	leave  
   10621:	c3                   	ret    

00010622 <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   10622:	55                   	push   %ebp
   10623:	89 e5                	mov    %esp,%ebp
   10625:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   10628:	83 ec 08             	sub    $0x8,%esp
   1062b:	68 c1 13 01 00       	push   $0x113c1
   10630:	ff 75 08             	pushl  0x8(%ebp)
   10633:	e8 da fe ff ff       	call   10512 <default_handler>
   10638:	83 c4 10             	add    $0x10,%esp
}
   1063b:	90                   	nop
   1063c:	c9                   	leave  
   1063d:	c3                   	ret    

0001063e <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   1063e:	55                   	push   %ebp
   1063f:	89 e5                	mov    %esp,%ebp
   10641:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   10644:	83 ec 08             	sub    $0x8,%esp
   10647:	68 d7 13 01 00       	push   $0x113d7
   1064c:	ff 75 08             	pushl  0x8(%ebp)
   1064f:	e8 be fe ff ff       	call   10512 <default_handler>
   10654:	83 c4 10             	add    $0x10,%esp
}
   10657:	90                   	nop
   10658:	c9                   	leave  
   10659:	c3                   	ret    

0001065a <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   1065a:	55                   	push   %ebp
   1065b:	89 e5                	mov    %esp,%ebp
   1065d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   10660:	83 ec 08             	sub    $0x8,%esp
   10663:	68 e5 13 01 00       	push   $0x113e5
   10668:	ff 75 08             	pushl  0x8(%ebp)
   1066b:	e8 a2 fe ff ff       	call   10512 <default_handler>
   10670:	83 c4 10             	add    $0x10,%esp
}
   10673:	90                   	nop
   10674:	c9                   	leave  
   10675:	c3                   	ret    

00010676 <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   10676:	55                   	push   %ebp
   10677:	89 e5                	mov    %esp,%ebp
   10679:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   1067c:	83 ec 08             	sub    $0x8,%esp
   1067f:	68 f1 13 01 00       	push   $0x113f1
   10684:	ff 75 08             	pushl  0x8(%ebp)
   10687:	e8 86 fe ff ff       	call   10512 <default_handler>
   1068c:	83 c4 10             	add    $0x10,%esp
}
   1068f:	90                   	nop
   10690:	c9                   	leave  
   10691:	c3                   	ret    

00010692 <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   10692:	55                   	push   %ebp
   10693:	89 e5                	mov    %esp,%ebp
   10695:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   10698:	83 ec 08             	sub    $0x8,%esp
   1069b:	68 06 14 01 00       	push   $0x11406
   106a0:	ff 75 08             	pushl  0x8(%ebp)
   106a3:	e8 6a fe ff ff       	call   10512 <default_handler>
   106a8:	83 c4 10             	add    $0x10,%esp
}
   106ab:	90                   	nop
   106ac:	c9                   	leave  
   106ad:	c3                   	ret    

000106ae <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   106ae:	55                   	push   %ebp
   106af:	89 e5                	mov    %esp,%ebp
   106b1:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   106b4:	83 ec 08             	sub    $0x8,%esp
   106b7:	68 1c 14 01 00       	push   $0x1141c
   106bc:	ff 75 08             	pushl  0x8(%ebp)
   106bf:	e8 4e fe ff ff       	call   10512 <default_handler>
   106c4:	83 c4 10             	add    $0x10,%esp
}
   106c7:	90                   	nop
   106c8:	c9                   	leave  
   106c9:	c3                   	ret    

000106ca <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   106ca:	55                   	push   %ebp
   106cb:	89 e5                	mov    %esp,%ebp
   106cd:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: Page fault.");
   106d0:	83 ec 08             	sub    $0x8,%esp
   106d3:	68 48 14 01 00       	push   $0x11448
   106d8:	ff 75 08             	pushl  0x8(%ebp)
   106db:	e8 32 fe ff ff       	call   10512 <default_handler>
   106e0:	83 c4 10             	add    $0x10,%esp
}
   106e3:	90                   	nop
   106e4:	c9                   	leave  
   106e5:	c3                   	ret    

000106e6 <handle_fpu_error>:
void handle_fpu_error(exception_frame_t * frame) {
   106e6:	55                   	push   %ebp
   106e7:	89 e5                	mov    %esp,%ebp
   106e9:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   106ec:	83 ec 08             	sub    $0x8,%esp
   106ef:	68 6b 14 01 00       	push   $0x1146b
   106f4:	ff 75 08             	pushl  0x8(%ebp)
   106f7:	e8 16 fe ff ff       	call   10512 <default_handler>
   106fc:	83 c4 10             	add    $0x10,%esp
}
   106ff:	90                   	nop
   10700:	c9                   	leave  
   10701:	c3                   	ret    

00010702 <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   10702:	55                   	push   %ebp
   10703:	89 e5                	mov    %esp,%ebp
   10705:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   10708:	83 ec 08             	sub    $0x8,%esp
   1070b:	68 89 14 01 00       	push   $0x11489
   10710:	ff 75 08             	pushl  0x8(%ebp)
   10713:	e8 fa fd ff ff       	call   10512 <default_handler>
   10718:	83 c4 10             	add    $0x10,%esp
}
   1071b:	90                   	nop
   1071c:	c9                   	leave  
   1071d:	c3                   	ret    

0001071e <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   1071e:	55                   	push   %ebp
   1071f:	89 e5                	mov    %esp,%ebp
   10721:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   10724:	83 ec 08             	sub    $0x8,%esp
   10727:	68 9a 14 01 00       	push   $0x1149a
   1072c:	ff 75 08             	pushl  0x8(%ebp)
   1072f:	e8 de fd ff ff       	call   10512 <default_handler>
   10734:	83 c4 10             	add    $0x10,%esp
}
   10737:	90                   	nop
   10738:	c9                   	leave  
   10739:	c3                   	ret    

0001073a <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   1073a:	55                   	push   %ebp
   1073b:	89 e5                	mov    %esp,%ebp
   1073d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10740:	83 ec 08             	sub    $0x8,%esp
   10743:	68 ac 14 01 00       	push   $0x114ac
   10748:	ff 75 08             	pushl  0x8(%ebp)
   1074b:	e8 c2 fd ff ff       	call   10512 <default_handler>
   10750:	83 c4 10             	add    $0x10,%esp
}
   10753:	90                   	nop
   10754:	c9                   	leave  
   10755:	c3                   	ret    

00010756 <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10756:	55                   	push   %ebp
   10757:	89 e5                	mov    %esp,%ebp
   10759:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   1075c:	83 ec 08             	sub    $0x8,%esp
   1075f:	68 cb 14 01 00       	push   $0x114cb
   10764:	ff 75 08             	pushl  0x8(%ebp)
   10767:	e8 a6 fd ff ff       	call   10512 <default_handler>
   1076c:	83 c4 10             	add    $0x10,%esp
}
   1076f:	90                   	nop
   10770:	c9                   	leave  
   10771:	c3                   	ret    

00010772 <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10772:	55                   	push   %ebp
   10773:	89 e5                	mov    %esp,%ebp
   10775:	83 ec 08             	sub    $0x8,%esp
   10778:	8b 55 0c             	mov    0xc(%ebp),%edx
   1077b:	8b 45 14             	mov    0x14(%ebp),%eax
   1077e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10782:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10786:	8b 45 10             	mov    0x10(%ebp),%eax
   10789:	89 c2                	mov    %eax,%edx
   1078b:	8b 45 08             	mov    0x8(%ebp),%eax
   1078e:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10791:	8b 45 08             	mov    0x8(%ebp),%eax
   10794:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10798:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   1079c:	8b 45 08             	mov    0x8(%ebp),%eax
   1079f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   107a3:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   107a7:	8b 45 10             	mov    0x10(%ebp),%eax
   107aa:	c1 e8 10             	shr    $0x10,%eax
   107ad:	89 c2                	mov    %eax,%edx
   107af:	8b 45 08             	mov    0x8(%ebp),%eax
   107b2:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   107b6:	90                   	nop
   107b7:	c9                   	leave  
   107b8:	c3                   	ret    

000107b9 <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   107b9:	55                   	push   %ebp
   107ba:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   107bc:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   107c0:	7e 07                	jle    107c9 <irq_install+0x10>
        return -1;
   107c2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   107c7:	eb 1e                	jmp    107e7 <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   107c9:	8b 45 08             	mov    0x8(%ebp),%eax
   107cc:	c1 e0 03             	shl    $0x3,%eax
   107cf:	05 20 08 02 00       	add    $0x20820,%eax
   107d4:	68 00 8e 00 00       	push   $0x8e00
   107d9:	ff 75 0c             	pushl  0xc(%ebp)
   107dc:	6a 08                	push   $0x8
   107de:	50                   	push   %eax
   107df:	e8 8e ff ff ff       	call   10772 <gate_desc_set>
   107e4:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   107e7:	c9                   	leave  
   107e8:	c3                   	ret    

000107e9 <init_pic>:

static void init_pic() {
   107e9:	55                   	push   %ebp
   107ea:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   107ec:	6a 11                	push   $0x11
   107ee:	6a 20                	push   $0x20
   107f0:	e8 c6 fb ff ff       	call   103bb <outb>
   107f5:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   107f8:	6a 20                	push   $0x20
   107fa:	6a 21                	push   $0x21
   107fc:	e8 ba fb ff ff       	call   103bb <outb>
   10801:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10804:	6a 04                	push   $0x4
   10806:	6a 21                	push   $0x21
   10808:	e8 ae fb ff ff       	call   103bb <outb>
   1080d:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10810:	6a 01                	push   $0x1
   10812:	6a 21                	push   $0x21
   10814:	e8 a2 fb ff ff       	call   103bb <outb>
   10819:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   1081c:	6a 11                	push   $0x11
   1081e:	68 a0 00 00 00       	push   $0xa0
   10823:	e8 93 fb ff ff       	call   103bb <outb>
   10828:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   1082b:	6a 28                	push   $0x28
   1082d:	68 a1 00 00 00       	push   $0xa1
   10832:	e8 84 fb ff ff       	call   103bb <outb>
   10837:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   1083a:	6a 02                	push   $0x2
   1083c:	68 a1 00 00 00       	push   $0xa1
   10841:	e8 75 fb ff ff       	call   103bb <outb>
   10846:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10849:	6a 01                	push   $0x1
   1084b:	68 a1 00 00 00       	push   $0xa1
   10850:	e8 66 fb ff ff       	call   103bb <outb>
   10855:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10858:	68 fb 00 00 00       	push   $0xfb
   1085d:	6a 21                	push   $0x21
   1085f:	e8 57 fb ff ff       	call   103bb <outb>
   10864:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10867:	68 ff 00 00 00       	push   $0xff
   1086c:	68 a1 00 00 00       	push   $0xa1
   10871:	e8 45 fb ff ff       	call   103bb <outb>
   10876:	83 c4 08             	add    $0x8,%esp
}
   10879:	90                   	nop
   1087a:	c9                   	leave  
   1087b:	c3                   	ret    

0001087c <irq_init>:

void irq_init () {
   1087c:	55                   	push   %ebp
   1087d:	89 e5                	mov    %esp,%ebp
   1087f:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10882:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10889:	eb 25                	jmp    108b0 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   1088b:	ba 28 00 01 00       	mov    $0x10028,%edx
   10890:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10893:	c1 e0 03             	shl    $0x3,%eax
   10896:	05 20 08 02 00       	add    $0x20820,%eax
   1089b:	68 00 8e 00 00       	push   $0x8e00
   108a0:	52                   	push   %edx
   108a1:	6a 08                	push   $0x8
   108a3:	50                   	push   %eax
   108a4:	e8 c9 fe ff ff       	call   10772 <gate_desc_set>
   108a9:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   108ac:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   108b0:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   108b4:	76 d5                	jbe    1088b <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   108b6:	b8 20 08 02 00       	mov    $0x20820,%eax
   108bb:	68 00 04 00 00       	push   $0x400
   108c0:	50                   	push   %eax
   108c1:	e8 b0 fa ff ff       	call   10376 <lidt>
   108c6:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   108c9:	b8 47 00 01 00       	mov    $0x10047,%eax
   108ce:	50                   	push   %eax
   108cf:	6a 00                	push   $0x0
   108d1:	e8 e3 fe ff ff       	call   107b9 <irq_install>
   108d6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   108d9:	b8 66 00 01 00       	mov    $0x10066,%eax
   108de:	50                   	push   %eax
   108df:	6a 01                	push   $0x1
   108e1:	e8 d3 fe ff ff       	call   107b9 <irq_install>
   108e6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   108e9:	b8 85 00 01 00       	mov    $0x10085,%eax
   108ee:	50                   	push   %eax
   108ef:	6a 02                	push   $0x2
   108f1:	e8 c3 fe ff ff       	call   107b9 <irq_install>
   108f6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   108f9:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   108fe:	50                   	push   %eax
   108ff:	6a 03                	push   $0x3
   10901:	e8 b3 fe ff ff       	call   107b9 <irq_install>
   10906:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10909:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   1090e:	50                   	push   %eax
   1090f:	6a 04                	push   $0x4
   10911:	e8 a3 fe ff ff       	call   107b9 <irq_install>
   10916:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10919:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   1091e:	50                   	push   %eax
   1091f:	6a 05                	push   $0x5
   10921:	e8 93 fe ff ff       	call   107b9 <irq_install>
   10926:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10929:	b8 01 01 01 00       	mov    $0x10101,%eax
   1092e:	50                   	push   %eax
   1092f:	6a 06                	push   $0x6
   10931:	e8 83 fe ff ff       	call   107b9 <irq_install>
   10936:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10939:	b8 20 01 01 00       	mov    $0x10120,%eax
   1093e:	50                   	push   %eax
   1093f:	6a 07                	push   $0x7
   10941:	e8 73 fe ff ff       	call   107b9 <irq_install>
   10946:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10949:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   1094e:	50                   	push   %eax
   1094f:	6a 08                	push   $0x8
   10951:	e8 63 fe ff ff       	call   107b9 <irq_install>
   10956:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10959:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   1095e:	50                   	push   %eax
   1095f:	6a 0a                	push   $0xa
   10961:	e8 53 fe ff ff       	call   107b9 <irq_install>
   10966:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10969:	b8 79 01 01 00       	mov    $0x10179,%eax
   1096e:	50                   	push   %eax
   1096f:	6a 0b                	push   $0xb
   10971:	e8 43 fe ff ff       	call   107b9 <irq_install>
   10976:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10979:	b8 96 01 01 00       	mov    $0x10196,%eax
   1097e:	50                   	push   %eax
   1097f:	6a 0c                	push   $0xc
   10981:	e8 33 fe ff ff       	call   107b9 <irq_install>
   10986:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10989:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   1098e:	50                   	push   %eax
   1098f:	6a 0d                	push   $0xd
   10991:	e8 23 fe ff ff       	call   107b9 <irq_install>
   10996:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10999:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   1099e:	50                   	push   %eax
   1099f:	6a 0e                	push   $0xe
   109a1:	e8 13 fe ff ff       	call   107b9 <irq_install>
   109a6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   109a9:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   109ae:	50                   	push   %eax
   109af:	6a 10                	push   $0x10
   109b1:	e8 03 fe ff ff       	call   107b9 <irq_install>
   109b6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   109b9:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   109be:	50                   	push   %eax
   109bf:	6a 11                	push   $0x11
   109c1:	e8 f3 fd ff ff       	call   107b9 <irq_install>
   109c6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   109c9:	b8 29 02 01 00       	mov    $0x10229,%eax
   109ce:	50                   	push   %eax
   109cf:	6a 12                	push   $0x12
   109d1:	e8 e3 fd ff ff       	call   107b9 <irq_install>
   109d6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   109d9:	b8 48 02 01 00       	mov    $0x10248,%eax
   109de:	50                   	push   %eax
   109df:	6a 13                	push   $0x13
   109e1:	e8 d3 fd ff ff       	call   107b9 <irq_install>
   109e6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   109e9:	b8 67 02 01 00       	mov    $0x10267,%eax
   109ee:	50                   	push   %eax
   109ef:	6a 14                	push   $0x14
   109f1:	e8 c3 fd ff ff       	call   107b9 <irq_install>
   109f6:	83 c4 08             	add    $0x8,%esp

    init_pic();
   109f9:	e8 eb fd ff ff       	call   107e9 <init_pic>
}
   109fe:	90                   	nop
   109ff:	c9                   	leave  
   10a00:	c3                   	ret    

00010a01 <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10a01:	55                   	push   %ebp
   10a02:	89 e5                	mov    %esp,%ebp
   10a04:	53                   	push   %ebx
   10a05:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10a08:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10a0c:	7e 78                	jle    10a86 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10a0e:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10a12:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10a16:	7f 32                	jg     10a4a <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10a18:	6a 21                	push   $0x21
   10a1a:	e8 7f f9 ff ff       	call   1039e <inb>
   10a1f:	83 c4 04             	add    $0x4,%esp
   10a22:	89 c2                	mov    %eax,%edx
   10a24:	8b 45 08             	mov    0x8(%ebp),%eax
   10a27:	bb 01 00 00 00       	mov    $0x1,%ebx
   10a2c:	89 c1                	mov    %eax,%ecx
   10a2e:	d3 e3                	shl    %cl,%ebx
   10a30:	89 d8                	mov    %ebx,%eax
   10a32:	f7 d0                	not    %eax
   10a34:	21 d0                	and    %edx,%eax
   10a36:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10a39:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10a3d:	50                   	push   %eax
   10a3e:	6a 21                	push   $0x21
   10a40:	e8 76 f9 ff ff       	call   103bb <outb>
   10a45:	83 c4 08             	add    $0x8,%esp
   10a48:	eb 3d                	jmp    10a87 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10a4a:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10a4e:	68 a1 00 00 00       	push   $0xa1
   10a53:	e8 46 f9 ff ff       	call   1039e <inb>
   10a58:	83 c4 04             	add    $0x4,%esp
   10a5b:	89 c2                	mov    %eax,%edx
   10a5d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a60:	bb 01 00 00 00       	mov    $0x1,%ebx
   10a65:	89 c1                	mov    %eax,%ecx
   10a67:	d3 e3                	shl    %cl,%ebx
   10a69:	89 d8                	mov    %ebx,%eax
   10a6b:	f7 d0                	not    %eax
   10a6d:	21 d0                	and    %edx,%eax
   10a6f:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10a72:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10a76:	50                   	push   %eax
   10a77:	68 a1 00 00 00       	push   $0xa1
   10a7c:	e8 3a f9 ff ff       	call   103bb <outb>
   10a81:	83 c4 08             	add    $0x8,%esp
   10a84:	eb 01                	jmp    10a87 <irq_enable+0x86>
        return;
   10a86:	90                   	nop
    }
}
   10a87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10a8a:	c9                   	leave  
   10a8b:	c3                   	ret    

00010a8c <irq_disable>:

void irq_disable(int irq_num) {
   10a8c:	55                   	push   %ebp
   10a8d:	89 e5                	mov    %esp,%ebp
   10a8f:	53                   	push   %ebx
   10a90:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10a93:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10a97:	7e 74                	jle    10b0d <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10a99:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10a9d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10aa1:	7f 30                	jg     10ad3 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10aa3:	6a 21                	push   $0x21
   10aa5:	e8 f4 f8 ff ff       	call   1039e <inb>
   10aaa:	83 c4 04             	add    $0x4,%esp
   10aad:	89 c3                	mov    %eax,%ebx
   10aaf:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab2:	ba 01 00 00 00       	mov    $0x1,%edx
   10ab7:	89 c1                	mov    %eax,%ecx
   10ab9:	d3 e2                	shl    %cl,%edx
   10abb:	89 d0                	mov    %edx,%eax
   10abd:	09 d8                	or     %ebx,%eax
   10abf:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10ac2:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10ac6:	50                   	push   %eax
   10ac7:	6a 21                	push   $0x21
   10ac9:	e8 ed f8 ff ff       	call   103bb <outb>
   10ace:	83 c4 08             	add    $0x8,%esp
   10ad1:	eb 3b                	jmp    10b0e <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10ad3:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10ad7:	68 a1 00 00 00       	push   $0xa1
   10adc:	e8 bd f8 ff ff       	call   1039e <inb>
   10ae1:	83 c4 04             	add    $0x4,%esp
   10ae4:	89 c3                	mov    %eax,%ebx
   10ae6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae9:	ba 01 00 00 00       	mov    $0x1,%edx
   10aee:	89 c1                	mov    %eax,%ecx
   10af0:	d3 e2                	shl    %cl,%edx
   10af2:	89 d0                	mov    %edx,%eax
   10af4:	09 d8                	or     %ebx,%eax
   10af6:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10af9:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10afd:	50                   	push   %eax
   10afe:	68 a1 00 00 00       	push   $0xa1
   10b03:	e8 b3 f8 ff ff       	call   103bb <outb>
   10b08:	83 c4 08             	add    $0x8,%esp
   10b0b:	eb 01                	jmp    10b0e <irq_disable+0x82>
        return;
   10b0d:	90                   	nop
    }
}
   10b0e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10b11:	c9                   	leave  
   10b12:	c3                   	ret    

00010b13 <irq_disable_global>:

void irq_disable_global(void) {
   10b13:	55                   	push   %ebp
   10b14:	89 e5                	mov    %esp,%ebp
    cli();
   10b16:	e8 25 f8 ff ff       	call   10340 <cli>
}
   10b1b:	90                   	nop
   10b1c:	5d                   	pop    %ebp
   10b1d:	c3                   	ret    

00010b1e <irq_enable_global>:

void irq_enable_global(void) {
   10b1e:	55                   	push   %ebp
   10b1f:	89 e5                	mov    %esp,%ebp
    sti();
   10b21:	e8 21 f8 ff ff       	call   10347 <sti>
}
   10b26:	90                   	nop
   10b27:	5d                   	pop    %ebp
   10b28:	c3                   	ret    

00010b29 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10b29:	55                   	push   %ebp
   10b2a:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10b2c:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10b30:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10b34:	7e 0f                	jle    10b45 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10b36:	6a 20                	push   $0x20
   10b38:	68 a0 00 00 00       	push   $0xa0
   10b3d:	e8 79 f8 ff ff       	call   103bb <outb>
   10b42:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10b45:	6a 20                	push   $0x20
   10b47:	6a 20                	push   $0x20
   10b49:	e8 6d f8 ff ff       	call   103bb <outb>
   10b4e:	83 c4 08             	add    $0x8,%esp
}
   10b51:	90                   	nop
   10b52:	c9                   	leave  
   10b53:	c3                   	ret    

00010b54 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10b54:	55                   	push   %ebp
   10b55:	89 e5                	mov    %esp,%ebp
   10b57:	83 ec 08             	sub    $0x8,%esp
   10b5a:	8b 55 08             	mov    0x8(%ebp),%edx
   10b5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b60:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10b64:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   10b67:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10b6b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10b6f:	ee                   	out    %al,(%dx)
}
   10b70:	90                   	nop
   10b71:	c9                   	leave  
   10b72:	c3                   	ret    

00010b73 <handle_time>:
#include <comm/cpu_ins.h>

static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   10b73:	55                   	push   %ebp
   10b74:	89 e5                	mov    %esp,%ebp
   10b76:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10b79:	a1 20 0c 02 00       	mov    0x20c20,%eax
   10b7e:	83 c0 01             	add    $0x1,%eax
   10b81:	a3 20 0c 02 00       	mov    %eax,0x20c20
    pic_send_eoi(IRQ0_TIMER);
   10b86:	83 ec 0c             	sub    $0xc,%esp
   10b89:	6a 20                	push   $0x20
   10b8b:	e8 99 ff ff ff       	call   10b29 <pic_send_eoi>
   10b90:	83 c4 10             	add    $0x10,%esp
} 
   10b93:	90                   	nop
   10b94:	c9                   	leave  
   10b95:	c3                   	ret    

00010b96 <pit_init>:

static void pit_init (void) {
   10b96:	55                   	push   %ebp
   10b97:	89 e5                	mov    %esp,%ebp
   10b99:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10b9c:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   10ba3:	6a 36                	push   $0x36
   10ba5:	6a 43                	push   $0x43
   10ba7:	e8 a8 ff ff ff       	call   10b54 <outb>
   10bac:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   10baf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bb2:	0f b6 c0             	movzbl %al,%eax
   10bb5:	50                   	push   %eax
   10bb6:	6a 40                	push   $0x40
   10bb8:	e8 97 ff ff ff       	call   10b54 <outb>
   10bbd:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   10bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bc3:	c1 e8 08             	shr    $0x8,%eax
   10bc6:	0f b6 c0             	movzbl %al,%eax
   10bc9:	50                   	push   %eax
   10bca:	6a 40                	push   $0x40
   10bcc:	e8 83 ff ff ff       	call   10b54 <outb>
   10bd1:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   10bd4:	b8 86 02 01 00       	mov    $0x10286,%eax
   10bd9:	83 ec 08             	sub    $0x8,%esp
   10bdc:	50                   	push   %eax
   10bdd:	6a 20                	push   $0x20
   10bdf:	e8 d5 fb ff ff       	call   107b9 <irq_install>
   10be4:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10be7:	83 ec 0c             	sub    $0xc,%esp
   10bea:	6a 20                	push   $0x20
   10bec:	e8 10 fe ff ff       	call   10a01 <irq_enable>
   10bf1:	83 c4 10             	add    $0x10,%esp
}
   10bf4:	90                   	nop
   10bf5:	c9                   	leave  
   10bf6:	c3                   	ret    

00010bf7 <time_init>:

void time_init() {
   10bf7:	55                   	push   %ebp
   10bf8:	89 e5                	mov    %esp,%ebp
   10bfa:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10bfd:	c7 05 20 0c 02 00 00 	movl   $0x0,0x20c20
   10c04:	00 00 00 

    pit_init();
   10c07:	e8 8a ff ff ff       	call   10b96 <pit_init>
   10c0c:	90                   	nop
   10c0d:	c9                   	leave  
   10c0e:	c3                   	ret    

00010c0f <kernel_init>:
#include <mtime.h>
#include <log.h>
#include <core/task.h>
#include <comm/cpu_ins.h>

void kernel_init (boot_info_t * boot_info) {
   10c0f:	55                   	push   %ebp
   10c10:	89 e5                	mov    %esp,%ebp
   10c12:	83 ec 08             	sub    $0x8,%esp
    log_init();
   10c15:	e8 bb 05 00 00       	call   111d5 <log_init>

    gdt_init();
   10c1a:	e8 41 f8 ff ff       	call   10460 <gdt_init>
    irq_init();
   10c1f:	e8 58 fc ff ff       	call   1087c <irq_init>
    time_init();
   10c24:	e8 ce ff ff ff       	call   10bf7 <time_init>
    irq_enable_global();
   10c29:	e8 f0 fe ff ff       	call   10b1e <irq_enable_global>
}
   10c2e:	90                   	nop
   10c2f:	c9                   	leave  
   10c30:	c3                   	ret    

00010c31 <task1_func>:
static task_t task2;
static uint32_t task1_stack[1024];
static uint32_t task2_stack[1024];


void task1_func() {
   10c31:	55                   	push   %ebp
   10c32:	89 e5                	mov    %esp,%ebp
   10c34:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10c37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("task1 say++++: %d", count++);
   10c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c41:	8d 50 01             	lea    0x1(%eax),%edx
   10c44:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10c47:	83 ec 08             	sub    $0x8,%esp
   10c4a:	50                   	push   %eax
   10c4b:	68 e5 14 01 00       	push   $0x114e5
   10c50:	e8 f5 05 00 00       	call   1124a <klog>
   10c55:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&task1, &task2);
   10c58:	83 ec 08             	sub    $0x8,%esp
   10c5b:	68 44 0c 02 00       	push   $0x20c44
   10c60:	68 40 0c 02 00       	push   $0x20c40
   10c65:	e8 50 f6 ff ff       	call   102ba <task_switch_from_to>
   10c6a:	83 c4 10             	add    $0x10,%esp
        klog("task1 say++++: %d", count++);
   10c6d:	eb cf                	jmp    10c3e <task1_func+0xd>

00010c6f <task2_func>:
    }
}

void task2_func() {
   10c6f:	55                   	push   %ebp
   10c70:	89 e5                	mov    %esp,%ebp
   10c72:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10c75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("task2 say----: %d", count++);
   10c7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c7f:	8d 50 01             	lea    0x1(%eax),%edx
   10c82:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10c85:	83 ec 08             	sub    $0x8,%esp
   10c88:	50                   	push   %eax
   10c89:	68 f7 14 01 00       	push   $0x114f7
   10c8e:	e8 b7 05 00 00       	call   1124a <klog>
   10c93:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&task2, &task1);
   10c96:	83 ec 08             	sub    $0x8,%esp
   10c99:	68 40 0c 02 00       	push   $0x20c40
   10c9e:	68 44 0c 02 00       	push   $0x20c44
   10ca3:	e8 12 f6 ff ff       	call   102ba <task_switch_from_to>
   10ca8:	83 c4 10             	add    $0x10,%esp
        klog("task2 say----: %d", count++);
   10cab:	eb cf                	jmp    10c7c <task2_func+0xd>

00010cad <init_main>:
    }
}


void init_main() {
   10cad:	55                   	push   %ebp
   10cae:	89 e5                	mov    %esp,%ebp
   10cb0:	83 ec 08             	sub    $0x8,%esp
    klog("Kernal %s is running ... ", "1.0.0");
   10cb3:	83 ec 08             	sub    $0x8,%esp
   10cb6:	68 09 15 01 00       	push   $0x11509
   10cbb:	68 0f 15 01 00       	push   $0x1150f
   10cc0:	e8 85 05 00 00       	call   1124a <klog>
   10cc5:	83 c4 10             	add    $0x10,%esp

    task_init(&task1, (uint32_t)task1_func, (uint32_t)&task1_stack[1024]);
   10cc8:	ba 60 1c 02 00       	mov    $0x21c60,%edx
   10ccd:	b8 31 0c 01 00       	mov    $0x10c31,%eax
   10cd2:	83 ec 04             	sub    $0x4,%esp
   10cd5:	52                   	push   %edx
   10cd6:	50                   	push   %eax
   10cd7:	68 40 0c 02 00       	push   $0x20c40
   10cdc:	e8 f7 f5 ff ff       	call   102d8 <task_init>
   10ce1:	83 c4 10             	add    $0x10,%esp
    task_init(&task2, (uint32_t)task2_func, (uint32_t)&task2_stack[1024]);
   10ce4:	ba 60 2c 02 00       	mov    $0x22c60,%edx
   10ce9:	b8 6f 0c 01 00       	mov    $0x10c6f,%eax
   10cee:	83 ec 04             	sub    $0x4,%esp
   10cf1:	52                   	push   %edx
   10cf2:	50                   	push   %eax
   10cf3:	68 44 0c 02 00       	push   $0x20c44
   10cf8:	e8 db f5 ff ff       	call   102d8 <task_init>
   10cfd:	83 c4 10             	add    $0x10,%esp
    task_switch_from_to(0, &task1);
   10d00:	83 ec 08             	sub    $0x8,%esp
   10d03:	68 40 0c 02 00       	push   $0x20c40
   10d08:	6a 00                	push   $0x0
   10d0a:	e8 ab f5 ff ff       	call   102ba <task_switch_from_to>
   10d0f:	83 c4 10             	add    $0x10,%esp

   10d12:	90                   	nop
   10d13:	c9                   	leave  
   10d14:	c3                   	ret    

00010d15 <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   10d15:	55                   	push   %ebp
   10d16:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   10d18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d1c:	74 3b                	je     10d59 <k_strcpy+0x44>
   10d1e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10d22:	74 35                	je     10d59 <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   10d24:	eb 17                	jmp    10d3d <k_strcpy+0x28>
        *dest++ = *src++;
   10d26:	8b 55 0c             	mov    0xc(%ebp),%edx
   10d29:	8d 42 01             	lea    0x1(%edx),%eax
   10d2c:	89 45 0c             	mov    %eax,0xc(%ebp)
   10d2f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d32:	8d 48 01             	lea    0x1(%eax),%ecx
   10d35:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10d38:	0f b6 12             	movzbl (%edx),%edx
   10d3b:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   10d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d40:	0f b6 00             	movzbl (%eax),%eax
   10d43:	84 c0                	test   %al,%al
   10d45:	74 0a                	je     10d51 <k_strcpy+0x3c>
   10d47:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d4a:	0f b6 00             	movzbl (%eax),%eax
   10d4d:	84 c0                	test   %al,%al
   10d4f:	75 d5                	jne    10d26 <k_strcpy+0x11>
    }
    *dest = '\0'; 
   10d51:	8b 45 08             	mov    0x8(%ebp),%eax
   10d54:	c6 00 00             	movb   $0x0,(%eax)
   10d57:	eb 01                	jmp    10d5a <k_strcpy+0x45>
        return;
   10d59:	90                   	nop
}
   10d5a:	5d                   	pop    %ebp
   10d5b:	c3                   	ret    

00010d5c <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   10d5c:	55                   	push   %ebp
   10d5d:	89 e5                	mov    %esp,%ebp
   10d5f:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   10d62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d66:	74 61                	je     10dc9 <k_strncpy+0x6d>
   10d68:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10d6c:	74 5b                	je     10dc9 <k_strncpy+0x6d>
   10d6e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10d72:	74 55                	je     10dc9 <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   10d74:	8b 45 08             	mov    0x8(%ebp),%eax
   10d77:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   10d7a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d7d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   10d80:	eb 17                	jmp    10d99 <k_strncpy+0x3d>
        *d++ = *s++;
   10d82:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10d85:	8d 42 01             	lea    0x1(%edx),%eax
   10d88:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10d8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d8e:	8d 48 01             	lea    0x1(%eax),%ecx
   10d91:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10d94:	0f b6 12             	movzbl (%edx),%edx
   10d97:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   10d99:	8b 45 10             	mov    0x10(%ebp),%eax
   10d9c:	8d 50 ff             	lea    -0x1(%eax),%edx
   10d9f:	89 55 10             	mov    %edx,0x10(%ebp)
   10da2:	85 c0                	test   %eax,%eax
   10da4:	7e 0a                	jle    10db0 <k_strncpy+0x54>
   10da6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10da9:	0f b6 00             	movzbl (%eax),%eax
   10dac:	84 c0                	test   %al,%al
   10dae:	75 d2                	jne    10d82 <k_strncpy+0x26>
    } 
    if (size == 0) {
   10db0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10db4:	75 0b                	jne    10dc1 <k_strncpy+0x65>
        *(d - 1) = '\0';
   10db6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10db9:	83 e8 01             	sub    $0x1,%eax
   10dbc:	c6 00 00             	movb   $0x0,(%eax)
   10dbf:	eb 09                	jmp    10dca <k_strncpy+0x6e>
    } else {
        *d = '\0';
   10dc1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dc4:	c6 00 00             	movb   $0x0,(%eax)
   10dc7:	eb 01                	jmp    10dca <k_strncpy+0x6e>
        return;
   10dc9:	90                   	nop
    }
}
   10dca:	c9                   	leave  
   10dcb:	c3                   	ret    

00010dcc <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   10dcc:	55                   	push   %ebp
   10dcd:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   10dcf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10dd3:	74 06                	je     10ddb <k_strncmp+0xf>
   10dd5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10dd9:	75 0f                	jne    10dea <k_strncmp+0x1e>
   10ddb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10de0:	eb 62                	jmp    10e44 <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   10de2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   10de6:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   10dea:	8b 45 08             	mov    0x8(%ebp),%eax
   10ded:	0f b6 00             	movzbl (%eax),%eax
   10df0:	84 c0                	test   %al,%al
   10df2:	74 20                	je     10e14 <k_strncmp+0x48>
   10df4:	8b 45 0c             	mov    0xc(%ebp),%eax
   10df7:	0f b6 00             	movzbl (%eax),%eax
   10dfa:	84 c0                	test   %al,%al
   10dfc:	74 16                	je     10e14 <k_strncmp+0x48>
   10dfe:	8b 45 08             	mov    0x8(%ebp),%eax
   10e01:	0f b6 10             	movzbl (%eax),%edx
   10e04:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e07:	0f b6 00             	movzbl (%eax),%eax
   10e0a:	38 c2                	cmp    %al,%dl
   10e0c:	75 06                	jne    10e14 <k_strncmp+0x48>
   10e0e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10e12:	75 ce                	jne    10de2 <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   10e14:	8b 45 08             	mov    0x8(%ebp),%eax
   10e17:	0f b6 00             	movzbl (%eax),%eax
   10e1a:	84 c0                	test   %al,%al
   10e1c:	74 21                	je     10e3f <k_strncmp+0x73>
   10e1e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e21:	0f b6 00             	movzbl (%eax),%eax
   10e24:	84 c0                	test   %al,%al
   10e26:	74 17                	je     10e3f <k_strncmp+0x73>
   10e28:	8b 45 08             	mov    0x8(%ebp),%eax
   10e2b:	0f b6 10             	movzbl (%eax),%edx
   10e2e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e31:	0f b6 00             	movzbl (%eax),%eax
   10e34:	38 c2                	cmp    %al,%dl
   10e36:	74 07                	je     10e3f <k_strncmp+0x73>
   10e38:	b8 01 00 00 00       	mov    $0x1,%eax
   10e3d:	eb 05                	jmp    10e44 <k_strncmp+0x78>
   10e3f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e44:	5d                   	pop    %ebp
   10e45:	c3                   	ret    

00010e46 <k_strlen>:
int k_strlen(const char *str) {
   10e46:	55                   	push   %ebp
   10e47:	89 e5                	mov    %esp,%ebp
   10e49:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   10e4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e50:	75 07                	jne    10e59 <k_strlen+0x13>
        return 0;
   10e52:	b8 00 00 00 00       	mov    $0x0,%eax
   10e57:	eb 26                	jmp    10e7f <k_strlen+0x39>
    }

    int len = 0;
   10e59:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   10e60:	8b 45 08             	mov    0x8(%ebp),%eax
   10e63:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   10e66:	eb 04                	jmp    10e6c <k_strlen+0x26>
        len++;
   10e68:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   10e6c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10e6f:	8d 50 01             	lea    0x1(%eax),%edx
   10e72:	89 55 f8             	mov    %edx,-0x8(%ebp)
   10e75:	0f b6 00             	movzbl (%eax),%eax
   10e78:	84 c0                	test   %al,%al
   10e7a:	75 ec                	jne    10e68 <k_strlen+0x22>
    }

    return len;
   10e7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10e7f:	c9                   	leave  
   10e80:	c3                   	ret    

00010e81 <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   10e81:	55                   	push   %ebp
   10e82:	89 e5                	mov    %esp,%ebp
   10e84:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || size) {
   10e87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e8b:	74 40                	je     10ecd <k_memcpy+0x4c>
   10e8d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e91:	74 3a                	je     10ecd <k_memcpy+0x4c>
   10e93:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10e97:	75 34                	jne    10ecd <k_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   10e99:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e9c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   10e9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10ea2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   10ea5:	eb 17                	jmp    10ebe <k_memcpy+0x3d>
        *d++ = *s++;
   10ea7:	8b 55 fc             	mov    -0x4(%ebp),%edx
   10eaa:	8d 42 01             	lea    0x1(%edx),%eax
   10ead:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10eb0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10eb3:	8d 48 01             	lea    0x1(%eax),%ecx
   10eb6:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   10eb9:	0f b6 12             	movzbl (%edx),%edx
   10ebc:	88 10                	mov    %dl,(%eax)
    while(size--) {
   10ebe:	8b 45 10             	mov    0x10(%ebp),%eax
   10ec1:	8d 50 ff             	lea    -0x1(%eax),%edx
   10ec4:	89 55 10             	mov    %edx,0x10(%ebp)
   10ec7:	85 c0                	test   %eax,%eax
   10ec9:	75 dc                	jne    10ea7 <k_memcpy+0x26>
   10ecb:	eb 01                	jmp    10ece <k_memcpy+0x4d>
        return;
   10ecd:	90                   	nop
    }
}
   10ece:	c9                   	leave  
   10ecf:	c3                   	ret    

00010ed0 <k_memset>:
void k_memset(void* dest, uint8_t v, int size) {
   10ed0:	55                   	push   %ebp
   10ed1:	89 e5                	mov    %esp,%ebp
   10ed3:	83 ec 14             	sub    $0x14,%esp
   10ed6:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ed9:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   10edc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ee0:	74 2c                	je     10f0e <k_memset+0x3e>
   10ee2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10ee6:	74 26                	je     10f0e <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   10ee8:	8b 45 08             	mov    0x8(%ebp),%eax
   10eeb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   10eee:	eb 0f                	jmp    10eff <k_memset+0x2f>
        *d++ = v;
   10ef0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ef3:	8d 50 01             	lea    0x1(%eax),%edx
   10ef6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10ef9:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   10efd:	88 10                	mov    %dl,(%eax)
    while(size--) {
   10eff:	8b 45 10             	mov    0x10(%ebp),%eax
   10f02:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f05:	89 55 10             	mov    %edx,0x10(%ebp)
   10f08:	85 c0                	test   %eax,%eax
   10f0a:	75 e4                	jne    10ef0 <k_memset+0x20>
   10f0c:	eb 01                	jmp    10f0f <k_memset+0x3f>
    if(!dest || !size) return;
   10f0e:	90                   	nop
    }
}
   10f0f:	c9                   	leave  
   10f10:	c3                   	ret    

00010f11 <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   10f11:	55                   	push   %ebp
   10f12:	89 e5                	mov    %esp,%ebp
   10f14:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   10f17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f1b:	74 0c                	je     10f29 <k_memcmp+0x18>
   10f1d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f21:	74 06                	je     10f29 <k_memcmp+0x18>
   10f23:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f27:	74 07                	je     10f30 <k_memcmp+0x1f>
        return 1;
   10f29:	b8 01 00 00 00       	mov    $0x1,%eax
   10f2e:	eb 43                	jmp    10f73 <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   10f30:	8b 45 08             	mov    0x8(%ebp),%eax
   10f33:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   10f36:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f39:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   10f3c:	eb 23                	jmp    10f61 <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   10f3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f41:	8d 50 01             	lea    0x1(%eax),%edx
   10f44:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10f47:	0f b6 08             	movzbl (%eax),%ecx
   10f4a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10f4d:	8d 50 01             	lea    0x1(%eax),%edx
   10f50:	89 55 f8             	mov    %edx,-0x8(%ebp)
   10f53:	0f b6 00             	movzbl (%eax),%eax
   10f56:	38 c1                	cmp    %al,%cl
   10f58:	74 07                	je     10f61 <k_memcmp+0x50>
        return 1;
   10f5a:	b8 01 00 00 00       	mov    $0x1,%eax
   10f5f:	eb 12                	jmp    10f73 <k_memcmp+0x62>
    while(size--) {
   10f61:	8b 45 10             	mov    0x10(%ebp),%eax
   10f64:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f67:	89 55 10             	mov    %edx,0x10(%ebp)
   10f6a:	85 c0                	test   %eax,%eax
   10f6c:	75 d0                	jne    10f3e <k_memcmp+0x2d>
    }

    return 0;
   10f6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f73:	c9                   	leave  
   10f74:	c3                   	ret    

00010f75 <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   10f75:	55                   	push   %ebp
   10f76:	89 e5                	mov    %esp,%ebp
   10f78:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   10f7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f7e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   10f81:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f84:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   10f87:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   10f8b:	74 1d                	je     10faa <k_itoa+0x35>
   10f8d:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   10f91:	74 17                	je     10faa <k_itoa+0x35>
   10f93:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   10f97:	74 11                	je     10faa <k_itoa+0x35>
   10f99:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   10f9d:	74 0b                	je     10faa <k_itoa+0x35>
        *p = '\0';
   10f9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fa2:	c6 00 00             	movb   $0x0,(%eax)
        return;
   10fa5:	e9 a0 00 00 00       	jmp    1104a <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   10faa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fae:	79 12                	jns    10fc2 <k_itoa+0x4d>
   10fb0:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   10fb4:	75 0c                	jne    10fc2 <k_itoa+0x4d>
        *p++ = '-';
   10fb6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fb9:	8d 50 01             	lea    0x1(%eax),%edx
   10fbc:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10fbf:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   10fc2:	8b 0d 00 00 02 00    	mov    0x20000,%ecx
   10fc8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fcb:	99                   	cltd   
   10fcc:	f7 7d 10             	idivl  0x10(%ebp)
   10fcf:	89 d0                	mov    %edx,%eax
   10fd1:	83 c0 0f             	add    $0xf,%eax
   10fd4:	01 c8                	add    %ecx,%eax
   10fd6:	0f b6 00             	movzbl (%eax),%eax
   10fd9:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   10fdc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fdf:	8d 50 01             	lea    0x1(%eax),%edx
   10fe2:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10fe5:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   10fe9:	88 10                	mov    %dl,(%eax)
        num /= base;
   10feb:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fee:	99                   	cltd   
   10fef:	f7 7d 10             	idivl  0x10(%ebp)
   10ff2:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   10ff5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ff9:	75 c7                	jne    10fc2 <k_itoa+0x4d>

    *p-- = '\0';
   10ffb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ffe:	8d 50 ff             	lea    -0x1(%eax),%edx
   11001:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11004:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   11007:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1100b:	7f 08                	jg     11015 <k_itoa+0xa0>
   1100d:	8b 45 08             	mov    0x8(%ebp),%eax
   11010:	83 c0 01             	add    $0x1,%eax
   11013:	eb 03                	jmp    11018 <k_itoa+0xa3>
   11015:	8b 45 08             	mov    0x8(%ebp),%eax
   11018:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   1101b:	eb 25                	jmp    11042 <k_itoa+0xcd>
        char ch = *start;
   1101d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11020:	0f b6 00             	movzbl (%eax),%eax
   11023:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   11026:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11029:	0f b6 10             	movzbl (%eax),%edx
   1102c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1102f:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11031:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11034:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   11038:	88 10                	mov    %dl,(%eax)

        p--;
   1103a:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   1103e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   11042:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11045:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   11048:	72 d3                	jb     1101d <k_itoa+0xa8>
    }
}
   1104a:	c9                   	leave  
   1104b:	c3                   	ret    

0001104c <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   1104c:	55                   	push   %ebp
   1104d:	89 e5                	mov    %esp,%ebp
   1104f:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   11052:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   11059:	8b 45 08             	mov    0x8(%ebp),%eax
   1105c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   1105f:	e9 19 01 00 00       	jmp    1117d <k_vsprint+0x131>
        switch (state) {
   11064:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11067:	85 c0                	test   %eax,%eax
   11069:	74 0a                	je     11075 <k_vsprint+0x29>
   1106b:	83 f8 01             	cmp    $0x1,%eax
   1106e:	74 2b                	je     1109b <k_vsprint+0x4f>
   11070:	e9 07 01 00 00       	jmp    1117c <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   11075:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11079:	75 0c                	jne    11087 <k_vsprint+0x3b>
                state = READ_FMT;
   1107b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11082:	e9 f6 00 00 00       	jmp    1117d <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   11087:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1108a:	8d 50 01             	lea    0x1(%eax),%edx
   1108d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11090:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11094:	88 10                	mov    %dl,(%eax)
            }
            break;
   11096:	e9 e2 00 00 00       	jmp    1117d <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   1109b:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1109f:	75 31                	jne    110d2 <k_vsprint+0x86>
                int num  = va_arg(args, int);
   110a1:	8b 45 10             	mov    0x10(%ebp),%eax
   110a4:	8d 50 04             	lea    0x4(%eax),%edx
   110a7:	89 55 10             	mov    %edx,0x10(%ebp)
   110aa:	8b 00                	mov    (%eax),%eax
   110ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   110af:	6a 0a                	push   $0xa
   110b1:	ff 75 e4             	pushl  -0x1c(%ebp)
   110b4:	ff 75 f8             	pushl  -0x8(%ebp)
   110b7:	e8 b9 fe ff ff       	call   10f75 <k_itoa>
   110bc:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   110bf:	ff 75 f8             	pushl  -0x8(%ebp)
   110c2:	e8 7f fd ff ff       	call   10e46 <k_strlen>
   110c7:	83 c4 04             	add    $0x4,%esp
   110ca:	01 45 f8             	add    %eax,-0x8(%ebp)
   110cd:	e9 a1 00 00 00       	jmp    11173 <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   110d2:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   110d6:	75 2e                	jne    11106 <k_vsprint+0xba>
                int num  = va_arg(args, int);
   110d8:	8b 45 10             	mov    0x10(%ebp),%eax
   110db:	8d 50 04             	lea    0x4(%eax),%edx
   110de:	89 55 10             	mov    %edx,0x10(%ebp)
   110e1:	8b 00                	mov    (%eax),%eax
   110e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   110e6:	6a 10                	push   $0x10
   110e8:	ff 75 e8             	pushl  -0x18(%ebp)
   110eb:	ff 75 f8             	pushl  -0x8(%ebp)
   110ee:	e8 82 fe ff ff       	call   10f75 <k_itoa>
   110f3:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   110f6:	ff 75 f8             	pushl  -0x8(%ebp)
   110f9:	e8 48 fd ff ff       	call   10e46 <k_strlen>
   110fe:	83 c4 04             	add    $0x4,%esp
   11101:	01 45 f8             	add    %eax,-0x8(%ebp)
   11104:	eb 6d                	jmp    11173 <k_vsprint+0x127>

            }else if (ch == 'c') {
   11106:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1110a:	75 1f                	jne    1112b <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   1110c:	8b 45 10             	mov    0x10(%ebp),%eax
   1110f:	8d 50 04             	lea    0x4(%eax),%edx
   11112:	89 55 10             	mov    %edx,0x10(%ebp)
   11115:	8b 00                	mov    (%eax),%eax
   11117:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   1111a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1111d:	8d 50 01             	lea    0x1(%eax),%edx
   11120:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11123:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11127:	88 10                	mov    %dl,(%eax)
   11129:	eb 48                	jmp    11173 <k_vsprint+0x127>

            }else if (ch == 's') {
   1112b:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1112f:	75 42                	jne    11173 <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   11131:	8b 45 10             	mov    0x10(%ebp),%eax
   11134:	8d 50 04             	lea    0x4(%eax),%edx
   11137:	89 55 10             	mov    %edx,0x10(%ebp)
   1113a:	8b 00                	mov    (%eax),%eax
   1113c:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   1113f:	ff 75 f4             	pushl  -0xc(%ebp)
   11142:	e8 ff fc ff ff       	call   10e46 <k_strlen>
   11147:	83 c4 04             	add    $0x4,%esp
   1114a:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   1114d:	eb 17                	jmp    11166 <k_vsprint+0x11a>
                    *curr++ = *str++;
   1114f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11152:	8d 42 01             	lea    0x1(%edx),%eax
   11155:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11158:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1115b:	8d 48 01             	lea    0x1(%eax),%ecx
   1115e:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11161:	0f b6 12             	movzbl (%edx),%edx
   11164:	88 10                	mov    %dl,(%eax)
                while(len--) {
   11166:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11169:	8d 50 ff             	lea    -0x1(%eax),%edx
   1116c:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1116f:	85 c0                	test   %eax,%eax
   11171:	75 dc                	jne    1114f <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   11173:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   1117a:	eb 01                	jmp    1117d <k_vsprint+0x131>
        
        default:
            break;
   1117c:	90                   	nop
    while((ch = *fmt++)) {
   1117d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11180:	8d 50 01             	lea    0x1(%eax),%edx
   11183:	89 55 0c             	mov    %edx,0xc(%ebp)
   11186:	0f b6 00             	movzbl (%eax),%eax
   11189:	88 45 ef             	mov    %al,-0x11(%ebp)
   1118c:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11190:	0f 85 ce fe ff ff    	jne    11064 <k_vsprint+0x18>
        }
    }
   11196:	90                   	nop
   11197:	c9                   	leave  
   11198:	c3                   	ret    

00011199 <inb>:
static inline uint8_t inb(uint16_t  port) {
   11199:	55                   	push   %ebp
   1119a:	89 e5                	mov    %esp,%ebp
   1119c:	83 ec 14             	sub    $0x14,%esp
   1119f:	8b 45 08             	mov    0x8(%ebp),%eax
   111a2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   111a6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   111aa:	89 c2                	mov    %eax,%edx
   111ac:	ec                   	in     (%dx),%al
   111ad:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   111b0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   111b4:	c9                   	leave  
   111b5:	c3                   	ret    

000111b6 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   111b6:	55                   	push   %ebp
   111b7:	89 e5                	mov    %esp,%ebp
   111b9:	83 ec 08             	sub    $0x8,%esp
   111bc:	8b 55 08             	mov    0x8(%ebp),%edx
   111bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   111c2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   111c6:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   111c9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   111cd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   111d1:	ee                   	out    %al,(%dx)
}
   111d2:	90                   	nop
   111d3:	c9                   	leave  
   111d4:	c3                   	ret    

000111d5 <log_init>:
#include <comm/cpu_ins.h>
#include <stdarg.h>
#include <klib.h>
#define COM1_PORT       0x3f8

void log_init() {
   111d5:	55                   	push   %ebp
   111d6:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   111d8:	6a 00                	push   $0x0
   111da:	68 f9 03 00 00       	push   $0x3f9
   111df:	e8 d2 ff ff ff       	call   111b6 <outb>
   111e4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   111e7:	68 80 00 00 00       	push   $0x80
   111ec:	68 fb 03 00 00       	push   $0x3fb
   111f1:	e8 c0 ff ff ff       	call   111b6 <outb>
   111f6:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   111f9:	6a 03                	push   $0x3
   111fb:	68 f8 03 00 00       	push   $0x3f8
   11200:	e8 b1 ff ff ff       	call   111b6 <outb>
   11205:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11208:	6a 00                	push   $0x0
   1120a:	68 f9 03 00 00       	push   $0x3f9
   1120f:	e8 a2 ff ff ff       	call   111b6 <outb>
   11214:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11217:	6a 03                	push   $0x3
   11219:	68 fb 03 00 00       	push   $0x3fb
   1121e:	e8 93 ff ff ff       	call   111b6 <outb>
   11223:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11226:	68 c7 00 00 00       	push   $0xc7
   1122b:	68 fa 03 00 00       	push   $0x3fa
   11230:	e8 81 ff ff ff       	call   111b6 <outb>
   11235:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11238:	6a 0f                	push   $0xf
   1123a:	68 fc 03 00 00       	push   $0x3fc
   1123f:	e8 72 ff ff ff       	call   111b6 <outb>
   11244:	83 c4 08             	add    $0x8,%esp
}
   11247:	90                   	nop
   11248:	c9                   	leave  
   11249:	c3                   	ret    

0001124a <klog>:


void klog(const char* fmt, ...) {
   1124a:	55                   	push   %ebp
   1124b:	89 e5                	mov    %esp,%ebp
   1124d:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   11253:	83 ec 04             	sub    $0x4,%esp
   11256:	68 80 00 00 00       	push   $0x80
   1125b:	6a 00                	push   $0x0
   1125d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11263:	50                   	push   %eax
   11264:	e8 67 fc ff ff       	call   10ed0 <k_memset>
   11269:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   1126c:	8d 45 0c             	lea    0xc(%ebp),%eax
   1126f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    k_vsprint(buf, fmt, args);
   11275:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1127b:	83 ec 04             	sub    $0x4,%esp
   1127e:	50                   	push   %eax
   1127f:	ff 75 08             	pushl  0x8(%ebp)
   11282:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11288:	50                   	push   %eax
   11289:	e8 be fd ff ff       	call   1104c <k_vsprint>
   1128e:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = buf;
   11291:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11297:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   1129a:	eb 3b                	jmp    112d7 <klog+0x8d>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1129c:	90                   	nop
   1129d:	83 ec 0c             	sub    $0xc,%esp
   112a0:	68 fd 03 00 00       	push   $0x3fd
   112a5:	e8 ef fe ff ff       	call   11199 <inb>
   112aa:	83 c4 10             	add    $0x10,%esp
   112ad:	0f b6 c0             	movzbl %al,%eax
   112b0:	83 e0 40             	and    $0x40,%eax
   112b3:	85 c0                	test   %eax,%eax
   112b5:	74 e6                	je     1129d <klog+0x53>
        outb(COM1_PORT, *p++);
   112b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112ba:	8d 50 01             	lea    0x1(%eax),%edx
   112bd:	89 55 f4             	mov    %edx,-0xc(%ebp)
   112c0:	0f b6 00             	movzbl (%eax),%eax
   112c3:	0f b6 c0             	movzbl %al,%eax
   112c6:	83 ec 08             	sub    $0x8,%esp
   112c9:	50                   	push   %eax
   112ca:	68 f8 03 00 00       	push   $0x3f8
   112cf:	e8 e2 fe ff ff       	call   111b6 <outb>
   112d4:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   112d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112da:	0f b6 00             	movzbl (%eax),%eax
   112dd:	84 c0                	test   %al,%al
   112df:	75 bb                	jne    1129c <klog+0x52>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   112e1:	83 ec 08             	sub    $0x8,%esp
   112e4:	6a 0d                	push   $0xd
   112e6:	68 f8 03 00 00       	push   $0x3f8
   112eb:	e8 c6 fe ff ff       	call   111b6 <outb>
   112f0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   112f3:	83 ec 08             	sub    $0x8,%esp
   112f6:	6a 0a                	push   $0xa
   112f8:	68 f8 03 00 00       	push   $0x3f8
   112fd:	e8 b4 fe ff ff       	call   111b6 <outb>
   11302:	83 c4 10             	add    $0x10,%esp
}
   11305:	90                   	nop
   11306:	c9                   	leave  
   11307:	c3                   	ret    
