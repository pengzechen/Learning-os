
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000030fa memsz 0x000030fa flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000060 memsz 0x000081a0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001c1a0 align 2**12
         filesz 0x00000026 memsz 0x00000026 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ca0  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000045a  00012ca0  00012ca0  00003ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000060  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000071a0  00015000  00015000  00005060  2**12
                  ALLOC
  4 .first_task   00000026  80000000  0001c1a0  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001399  00000000  00000000  00006026  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000445c  00000000  00000000  000073bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001247  00000000  00000000  0000b81b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000ca68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fa5  00000000  00000000  0000cc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000dbed  2**0
                  CONTENTS, READONLY
 11 .debug_frame  0000130c  00000000  00000000  0000dc00  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012ca0 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/kernel.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 mtime.c
000102bc l     F .text	0000001f outb
00015000 l     O .bss	00000004 sys_tick
00010303 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 gdt.c
0001037c l     F .text	00000028 lgdt
00015020 l     O .bss	00000800 g_gdt_table
00015820 l     O .bss	00000014 g_mutex
00000000 l    df *ABS*	00000000 init.c
00010573 l     F .text	0000000b list_count
0001057e l     F .text	0000000a list_first
00010588 l     F .text	0000000b list_last
00000000 l    df *ABS*	00000000 irq.c
0001083d l     F .text	00000007 hlt
00010844 l     F .text	00000007 cli
0001084b l     F .text	00000007 sti
00010852 l     F .text	00000028 lidt
0001087a l     F .text	0000001d inb
00010897 l     F .text	0000001f outb
000108b6 l     F .text	00000011 read_cr2
000108c7 l     F .text	00000010 read_eflags
000108d7 l     F .text	0000000b write_eflags
00015840 l     O .bss	00000400 idt_table
000108e2 l     F .text	00000030 default_handler
00010c63 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00014000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 list.c
000116c0 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000118b9 l     F .text	0000001d inb
000118d6 l     F .text	0000001f outb
00015c40 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mem.c
00011a70 l     F .text	0000000d down2
00011a7d l     F .text	00000017 up2
00011a94 l     F .text	0000000c write_cr3
00011aa0 l     F .text	00000011 mmu_set_page_dir
00011ab1 l     F .text	00000014 pde_index
00011ac5 l     F .text	00000027 pde_paddr
00011aec l     F .text	00000010 pte_index
00011afc l     F .text	00000027 pte_paddr
00016000 l     O .bss	00000028 g_paddr_alloc
00017000 l     O .bss	00001000 g_kernel_page_dir
00011b23 l     F .text	00000058 addr_alloc_init
00011b7b l     F .text	00000067 addr_alloc_page
00011be2 l     F .text	00000062 addr_free_page
00011cf1 l     F .text	00000066 show_mem_info
00011d57 l     F .text	00000037 total_mem_size
00014020 l     O .data	00000040 kernel_map.2279
000121fd l     F .text	00000010 curr_page_dir
00000000 l    df *ABS*	00000000 mutex.c
0001229a l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00012424 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 task.c
00012568 l     F .text	00000007 hlt
0001256f l     F .text	0000000c write_cr3
0001257b l     F .text	0000001a far_jump
00012595 l     F .text	00000017 write_tr
000125ac l     F .text	0000001b list_node_init
000125c7 l     F .text	0000000b list_node_next
000125d2 l     F .text	0000000b list_count
000125dd l     F .text	0000000a list_first
000125e7 l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	000001a0 g_task_manager
000181a0 l     O .bss	00002000 idle_task_stack
000125f8 l     F .text	0000000a idle_task_func
0001261c l     F .text	00000156 tss_init
00000000 l    df *ABS*	00000000 first_task.c
00011060 g     F .text	0000003a bitmap_get_bit
000129a5 g     F .text	0000000a task_current
00010fce g     F .text	00000018 irq_enter_proection
00011834 g     F .text	00000085 list_delete
00010f98 g     F .text	0000000b irq_enable_global
00011757 g     F .text	00000064 list_insert_last
000129af g     F .text	00000035 task_set_ready
0001109a g     F .text	0000001b bitmap_is_set
0001099e g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
00010bd0 g     F .text	0000001c handle_virtual_exception
000118f5 g     F .text	0000009d log_init
0001080b g     F .text	00000032 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
0001053a g     F .text	00000039 gdt_free_sel
00014000 g       .data	00000000 s_data
000112f3 g     F .text	0000007a k_strncmp
00010a46 g     F .text	0000001c handle_segment_not_present
00010e7b g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
0001094a g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
00011e3e g     F .text	00000080 memory_create_map
000101b3 g       .text	00000000 exception_handler_general_protection
0001253f g     F .text	00000029 sem_count
80000010 g     F .first_task	00000016 first_task_main
000110b5 g     F .text	000000d4 bitmap_set_bit
00010a9a g     F .text	000000c6 handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010fa3 g     F .text	0000002b pic_send_eoi
00010000 g       .text	00000000 s_text
00012048 g     F .text	00000085 memory_create_uvm
00012452 g     F .text	0000006b sem_wait
000121b6 g     F .text	00000027 memory_alloc_page_for
0001123c g     F .text	00000047 k_strcpy
00011283 g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
0001042a g     F .text	0000009b gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
0001a1a0 g     O .bss	00002000 stack
00012bed g     F .text	00000058 sys_sleep
0001220d g     F .text	0000008d memory_free_page
00010603 g     F .text	00000163 list_test
0001c1a0 g       *ABS*	00000000 s_first_task
000109d6 g     F .text	0000001c handle_invalid_opcode
0001136d g     F .text	0000003b k_strlen
00011438 g     F .text	00000064 k_memcmp
000120cd g     F .text	000000e9 memory_alloc_for_page_dir
000100e2 g       .text	00000000 exception_handler_bound_range
000124bd g     F .text	00000082 sem_notify
0001299b g     F .text	0000000a get_first_task
0001015c g       .text	00000000 exception_handler_invalid_tss
00011573 g     F .text	0000014d k_vsprint
000116f8 g     F .text	0000005f list_insert_first
00012c80 g     F .text	00000020 task_set_wakeup
00012900 g     F .text	0000009b first_task_init
00010047 g       .text	00000000 exception_handler_divider
00011c44 g     F .text	000000ad some_test
00010b60 g     F .text	0000001c handle_fpu_error
00010f8d g     F .text	0000000b irq_disable_global
00012a0f g     F .text	00000061 sys_sched_yield
0001c1c6 g       *ABS*	00000000 mem_free_start
00010912 g     F .text	0000001c handle_unknown
00010593 g     F .text	0000002b kernel_init
000113f7 g     F .text	00000041 k_memset
0001242f g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
000105be g     F .text	00000045 show_list
0001c1a0 g       .bss	00000000 e_data
000122d3 g     F .text	00000094 mutex_lock
00010229 g       .text	00000000 exception_handler_machine_check
00000000 g       *ABS*	00000000 kernel_base
0001c1c6 g       *ABS*	00000000 e_first_task
00012c45 g     F .text	0000003b task_set_sleep
00010c33 g     F .text	00000030 irq_install
00010bb4 g     F .text	0000001c handle_smd_exception
000122a5 g     F .text	0000002e mutex_init
00010f06 g     F .text	00000087 irq_disable
00010a7e g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
00010fe6 g     F .text	00000011 irq_leave_proection
00010ff7 g     F .text	00000016 bitmap_byte_count
00010b7c g     F .text	0000001c handle_alignment_check
00012ab3 g     F .text	0000005c task_dispatch
000107c6 g     F .text	00000045 move_to_first_task
00010b98 g     F .text	0000001c handle_machine_check
00012a70 g     F .text	00000043 task_next_run
00011ebe g     F .text	0000009b create_kernel_table
000116d3 g     F .text	00000025 list_init
00010a62 g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
000129e4 g     F .text	0000002b task_set_block
000109ba g     F .text	0000001c handle_bound_range
000121dd g     F .text	00000020 memory_alloc_page
000101ed g       .text	00000000 exception_handler_fpu_error
00012602 g     F .text	0000001a task_switch_from_to
00010cf6 g     F .text	00000185 irq_init
0001149c g     F .text	000000d7 k_itoa
00012367 g     F .text	000000bd mutex_unlock
00010a0e g     F .text	0000001c handle_double_fault
000102db g     F .text	00000028 handle_time
000102bb g       .text	00000000 exception_handle_syscall
000103a4 g     F .text	00000086 segment_desc_set
00010766 g     F .text	00000060 offset_test
000130fa g       .rodata	00000000 e_text
00010982 g     F .text	0000001c handle_breakpoint
0001100d g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00011189 g     F .text	000000b3 bitmap_alloc_nbits
00012852 g     F .text	000000ae task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00012b0f g     F .text	000000de task_time_tick
00011f59 g     F .text	000000ef memory_init
000109f2 g     F .text	0000001c handle_device_unavailable
0001092e g     F .text	0000001c handle_divider
000113a8 g     F .text	0000004f k_memcpy
00012772 g     F .text	000000e0 task_init
000104c5 g     F .text	00000075 gdt_alloc_desc
000117bb g     F .text	00000079 list_delete_first
00010bec g     F .text	00000047 gate_desc_set
00011992 g     F .text	000000de klog
00010966 g     F .text	0000001c handle_NMI
00010a2a g     F .text	0000001c handle_invalid_tss
00011d8e g     F .text	000000b0 find_pte
00010364 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 8a 05 00 00       	call   10593 <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc a0 c1 01 00       	mov    $0x1c1a0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 e3 07 00 00       	jmp    1080b <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 d9 08 00 00       	call   10912 <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 d6 08 00 00       	call   1092e <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 d3 08 00 00       	call   1094a <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 d0 08 00 00       	call   10966 <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 cd 08 00 00       	call   10982 <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 ca 08 00 00       	call   1099e <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 c7 08 00 00       	call   109ba <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 c4 08 00 00       	call   109d6 <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 c1 08 00 00       	call   109f2 <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 c0 08 00 00       	call   10a0e <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 bf 08 00 00       	call   10a2a <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 be 08 00 00       	call   10a46 <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 bd 08 00 00       	call   10a62 <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 bc 08 00 00       	call   10a7e <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 bb 08 00 00       	call   10a9a <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 62 09 00 00       	call   10b60 <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 61 09 00 00       	call   10b7c <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 5e 09 00 00       	call   10b98 <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 5b 09 00 00       	call   10bb4 <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 58 09 00 00       	call   10bd0 <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 44 00 00 00       	call   102db <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch

simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp
    
    sti
   102b9:	fb                   	sti    
    ret
   102ba:	c3                   	ret    

000102bb <exception_handle_syscall>:


    .global exception_handle_syscall
exception_handle_syscall:

   102bb:	c3                   	ret    

000102bc <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   102bc:	55                   	push   %ebp
   102bd:	89 e5                	mov    %esp,%ebp
   102bf:	83 ec 08             	sub    $0x8,%esp
   102c2:	8b 55 08             	mov    0x8(%ebp),%edx
   102c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   102cc:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   102cf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   102d3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   102d7:	ee                   	out    %al,(%dx)
}
   102d8:	90                   	nop
   102d9:	c9                   	leave  
   102da:	c3                   	ret    

000102db <handle_time>:


static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   102db:	55                   	push   %ebp
   102dc:	89 e5                	mov    %esp,%ebp
   102de:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   102e1:	a1 00 50 01 00       	mov    0x15000,%eax
   102e6:	83 c0 01             	add    $0x1,%eax
   102e9:	a3 00 50 01 00       	mov    %eax,0x15000
    pic_send_eoi(IRQ0_TIMER);
   102ee:	83 ec 0c             	sub    $0xc,%esp
   102f1:	6a 20                	push   $0x20
   102f3:	e8 ab 0c 00 00       	call   10fa3 <pic_send_eoi>
   102f8:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   102fb:	e8 0f 28 00 00       	call   12b0f <task_time_tick>
} 
   10300:	90                   	nop
   10301:	c9                   	leave  
   10302:	c3                   	ret    

00010303 <pit_init>:

static void pit_init (void) {
   10303:	55                   	push   %ebp
   10304:	89 e5                	mov    %esp,%ebp
   10306:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10309:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   10310:	6a 36                	push   $0x36
   10312:	6a 43                	push   $0x43
   10314:	e8 a3 ff ff ff       	call   102bc <outb>
   10319:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   1031c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1031f:	0f b6 c0             	movzbl %al,%eax
   10322:	50                   	push   %eax
   10323:	6a 40                	push   $0x40
   10325:	e8 92 ff ff ff       	call   102bc <outb>
   1032a:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   1032d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10330:	c1 e8 08             	shr    $0x8,%eax
   10333:	0f b6 c0             	movzbl %al,%eax
   10336:	50                   	push   %eax
   10337:	6a 40                	push   $0x40
   10339:	e8 7e ff ff ff       	call   102bc <outb>
   1033e:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   10341:	b8 86 02 01 00       	mov    $0x10286,%eax
   10346:	83 ec 08             	sub    $0x8,%esp
   10349:	50                   	push   %eax
   1034a:	6a 20                	push   $0x20
   1034c:	e8 e2 08 00 00       	call   10c33 <irq_install>
   10351:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10354:	83 ec 0c             	sub    $0xc,%esp
   10357:	6a 20                	push   $0x20
   10359:	e8 1d 0b 00 00       	call   10e7b <irq_enable>
   1035e:	83 c4 10             	add    $0x10,%esp
}
   10361:	90                   	nop
   10362:	c9                   	leave  
   10363:	c3                   	ret    

00010364 <time_init>:

void time_init() {
   10364:	55                   	push   %ebp
   10365:	89 e5                	mov    %esp,%ebp
   10367:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1036a:	c7 05 00 50 01 00 00 	movl   $0x0,0x15000
   10371:	00 00 00 

    pit_init();
   10374:	e8 8a ff ff ff       	call   10303 <pit_init>
   10379:	90                   	nop
   1037a:	c9                   	leave  
   1037b:	c3                   	ret    

0001037c <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1037c:	55                   	push   %ebp
   1037d:	89 e5                	mov    %esp,%ebp
   1037f:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	c1 e8 10             	shr    $0x10,%eax
   10388:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   1038c:	8b 45 08             	mov    0x8(%ebp),%eax
   1038f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   10393:	8b 45 0c             	mov    0xc(%ebp),%eax
   10396:	83 e8 01             	sub    $0x1,%eax
   10399:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1039d:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   103a1:	90                   	nop
   103a2:	c9                   	leave  
   103a3:	c3                   	ret    

000103a4 <segment_desc_set>:
#include <irq.h>

static segment_desc_t g_gdt_table[GDT_TABLE_SIZE];
static mutex_t g_mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   103a4:	55                   	push   %ebp
   103a5:	89 e5                	mov    %esp,%ebp
   103a7:	83 ec 14             	sub    $0x14,%esp
   103aa:	8b 45 14             	mov    0x14(%ebp),%eax
   103ad:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = g_gdt_table + (selector >> 3);
   103b1:	8b 45 08             	mov    0x8(%ebp),%eax
   103b4:	c1 f8 03             	sar    $0x3,%eax
   103b7:	c1 e0 03             	shl    $0x3,%eax
   103ba:	05 20 50 01 00       	add    $0x15020,%eax
   103bf:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   103c2:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   103c9:	76 0f                	jbe    103da <segment_desc_set+0x36>
		attr |= 0x8000;
   103cb:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   103d1:	8b 45 10             	mov    0x10(%ebp),%eax
   103d4:	c1 e8 0c             	shr    $0xc,%eax
   103d7:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   103da:	8b 45 10             	mov    0x10(%ebp),%eax
   103dd:	89 c2                	mov    %eax,%edx
   103df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103e2:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   103e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   103e8:	89 c2                	mov    %eax,%edx
   103ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103ed:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   103f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   103f4:	c1 e8 10             	shr    $0x10,%eax
   103f7:	89 c2                	mov    %eax,%edx
   103f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103fc:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   103ff:	8b 45 10             	mov    0x10(%ebp),%eax
   10402:	c1 e8 10             	shr    $0x10,%eax
   10405:	c1 e0 08             	shl    $0x8,%eax
   10408:	66 25 00 0f          	and    $0xf00,%ax
   1040c:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10410:	89 c2                	mov    %eax,%edx
   10412:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10415:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10419:	8b 45 0c             	mov    0xc(%ebp),%eax
   1041c:	c1 e8 18             	shr    $0x18,%eax
   1041f:	89 c2                	mov    %eax,%edx
   10421:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10424:	88 50 07             	mov    %dl,0x7(%eax)
}
   10427:	90                   	nop
   10428:	c9                   	leave  
   10429:	c3                   	ret    

0001042a <gdt_init>:

void gdt_init() {
   1042a:	55                   	push   %ebp
   1042b:	89 e5                	mov    %esp,%ebp
   1042d:	83 ec 18             	sub    $0x18,%esp
    mutex_init(&g_mutex);
   10430:	83 ec 0c             	sub    $0xc,%esp
   10433:	68 20 58 01 00       	push   $0x15820
   10438:	e8 68 1e 00 00       	call   122a5 <mutex_init>
   1043d:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10440:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10447:	eb 19                	jmp    10462 <gdt_init+0x38>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10449:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1044c:	c1 e0 03             	shl    $0x3,%eax
   1044f:	6a 00                	push   $0x0
   10451:	6a 00                	push   $0x0
   10453:	6a 00                	push   $0x0
   10455:	50                   	push   %eax
   10456:	e8 49 ff ff ff       	call   103a4 <segment_desc_set>
   1045b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1045e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10462:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10469:	7e de                	jle    10449 <gdt_init+0x1f>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1046b:	68 92 c0 00 00       	push   $0xc092
   10470:	6a ff                	push   $0xffffffff
   10472:	6a 00                	push   $0x0
   10474:	6a 10                	push   $0x10
   10476:	e8 29 ff ff ff       	call   103a4 <segment_desc_set>
   1047b:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1047e:	68 9a c0 00 00       	push   $0xc09a
   10483:	6a ff                	push   $0xffffffff
   10485:	6a 00                	push   $0x0
   10487:	6a 08                	push   $0x8
   10489:	e8 16 ff ff ff       	call   103a4 <segment_desc_set>
   1048e:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    gate_desc_set((gate_desc_t*)(g_gdt_table + (SELECTOR_SYSCALL << 3)),
   10491:	ba bb 02 01 00       	mov    $0x102bb,%edx
   10496:	b8 20 56 01 00       	mov    $0x15620,%eax
   1049b:	68 e5 0c 00 00       	push   $0xce5
   104a0:	52                   	push   %edx
   104a1:	6a 08                	push   $0x8
   104a3:	50                   	push   %eax
   104a4:	e8 43 07 00 00       	call   10bec <gate_desc_set>
   104a9:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS, (uint32_t)exception_handle_syscall, 
        SEG_P_PRESENT | SEG_DPL3 | SEG_TYPE_SYSCALL | SYSCALL_PARAM_COUNT );

    lgdt((uint32_t)g_gdt_table, sizeof(g_gdt_table));
   104ac:	b8 20 50 01 00       	mov    $0x15020,%eax
   104b1:	83 ec 08             	sub    $0x8,%esp
   104b4:	68 00 08 00 00       	push   $0x800
   104b9:	50                   	push   %eax
   104ba:	e8 bd fe ff ff       	call   1037c <lgdt>
   104bf:	83 c4 10             	add    $0x10,%esp

}
   104c2:	90                   	nop
   104c3:	c9                   	leave  
   104c4:	c3                   	ret    

000104c5 <gdt_alloc_desc>:

int  gdt_alloc_desc() {
   104c5:	55                   	push   %ebp
   104c6:	89 e5                	mov    %esp,%ebp
   104c8:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&g_mutex);
   104cb:	83 ec 0c             	sub    $0xc,%esp
   104ce:	68 20 58 01 00       	push   $0x15820
   104d3:	e8 fb 1d 00 00       	call   122d3 <mutex_lock>
   104d8:	83 c4 10             	add    $0x10,%esp
    int i = 1;
   104db:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    for(; i < GDT_TABLE_SIZE; i++) {
   104e2:	eb 36                	jmp    1051a <gdt_alloc_desc+0x55>
        segment_desc_t* desc = g_gdt_table + i;
   104e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104e7:	c1 e0 03             	shl    $0x3,%eax
   104ea:	05 20 50 01 00       	add    $0x15020,%eax
   104ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(desc->attr == 0) {
   104f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   104f5:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104f9:	66 85 c0             	test   %ax,%ax
   104fc:	75 18                	jne    10516 <gdt_alloc_desc+0x51>
            mutex_unlock(&g_mutex);
   104fe:	83 ec 0c             	sub    $0xc,%esp
   10501:	68 20 58 01 00       	push   $0x15820
   10506:	e8 5c 1e 00 00       	call   12367 <mutex_unlock>
   1050b:	83 c4 10             	add    $0x10,%esp
            return ( i * sizeof(segment_desc_t) );
   1050e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10511:	c1 e0 03             	shl    $0x3,%eax
   10514:	eb 22                	jmp    10538 <gdt_alloc_desc+0x73>
    for(; i < GDT_TABLE_SIZE; i++) {
   10516:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1051a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10521:	7e c1                	jle    104e4 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&g_mutex);
   10523:	83 ec 0c             	sub    $0xc,%esp
   10526:	68 20 58 01 00       	push   $0x15820
   1052b:	e8 37 1e 00 00       	call   12367 <mutex_unlock>
   10530:	83 c4 10             	add    $0x10,%esp
    return -1;
   10533:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10538:	c9                   	leave  
   10539:	c3                   	ret    

0001053a <gdt_free_sel>:

void gdt_free_sel(int sel) {
   1053a:	55                   	push   %ebp
   1053b:	89 e5                	mov    %esp,%ebp
   1053d:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&g_mutex);
   10540:	83 ec 0c             	sub    $0xc,%esp
   10543:	68 20 58 01 00       	push   $0x15820
   10548:	e8 86 1d 00 00       	call   122d3 <mutex_lock>
   1054d:	83 c4 10             	add    $0x10,%esp
    g_gdt_table[sel/sizeof(segment_desc_t)].attr = 0;
   10550:	8b 45 08             	mov    0x8(%ebp),%eax
   10553:	c1 e8 03             	shr    $0x3,%eax
   10556:	66 c7 04 c5 25 50 01 	movw   $0x0,0x15025(,%eax,8)
   1055d:	00 00 00 
    mutex_unlock(&g_mutex);
   10560:	83 ec 0c             	sub    $0xc,%esp
   10563:	68 20 58 01 00       	push   $0x15820
   10568:	e8 fa 1d 00 00       	call   12367 <mutex_unlock>
   1056d:	83 c4 10             	add    $0x10,%esp
}
   10570:	90                   	nop
   10571:	c9                   	leave  
   10572:	c3                   	ret    

00010573 <list_count>:

static inline int list_is_empty (list_t* list) {
    return list->count == 0;
}

static inline int list_count (list_t* list) {
   10573:	55                   	push   %ebp
   10574:	89 e5                	mov    %esp,%ebp
    return list->count;
   10576:	8b 45 08             	mov    0x8(%ebp),%eax
   10579:	8b 40 08             	mov    0x8(%eax),%eax
}
   1057c:	5d                   	pop    %ebp
   1057d:	c3                   	ret    

0001057e <list_first>:

static inline list_node_t* list_first (list_t* list) {
   1057e:	55                   	push   %ebp
   1057f:	89 e5                	mov    %esp,%ebp
    return list->first;
   10581:	8b 45 08             	mov    0x8(%ebp),%eax
   10584:	8b 00                	mov    (%eax),%eax
}
   10586:	5d                   	pop    %ebp
   10587:	c3                   	ret    

00010588 <list_last>:

static inline list_node_t* list_last (list_t* list) {
   10588:	55                   	push   %ebp
   10589:	89 e5                	mov    %esp,%ebp
    return list->last;
   1058b:	8b 45 08             	mov    0x8(%ebp),%eax
   1058e:	8b 40 04             	mov    0x4(%eax),%eax
}
   10591:	5d                   	pop    %ebp
   10592:	c3                   	ret    

00010593 <kernel_init>:

// void test_mem_page() {}
// *(uint8_t*)test_mem_page = 0x12;
// *(uint8_t*)test_mem_page = 0x34;

void kernel_init (boot_info_t * boot_info) {
   10593:	55                   	push   %ebp
   10594:	89 e5                	mov    %esp,%ebp
   10596:	83 ec 08             	sub    $0x8,%esp
    log_init();
   10599:	e8 57 13 00 00       	call   118f5 <log_init>
    gdt_init();
   1059e:	e8 87 fe ff ff       	call   1042a <gdt_init>
    memory_init(boot_info);
   105a3:	83 ec 0c             	sub    $0xc,%esp
   105a6:	ff 75 08             	pushl  0x8(%ebp)
   105a9:	e8 ab 19 00 00       	call   11f59 <memory_init>
   105ae:	83 c4 10             	add    $0x10,%esp
    irq_init();
   105b1:	e8 40 07 00 00       	call   10cf6 <irq_init>
    time_init();
   105b6:	e8 a9 fd ff ff       	call   10364 <time_init>
}
   105bb:	90                   	nop
   105bc:	c9                   	leave  
   105bd:	c3                   	ret    

000105be <show_list>:


void show_list(list_t list) {
   105be:	55                   	push   %ebp
   105bf:	89 e5                	mov    %esp,%ebp
   105c1:	56                   	push   %esi
   105c2:	53                   	push   %ebx
    klog("list: first=0x%x, last=0x%x, count=%d",
   105c3:	8d 45 08             	lea    0x8(%ebp),%eax
   105c6:	50                   	push   %eax
   105c7:	e8 a7 ff ff ff       	call   10573 <list_count>
   105cc:	83 c4 04             	add    $0x4,%esp
   105cf:	89 c6                	mov    %eax,%esi
   105d1:	8d 45 08             	lea    0x8(%ebp),%eax
   105d4:	50                   	push   %eax
   105d5:	e8 ae ff ff ff       	call   10588 <list_last>
   105da:	83 c4 04             	add    $0x4,%esp
   105dd:	89 c3                	mov    %eax,%ebx
   105df:	8d 45 08             	lea    0x8(%ebp),%eax
   105e2:	50                   	push   %eax
   105e3:	e8 96 ff ff ff       	call   1057e <list_first>
   105e8:	83 c4 04             	add    $0x4,%esp
   105eb:	56                   	push   %esi
   105ec:	53                   	push   %ebx
   105ed:	50                   	push   %eax
   105ee:	68 a0 2c 01 00       	push   $0x12ca0
   105f3:	e8 9a 13 00 00       	call   11992 <klog>
   105f8:	83 c4 10             	add    $0x10,%esp
         list_first(&list), list_last(&list), list_count(&list) );
}
   105fb:	90                   	nop
   105fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
   105ff:	5b                   	pop    %ebx
   10600:	5e                   	pop    %esi
   10601:	5d                   	pop    %ebp
   10602:	c3                   	ret    

00010603 <list_test>:

void list_test() {
   10603:	55                   	push   %ebp
   10604:	89 e5                	mov    %esp,%ebp
   10606:	83 ec 58             	sub    $0x58,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   10609:	83 ec 0c             	sub    $0xc,%esp
   1060c:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   1060f:	50                   	push   %eax
   10610:	e8 be 10 00 00       	call   116d3 <list_init>
   10615:	83 c4 10             	add    $0x10,%esp

    show_list(list);
   10618:	83 ec 04             	sub    $0x4,%esp
   1061b:	ff 75 dc             	pushl  -0x24(%ebp)
   1061e:	ff 75 d8             	pushl  -0x28(%ebp)
   10621:	ff 75 d4             	pushl  -0x2c(%ebp)
   10624:	e8 95 ff ff ff       	call   105be <show_list>
   10629:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   1062c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10633:	eb 3f                	jmp    10674 <list_test+0x71>
        list_node_t * node = nodes + i;
   10635:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10638:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1063f:	8d 45 ac             	lea    -0x54(%ebp),%eax
   10642:	01 d0                	add    %edx,%eax
   10644:	89 45 e0             	mov    %eax,-0x20(%ebp)
        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   10647:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1064a:	83 ec 04             	sub    $0x4,%esp
   1064d:	50                   	push   %eax
   1064e:	ff 75 f4             	pushl  -0xc(%ebp)
   10651:	68 c8 2c 01 00       	push   $0x12cc8
   10656:	e8 37 13 00 00       	call   11992 <klog>
   1065b:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   1065e:	83 ec 08             	sub    $0x8,%esp
   10661:	ff 75 e0             	pushl  -0x20(%ebp)
   10664:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10667:	50                   	push   %eax
   10668:	e8 8b 10 00 00       	call   116f8 <list_insert_first>
   1066d:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10670:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10674:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   10678:	7e bb                	jle    10635 <list_test+0x32>
    }
    show_list(list);
   1067a:	83 ec 04             	sub    $0x4,%esp
   1067d:	ff 75 dc             	pushl  -0x24(%ebp)
   10680:	ff 75 d8             	pushl  -0x28(%ebp)
   10683:	ff 75 d4             	pushl  -0x2c(%ebp)
   10686:	e8 33 ff ff ff       	call   105be <show_list>
   1068b:	83 c4 10             	add    $0x10,%esp

    list_init(&list);
   1068e:	83 ec 0c             	sub    $0xc,%esp
   10691:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10694:	50                   	push   %eax
   10695:	e8 39 10 00 00       	call   116d3 <list_init>
   1069a:	83 c4 10             	add    $0x10,%esp
    show_list(list);
   1069d:	83 ec 04             	sub    $0x4,%esp
   106a0:	ff 75 dc             	pushl  -0x24(%ebp)
   106a3:	ff 75 d8             	pushl  -0x28(%ebp)
   106a6:	ff 75 d4             	pushl  -0x2c(%ebp)
   106a9:	e8 10 ff ff ff       	call   105be <show_list>
   106ae:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   106b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   106b8:	eb 3f                	jmp    106f9 <list_test+0xf6>
        list_node_t * node = nodes + i;
   106ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106bd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   106c4:	8d 45 ac             	lea    -0x54(%ebp),%eax
   106c7:	01 d0                	add    %edx,%eax
   106c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   106cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106cf:	83 ec 04             	sub    $0x4,%esp
   106d2:	50                   	push   %eax
   106d3:	ff 75 f0             	pushl  -0x10(%ebp)
   106d6:	68 c8 2c 01 00       	push   $0x12cc8
   106db:	e8 b2 12 00 00       	call   11992 <klog>
   106e0:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   106e3:	83 ec 08             	sub    $0x8,%esp
   106e6:	ff 75 e4             	pushl  -0x1c(%ebp)
   106e9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   106ec:	50                   	push   %eax
   106ed:	e8 65 10 00 00       	call   11757 <list_insert_last>
   106f2:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   106f5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   106f9:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   106fd:	7e bb                	jle    106ba <list_test+0xb7>
    }
    show_list(list);
   106ff:	83 ec 04             	sub    $0x4,%esp
   10702:	ff 75 dc             	pushl  -0x24(%ebp)
   10705:	ff 75 d8             	pushl  -0x28(%ebp)
   10708:	ff 75 d4             	pushl  -0x2c(%ebp)
   1070b:	e8 ae fe ff ff       	call   105be <show_list>
   10710:	83 c4 10             	add    $0x10,%esp
    
    for(int i=0; i<5; i++) {
   10713:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1071a:	eb 2d                	jmp    10749 <list_test+0x146>
        list_node_t* node = list_delete_first(&list);
   1071c:	83 ec 0c             	sub    $0xc,%esp
   1071f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10722:	50                   	push   %eax
   10723:	e8 93 10 00 00       	call   117bb <list_delete_first>
   10728:	83 c4 10             	add    $0x10,%esp
   1072b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("delete first from list: %d, 0x%x", i, (uint32_t)node);
   1072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10731:	83 ec 04             	sub    $0x4,%esp
   10734:	50                   	push   %eax
   10735:	ff 75 ec             	pushl  -0x14(%ebp)
   10738:	68 e8 2c 01 00       	push   $0x12ce8
   1073d:	e8 50 12 00 00       	call   11992 <klog>
   10742:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10745:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   10749:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   1074d:	7e cd                	jle    1071c <list_test+0x119>
    }

    show_list(list);
   1074f:	83 ec 04             	sub    $0x4,%esp
   10752:	ff 75 dc             	pushl  -0x24(%ebp)
   10755:	ff 75 d8             	pushl  -0x28(%ebp)
   10758:	ff 75 d4             	pushl  -0x2c(%ebp)
   1075b:	e8 5e fe ff ff       	call   105be <show_list>
   10760:	83 c4 10             	add    $0x10,%esp

}
   10763:	90                   	nop
   10764:	c9                   	leave  
   10765:	c3                   	ret    

00010766 <offset_test>:

void offset_test() {
   10766:	55                   	push   %ebp
   10767:	89 e5                	mov    %esp,%ebp
   10769:	83 ec 28             	sub    $0x28,%esp
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   1076c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   10773:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1077a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10781:	c7 45 e4 56 34 12 00 	movl   $0x123456,-0x1c(%ebp)

    list_node_t * v_node = &v.node;
   10788:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   1078b:	83 c0 04             	add    $0x4,%eax
   1078e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   10791:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10795:	74 08                	je     1079f <offset_test+0x39>
   10797:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1079a:	83 e8 04             	sub    $0x4,%eax
   1079d:	eb 05                	jmp    107a4 <offset_test+0x3e>
   1079f:	b8 00 00 00 00       	mov    $0x0,%eax
   107a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    if(p->i != 0x123456) {
   107a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107aa:	8b 00                	mov    (%eax),%eax
   107ac:	3d 56 34 12 00       	cmp    $0x123456,%eax
   107b1:	74 10                	je     107c3 <offset_test+0x5d>
        klog("error");
   107b3:	83 ec 0c             	sub    $0xc,%esp
   107b6:	68 09 2d 01 00       	push   $0x12d09
   107bb:	e8 d2 11 00 00       	call   11992 <klog>
   107c0:	83 c4 10             	add    $0x10,%esp
    }
}
   107c3:	90                   	nop
   107c4:	c9                   	leave  
   107c5:	c3                   	ret    

000107c6 <move_to_first_task>:



void move_to_first_task(void) {
   107c6:	55                   	push   %ebp
   107c7:	89 e5                	mov    %esp,%ebp
   107c9:	56                   	push   %esi
   107ca:	53                   	push   %ebx
   107cb:	83 ec 10             	sub    $0x10,%esp
    task_t * curr = task_current();
   107ce:	e8 d2 21 00 00       	call   129a5 <task_current>
   107d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    tss_t * tss = &(curr->tss);
   107d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107d9:	83 c0 4c             	add    $0x4c,%eax
   107dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"
        ::[ss]"r"(tss->ss), 
   107df:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107e2:	8b 40 50             	mov    0x50(%eax),%eax
        [esp]"r"(tss->esp),
   107e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   107e8:	8b 52 38             	mov    0x38(%edx),%edx
        [eflags]"r"(tss->eflags),
   107eb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   107ee:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs),
   107f1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   107f4:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
        [eip]"r"(tss->eip)
   107f7:	8b 75 f0             	mov    -0x10(%ebp),%esi
   107fa:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__( 
   107fd:	50                   	push   %eax
   107fe:	52                   	push   %edx
   107ff:	51                   	push   %ecx
   10800:	53                   	push   %ebx
   10801:	56                   	push   %esi
   10802:	cf                   	iret   
    );
}
   10803:	90                   	nop
   10804:	83 c4 10             	add    $0x10,%esp
   10807:	5b                   	pop    %ebx
   10808:	5e                   	pop    %esi
   10809:	5d                   	pop    %ebp
   1080a:	c3                   	ret    

0001080b <init_main>:

void init_main() {
   1080b:	55                   	push   %ebp
   1080c:	89 e5                	mov    %esp,%ebp
   1080e:	83 ec 08             	sub    $0x8,%esp
    klog("Kernal %s is running ... ", "1.0.0");
   10811:	83 ec 08             	sub    $0x8,%esp
   10814:	68 0f 2d 01 00       	push   $0x12d0f
   10819:	68 15 2d 01 00       	push   $0x12d15
   1081e:	e8 6f 11 00 00       	call   11992 <klog>
   10823:	83 c4 10             	add    $0x10,%esp

    task_manager_init();
   10826:	e8 27 20 00 00       	call   12852 <task_manager_init>
    first_task_init();
   1082b:	e8 d0 20 00 00       	call   12900 <first_task_init>
    irq_enable_global();
   10830:	e8 63 07 00 00       	call   10f98 <irq_enable_global>
    
    move_to_first_task();
   10835:	e8 8c ff ff ff       	call   107c6 <move_to_first_task>
   1083a:	90                   	nop
   1083b:	c9                   	leave  
   1083c:	c3                   	ret    

0001083d <hlt>:
static inline void hlt() {
   1083d:	55                   	push   %ebp
   1083e:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   10840:	f4                   	hlt    
}
   10841:	90                   	nop
   10842:	5d                   	pop    %ebp
   10843:	c3                   	ret    

00010844 <cli>:
static inline void cli() {
   10844:	55                   	push   %ebp
   10845:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   10847:	fa                   	cli    
}
   10848:	90                   	nop
   10849:	5d                   	pop    %ebp
   1084a:	c3                   	ret    

0001084b <sti>:
static inline void sti() {
   1084b:	55                   	push   %ebp
   1084c:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   1084e:	fb                   	sti    
}
   1084f:	90                   	nop
   10850:	5d                   	pop    %ebp
   10851:	c3                   	ret    

00010852 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10852:	55                   	push   %ebp
   10853:	89 e5                	mov    %esp,%ebp
   10855:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   10858:	8b 45 08             	mov    0x8(%ebp),%eax
   1085b:	c1 e8 10             	shr    $0x10,%eax
   1085e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   10862:	8b 45 08             	mov    0x8(%ebp),%eax
   10865:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   10869:	8b 45 0c             	mov    0xc(%ebp),%eax
   1086c:	83 e8 01             	sub    $0x1,%eax
   1086f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   10873:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10877:	90                   	nop
   10878:	c9                   	leave  
   10879:	c3                   	ret    

0001087a <inb>:
static inline uint8_t inb(uint16_t  port) {
   1087a:	55                   	push   %ebp
   1087b:	89 e5                	mov    %esp,%ebp
   1087d:	83 ec 14             	sub    $0x14,%esp
   10880:	8b 45 08             	mov    0x8(%ebp),%eax
   10883:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   10887:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1088b:	89 c2                	mov    %eax,%edx
   1088d:	ec                   	in     (%dx),%al
   1088e:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   10891:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10895:	c9                   	leave  
   10896:	c3                   	ret    

00010897 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10897:	55                   	push   %ebp
   10898:	89 e5                	mov    %esp,%ebp
   1089a:	83 ec 08             	sub    $0x8,%esp
   1089d:	8b 55 08             	mov    0x8(%ebp),%edx
   108a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   108a3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   108a7:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   108aa:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   108ae:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   108b2:	ee                   	out    %al,(%dx)
}
   108b3:	90                   	nop
   108b4:	c9                   	leave  
   108b5:	c3                   	ret    

000108b6 <read_cr2>:

static inline void write_cr0(uint32_t v) {
	__asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
}

static inline uint32_t read_cr2() {
   108b6:	55                   	push   %ebp
   108b7:	89 e5                	mov    %esp,%ebp
   108b9:	83 ec 10             	sub    $0x10,%esp
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   108bc:	0f 20 d0             	mov    %cr2,%eax
   108bf:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   108c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   108c5:	c9                   	leave  
   108c6:	c3                   	ret    

000108c7 <read_eflags>:

static inline void write_tr (uint16_t tss_selector) {
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
}

static inline uint32_t read_eflags() {
   108c7:	55                   	push   %ebp
   108c8:	89 e5                	mov    %esp,%ebp
   108ca:	83 ec 10             	sub    $0x10,%esp
	uint32_t eflags;

	__asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   108cd:	9c                   	pushf  
   108ce:	58                   	pop    %eax
   108cf:	89 45 fc             	mov    %eax,-0x4(%ebp)

	return eflags;
   108d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   108d5:	c9                   	leave  
   108d6:	c3                   	ret    

000108d7 <write_eflags>:

static inline void write_eflags(uint32_t eflags) {
   108d7:	55                   	push   %ebp
   108d8:	89 e5                	mov    %esp,%ebp

	__asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   108da:	8b 45 08             	mov    0x8(%ebp),%eax
   108dd:	50                   	push   %eax
   108de:	9d                   	popf   


}
   108df:	90                   	nop
   108e0:	5d                   	pop    %ebp
   108e1:	c3                   	ret    

000108e2 <default_handler>:

//  -----------------------------------------   中断相关    -------------------------------------------
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void default_handler (exception_frame_t * frame, const char * message) {
   108e2:	55                   	push   %ebp
   108e3:	89 e5                	mov    %esp,%ebp
   108e5:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   108e8:	83 ec 0c             	sub    $0xc,%esp
   108eb:	68 30 2d 01 00       	push   $0x12d30
   108f0:	e8 9d 10 00 00       	call   11992 <klog>
   108f5:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   108f8:	83 ec 08             	sub    $0x8,%esp
   108fb:	ff 75 0c             	pushl  0xc(%ebp)
   108fe:	68 51 2d 01 00       	push   $0x12d51
   10903:	e8 8a 10 00 00       	call   11992 <klog>
   10908:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1090b:	e8 2d ff ff ff       	call   1083d <hlt>
   10910:	eb f9                	jmp    1090b <default_handler+0x29>

00010912 <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   10912:	55                   	push   %ebp
   10913:	89 e5                	mov    %esp,%ebp
   10915:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   10918:	83 ec 08             	sub    $0x8,%esp
   1091b:	68 6c 2d 01 00       	push   $0x12d6c
   10920:	ff 75 08             	pushl  0x8(%ebp)
   10923:	e8 ba ff ff ff       	call   108e2 <default_handler>
   10928:	83 c4 10             	add    $0x10,%esp
}
   1092b:	90                   	nop
   1092c:	c9                   	leave  
   1092d:	c3                   	ret    

0001092e <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   1092e:	55                   	push   %ebp
   1092f:	89 e5                	mov    %esp,%ebp
   10931:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   10934:	83 ec 08             	sub    $0x8,%esp
   10937:	68 7f 2d 01 00       	push   $0x12d7f
   1093c:	ff 75 08             	pushl  0x8(%ebp)
   1093f:	e8 9e ff ff ff       	call   108e2 <default_handler>
   10944:	83 c4 10             	add    $0x10,%esp
}
   10947:	90                   	nop
   10948:	c9                   	leave  
   10949:	c3                   	ret    

0001094a <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   1094a:	55                   	push   %ebp
   1094b:	89 e5                	mov    %esp,%ebp
   1094d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   10950:	83 ec 08             	sub    $0x8,%esp
   10953:	68 8e 2d 01 00       	push   $0x12d8e
   10958:	ff 75 08             	pushl  0x8(%ebp)
   1095b:	e8 82 ff ff ff       	call   108e2 <default_handler>
   10960:	83 c4 10             	add    $0x10,%esp
}
   10963:	90                   	nop
   10964:	c9                   	leave  
   10965:	c3                   	ret    

00010966 <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   10966:	55                   	push   %ebp
   10967:	89 e5                	mov    %esp,%ebp
   10969:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   1096c:	83 ec 08             	sub    $0x8,%esp
   1096f:	68 9e 2d 01 00       	push   $0x12d9e
   10974:	ff 75 08             	pushl  0x8(%ebp)
   10977:	e8 66 ff ff ff       	call   108e2 <default_handler>
   1097c:	83 c4 10             	add    $0x10,%esp
}
   1097f:	90                   	nop
   10980:	c9                   	leave  
   10981:	c3                   	ret    

00010982 <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   10982:	55                   	push   %ebp
   10983:	89 e5                	mov    %esp,%ebp
   10985:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   10988:	83 ec 08             	sub    $0x8,%esp
   1098b:	68 ad 2d 01 00       	push   $0x12dad
   10990:	ff 75 08             	pushl  0x8(%ebp)
   10993:	e8 4a ff ff ff       	call   108e2 <default_handler>
   10998:	83 c4 10             	add    $0x10,%esp
}
   1099b:	90                   	nop
   1099c:	c9                   	leave  
   1099d:	c3                   	ret    

0001099e <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   1099e:	55                   	push   %ebp
   1099f:	89 e5                	mov    %esp,%ebp
   109a1:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   109a4:	83 ec 08             	sub    $0x8,%esp
   109a7:	68 b9 2d 01 00       	push   $0x12db9
   109ac:	ff 75 08             	pushl  0x8(%ebp)
   109af:	e8 2e ff ff ff       	call   108e2 <default_handler>
   109b4:	83 c4 10             	add    $0x10,%esp
}
   109b7:	90                   	nop
   109b8:	c9                   	leave  
   109b9:	c3                   	ret    

000109ba <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   109ba:	55                   	push   %ebp
   109bb:	89 e5                	mov    %esp,%ebp
   109bd:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   109c0:	83 ec 08             	sub    $0x8,%esp
   109c3:	68 c3 2d 01 00       	push   $0x12dc3
   109c8:	ff 75 08             	pushl  0x8(%ebp)
   109cb:	e8 12 ff ff ff       	call   108e2 <default_handler>
   109d0:	83 c4 10             	add    $0x10,%esp
}
   109d3:	90                   	nop
   109d4:	c9                   	leave  
   109d5:	c3                   	ret    

000109d6 <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   109d6:	55                   	push   %ebp
   109d7:	89 e5                	mov    %esp,%ebp
   109d9:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   109dc:	83 ec 08             	sub    $0x8,%esp
   109df:	68 d9 2d 01 00       	push   $0x12dd9
   109e4:	ff 75 08             	pushl  0x8(%ebp)
   109e7:	e8 f6 fe ff ff       	call   108e2 <default_handler>
   109ec:	83 c4 10             	add    $0x10,%esp
}
   109ef:	90                   	nop
   109f0:	c9                   	leave  
   109f1:	c3                   	ret    

000109f2 <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   109f2:	55                   	push   %ebp
   109f3:	89 e5                	mov    %esp,%ebp
   109f5:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   109f8:	83 ec 08             	sub    $0x8,%esp
   109fb:	68 e9 2d 01 00       	push   $0x12de9
   10a00:	ff 75 08             	pushl  0x8(%ebp)
   10a03:	e8 da fe ff ff       	call   108e2 <default_handler>
   10a08:	83 c4 10             	add    $0x10,%esp
}
   10a0b:	90                   	nop
   10a0c:	c9                   	leave  
   10a0d:	c3                   	ret    

00010a0e <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   10a0e:	55                   	push   %ebp
   10a0f:	89 e5                	mov    %esp,%ebp
   10a11:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   10a14:	83 ec 08             	sub    $0x8,%esp
   10a17:	68 ff 2d 01 00       	push   $0x12dff
   10a1c:	ff 75 08             	pushl  0x8(%ebp)
   10a1f:	e8 be fe ff ff       	call   108e2 <default_handler>
   10a24:	83 c4 10             	add    $0x10,%esp
}
   10a27:	90                   	nop
   10a28:	c9                   	leave  
   10a29:	c3                   	ret    

00010a2a <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   10a2a:	55                   	push   %ebp
   10a2b:	89 e5                	mov    %esp,%ebp
   10a2d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   10a30:	83 ec 08             	sub    $0x8,%esp
   10a33:	68 0d 2e 01 00       	push   $0x12e0d
   10a38:	ff 75 08             	pushl  0x8(%ebp)
   10a3b:	e8 a2 fe ff ff       	call   108e2 <default_handler>
   10a40:	83 c4 10             	add    $0x10,%esp
}
   10a43:	90                   	nop
   10a44:	c9                   	leave  
   10a45:	c3                   	ret    

00010a46 <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   10a46:	55                   	push   %ebp
   10a47:	89 e5                	mov    %esp,%ebp
   10a49:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   10a4c:	83 ec 08             	sub    $0x8,%esp
   10a4f:	68 19 2e 01 00       	push   $0x12e19
   10a54:	ff 75 08             	pushl  0x8(%ebp)
   10a57:	e8 86 fe ff ff       	call   108e2 <default_handler>
   10a5c:	83 c4 10             	add    $0x10,%esp
}
   10a5f:	90                   	nop
   10a60:	c9                   	leave  
   10a61:	c3                   	ret    

00010a62 <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   10a62:	55                   	push   %ebp
   10a63:	89 e5                	mov    %esp,%ebp
   10a65:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   10a68:	83 ec 08             	sub    $0x8,%esp
   10a6b:	68 2e 2e 01 00       	push   $0x12e2e
   10a70:	ff 75 08             	pushl  0x8(%ebp)
   10a73:	e8 6a fe ff ff       	call   108e2 <default_handler>
   10a78:	83 c4 10             	add    $0x10,%esp
}
   10a7b:	90                   	nop
   10a7c:	c9                   	leave  
   10a7d:	c3                   	ret    

00010a7e <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   10a7e:	55                   	push   %ebp
   10a7f:	89 e5                	mov    %esp,%ebp
   10a81:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   10a84:	83 ec 08             	sub    $0x8,%esp
   10a87:	68 44 2e 01 00       	push   $0x12e44
   10a8c:	ff 75 08             	pushl  0x8(%ebp)
   10a8f:	e8 4e fe ff ff       	call   108e2 <default_handler>
   10a94:	83 c4 10             	add    $0x10,%esp
}
   10a97:	90                   	nop
   10a98:	c9                   	leave  
   10a99:	c3                   	ret    

00010a9a <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   10a9a:	55                   	push   %ebp
   10a9b:	89 e5                	mov    %esp,%ebp
   10a9d:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   10aa0:	83 ec 0c             	sub    $0xc,%esp
   10aa3:	68 30 2d 01 00       	push   $0x12d30
   10aa8:	e8 e5 0e 00 00       	call   11992 <klog>
   10aad:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: Page fault.");
   10ab0:	83 ec 0c             	sub    $0xc,%esp
   10ab3:	68 70 2e 01 00       	push   $0x12e70
   10ab8:	e8 d5 0e 00 00       	call   11992 <klog>
   10abd:	83 c4 10             	add    $0x10,%esp
    if (frame->err_code & ERR_PAGE_P) {
   10ac0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac3:	8b 40 34             	mov    0x34(%eax),%eax
   10ac6:	83 e0 01             	and    $0x1,%eax
   10ac9:	85 c0                	test   %eax,%eax
   10acb:	74 18                	je     10ae5 <handle_page_fault+0x4b>
        klog("\tpage-level protection violation: 0x%x.", read_cr2());
   10acd:	e8 e4 fd ff ff       	call   108b6 <read_cr2>
   10ad2:	83 ec 08             	sub    $0x8,%esp
   10ad5:	50                   	push   %eax
   10ad6:	68 94 2e 01 00       	push   $0x12e94
   10adb:	e8 b2 0e 00 00       	call   11992 <klog>
   10ae0:	83 c4 10             	add    $0x10,%esp
   10ae3:	eb 16                	jmp    10afb <handle_page_fault+0x61>
    } else {
         klog("\tPage doesn't present 0x%x", read_cr2());
   10ae5:	e8 cc fd ff ff       	call   108b6 <read_cr2>
   10aea:	83 ec 08             	sub    $0x8,%esp
   10aed:	50                   	push   %eax
   10aee:	68 bc 2e 01 00       	push   $0x12ebc
   10af3:	e8 9a 0e 00 00       	call   11992 <klog>
   10af8:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->err_code & ERR_PAGE_WR) {
   10afb:	8b 45 08             	mov    0x8(%ebp),%eax
   10afe:	8b 40 34             	mov    0x34(%eax),%eax
   10b01:	83 e0 02             	and    $0x2,%eax
   10b04:	85 c0                	test   %eax,%eax
   10b06:	74 12                	je     10b1a <handle_page_fault+0x80>
        klog("\tThe access causing the fault was a read.");
   10b08:	83 ec 0c             	sub    $0xc,%esp
   10b0b:	68 d8 2e 01 00       	push   $0x12ed8
   10b10:	e8 7d 0e 00 00       	call   11992 <klog>
   10b15:	83 c4 10             	add    $0x10,%esp
   10b18:	eb 10                	jmp    10b2a <handle_page_fault+0x90>
    } else {
        klog("\tThe access causing the fault was a write.");
   10b1a:	83 ec 0c             	sub    $0xc,%esp
   10b1d:	68 04 2f 01 00       	push   $0x12f04
   10b22:	e8 6b 0e 00 00       	call   11992 <klog>
   10b27:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->err_code & ERR_PAGE_US) {
   10b2a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2d:	8b 40 34             	mov    0x34(%eax),%eax
   10b30:	83 e0 02             	and    $0x2,%eax
   10b33:	85 c0                	test   %eax,%eax
   10b35:	74 12                	je     10b49 <handle_page_fault+0xaf>
        klog("\tA supervisor-mode access caused the fault.");
   10b37:	83 ec 0c             	sub    $0xc,%esp
   10b3a:	68 30 2f 01 00       	push   $0x12f30
   10b3f:	e8 4e 0e 00 00       	call   11992 <klog>
   10b44:	83 c4 10             	add    $0x10,%esp
   10b47:	eb 10                	jmp    10b59 <handle_page_fault+0xbf>
    } else {
        klog("\tA user-mode access caused the fault.");
   10b49:	83 ec 0c             	sub    $0xc,%esp
   10b4c:	68 5c 2f 01 00       	push   $0x12f5c
   10b51:	e8 3c 0e 00 00       	call   11992 <klog>
   10b56:	83 c4 10             	add    $0x10,%esp
    }

    while(1){hlt();}
   10b59:	e8 df fc ff ff       	call   1083d <hlt>
   10b5e:	eb f9                	jmp    10b59 <handle_page_fault+0xbf>

00010b60 <handle_fpu_error>:

	//default_handler(frame, "IRQ/Exception happend: Page fault.");
}
void handle_fpu_error(exception_frame_t * frame) {
   10b60:	55                   	push   %ebp
   10b61:	89 e5                	mov    %esp,%ebp
   10b63:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   10b66:	83 ec 08             	sub    $0x8,%esp
   10b69:	68 82 2f 01 00       	push   $0x12f82
   10b6e:	ff 75 08             	pushl  0x8(%ebp)
   10b71:	e8 6c fd ff ff       	call   108e2 <default_handler>
   10b76:	83 c4 10             	add    $0x10,%esp
}
   10b79:	90                   	nop
   10b7a:	c9                   	leave  
   10b7b:	c3                   	ret    

00010b7c <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   10b7c:	55                   	push   %ebp
   10b7d:	89 e5                	mov    %esp,%ebp
   10b7f:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   10b82:	83 ec 08             	sub    $0x8,%esp
   10b85:	68 a0 2f 01 00       	push   $0x12fa0
   10b8a:	ff 75 08             	pushl  0x8(%ebp)
   10b8d:	e8 50 fd ff ff       	call   108e2 <default_handler>
   10b92:	83 c4 10             	add    $0x10,%esp
}
   10b95:	90                   	nop
   10b96:	c9                   	leave  
   10b97:	c3                   	ret    

00010b98 <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   10b98:	55                   	push   %ebp
   10b99:	89 e5                	mov    %esp,%ebp
   10b9b:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   10b9e:	83 ec 08             	sub    $0x8,%esp
   10ba1:	68 b1 2f 01 00       	push   $0x12fb1
   10ba6:	ff 75 08             	pushl  0x8(%ebp)
   10ba9:	e8 34 fd ff ff       	call   108e2 <default_handler>
   10bae:	83 c4 10             	add    $0x10,%esp
}
   10bb1:	90                   	nop
   10bb2:	c9                   	leave  
   10bb3:	c3                   	ret    

00010bb4 <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   10bb4:	55                   	push   %ebp
   10bb5:	89 e5                	mov    %esp,%ebp
   10bb7:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10bba:	83 ec 08             	sub    $0x8,%esp
   10bbd:	68 c0 2f 01 00       	push   $0x12fc0
   10bc2:	ff 75 08             	pushl  0x8(%ebp)
   10bc5:	e8 18 fd ff ff       	call   108e2 <default_handler>
   10bca:	83 c4 10             	add    $0x10,%esp
}
   10bcd:	90                   	nop
   10bce:	c9                   	leave  
   10bcf:	c3                   	ret    

00010bd0 <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10bd0:	55                   	push   %ebp
   10bd1:	89 e5                	mov    %esp,%ebp
   10bd3:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   10bd6:	83 ec 08             	sub    $0x8,%esp
   10bd9:	68 df 2f 01 00       	push   $0x12fdf
   10bde:	ff 75 08             	pushl  0x8(%ebp)
   10be1:	e8 fc fc ff ff       	call   108e2 <default_handler>
   10be6:	83 c4 10             	add    $0x10,%esp
}
   10be9:	90                   	nop
   10bea:	c9                   	leave  
   10beb:	c3                   	ret    

00010bec <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10bec:	55                   	push   %ebp
   10bed:	89 e5                	mov    %esp,%ebp
   10bef:	83 ec 08             	sub    $0x8,%esp
   10bf2:	8b 55 0c             	mov    0xc(%ebp),%edx
   10bf5:	8b 45 14             	mov    0x14(%ebp),%eax
   10bf8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10bfc:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10c00:	8b 45 10             	mov    0x10(%ebp),%eax
   10c03:	89 c2                	mov    %eax,%edx
   10c05:	8b 45 08             	mov    0x8(%ebp),%eax
   10c08:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10c0b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c0e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10c12:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10c16:	8b 45 08             	mov    0x8(%ebp),%eax
   10c19:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10c1d:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10c21:	8b 45 10             	mov    0x10(%ebp),%eax
   10c24:	c1 e8 10             	shr    $0x10,%eax
   10c27:	89 c2                	mov    %eax,%edx
   10c29:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2c:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10c30:	90                   	nop
   10c31:	c9                   	leave  
   10c32:	c3                   	ret    

00010c33 <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   10c33:	55                   	push   %ebp
   10c34:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   10c36:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10c3a:	7e 07                	jle    10c43 <irq_install+0x10>
        return -1;
   10c3c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c41:	eb 1e                	jmp    10c61 <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   10c43:	8b 45 08             	mov    0x8(%ebp),%eax
   10c46:	c1 e0 03             	shl    $0x3,%eax
   10c49:	05 40 58 01 00       	add    $0x15840,%eax
   10c4e:	68 00 8e 00 00       	push   $0x8e00
   10c53:	ff 75 0c             	pushl  0xc(%ebp)
   10c56:	6a 08                	push   $0x8
   10c58:	50                   	push   %eax
   10c59:	e8 8e ff ff ff       	call   10bec <gate_desc_set>
   10c5e:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   10c61:	c9                   	leave  
   10c62:	c3                   	ret    

00010c63 <init_pic>:

static void init_pic() {
   10c63:	55                   	push   %ebp
   10c64:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10c66:	6a 11                	push   $0x11
   10c68:	6a 20                	push   $0x20
   10c6a:	e8 28 fc ff ff       	call   10897 <outb>
   10c6f:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10c72:	6a 20                	push   $0x20
   10c74:	6a 21                	push   $0x21
   10c76:	e8 1c fc ff ff       	call   10897 <outb>
   10c7b:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10c7e:	6a 04                	push   $0x4
   10c80:	6a 21                	push   $0x21
   10c82:	e8 10 fc ff ff       	call   10897 <outb>
   10c87:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10c8a:	6a 01                	push   $0x1
   10c8c:	6a 21                	push   $0x21
   10c8e:	e8 04 fc ff ff       	call   10897 <outb>
   10c93:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10c96:	6a 11                	push   $0x11
   10c98:	68 a0 00 00 00       	push   $0xa0
   10c9d:	e8 f5 fb ff ff       	call   10897 <outb>
   10ca2:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10ca5:	6a 28                	push   $0x28
   10ca7:	68 a1 00 00 00       	push   $0xa1
   10cac:	e8 e6 fb ff ff       	call   10897 <outb>
   10cb1:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10cb4:	6a 02                	push   $0x2
   10cb6:	68 a1 00 00 00       	push   $0xa1
   10cbb:	e8 d7 fb ff ff       	call   10897 <outb>
   10cc0:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10cc3:	6a 01                	push   $0x1
   10cc5:	68 a1 00 00 00       	push   $0xa1
   10cca:	e8 c8 fb ff ff       	call   10897 <outb>
   10ccf:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10cd2:	68 fb 00 00 00       	push   $0xfb
   10cd7:	6a 21                	push   $0x21
   10cd9:	e8 b9 fb ff ff       	call   10897 <outb>
   10cde:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10ce1:	68 ff 00 00 00       	push   $0xff
   10ce6:	68 a1 00 00 00       	push   $0xa1
   10ceb:	e8 a7 fb ff ff       	call   10897 <outb>
   10cf0:	83 c4 08             	add    $0x8,%esp
}
   10cf3:	90                   	nop
   10cf4:	c9                   	leave  
   10cf5:	c3                   	ret    

00010cf6 <irq_init>:

void irq_init () {
   10cf6:	55                   	push   %ebp
   10cf7:	89 e5                	mov    %esp,%ebp
   10cf9:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10cfc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10d03:	eb 25                	jmp    10d2a <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10d05:	ba 28 00 01 00       	mov    $0x10028,%edx
   10d0a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d0d:	c1 e0 03             	shl    $0x3,%eax
   10d10:	05 40 58 01 00       	add    $0x15840,%eax
   10d15:	68 00 8e 00 00       	push   $0x8e00
   10d1a:	52                   	push   %edx
   10d1b:	6a 08                	push   $0x8
   10d1d:	50                   	push   %eax
   10d1e:	e8 c9 fe ff ff       	call   10bec <gate_desc_set>
   10d23:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10d26:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10d2a:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   10d2e:	76 d5                	jbe    10d05 <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10d30:	b8 40 58 01 00       	mov    $0x15840,%eax
   10d35:	68 00 04 00 00       	push   $0x400
   10d3a:	50                   	push   %eax
   10d3b:	e8 12 fb ff ff       	call   10852 <lidt>
   10d40:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   10d43:	b8 47 00 01 00       	mov    $0x10047,%eax
   10d48:	50                   	push   %eax
   10d49:	6a 00                	push   $0x0
   10d4b:	e8 e3 fe ff ff       	call   10c33 <irq_install>
   10d50:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   10d53:	b8 66 00 01 00       	mov    $0x10066,%eax
   10d58:	50                   	push   %eax
   10d59:	6a 01                	push   $0x1
   10d5b:	e8 d3 fe ff ff       	call   10c33 <irq_install>
   10d60:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   10d63:	b8 85 00 01 00       	mov    $0x10085,%eax
   10d68:	50                   	push   %eax
   10d69:	6a 02                	push   $0x2
   10d6b:	e8 c3 fe ff ff       	call   10c33 <irq_install>
   10d70:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   10d73:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   10d78:	50                   	push   %eax
   10d79:	6a 03                	push   $0x3
   10d7b:	e8 b3 fe ff ff       	call   10c33 <irq_install>
   10d80:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10d83:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   10d88:	50                   	push   %eax
   10d89:	6a 04                	push   $0x4
   10d8b:	e8 a3 fe ff ff       	call   10c33 <irq_install>
   10d90:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10d93:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   10d98:	50                   	push   %eax
   10d99:	6a 05                	push   $0x5
   10d9b:	e8 93 fe ff ff       	call   10c33 <irq_install>
   10da0:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10da3:	b8 01 01 01 00       	mov    $0x10101,%eax
   10da8:	50                   	push   %eax
   10da9:	6a 06                	push   $0x6
   10dab:	e8 83 fe ff ff       	call   10c33 <irq_install>
   10db0:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10db3:	b8 20 01 01 00       	mov    $0x10120,%eax
   10db8:	50                   	push   %eax
   10db9:	6a 07                	push   $0x7
   10dbb:	e8 73 fe ff ff       	call   10c33 <irq_install>
   10dc0:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10dc3:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   10dc8:	50                   	push   %eax
   10dc9:	6a 08                	push   $0x8
   10dcb:	e8 63 fe ff ff       	call   10c33 <irq_install>
   10dd0:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10dd3:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   10dd8:	50                   	push   %eax
   10dd9:	6a 0a                	push   $0xa
   10ddb:	e8 53 fe ff ff       	call   10c33 <irq_install>
   10de0:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10de3:	b8 79 01 01 00       	mov    $0x10179,%eax
   10de8:	50                   	push   %eax
   10de9:	6a 0b                	push   $0xb
   10deb:	e8 43 fe ff ff       	call   10c33 <irq_install>
   10df0:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10df3:	b8 96 01 01 00       	mov    $0x10196,%eax
   10df8:	50                   	push   %eax
   10df9:	6a 0c                	push   $0xc
   10dfb:	e8 33 fe ff ff       	call   10c33 <irq_install>
   10e00:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10e03:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   10e08:	50                   	push   %eax
   10e09:	6a 0d                	push   $0xd
   10e0b:	e8 23 fe ff ff       	call   10c33 <irq_install>
   10e10:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10e13:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   10e18:	50                   	push   %eax
   10e19:	6a 0e                	push   $0xe
   10e1b:	e8 13 fe ff ff       	call   10c33 <irq_install>
   10e20:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   10e23:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   10e28:	50                   	push   %eax
   10e29:	6a 10                	push   $0x10
   10e2b:	e8 03 fe ff ff       	call   10c33 <irq_install>
   10e30:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   10e33:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   10e38:	50                   	push   %eax
   10e39:	6a 11                	push   $0x11
   10e3b:	e8 f3 fd ff ff       	call   10c33 <irq_install>
   10e40:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   10e43:	b8 29 02 01 00       	mov    $0x10229,%eax
   10e48:	50                   	push   %eax
   10e49:	6a 12                	push   $0x12
   10e4b:	e8 e3 fd ff ff       	call   10c33 <irq_install>
   10e50:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   10e53:	b8 48 02 01 00       	mov    $0x10248,%eax
   10e58:	50                   	push   %eax
   10e59:	6a 13                	push   $0x13
   10e5b:	e8 d3 fd ff ff       	call   10c33 <irq_install>
   10e60:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   10e63:	b8 67 02 01 00       	mov    $0x10267,%eax
   10e68:	50                   	push   %eax
   10e69:	6a 14                	push   $0x14
   10e6b:	e8 c3 fd ff ff       	call   10c33 <irq_install>
   10e70:	83 c4 08             	add    $0x8,%esp

    init_pic();
   10e73:	e8 eb fd ff ff       	call   10c63 <init_pic>
}
   10e78:	90                   	nop
   10e79:	c9                   	leave  
   10e7a:	c3                   	ret    

00010e7b <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10e7b:	55                   	push   %ebp
   10e7c:	89 e5                	mov    %esp,%ebp
   10e7e:	53                   	push   %ebx
   10e7f:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10e82:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10e86:	7e 78                	jle    10f00 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10e88:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10e8c:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e90:	7f 32                	jg     10ec4 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10e92:	6a 21                	push   $0x21
   10e94:	e8 e1 f9 ff ff       	call   1087a <inb>
   10e99:	83 c4 04             	add    $0x4,%esp
   10e9c:	89 c2                	mov    %eax,%edx
   10e9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10ea1:	bb 01 00 00 00       	mov    $0x1,%ebx
   10ea6:	89 c1                	mov    %eax,%ecx
   10ea8:	d3 e3                	shl    %cl,%ebx
   10eaa:	89 d8                	mov    %ebx,%eax
   10eac:	f7 d0                	not    %eax
   10eae:	21 d0                	and    %edx,%eax
   10eb0:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10eb3:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10eb7:	50                   	push   %eax
   10eb8:	6a 21                	push   $0x21
   10eba:	e8 d8 f9 ff ff       	call   10897 <outb>
   10ebf:	83 c4 08             	add    $0x8,%esp
   10ec2:	eb 3d                	jmp    10f01 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10ec4:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10ec8:	68 a1 00 00 00       	push   $0xa1
   10ecd:	e8 a8 f9 ff ff       	call   1087a <inb>
   10ed2:	83 c4 04             	add    $0x4,%esp
   10ed5:	89 c2                	mov    %eax,%edx
   10ed7:	8b 45 08             	mov    0x8(%ebp),%eax
   10eda:	bb 01 00 00 00       	mov    $0x1,%ebx
   10edf:	89 c1                	mov    %eax,%ecx
   10ee1:	d3 e3                	shl    %cl,%ebx
   10ee3:	89 d8                	mov    %ebx,%eax
   10ee5:	f7 d0                	not    %eax
   10ee7:	21 d0                	and    %edx,%eax
   10ee9:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10eec:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10ef0:	50                   	push   %eax
   10ef1:	68 a1 00 00 00       	push   $0xa1
   10ef6:	e8 9c f9 ff ff       	call   10897 <outb>
   10efb:	83 c4 08             	add    $0x8,%esp
   10efe:	eb 01                	jmp    10f01 <irq_enable+0x86>
        return;
   10f00:	90                   	nop
    }
}
   10f01:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f04:	c9                   	leave  
   10f05:	c3                   	ret    

00010f06 <irq_disable>:

void irq_disable(int irq_num) {
   10f06:	55                   	push   %ebp
   10f07:	89 e5                	mov    %esp,%ebp
   10f09:	53                   	push   %ebx
   10f0a:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10f0d:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10f11:	7e 74                	jle    10f87 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10f13:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10f17:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f1b:	7f 30                	jg     10f4d <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10f1d:	6a 21                	push   $0x21
   10f1f:	e8 56 f9 ff ff       	call   1087a <inb>
   10f24:	83 c4 04             	add    $0x4,%esp
   10f27:	89 c3                	mov    %eax,%ebx
   10f29:	8b 45 08             	mov    0x8(%ebp),%eax
   10f2c:	ba 01 00 00 00       	mov    $0x1,%edx
   10f31:	89 c1                	mov    %eax,%ecx
   10f33:	d3 e2                	shl    %cl,%edx
   10f35:	89 d0                	mov    %edx,%eax
   10f37:	09 d8                	or     %ebx,%eax
   10f39:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10f3c:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10f40:	50                   	push   %eax
   10f41:	6a 21                	push   $0x21
   10f43:	e8 4f f9 ff ff       	call   10897 <outb>
   10f48:	83 c4 08             	add    $0x8,%esp
   10f4b:	eb 3b                	jmp    10f88 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10f4d:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10f51:	68 a1 00 00 00       	push   $0xa1
   10f56:	e8 1f f9 ff ff       	call   1087a <inb>
   10f5b:	83 c4 04             	add    $0x4,%esp
   10f5e:	89 c3                	mov    %eax,%ebx
   10f60:	8b 45 08             	mov    0x8(%ebp),%eax
   10f63:	ba 01 00 00 00       	mov    $0x1,%edx
   10f68:	89 c1                	mov    %eax,%ecx
   10f6a:	d3 e2                	shl    %cl,%edx
   10f6c:	89 d0                	mov    %edx,%eax
   10f6e:	09 d8                	or     %ebx,%eax
   10f70:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10f73:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10f77:	50                   	push   %eax
   10f78:	68 a1 00 00 00       	push   $0xa1
   10f7d:	e8 15 f9 ff ff       	call   10897 <outb>
   10f82:	83 c4 08             	add    $0x8,%esp
   10f85:	eb 01                	jmp    10f88 <irq_disable+0x82>
        return;
   10f87:	90                   	nop
    }
}
   10f88:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f8b:	c9                   	leave  
   10f8c:	c3                   	ret    

00010f8d <irq_disable_global>:

void irq_disable_global(void) {
   10f8d:	55                   	push   %ebp
   10f8e:	89 e5                	mov    %esp,%ebp
    cli();
   10f90:	e8 af f8 ff ff       	call   10844 <cli>
}
   10f95:	90                   	nop
   10f96:	5d                   	pop    %ebp
   10f97:	c3                   	ret    

00010f98 <irq_enable_global>:

void irq_enable_global(void) {
   10f98:	55                   	push   %ebp
   10f99:	89 e5                	mov    %esp,%ebp
    sti();
   10f9b:	e8 ab f8 ff ff       	call   1084b <sti>
}
   10fa0:	90                   	nop
   10fa1:	5d                   	pop    %ebp
   10fa2:	c3                   	ret    

00010fa3 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10fa3:	55                   	push   %ebp
   10fa4:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10fa6:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10faa:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10fae:	7e 0f                	jle    10fbf <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10fb0:	6a 20                	push   $0x20
   10fb2:	68 a0 00 00 00       	push   $0xa0
   10fb7:	e8 db f8 ff ff       	call   10897 <outb>
   10fbc:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10fbf:	6a 20                	push   $0x20
   10fc1:	6a 20                	push   $0x20
   10fc3:	e8 cf f8 ff ff       	call   10897 <outb>
   10fc8:	83 c4 08             	add    $0x8,%esp
}
   10fcb:	90                   	nop
   10fcc:	c9                   	leave  
   10fcd:	c3                   	ret    

00010fce <irq_enter_proection>:


irq_state_t irq_enter_proection() {
   10fce:	55                   	push   %ebp
   10fcf:	89 e5                	mov    %esp,%ebp
   10fd1:	83 ec 10             	sub    $0x10,%esp
    irq_state_t  state = read_eflags();
   10fd4:	e8 ee f8 ff ff       	call   108c7 <read_eflags>
   10fd9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   10fdc:	e8 ac ff ff ff       	call   10f8d <irq_disable_global>

    return state;
   10fe1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10fe4:	c9                   	leave  
   10fe5:	c3                   	ret    

00010fe6 <irq_leave_proection>:


void irq_leave_proection(irq_state_t state) {
   10fe6:	55                   	push   %ebp
   10fe7:	89 e5                	mov    %esp,%ebp

    write_eflags(state);
   10fe9:	ff 75 08             	pushl  0x8(%ebp)
   10fec:	e8 e6 f8 ff ff       	call   108d7 <write_eflags>
   10ff1:	83 c4 04             	add    $0x4,%esp
}
   10ff4:	90                   	nop
   10ff5:	c9                   	leave  
   10ff6:	c3                   	ret    

00010ff7 <bitmap_byte_count>:
#include <bitmap.h>
#include <klib.h>

int bitmap_byte_count (int bit_count) {
   10ff7:	55                   	push   %ebp
   10ff8:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         
   10ffa:	8b 45 08             	mov    0x8(%ebp),%eax
   10ffd:	83 c0 07             	add    $0x7,%eax
   11000:	8d 50 07             	lea    0x7(%eax),%edx
   11003:	85 c0                	test   %eax,%eax
   11005:	0f 48 c2             	cmovs  %edx,%eax
   11008:	c1 f8 03             	sar    $0x3,%eax
}
   1100b:	5d                   	pop    %ebp
   1100c:	c3                   	ret    

0001100d <bitmap_init>:

void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   1100d:	55                   	push   %ebp
   1100e:	89 e5                	mov    %esp,%ebp
   11010:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   11013:	8b 45 08             	mov    0x8(%ebp),%eax
   11016:	8b 55 10             	mov    0x10(%ebp),%edx
   11019:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1101b:	8b 45 08             	mov    0x8(%ebp),%eax
   1101e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11021:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   11024:	8b 45 08             	mov    0x8(%ebp),%eax
   11027:	8b 00                	mov    (%eax),%eax
   11029:	50                   	push   %eax
   1102a:	e8 c8 ff ff ff       	call   10ff7 <bitmap_byte_count>
   1102f:	83 c4 04             	add    $0x4,%esp
   11032:	89 45 f4             	mov    %eax,-0xc(%ebp)
    k_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   11035:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11039:	74 07                	je     11042 <bitmap_init+0x35>
   1103b:	ba ff 00 00 00       	mov    $0xff,%edx
   11040:	eb 05                	jmp    11047 <bitmap_init+0x3a>
   11042:	ba 00 00 00 00       	mov    $0x0,%edx
   11047:	8b 45 08             	mov    0x8(%ebp),%eax
   1104a:	8b 40 04             	mov    0x4(%eax),%eax
   1104d:	83 ec 04             	sub    $0x4,%esp
   11050:	ff 75 f4             	pushl  -0xc(%ebp)
   11053:	52                   	push   %edx
   11054:	50                   	push   %eax
   11055:	e8 9d 03 00 00       	call   113f7 <k_memset>
   1105a:	83 c4 10             	add    $0x10,%esp
}
   1105d:	90                   	nop
   1105e:	c9                   	leave  
   1105f:	c3                   	ret    

00011060 <bitmap_get_bit>:


int bitmap_get_bit (bitmap_t * bitmap, int index) {
   11060:	55                   	push   %ebp
   11061:	89 e5                	mov    %esp,%ebp
   11063:	53                   	push   %ebx

    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   11064:	8b 45 08             	mov    0x8(%ebp),%eax
   11067:	8b 50 04             	mov    0x4(%eax),%edx
   1106a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1106d:	8d 48 07             	lea    0x7(%eax),%ecx
   11070:	85 c0                	test   %eax,%eax
   11072:	0f 48 c1             	cmovs  %ecx,%eax
   11075:	c1 f8 03             	sar    $0x3,%eax
   11078:	01 d0                	add    %edx,%eax
   1107a:	0f b6 00             	movzbl (%eax),%eax
   1107d:	0f b6 d8             	movzbl %al,%ebx
   11080:	8b 45 0c             	mov    0xc(%ebp),%eax
   11083:	99                   	cltd   
   11084:	c1 ea 1d             	shr    $0x1d,%edx
   11087:	01 d0                	add    %edx,%eax
   11089:	83 e0 07             	and    $0x7,%eax
   1108c:	29 d0                	sub    %edx,%eax
   1108e:	89 c1                	mov    %eax,%ecx
   11090:	d3 fb                	sar    %cl,%ebx
   11092:	89 d8                	mov    %ebx,%eax
   11094:	83 e0 01             	and    $0x1,%eax
}
   11097:	5b                   	pop    %ebx
   11098:	5d                   	pop    %ebp
   11099:	c3                   	ret    

0001109a <bitmap_is_set>:

int bitmap_is_set (bitmap_t * bitmap, int index) {
   1109a:	55                   	push   %ebp
   1109b:	89 e5                	mov    %esp,%ebp
    
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   1109d:	ff 75 0c             	pushl  0xc(%ebp)
   110a0:	ff 75 08             	pushl  0x8(%ebp)
   110a3:	e8 b8 ff ff ff       	call   11060 <bitmap_get_bit>
   110a8:	83 c4 08             	add    $0x8,%esp
   110ab:	85 c0                	test   %eax,%eax
   110ad:	0f 95 c0             	setne  %al
   110b0:	0f b6 c0             	movzbl %al,%eax
}
   110b3:	c9                   	leave  
   110b4:	c3                   	ret    

000110b5 <bitmap_set_bit>:



void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   110b5:	55                   	push   %ebp
   110b6:	89 e5                	mov    %esp,%ebp
   110b8:	56                   	push   %esi
   110b9:	53                   	push   %ebx
   110ba:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   110bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   110c4:	e9 a2 00 00 00       	jmp    1116b <bitmap_set_bit+0xb6>
        if (bit) {
   110c9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110cd:	74 4a                	je     11119 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   110cf:	8b 45 08             	mov    0x8(%ebp),%eax
   110d2:	8b 50 04             	mov    0x4(%eax),%edx
   110d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   110d8:	8d 48 07             	lea    0x7(%eax),%ecx
   110db:	85 c0                	test   %eax,%eax
   110dd:	0f 48 c1             	cmovs  %ecx,%eax
   110e0:	c1 f8 03             	sar    $0x3,%eax
   110e3:	89 c3                	mov    %eax,%ebx
   110e5:	89 d8                	mov    %ebx,%eax
   110e7:	01 d0                	add    %edx,%eax
   110e9:	0f b6 00             	movzbl (%eax),%eax
   110ec:	89 c6                	mov    %eax,%esi
   110ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   110f1:	99                   	cltd   
   110f2:	c1 ea 1d             	shr    $0x1d,%edx
   110f5:	01 d0                	add    %edx,%eax
   110f7:	83 e0 07             	and    $0x7,%eax
   110fa:	29 d0                	sub    %edx,%eax
   110fc:	ba 01 00 00 00       	mov    $0x1,%edx
   11101:	89 c1                	mov    %eax,%ecx
   11103:	d3 e2                	shl    %cl,%edx
   11105:	89 d0                	mov    %edx,%eax
   11107:	89 f2                	mov    %esi,%edx
   11109:	09 c2                	or     %eax,%edx
   1110b:	8b 45 08             	mov    0x8(%ebp),%eax
   1110e:	8b 40 04             	mov    0x4(%eax),%eax
   11111:	89 d9                	mov    %ebx,%ecx
   11113:	01 c8                	add    %ecx,%eax
   11115:	88 10                	mov    %dl,(%eax)
   11117:	eb 4a                	jmp    11163 <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   11119:	8b 45 08             	mov    0x8(%ebp),%eax
   1111c:	8b 50 04             	mov    0x4(%eax),%edx
   1111f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11122:	8d 48 07             	lea    0x7(%eax),%ecx
   11125:	85 c0                	test   %eax,%eax
   11127:	0f 48 c1             	cmovs  %ecx,%eax
   1112a:	c1 f8 03             	sar    $0x3,%eax
   1112d:	89 c3                	mov    %eax,%ebx
   1112f:	89 d8                	mov    %ebx,%eax
   11131:	01 d0                	add    %edx,%eax
   11133:	0f b6 00             	movzbl (%eax),%eax
   11136:	89 c6                	mov    %eax,%esi
   11138:	8b 45 0c             	mov    0xc(%ebp),%eax
   1113b:	99                   	cltd   
   1113c:	c1 ea 1d             	shr    $0x1d,%edx
   1113f:	01 d0                	add    %edx,%eax
   11141:	83 e0 07             	and    $0x7,%eax
   11144:	29 d0                	sub    %edx,%eax
   11146:	ba 01 00 00 00       	mov    $0x1,%edx
   1114b:	89 c1                	mov    %eax,%ecx
   1114d:	d3 e2                	shl    %cl,%edx
   1114f:	89 d0                	mov    %edx,%eax
   11151:	f7 d0                	not    %eax
   11153:	89 f2                	mov    %esi,%edx
   11155:	21 c2                	and    %eax,%edx
   11157:	8b 45 08             	mov    0x8(%ebp),%eax
   1115a:	8b 40 04             	mov    0x4(%eax),%eax
   1115d:	89 d9                	mov    %ebx,%ecx
   1115f:	01 c8                	add    %ecx,%eax
   11161:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   11163:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11167:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1116b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1116e:	3b 45 10             	cmp    0x10(%ebp),%eax
   11171:	7d 0e                	jge    11181 <bitmap_set_bit+0xcc>
   11173:	8b 45 08             	mov    0x8(%ebp),%eax
   11176:	8b 00                	mov    (%eax),%eax
   11178:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1117b:	0f 8c 48 ff ff ff    	jl     110c9 <bitmap_set_bit+0x14>
        }
    }
} 
   11181:	90                   	nop
   11182:	83 c4 10             	add    $0x10,%esp
   11185:	5b                   	pop    %ebx
   11186:	5e                   	pop    %esi
   11187:	5d                   	pop    %ebp
   11188:	c3                   	ret    

00011189 <bitmap_alloc_nbits>:



int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   11189:	55                   	push   %ebp
   1118a:	89 e5                	mov    %esp,%ebp
   1118c:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   1118f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   11196:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   1119d:	e9 85 00 00 00       	jmp    11227 <bitmap_alloc_nbits+0x9e>
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   111a2:	ff 75 fc             	pushl  -0x4(%ebp)
   111a5:	ff 75 08             	pushl  0x8(%ebp)
   111a8:	e8 b3 fe ff ff       	call   11060 <bitmap_get_bit>
   111ad:	83 c4 08             	add    $0x8,%esp
   111b0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   111b3:	74 06                	je     111bb <bitmap_alloc_nbits+0x32>
            search_idx++;
   111b5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   111b9:	eb 6c                	jmp    11227 <bitmap_alloc_nbits+0x9e>
        }

        ok_idx = search_idx;
   111bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111be:	89 45 f8             	mov    %eax,-0x8(%ebp)

        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   111c1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   111c8:	eb 27                	jmp    111f1 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   111ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111cd:	8d 50 01             	lea    0x1(%eax),%edx
   111d0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111d3:	50                   	push   %eax
   111d4:	ff 75 08             	pushl  0x8(%ebp)
   111d7:	e8 84 fe ff ff       	call   11060 <bitmap_get_bit>
   111dc:	83 c4 08             	add    $0x8,%esp
   111df:	39 45 0c             	cmp    %eax,0xc(%ebp)
   111e2:	74 09                	je     111ed <bitmap_alloc_nbits+0x64>
                ok_idx = -1;
   111e4:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   111eb:	eb 16                	jmp    11203 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   111ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   111f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111f4:	3b 45 10             	cmp    0x10(%ebp),%eax
   111f7:	7d 0a                	jge    11203 <bitmap_alloc_nbits+0x7a>
   111f9:	8b 45 08             	mov    0x8(%ebp),%eax
   111fc:	8b 00                	mov    (%eax),%eax
   111fe:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11201:	7c c7                	jl     111ca <bitmap_alloc_nbits+0x41>
            }
        }

        if (i >= count) {
   11203:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11206:	3b 45 10             	cmp    0x10(%ebp),%eax
   11209:	7c 1c                	jl     11227 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   1120b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1120e:	f7 d0                	not    %eax
   11210:	50                   	push   %eax
   11211:	ff 75 10             	pushl  0x10(%ebp)
   11214:	ff 75 f8             	pushl  -0x8(%ebp)
   11217:	ff 75 08             	pushl  0x8(%ebp)
   1121a:	e8 96 fe ff ff       	call   110b5 <bitmap_set_bit>
   1121f:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   11222:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11225:	eb 13                	jmp    1123a <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   11227:	8b 45 08             	mov    0x8(%ebp),%eax
   1122a:	8b 00                	mov    (%eax),%eax
   1122c:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1122f:	0f 8c 6d ff ff ff    	jl     111a2 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   11235:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1123a:	c9                   	leave  
   1123b:	c3                   	ret    

0001123c <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   1123c:	55                   	push   %ebp
   1123d:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   1123f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11243:	74 3b                	je     11280 <k_strcpy+0x44>
   11245:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11249:	74 35                	je     11280 <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   1124b:	eb 17                	jmp    11264 <k_strcpy+0x28>
        *dest++ = *src++;
   1124d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11250:	8d 42 01             	lea    0x1(%edx),%eax
   11253:	89 45 0c             	mov    %eax,0xc(%ebp)
   11256:	8b 45 08             	mov    0x8(%ebp),%eax
   11259:	8d 48 01             	lea    0x1(%eax),%ecx
   1125c:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1125f:	0f b6 12             	movzbl (%edx),%edx
   11262:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   11264:	8b 45 08             	mov    0x8(%ebp),%eax
   11267:	0f b6 00             	movzbl (%eax),%eax
   1126a:	84 c0                	test   %al,%al
   1126c:	74 0a                	je     11278 <k_strcpy+0x3c>
   1126e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11271:	0f b6 00             	movzbl (%eax),%eax
   11274:	84 c0                	test   %al,%al
   11276:	75 d5                	jne    1124d <k_strcpy+0x11>
    }
    *dest = '\0'; 
   11278:	8b 45 08             	mov    0x8(%ebp),%eax
   1127b:	c6 00 00             	movb   $0x0,(%eax)
   1127e:	eb 01                	jmp    11281 <k_strcpy+0x45>
        return;
   11280:	90                   	nop
}
   11281:	5d                   	pop    %ebp
   11282:	c3                   	ret    

00011283 <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   11283:	55                   	push   %ebp
   11284:	89 e5                	mov    %esp,%ebp
   11286:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11289:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1128d:	74 61                	je     112f0 <k_strncpy+0x6d>
   1128f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11293:	74 5b                	je     112f0 <k_strncpy+0x6d>
   11295:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11299:	74 55                	je     112f0 <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   1129b:	8b 45 08             	mov    0x8(%ebp),%eax
   1129e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   112a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   112a4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   112a7:	eb 17                	jmp    112c0 <k_strncpy+0x3d>
        *d++ = *s++;
   112a9:	8b 55 f8             	mov    -0x8(%ebp),%edx
   112ac:	8d 42 01             	lea    0x1(%edx),%eax
   112af:	89 45 f8             	mov    %eax,-0x8(%ebp)
   112b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112b5:	8d 48 01             	lea    0x1(%eax),%ecx
   112b8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   112bb:	0f b6 12             	movzbl (%edx),%edx
   112be:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   112c0:	8b 45 10             	mov    0x10(%ebp),%eax
   112c3:	8d 50 ff             	lea    -0x1(%eax),%edx
   112c6:	89 55 10             	mov    %edx,0x10(%ebp)
   112c9:	85 c0                	test   %eax,%eax
   112cb:	7e 0a                	jle    112d7 <k_strncpy+0x54>
   112cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112d0:	0f b6 00             	movzbl (%eax),%eax
   112d3:	84 c0                	test   %al,%al
   112d5:	75 d2                	jne    112a9 <k_strncpy+0x26>
    } 
    if (size == 0) {
   112d7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112db:	75 0b                	jne    112e8 <k_strncpy+0x65>
        *(d - 1) = '\0';
   112dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112e0:	83 e8 01             	sub    $0x1,%eax
   112e3:	c6 00 00             	movb   $0x0,(%eax)
   112e6:	eb 09                	jmp    112f1 <k_strncpy+0x6e>
    } else {
        *d = '\0';
   112e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112eb:	c6 00 00             	movb   $0x0,(%eax)
   112ee:	eb 01                	jmp    112f1 <k_strncpy+0x6e>
        return;
   112f0:	90                   	nop
    }
}
   112f1:	c9                   	leave  
   112f2:	c3                   	ret    

000112f3 <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   112f3:	55                   	push   %ebp
   112f4:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   112f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112fa:	74 06                	je     11302 <k_strncmp+0xf>
   112fc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11300:	75 0f                	jne    11311 <k_strncmp+0x1e>
   11302:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11307:	eb 62                	jmp    1136b <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   11309:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   1130d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   11311:	8b 45 08             	mov    0x8(%ebp),%eax
   11314:	0f b6 00             	movzbl (%eax),%eax
   11317:	84 c0                	test   %al,%al
   11319:	74 20                	je     1133b <k_strncmp+0x48>
   1131b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1131e:	0f b6 00             	movzbl (%eax),%eax
   11321:	84 c0                	test   %al,%al
   11323:	74 16                	je     1133b <k_strncmp+0x48>
   11325:	8b 45 08             	mov    0x8(%ebp),%eax
   11328:	0f b6 10             	movzbl (%eax),%edx
   1132b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1132e:	0f b6 00             	movzbl (%eax),%eax
   11331:	38 c2                	cmp    %al,%dl
   11333:	75 06                	jne    1133b <k_strncmp+0x48>
   11335:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11339:	75 ce                	jne    11309 <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1133b:	8b 45 08             	mov    0x8(%ebp),%eax
   1133e:	0f b6 00             	movzbl (%eax),%eax
   11341:	84 c0                	test   %al,%al
   11343:	74 21                	je     11366 <k_strncmp+0x73>
   11345:	8b 45 0c             	mov    0xc(%ebp),%eax
   11348:	0f b6 00             	movzbl (%eax),%eax
   1134b:	84 c0                	test   %al,%al
   1134d:	74 17                	je     11366 <k_strncmp+0x73>
   1134f:	8b 45 08             	mov    0x8(%ebp),%eax
   11352:	0f b6 10             	movzbl (%eax),%edx
   11355:	8b 45 0c             	mov    0xc(%ebp),%eax
   11358:	0f b6 00             	movzbl (%eax),%eax
   1135b:	38 c2                	cmp    %al,%dl
   1135d:	74 07                	je     11366 <k_strncmp+0x73>
   1135f:	b8 01 00 00 00       	mov    $0x1,%eax
   11364:	eb 05                	jmp    1136b <k_strncmp+0x78>
   11366:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1136b:	5d                   	pop    %ebp
   1136c:	c3                   	ret    

0001136d <k_strlen>:
int k_strlen(const char *str) {
   1136d:	55                   	push   %ebp
   1136e:	89 e5                	mov    %esp,%ebp
   11370:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   11373:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11377:	75 07                	jne    11380 <k_strlen+0x13>
        return 0;
   11379:	b8 00 00 00 00       	mov    $0x0,%eax
   1137e:	eb 26                	jmp    113a6 <k_strlen+0x39>
    }

    int len = 0;
   11380:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   11387:	8b 45 08             	mov    0x8(%ebp),%eax
   1138a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   1138d:	eb 04                	jmp    11393 <k_strlen+0x26>
        len++;
   1138f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   11393:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11396:	8d 50 01             	lea    0x1(%eax),%edx
   11399:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1139c:	0f b6 00             	movzbl (%eax),%eax
   1139f:	84 c0                	test   %al,%al
   113a1:	75 ec                	jne    1138f <k_strlen+0x22>
    }

    return len;
   113a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   113a6:	c9                   	leave  
   113a7:	c3                   	ret    

000113a8 <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   113a8:	55                   	push   %ebp
   113a9:	89 e5                	mov    %esp,%ebp
   113ab:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   113ae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113b2:	74 40                	je     113f4 <k_memcpy+0x4c>
   113b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113b8:	74 3a                	je     113f4 <k_memcpy+0x4c>
   113ba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   113be:	74 34                	je     113f4 <k_memcpy+0x4c>
        return;
    }
    uint8_t * s = (uint8_t *)src;
   113c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   113c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   113c6:	8b 45 08             	mov    0x8(%ebp),%eax
   113c9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   113cc:	eb 17                	jmp    113e5 <k_memcpy+0x3d>
        *d++ = *s++;
   113ce:	8b 55 fc             	mov    -0x4(%ebp),%edx
   113d1:	8d 42 01             	lea    0x1(%edx),%eax
   113d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
   113d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113da:	8d 48 01             	lea    0x1(%eax),%ecx
   113dd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113e0:	0f b6 12             	movzbl (%edx),%edx
   113e3:	88 10                	mov    %dl,(%eax)
    while (size--) {
   113e5:	8b 45 10             	mov    0x10(%ebp),%eax
   113e8:	8d 50 ff             	lea    -0x1(%eax),%edx
   113eb:	89 55 10             	mov    %edx,0x10(%ebp)
   113ee:	85 c0                	test   %eax,%eax
   113f0:	75 dc                	jne    113ce <k_memcpy+0x26>
   113f2:	eb 01                	jmp    113f5 <k_memcpy+0x4d>
        return;
   113f4:	90                   	nop
    }
}
   113f5:	c9                   	leave  
   113f6:	c3                   	ret    

000113f7 <k_memset>:


void k_memset(void* dest, uint8_t v, int size) {
   113f7:	55                   	push   %ebp
   113f8:	89 e5                	mov    %esp,%ebp
   113fa:	83 ec 14             	sub    $0x14,%esp
   113fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   11400:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   11403:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11407:	74 2c                	je     11435 <k_memset+0x3e>
   11409:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1140d:	74 26                	je     11435 <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   1140f:	8b 45 08             	mov    0x8(%ebp),%eax
   11412:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   11415:	eb 0f                	jmp    11426 <k_memset+0x2f>
        *d++ = v;
   11417:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1141a:	8d 50 01             	lea    0x1(%eax),%edx
   1141d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11420:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11424:	88 10                	mov    %dl,(%eax)
    while(size--) {
   11426:	8b 45 10             	mov    0x10(%ebp),%eax
   11429:	8d 50 ff             	lea    -0x1(%eax),%edx
   1142c:	89 55 10             	mov    %edx,0x10(%ebp)
   1142f:	85 c0                	test   %eax,%eax
   11431:	75 e4                	jne    11417 <k_memset+0x20>
   11433:	eb 01                	jmp    11436 <k_memset+0x3f>
    if(!dest || !size) return;
   11435:	90                   	nop
    }
}
   11436:	c9                   	leave  
   11437:	c3                   	ret    

00011438 <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   11438:	55                   	push   %ebp
   11439:	89 e5                	mov    %esp,%ebp
   1143b:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   1143e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11442:	74 0c                	je     11450 <k_memcmp+0x18>
   11444:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11448:	74 06                	je     11450 <k_memcmp+0x18>
   1144a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1144e:	74 07                	je     11457 <k_memcmp+0x1f>
        return 1;
   11450:	b8 01 00 00 00       	mov    $0x1,%eax
   11455:	eb 43                	jmp    1149a <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11457:	8b 45 08             	mov    0x8(%ebp),%eax
   1145a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   1145d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11460:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   11463:	eb 23                	jmp    11488 <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   11465:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11468:	8d 50 01             	lea    0x1(%eax),%edx
   1146b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1146e:	0f b6 08             	movzbl (%eax),%ecx
   11471:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11474:	8d 50 01             	lea    0x1(%eax),%edx
   11477:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1147a:	0f b6 00             	movzbl (%eax),%eax
   1147d:	38 c1                	cmp    %al,%cl
   1147f:	74 07                	je     11488 <k_memcmp+0x50>
        return 1;
   11481:	b8 01 00 00 00       	mov    $0x1,%eax
   11486:	eb 12                	jmp    1149a <k_memcmp+0x62>
    while(size--) {
   11488:	8b 45 10             	mov    0x10(%ebp),%eax
   1148b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1148e:	89 55 10             	mov    %edx,0x10(%ebp)
   11491:	85 c0                	test   %eax,%eax
   11493:	75 d0                	jne    11465 <k_memcmp+0x2d>
    }

    return 0;
   11495:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1149a:	c9                   	leave  
   1149b:	c3                   	ret    

0001149c <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   1149c:	55                   	push   %ebp
   1149d:	89 e5                	mov    %esp,%ebp
   1149f:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   114a2:	8b 45 08             	mov    0x8(%ebp),%eax
   114a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   114a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   114ab:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   114ae:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   114b2:	74 1d                	je     114d1 <k_itoa+0x35>
   114b4:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   114b8:	74 17                	je     114d1 <k_itoa+0x35>
   114ba:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   114be:	74 11                	je     114d1 <k_itoa+0x35>
   114c0:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   114c4:	74 0b                	je     114d1 <k_itoa+0x35>
        *p = '\0';
   114c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114c9:	c6 00 00             	movb   $0x0,(%eax)
        return;
   114cc:	e9 a0 00 00 00       	jmp    11571 <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   114d1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114d5:	79 12                	jns    114e9 <k_itoa+0x4d>
   114d7:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   114db:	75 0c                	jne    114e9 <k_itoa+0x4d>
        *p++ = '-';
   114dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114e0:	8d 50 01             	lea    0x1(%eax),%edx
   114e3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114e6:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   114e9:	8b 0d 00 40 01 00    	mov    0x14000,%ecx
   114ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   114f2:	99                   	cltd   
   114f3:	f7 7d 10             	idivl  0x10(%ebp)
   114f6:	89 d0                	mov    %edx,%eax
   114f8:	83 c0 0f             	add    $0xf,%eax
   114fb:	01 c8                	add    %ecx,%eax
   114fd:	0f b6 00             	movzbl (%eax),%eax
   11500:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11503:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11506:	8d 50 01             	lea    0x1(%eax),%edx
   11509:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1150c:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   11510:	88 10                	mov    %dl,(%eax)
        num /= base;
   11512:	8b 45 0c             	mov    0xc(%ebp),%eax
   11515:	99                   	cltd   
   11516:	f7 7d 10             	idivl  0x10(%ebp)
   11519:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   1151c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11520:	75 c7                	jne    114e9 <k_itoa+0x4d>

    *p-- = '\0';
   11522:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11525:	8d 50 ff             	lea    -0x1(%eax),%edx
   11528:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1152b:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   1152e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11532:	7f 08                	jg     1153c <k_itoa+0xa0>
   11534:	8b 45 08             	mov    0x8(%ebp),%eax
   11537:	83 c0 01             	add    $0x1,%eax
   1153a:	eb 03                	jmp    1153f <k_itoa+0xa3>
   1153c:	8b 45 08             	mov    0x8(%ebp),%eax
   1153f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   11542:	eb 25                	jmp    11569 <k_itoa+0xcd>
        char ch = *start;
   11544:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11547:	0f b6 00             	movzbl (%eax),%eax
   1154a:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1154d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11550:	0f b6 10             	movzbl (%eax),%edx
   11553:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11556:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11558:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1155b:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1155f:	88 10                	mov    %dl,(%eax)

        p--;
   11561:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11565:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   11569:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1156c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1156f:	72 d3                	jb     11544 <k_itoa+0xa8>
    }
}
   11571:	c9                   	leave  
   11572:	c3                   	ret    

00011573 <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   11573:	55                   	push   %ebp
   11574:	89 e5                	mov    %esp,%ebp
   11576:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   11579:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   11580:	8b 45 08             	mov    0x8(%ebp),%eax
   11583:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   11586:	e9 19 01 00 00       	jmp    116a4 <k_vsprint+0x131>
        switch (state) {
   1158b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1158e:	85 c0                	test   %eax,%eax
   11590:	74 0a                	je     1159c <k_vsprint+0x29>
   11592:	83 f8 01             	cmp    $0x1,%eax
   11595:	74 2b                	je     115c2 <k_vsprint+0x4f>
   11597:	e9 07 01 00 00       	jmp    116a3 <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   1159c:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   115a0:	75 0c                	jne    115ae <k_vsprint+0x3b>
                state = READ_FMT;
   115a2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   115a9:	e9 f6 00 00 00       	jmp    116a4 <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   115ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115b1:	8d 50 01             	lea    0x1(%eax),%edx
   115b4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   115b7:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   115bb:	88 10                	mov    %dl,(%eax)
            }
            break;
   115bd:	e9 e2 00 00 00       	jmp    116a4 <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   115c2:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   115c6:	75 31                	jne    115f9 <k_vsprint+0x86>
                int num  = va_arg(args, int);
   115c8:	8b 45 10             	mov    0x10(%ebp),%eax
   115cb:	8d 50 04             	lea    0x4(%eax),%edx
   115ce:	89 55 10             	mov    %edx,0x10(%ebp)
   115d1:	8b 00                	mov    (%eax),%eax
   115d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   115d6:	6a 0a                	push   $0xa
   115d8:	ff 75 e4             	pushl  -0x1c(%ebp)
   115db:	ff 75 f8             	pushl  -0x8(%ebp)
   115de:	e8 b9 fe ff ff       	call   1149c <k_itoa>
   115e3:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   115e6:	ff 75 f8             	pushl  -0x8(%ebp)
   115e9:	e8 7f fd ff ff       	call   1136d <k_strlen>
   115ee:	83 c4 04             	add    $0x4,%esp
   115f1:	01 45 f8             	add    %eax,-0x8(%ebp)
   115f4:	e9 a1 00 00 00       	jmp    1169a <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   115f9:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   115fd:	75 2e                	jne    1162d <k_vsprint+0xba>
                int num  = va_arg(args, int);
   115ff:	8b 45 10             	mov    0x10(%ebp),%eax
   11602:	8d 50 04             	lea    0x4(%eax),%edx
   11605:	89 55 10             	mov    %edx,0x10(%ebp)
   11608:	8b 00                	mov    (%eax),%eax
   1160a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   1160d:	6a 10                	push   $0x10
   1160f:	ff 75 e8             	pushl  -0x18(%ebp)
   11612:	ff 75 f8             	pushl  -0x8(%ebp)
   11615:	e8 82 fe ff ff       	call   1149c <k_itoa>
   1161a:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   1161d:	ff 75 f8             	pushl  -0x8(%ebp)
   11620:	e8 48 fd ff ff       	call   1136d <k_strlen>
   11625:	83 c4 04             	add    $0x4,%esp
   11628:	01 45 f8             	add    %eax,-0x8(%ebp)
   1162b:	eb 6d                	jmp    1169a <k_vsprint+0x127>

            }else if (ch == 'c') {
   1162d:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11631:	75 1f                	jne    11652 <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   11633:	8b 45 10             	mov    0x10(%ebp),%eax
   11636:	8d 50 04             	lea    0x4(%eax),%edx
   11639:	89 55 10             	mov    %edx,0x10(%ebp)
   1163c:	8b 00                	mov    (%eax),%eax
   1163e:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   11641:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11644:	8d 50 01             	lea    0x1(%eax),%edx
   11647:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1164a:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1164e:	88 10                	mov    %dl,(%eax)
   11650:	eb 48                	jmp    1169a <k_vsprint+0x127>

            }else if (ch == 's') {
   11652:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11656:	75 42                	jne    1169a <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   11658:	8b 45 10             	mov    0x10(%ebp),%eax
   1165b:	8d 50 04             	lea    0x4(%eax),%edx
   1165e:	89 55 10             	mov    %edx,0x10(%ebp)
   11661:	8b 00                	mov    (%eax),%eax
   11663:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   11666:	ff 75 f4             	pushl  -0xc(%ebp)
   11669:	e8 ff fc ff ff       	call   1136d <k_strlen>
   1166e:	83 c4 04             	add    $0x4,%esp
   11671:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   11674:	eb 17                	jmp    1168d <k_vsprint+0x11a>
                    *curr++ = *str++;
   11676:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11679:	8d 42 01             	lea    0x1(%edx),%eax
   1167c:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1167f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11682:	8d 48 01             	lea    0x1(%eax),%ecx
   11685:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11688:	0f b6 12             	movzbl (%edx),%edx
   1168b:	88 10                	mov    %dl,(%eax)
                while(len--) {
   1168d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11690:	8d 50 ff             	lea    -0x1(%eax),%edx
   11693:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11696:	85 c0                	test   %eax,%eax
   11698:	75 dc                	jne    11676 <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   1169a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   116a1:	eb 01                	jmp    116a4 <k_vsprint+0x131>
        
        default:
            break;
   116a3:	90                   	nop
    while((ch = *fmt++)) {
   116a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   116a7:	8d 50 01             	lea    0x1(%eax),%edx
   116aa:	89 55 0c             	mov    %edx,0xc(%ebp)
   116ad:	0f b6 00             	movzbl (%eax),%eax
   116b0:	88 45 ef             	mov    %al,-0x11(%ebp)
   116b3:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   116b7:	0f 85 ce fe ff ff    	jne    1158b <k_vsprint+0x18>
        }
    }
   116bd:	90                   	nop
   116be:	c9                   	leave  
   116bf:	c3                   	ret    

000116c0 <list_is_empty>:
static inline int list_is_empty (list_t* list) {
   116c0:	55                   	push   %ebp
   116c1:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   116c3:	8b 45 08             	mov    0x8(%ebp),%eax
   116c6:	8b 40 08             	mov    0x8(%eax),%eax
   116c9:	85 c0                	test   %eax,%eax
   116cb:	0f 94 c0             	sete   %al
   116ce:	0f b6 c0             	movzbl %al,%eax
}
   116d1:	5d                   	pop    %ebp
   116d2:	c3                   	ret    

000116d3 <list_init>:
#include <list.h>

void list_init(list_t* list) {
   116d3:	55                   	push   %ebp
   116d4:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t*)0;
   116d6:	8b 45 08             	mov    0x8(%ebp),%eax
   116d9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116e0:	8b 45 08             	mov    0x8(%ebp),%eax
   116e3:	8b 50 04             	mov    0x4(%eax),%edx
   116e6:	8b 45 08             	mov    0x8(%ebp),%eax
   116e9:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   116eb:	8b 45 08             	mov    0x8(%ebp),%eax
   116ee:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   116f5:	90                   	nop
   116f6:	5d                   	pop    %ebp
   116f7:	c3                   	ret    

000116f8 <list_insert_first>:

void list_insert_first (list_t* list, list_node_t* node) {
   116f8:	55                   	push   %ebp
   116f9:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   116fb:	8b 45 08             	mov    0x8(%ebp),%eax
   116fe:	8b 10                	mov    (%eax),%edx
   11700:	8b 45 0c             	mov    0xc(%ebp),%eax
   11703:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   11706:	8b 45 0c             	mov    0xc(%ebp),%eax
   11709:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if(list_is_empty(list)) {
   1170f:	ff 75 08             	pushl  0x8(%ebp)
   11712:	e8 a9 ff ff ff       	call   116c0 <list_is_empty>
   11717:	83 c4 04             	add    $0x4,%esp
   1171a:	85 c0                	test   %eax,%eax
   1171c:	74 15                	je     11733 <list_insert_first+0x3b>
        list->last = list->first = node;
   1171e:	8b 45 08             	mov    0x8(%ebp),%eax
   11721:	8b 55 0c             	mov    0xc(%ebp),%edx
   11724:	89 10                	mov    %edx,(%eax)
   11726:	8b 45 08             	mov    0x8(%ebp),%eax
   11729:	8b 10                	mov    (%eax),%edx
   1172b:	8b 45 08             	mov    0x8(%ebp),%eax
   1172e:	89 50 04             	mov    %edx,0x4(%eax)
   11731:	eb 12                	jmp    11745 <list_insert_first+0x4d>
    } else {
        list->first->pre = node;
   11733:	8b 45 08             	mov    0x8(%ebp),%eax
   11736:	8b 00                	mov    (%eax),%eax
   11738:	8b 55 0c             	mov    0xc(%ebp),%edx
   1173b:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1173d:	8b 45 08             	mov    0x8(%ebp),%eax
   11740:	8b 55 0c             	mov    0xc(%ebp),%edx
   11743:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11745:	8b 45 08             	mov    0x8(%ebp),%eax
   11748:	8b 40 08             	mov    0x8(%eax),%eax
   1174b:	8d 50 01             	lea    0x1(%eax),%edx
   1174e:	8b 45 08             	mov    0x8(%ebp),%eax
   11751:	89 50 08             	mov    %edx,0x8(%eax)
}
   11754:	90                   	nop
   11755:	c9                   	leave  
   11756:	c3                   	ret    

00011757 <list_insert_last>:

void list_insert_last (list_t* list, list_node_t* node) {
   11757:	55                   	push   %ebp
   11758:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1175a:	8b 45 08             	mov    0x8(%ebp),%eax
   1175d:	8b 50 04             	mov    0x4(%eax),%edx
   11760:	8b 45 0c             	mov    0xc(%ebp),%eax
   11763:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11765:	8b 45 0c             	mov    0xc(%ebp),%eax
   11768:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   1176f:	ff 75 08             	pushl  0x8(%ebp)
   11772:	e8 49 ff ff ff       	call   116c0 <list_is_empty>
   11777:	83 c4 04             	add    $0x4,%esp
   1177a:	85 c0                	test   %eax,%eax
   1177c:	74 16                	je     11794 <list_insert_last+0x3d>
        list->first = list->last = node;
   1177e:	8b 45 08             	mov    0x8(%ebp),%eax
   11781:	8b 55 0c             	mov    0xc(%ebp),%edx
   11784:	89 50 04             	mov    %edx,0x4(%eax)
   11787:	8b 45 08             	mov    0x8(%ebp),%eax
   1178a:	8b 50 04             	mov    0x4(%eax),%edx
   1178d:	8b 45 08             	mov    0x8(%ebp),%eax
   11790:	89 10                	mov    %edx,(%eax)
   11792:	eb 15                	jmp    117a9 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11794:	8b 45 08             	mov    0x8(%ebp),%eax
   11797:	8b 40 04             	mov    0x4(%eax),%eax
   1179a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1179d:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   117a0:	8b 45 08             	mov    0x8(%ebp),%eax
   117a3:	8b 55 0c             	mov    0xc(%ebp),%edx
   117a6:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   117a9:	8b 45 08             	mov    0x8(%ebp),%eax
   117ac:	8b 40 08             	mov    0x8(%eax),%eax
   117af:	8d 50 01             	lea    0x1(%eax),%edx
   117b2:	8b 45 08             	mov    0x8(%ebp),%eax
   117b5:	89 50 08             	mov    %edx,0x8(%eax)
}
   117b8:	90                   	nop
   117b9:	c9                   	leave  
   117ba:	c3                   	ret    

000117bb <list_delete_first>:


list_node_t* list_delete_first (list_t* list) {
   117bb:	55                   	push   %ebp
   117bc:	89 e5                	mov    %esp,%ebp
   117be:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list)) {
   117c1:	ff 75 08             	pushl  0x8(%ebp)
   117c4:	e8 f7 fe ff ff       	call   116c0 <list_is_empty>
   117c9:	83 c4 04             	add    $0x4,%esp
   117cc:	85 c0                	test   %eax,%eax
   117ce:	74 07                	je     117d7 <list_delete_first+0x1c>
        return (list_node_t*)0;
   117d0:	b8 00 00 00 00       	mov    $0x0,%eax
   117d5:	eb 5b                	jmp    11832 <list_delete_first+0x77>
    }

    list_node_t* remove_node = list->first;
   117d7:	8b 45 08             	mov    0x8(%ebp),%eax
   117da:	8b 00                	mov    (%eax),%eax
   117dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   117df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117e2:	8b 50 04             	mov    0x4(%eax),%edx
   117e5:	8b 45 08             	mov    0x8(%ebp),%eax
   117e8:	89 10                	mov    %edx,(%eax)

    if( list->first == (list_node_t*)0 ) {
   117ea:	8b 45 08             	mov    0x8(%ebp),%eax
   117ed:	8b 00                	mov    (%eax),%eax
   117ef:	85 c0                	test   %eax,%eax
   117f1:	75 0c                	jne    117ff <list_delete_first+0x44>
        list->last = (list_node_t*)0;
   117f3:	8b 45 08             	mov    0x8(%ebp),%eax
   117f6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   117fd:	eb 0c                	jmp    1180b <list_delete_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t*)0;
   117ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11802:	8b 40 04             	mov    0x4(%eax),%eax
   11805:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        //list->first->pre = (list_node_t*)0;
    }

    remove_node->pre = remove_node->next = (list_node_t*)0;
   1180b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1180e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11815:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11818:	8b 50 04             	mov    0x4(%eax),%edx
   1181b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1181e:	89 10                	mov    %edx,(%eax)
    list->count--;
   11820:	8b 45 08             	mov    0x8(%ebp),%eax
   11823:	8b 40 08             	mov    0x8(%eax),%eax
   11826:	8d 50 ff             	lea    -0x1(%eax),%edx
   11829:	8b 45 08             	mov    0x8(%ebp),%eax
   1182c:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   1182f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11832:	c9                   	leave  
   11833:	c3                   	ret    

00011834 <list_delete>:

list_node_t* list_delete (list_t* list, list_node_t* node) {
   11834:	55                   	push   %ebp
   11835:	89 e5                	mov    %esp,%ebp
    if(node == list->first) {
   11837:	8b 45 08             	mov    0x8(%ebp),%eax
   1183a:	8b 00                	mov    (%eax),%eax
   1183c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1183f:	75 0b                	jne    1184c <list_delete+0x18>
        list->first = node->next;
   11841:	8b 45 0c             	mov    0xc(%ebp),%eax
   11844:	8b 50 04             	mov    0x4(%eax),%edx
   11847:	8b 45 08             	mov    0x8(%ebp),%eax
   1184a:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last) {
   1184c:	8b 45 08             	mov    0x8(%ebp),%eax
   1184f:	8b 40 04             	mov    0x4(%eax),%eax
   11852:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11855:	75 0b                	jne    11862 <list_delete+0x2e>
        list->last = node->pre;
   11857:	8b 45 0c             	mov    0xc(%ebp),%eax
   1185a:	8b 10                	mov    (%eax),%edx
   1185c:	8b 45 08             	mov    0x8(%ebp),%eax
   1185f:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if(node->pre) {
   11862:	8b 45 0c             	mov    0xc(%ebp),%eax
   11865:	8b 00                	mov    (%eax),%eax
   11867:	85 c0                	test   %eax,%eax
   11869:	74 0e                	je     11879 <list_delete+0x45>
        node->pre->next = node->next;
   1186b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1186e:	8b 00                	mov    (%eax),%eax
   11870:	8b 55 0c             	mov    0xc(%ebp),%edx
   11873:	8b 52 04             	mov    0x4(%edx),%edx
   11876:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) {
   11879:	8b 45 0c             	mov    0xc(%ebp),%eax
   1187c:	8b 40 04             	mov    0x4(%eax),%eax
   1187f:	85 c0                	test   %eax,%eax
   11881:	74 0d                	je     11890 <list_delete+0x5c>
        node->next->pre = node->pre;
   11883:	8b 45 0c             	mov    0xc(%ebp),%eax
   11886:	8b 40 04             	mov    0x4(%eax),%eax
   11889:	8b 55 0c             	mov    0xc(%ebp),%edx
   1188c:	8b 12                	mov    (%edx),%edx
   1188e:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   11890:	8b 45 0c             	mov    0xc(%ebp),%eax
   11893:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1189a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1189d:	8b 50 04             	mov    0x4(%eax),%edx
   118a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   118a3:	89 10                	mov    %edx,(%eax)

    list->count--;
   118a5:	8b 45 08             	mov    0x8(%ebp),%eax
   118a8:	8b 40 08             	mov    0x8(%eax),%eax
   118ab:	8d 50 ff             	lea    -0x1(%eax),%edx
   118ae:	8b 45 08             	mov    0x8(%ebp),%eax
   118b1:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   118b4:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   118b7:	5d                   	pop    %ebp
   118b8:	c3                   	ret    

000118b9 <inb>:
static inline uint8_t inb(uint16_t  port) {
   118b9:	55                   	push   %ebp
   118ba:	89 e5                	mov    %esp,%ebp
   118bc:	83 ec 14             	sub    $0x14,%esp
   118bf:	8b 45 08             	mov    0x8(%ebp),%eax
   118c2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   118c6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   118ca:	89 c2                	mov    %eax,%edx
   118cc:	ec                   	in     (%dx),%al
   118cd:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   118d0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   118d4:	c9                   	leave  
   118d5:	c3                   	ret    

000118d6 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   118d6:	55                   	push   %ebp
   118d7:	89 e5                	mov    %esp,%ebp
   118d9:	83 ec 08             	sub    $0x8,%esp
   118dc:	8b 55 08             	mov    0x8(%ebp),%edx
   118df:	8b 45 0c             	mov    0xc(%ebp),%eax
   118e2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   118e6:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   118e9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   118ed:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   118f1:	ee                   	out    %al,(%dx)
}
   118f2:	90                   	nop
   118f3:	c9                   	leave  
   118f4:	c3                   	ret    

000118f5 <log_init>:

#define COM1_PORT       0x3f8

static mutex_t mutex;

void log_init() {
   118f5:	55                   	push   %ebp
   118f6:	89 e5                	mov    %esp,%ebp
   118f8:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   118fb:	83 ec 0c             	sub    $0xc,%esp
   118fe:	68 40 5c 01 00       	push   $0x15c40
   11903:	e8 9d 09 00 00       	call   122a5 <mutex_init>
   11908:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   1190b:	83 ec 08             	sub    $0x8,%esp
   1190e:	6a 00                	push   $0x0
   11910:	68 f9 03 00 00       	push   $0x3f9
   11915:	e8 bc ff ff ff       	call   118d6 <outb>
   1191a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   1191d:	83 ec 08             	sub    $0x8,%esp
   11920:	68 80 00 00 00       	push   $0x80
   11925:	68 fb 03 00 00       	push   $0x3fb
   1192a:	e8 a7 ff ff ff       	call   118d6 <outb>
   1192f:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   11932:	83 ec 08             	sub    $0x8,%esp
   11935:	6a 03                	push   $0x3
   11937:	68 f8 03 00 00       	push   $0x3f8
   1193c:	e8 95 ff ff ff       	call   118d6 <outb>
   11941:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   11944:	83 ec 08             	sub    $0x8,%esp
   11947:	6a 00                	push   $0x0
   11949:	68 f9 03 00 00       	push   $0x3f9
   1194e:	e8 83 ff ff ff       	call   118d6 <outb>
   11953:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   11956:	83 ec 08             	sub    $0x8,%esp
   11959:	6a 03                	push   $0x3
   1195b:	68 fb 03 00 00       	push   $0x3fb
   11960:	e8 71 ff ff ff       	call   118d6 <outb>
   11965:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   11968:	83 ec 08             	sub    $0x8,%esp
   1196b:	68 c7 00 00 00       	push   $0xc7
   11970:	68 fa 03 00 00       	push   $0x3fa
   11975:	e8 5c ff ff ff       	call   118d6 <outb>
   1197a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   1197d:	83 ec 08             	sub    $0x8,%esp
   11980:	6a 0f                	push   $0xf
   11982:	68 fc 03 00 00       	push   $0x3fc
   11987:	e8 4a ff ff ff       	call   118d6 <outb>
   1198c:	83 c4 10             	add    $0x10,%esp
}
   1198f:	90                   	nop
   11990:	c9                   	leave  
   11991:	c3                   	ret    

00011992 <klog>:


void klog(const char* fmt, ...) {
   11992:	55                   	push   %ebp
   11993:	89 e5                	mov    %esp,%ebp
   11995:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   1199b:	83 ec 04             	sub    $0x4,%esp
   1199e:	68 80 00 00 00       	push   $0x80
   119a3:	6a 00                	push   $0x0
   119a5:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   119ab:	50                   	push   %eax
   119ac:	e8 46 fa ff ff       	call   113f7 <k_memset>
   119b1:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   119b4:	8d 45 0c             	lea    0xc(%ebp),%eax
   119b7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    k_vsprint(buf, fmt, args);
   119bd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   119c3:	83 ec 04             	sub    $0x4,%esp
   119c6:	50                   	push   %eax
   119c7:	ff 75 08             	pushl  0x8(%ebp)
   119ca:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   119d0:	50                   	push   %eax
   119d1:	e8 9d fb ff ff       	call   11573 <k_vsprint>
   119d6:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   119d9:	83 ec 0c             	sub    $0xc,%esp
   119dc:	68 40 5c 01 00       	push   $0x15c40
   119e1:	e8 ed 08 00 00       	call   122d3 <mutex_lock>
   119e6:	83 c4 10             	add    $0x10,%esp
    // irq_state_t state = irq_enter_proection();

    const char *p = buf;
   119e9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   119ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   119f2:	eb 3b                	jmp    11a2f <klog+0x9d>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   119f4:	90                   	nop
   119f5:	83 ec 0c             	sub    $0xc,%esp
   119f8:	68 fd 03 00 00       	push   $0x3fd
   119fd:	e8 b7 fe ff ff       	call   118b9 <inb>
   11a02:	83 c4 10             	add    $0x10,%esp
   11a05:	0f b6 c0             	movzbl %al,%eax
   11a08:	83 e0 40             	and    $0x40,%eax
   11a0b:	85 c0                	test   %eax,%eax
   11a0d:	74 e6                	je     119f5 <klog+0x63>
        outb(COM1_PORT, *p++);
   11a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a12:	8d 50 01             	lea    0x1(%eax),%edx
   11a15:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11a18:	0f b6 00             	movzbl (%eax),%eax
   11a1b:	0f b6 c0             	movzbl %al,%eax
   11a1e:	83 ec 08             	sub    $0x8,%esp
   11a21:	50                   	push   %eax
   11a22:	68 f8 03 00 00       	push   $0x3f8
   11a27:	e8 aa fe ff ff       	call   118d6 <outb>
   11a2c:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11a2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a32:	0f b6 00             	movzbl (%eax),%eax
   11a35:	84 c0                	test   %al,%al
   11a37:	75 bb                	jne    119f4 <klog+0x62>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   11a39:	83 ec 08             	sub    $0x8,%esp
   11a3c:	6a 0d                	push   $0xd
   11a3e:	68 f8 03 00 00       	push   $0x3f8
   11a43:	e8 8e fe ff ff       	call   118d6 <outb>
   11a48:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   11a4b:	83 ec 08             	sub    $0x8,%esp
   11a4e:	6a 0a                	push   $0xa
   11a50:	68 f8 03 00 00       	push   $0x3f8
   11a55:	e8 7c fe ff ff       	call   118d6 <outb>
   11a5a:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   11a5d:	83 ec 0c             	sub    $0xc,%esp
   11a60:	68 40 5c 01 00       	push   $0x15c40
   11a65:	e8 fd 08 00 00       	call   12367 <mutex_unlock>
   11a6a:	83 c4 10             	add    $0x10,%esp
    // irq_leave_proection(state);

}
   11a6d:	90                   	nop
   11a6e:	c9                   	leave  
   11a6f:	c3                   	ret    

00011a70 <down2>:

uint32_t memory_create_uvm();

void memory_init (boot_info_t* boot_info);

static inline uint32_t down2(uint32_t size, uint32_t bound) {
   11a70:	55                   	push   %ebp
   11a71:	89 e5                	mov    %esp,%ebp
    return size & ~ (bound - 1);
   11a73:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a76:	f7 d8                	neg    %eax
   11a78:	23 45 08             	and    0x8(%ebp),%eax
}
   11a7b:	5d                   	pop    %ebp
   11a7c:	c3                   	ret    

00011a7d <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11a7d:	55                   	push   %ebp
   11a7e:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~ (bound - 1);
   11a80:	8b 55 08             	mov    0x8(%ebp),%edx
   11a83:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a86:	01 d0                	add    %edx,%eax
   11a88:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a8b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a8e:	f7 d8                	neg    %eax
   11a90:	21 d0                	and    %edx,%eax
}
   11a92:	5d                   	pop    %ebp
   11a93:	c3                   	ret    

00011a94 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   11a94:	55                   	push   %ebp
   11a95:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   11a97:	8b 45 08             	mov    0x8(%ebp),%eax
   11a9a:	0f 22 d8             	mov    %eax,%cr3
}
   11a9d:	90                   	nop
   11a9e:	5d                   	pop    %ebp
   11a9f:	c3                   	ret    

00011aa0 <mmu_set_page_dir>:
    };
}pte_t;
#pragma pack()


static inline void mmu_set_page_dir(uint32_t paddr) {
   11aa0:	55                   	push   %ebp
   11aa1:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11aa3:	ff 75 08             	pushl  0x8(%ebp)
   11aa6:	e8 e9 ff ff ff       	call   11a94 <write_cr3>
   11aab:	83 c4 04             	add    $0x4,%esp
}
   11aae:	90                   	nop
   11aaf:	c9                   	leave  
   11ab0:	c3                   	ret    

00011ab1 <pde_index>:

static inline uint32_t pde_index (uint32_t vaddr) {
   11ab1:	55                   	push   %ebp
   11ab2:	89 e5                	mov    %esp,%ebp
   11ab4:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22);      // 只取高10位
   11ab7:	8b 45 08             	mov    0x8(%ebp),%eax
   11aba:	c1 e8 16             	shr    $0x16,%eax
   11abd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   11ac0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11ac3:	c9                   	leave  
   11ac4:	c3                   	ret    

00011ac5 <pde_paddr>:


static inline uint32_t pde_paddr (pde_t * pde) {
   11ac5:	55                   	push   %ebp
   11ac6:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   11ac8:	8b 45 08             	mov    0x8(%ebp),%eax
   11acb:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   11acf:	c0 ea 04             	shr    $0x4,%dl
   11ad2:	0f b6 d2             	movzbl %dl,%edx
   11ad5:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   11ad9:	c1 e1 04             	shl    $0x4,%ecx
   11adc:	09 ca                	or     %ecx,%edx
   11ade:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   11ae2:	c1 e0 0c             	shl    $0xc,%eax
   11ae5:	09 d0                	or     %edx,%eax
   11ae7:	c1 e0 0c             	shl    $0xc,%eax
}
   11aea:	5d                   	pop    %ebp
   11aeb:	c3                   	ret    

00011aec <pte_index>:


static inline int pte_index (uint32_t vaddr) {
   11aec:	55                   	push   %ebp
   11aed:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   11aef:	8b 45 08             	mov    0x8(%ebp),%eax
   11af2:	c1 e8 0c             	shr    $0xc,%eax
   11af5:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   11afa:	5d                   	pop    %ebp
   11afb:	c3                   	ret    

00011afc <pte_paddr>:


static inline uint32_t pte_paddr (pte_t * pte) {
   11afc:	55                   	push   %ebp
   11afd:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   11aff:	8b 45 08             	mov    0x8(%ebp),%eax
   11b02:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   11b06:	c0 ea 04             	shr    $0x4,%dl
   11b09:	0f b6 d2             	movzbl %dl,%edx
   11b0c:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   11b10:	c1 e1 04             	shl    $0x4,%ecx
   11b13:	09 ca                	or     %ecx,%edx
   11b15:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   11b19:	c1 e0 0c             	shl    $0xc,%eax
   11b1c:	09 d0                	or     %edx,%eax
   11b1e:	c1 e0 0c             	shl    $0xc,%eax
}
   11b21:	5d                   	pop    %ebp
   11b22:	c3                   	ret    

00011b23 <addr_alloc_init>:
static pde_t g_kernel_page_dir[PDE_CNT] __attribute__( (aligned(MEM_PAGE_SIZE)) );


static void 
addr_alloc_init(addr_alloc_t * alloc, uint8_t* bits, uint32_t start, 
uint32_t size, uint32_t page_size) {
   11b23:	55                   	push   %ebp
   11b24:	89 e5                	mov    %esp,%ebp
   11b26:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   11b29:	8b 45 08             	mov    0x8(%ebp),%eax
   11b2c:	83 ec 0c             	sub    $0xc,%esp
   11b2f:	50                   	push   %eax
   11b30:	e8 70 07 00 00       	call   122a5 <mutex_init>
   11b35:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   11b38:	8b 45 08             	mov    0x8(%ebp),%eax
   11b3b:	8b 55 10             	mov    0x10(%ebp),%edx
   11b3e:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   11b41:	8b 45 08             	mov    0x8(%ebp),%eax
   11b44:	8b 55 14             	mov    0x14(%ebp),%edx
   11b47:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   11b4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11b4d:	8b 55 18             	mov    0x18(%ebp),%edx
   11b50:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   11b53:	8b 45 08             	mov    0x8(%ebp),%eax
   11b56:	8b 40 20             	mov    0x20(%eax),%eax
   11b59:	ba 00 00 00 00       	mov    $0x0,%edx
   11b5e:	f7 75 18             	divl   0x18(%ebp)
   11b61:	89 c2                	mov    %eax,%edx
   11b63:	8b 45 08             	mov    0x8(%ebp),%eax
   11b66:	83 c0 14             	add    $0x14,%eax
   11b69:	6a 00                	push   $0x0
   11b6b:	52                   	push   %edx
   11b6c:	ff 75 0c             	pushl  0xc(%ebp)
   11b6f:	50                   	push   %eax
   11b70:	e8 98 f4 ff ff       	call   1100d <bitmap_init>
   11b75:	83 c4 10             	add    $0x10,%esp
}
   11b78:	90                   	nop
   11b79:	c9                   	leave  
   11b7a:	c3                   	ret    

00011b7b <addr_alloc_page>:


static uint32_t 
addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   11b7b:	55                   	push   %ebp
   11b7c:	89 e5                	mov    %esp,%ebp
   11b7e:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   11b81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   11b88:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8b:	83 ec 0c             	sub    $0xc,%esp
   11b8e:	50                   	push   %eax
   11b8f:	e8 3f 07 00 00       	call   122d3 <mutex_lock>
   11b94:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   11b97:	8b 45 08             	mov    0x8(%ebp),%eax
   11b9a:	83 c0 14             	add    $0x14,%eax
   11b9d:	83 ec 04             	sub    $0x4,%esp
   11ba0:	ff 75 0c             	pushl  0xc(%ebp)
   11ba3:	6a 00                	push   $0x0
   11ba5:	50                   	push   %eax
   11ba6:	e8 de f5 ff ff       	call   11189 <bitmap_alloc_nbits>
   11bab:	83 c4 10             	add    $0x10,%esp
   11bae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   11bb1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11bb5:	78 17                	js     11bce <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   11bb7:	8b 45 08             	mov    0x8(%ebp),%eax
   11bba:	8b 50 1c             	mov    0x1c(%eax),%edx
   11bbd:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc0:	8b 48 24             	mov    0x24(%eax),%ecx
   11bc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bc6:	0f af c1             	imul   %ecx,%eax
   11bc9:	01 d0                	add    %edx,%eax
   11bcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   11bce:	8b 45 08             	mov    0x8(%ebp),%eax
   11bd1:	83 ec 0c             	sub    $0xc,%esp
   11bd4:	50                   	push   %eax
   11bd5:	e8 8d 07 00 00       	call   12367 <mutex_unlock>
   11bda:	83 c4 10             	add    $0x10,%esp
    return addr;
   11bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11be0:	c9                   	leave  
   11be1:	c3                   	ret    

00011be2 <addr_free_page>:


static uint32_t
addr_free_page(addr_alloc_t * alloc, uint32_t addr, int page_count) {
   11be2:	55                   	push   %ebp
   11be3:	89 e5                	mov    %esp,%ebp
   11be5:	53                   	push   %ebx
   11be6:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   11be9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bec:	83 ec 0c             	sub    $0xc,%esp
   11bef:	50                   	push   %eax
   11bf0:	e8 de 06 00 00       	call   122d3 <mutex_lock>
   11bf5:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   11bf8:	8b 45 08             	mov    0x8(%ebp),%eax
   11bfb:	8b 40 1c             	mov    0x1c(%eax),%eax
   11bfe:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c01:	89 d1                	mov    %edx,%ecx
   11c03:	29 c1                	sub    %eax,%ecx
   11c05:	8b 45 08             	mov    0x8(%ebp),%eax
   11c08:	8b 58 24             	mov    0x24(%eax),%ebx
   11c0b:	89 c8                	mov    %ecx,%eax
   11c0d:	ba 00 00 00 00       	mov    $0x0,%edx
   11c12:	f7 f3                	div    %ebx
   11c14:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   11c17:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c1a:	8b 55 08             	mov    0x8(%ebp),%edx
   11c1d:	83 c2 14             	add    $0x14,%edx
   11c20:	6a 00                	push   $0x0
   11c22:	ff 75 10             	pushl  0x10(%ebp)
   11c25:	50                   	push   %eax
   11c26:	52                   	push   %edx
   11c27:	e8 89 f4 ff ff       	call   110b5 <bitmap_set_bit>
   11c2c:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   11c2f:	8b 45 08             	mov    0x8(%ebp),%eax
   11c32:	83 ec 0c             	sub    $0xc,%esp
   11c35:	50                   	push   %eax
   11c36:	e8 2c 07 00 00       	call   12367 <mutex_unlock>
   11c3b:	83 c4 10             	add    $0x10,%esp
}
   11c3e:	90                   	nop
   11c3f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11c42:	c9                   	leave  
   11c43:	c3                   	ret    

00011c44 <some_test>:


void some_test() {
   11c44:	55                   	push   %ebp
   11c45:	89 e5                	mov    %esp,%ebp
   11c47:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t addr_alloc;
    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64*4096, 4096);
   11c4a:	83 ec 0c             	sub    $0xc,%esp
   11c4d:	68 00 10 00 00       	push   $0x1000
   11c52:	68 00 00 04 00       	push   $0x40000
   11c57:	68 00 10 00 00       	push   $0x1000
   11c5c:	8d 45 b8             	lea    -0x48(%ebp),%eax
   11c5f:	50                   	push   %eax
   11c60:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11c63:	50                   	push   %eax
   11c64:	e8 ba fe ff ff       	call   11b23 <addr_alloc_init>
   11c69:	83 c4 20             	add    $0x20,%esp
    for(int i=0; i<32; i++) {
   11c6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11c73:	eb 2b                	jmp    11ca0 <some_test+0x5c>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   11c75:	83 ec 08             	sub    $0x8,%esp
   11c78:	6a 02                	push   $0x2
   11c7a:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11c7d:	50                   	push   %eax
   11c7e:	e8 f8 fe ff ff       	call   11b7b <addr_alloc_page>
   11c83:	83 c4 10             	add    $0x10,%esp
   11c86:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("alloc addr: 0x%x", addr);
   11c89:	83 ec 08             	sub    $0x8,%esp
   11c8c:	ff 75 e8             	pushl  -0x18(%ebp)
   11c8f:	68 1c 30 01 00       	push   $0x1301c
   11c94:	e8 f9 fc ff ff       	call   11992 <klog>
   11c99:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11c9c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11ca0:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   11ca4:	7e cf                	jle    11c75 <some_test+0x31>
    }
    uint32_t addr = 0x1000;
   11ca6:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for(int i=0; i<32; i++) {
   11cad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11cb4:	eb 32                	jmp    11ce8 <some_test+0xa4>
        addr_free_page(&addr_alloc, addr, 2);
   11cb6:	83 ec 04             	sub    $0x4,%esp
   11cb9:	6a 02                	push   $0x2
   11cbb:	ff 75 f0             	pushl  -0x10(%ebp)
   11cbe:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11cc1:	50                   	push   %eax
   11cc2:	e8 1b ff ff ff       	call   11be2 <addr_free_page>
   11cc7:	83 c4 10             	add    $0x10,%esp
        addr += 8192;
   11cca:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        klog("free addr: 0x%x", addr);
   11cd1:	83 ec 08             	sub    $0x8,%esp
   11cd4:	ff 75 f0             	pushl  -0x10(%ebp)
   11cd7:	68 2d 30 01 00       	push   $0x1302d
   11cdc:	e8 b1 fc ff ff       	call   11992 <klog>
   11ce1:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11ce4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11ce8:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   11cec:	7e c8                	jle    11cb6 <some_test+0x72>
    }
}
   11cee:	90                   	nop
   11cef:	c9                   	leave  
   11cf0:	c3                   	ret    

00011cf1 <show_mem_info>:


static void        
show_mem_info(boot_info_t* boot_info) {
   11cf1:	55                   	push   %ebp
   11cf2:	89 e5                	mov    %esp,%ebp
   11cf4:	83 ec 18             	sub    $0x18,%esp
    klog("mem region");
   11cf7:	83 ec 0c             	sub    $0xc,%esp
   11cfa:	68 3d 30 01 00       	push   $0x1303d
   11cff:	e8 8e fc ff ff       	call   11992 <klog>
   11d04:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11d0e:	eb 29                	jmp    11d39 <show_mem_info+0x48>
        klog("[%d]: 0x%x - 0x%x", i, 
   11d10:	8b 45 08             	mov    0x8(%ebp),%eax
   11d13:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d16:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   11d1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11d20:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   11d23:	52                   	push   %edx
   11d24:	50                   	push   %eax
   11d25:	ff 75 f4             	pushl  -0xc(%ebp)
   11d28:	68 48 30 01 00       	push   $0x13048
   11d2d:	e8 60 fc ff ff       	call   11992 <klog>
   11d32:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d35:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d39:	8b 45 08             	mov    0x8(%ebp),%eax
   11d3c:	8b 40 50             	mov    0x50(%eax),%eax
   11d3f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11d42:	7c cc                	jl     11d10 <show_mem_info+0x1f>
            boot_info->ram_region_cfg[i].start, 
            boot_info->ram_region_cfg[i].size );
    }
    klog("");
   11d44:	83 ec 0c             	sub    $0xc,%esp
   11d47:	68 5a 30 01 00       	push   $0x1305a
   11d4c:	e8 41 fc ff ff       	call   11992 <klog>
   11d51:	83 c4 10             	add    $0x10,%esp
}
   11d54:	90                   	nop
   11d55:	c9                   	leave  
   11d56:	c3                   	ret    

00011d57 <total_mem_size>:


static uint32_t 
total_mem_size(boot_info_t* boot_info) {
   11d57:	55                   	push   %ebp
   11d58:	89 e5                	mov    %esp,%ebp
   11d5a:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   11d5d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d64:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   11d6b:	eb 11                	jmp    11d7e <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   11d6d:	8b 45 08             	mov    0x8(%ebp),%eax
   11d70:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11d73:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   11d77:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d7a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   11d7e:	8b 45 08             	mov    0x8(%ebp),%eax
   11d81:	8b 40 50             	mov    0x50(%eax),%eax
   11d84:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   11d87:	7c e4                	jl     11d6d <total_mem_size+0x16>
    }
    return mem_size;
   11d89:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11d8c:	c9                   	leave  
   11d8d:	c3                   	ret    

00011d8e <find_pte>:




pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   11d8e:	55                   	push   %ebp
   11d8f:	89 e5                	mov    %esp,%ebp
   11d91:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   11d94:	ff 75 0c             	pushl  0xc(%ebp)
   11d97:	e8 15 fd ff ff       	call   11ab1 <pde_index>
   11d9c:	83 c4 04             	add    $0x4,%esp
   11d9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11da6:	8b 45 08             	mov    0x8(%ebp),%eax
   11da9:	01 d0                	add    %edx,%eax
   11dab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   11dae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11db1:	0f b6 00             	movzbl (%eax),%eax
   11db4:	83 e0 01             	and    $0x1,%eax
   11db7:	84 c0                	test   %al,%al
   11db9:	74 10                	je     11dcb <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   11dbb:	ff 75 f0             	pushl  -0x10(%ebp)
   11dbe:	e8 02 fd ff ff       	call   11ac5 <pde_paddr>
   11dc3:	83 c4 04             	add    $0x4,%esp
   11dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11dc9:	eb 57                	jmp    11e22 <find_pte+0x94>
    } else {
        if (alloc == 0) {
   11dcb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11dcf:	75 07                	jne    11dd8 <find_pte+0x4a>
            return (pte_t *)0;
   11dd1:	b8 00 00 00 00       	mov    $0x0,%eax
   11dd6:	eb 64                	jmp    11e3c <find_pte+0xae>
        }
        uint32_t pg_paddr = addr_alloc_page(&g_paddr_alloc, 1);
   11dd8:	83 ec 08             	sub    $0x8,%esp
   11ddb:	6a 01                	push   $0x1
   11ddd:	68 00 60 01 00       	push   $0x16000
   11de2:	e8 94 fd ff ff       	call   11b7b <addr_alloc_page>
   11de7:	83 c4 10             	add    $0x10,%esp
   11dea:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   11ded:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11df1:	75 07                	jne    11dfa <find_pte+0x6c>
            return (pte_t *)0;
   11df3:	b8 00 00 00 00       	mov    $0x0,%eax
   11df8:	eb 42                	jmp    11e3c <find_pte+0xae>
        }
        pde->v = pg_paddr | PDE_P | PDE_W | PDE_U;
   11dfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11dfd:	83 c8 07             	or     $0x7,%eax
   11e00:	89 c2                	mov    %eax,%edx
   11e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e05:	89 10                	mov    %edx,(%eax)

        page_table = (pte_t *)(pg_paddr);
   11e07:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        k_memset(page_table, 0, MEM_PAGE_SIZE);
   11e0d:	83 ec 04             	sub    $0x4,%esp
   11e10:	68 00 10 00 00       	push   $0x1000
   11e15:	6a 00                	push   $0x0
   11e17:	ff 75 f4             	pushl  -0xc(%ebp)
   11e1a:	e8 d8 f5 ff ff       	call   113f7 <k_memset>
   11e1f:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   11e22:	83 ec 0c             	sub    $0xc,%esp
   11e25:	ff 75 0c             	pushl  0xc(%ebp)
   11e28:	e8 bf fc ff ff       	call   11aec <pte_index>
   11e2d:	83 c4 10             	add    $0x10,%esp
   11e30:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11e37:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e3a:	01 d0                	add    %edx,%eax
}
   11e3c:	c9                   	leave  
   11e3d:	c3                   	ret    

00011e3e <memory_create_map>:

// 创建映射
int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   11e3e:	55                   	push   %ebp
   11e3f:	89 e5                	mov    %esp,%ebp
   11e41:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   11e44:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11e4b:	eb 62                	jmp    11eaf <memory_create_map+0x71>
        // klog("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   11e4d:	83 ec 04             	sub    $0x4,%esp
   11e50:	6a 01                	push   $0x1
   11e52:	ff 75 0c             	pushl  0xc(%ebp)
   11e55:	ff 75 08             	pushl  0x8(%ebp)
   11e58:	e8 31 ff ff ff       	call   11d8e <find_pte>
   11e5d:	83 c4 10             	add    $0x10,%esp
   11e60:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   11e63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e67:	75 07                	jne    11e70 <memory_create_map+0x32>
            return -1;
   11e69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e6e:	eb 4c                	jmp    11ebc <memory_create_map+0x7e>
        }
        if (pte->present != 0) klog("error");
   11e70:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e73:	0f b6 00             	movzbl (%eax),%eax
   11e76:	83 e0 01             	and    $0x1,%eax
   11e79:	84 c0                	test   %al,%al
   11e7b:	74 10                	je     11e8d <memory_create_map+0x4f>
   11e7d:	83 ec 0c             	sub    $0xc,%esp
   11e80:	68 5b 30 01 00       	push   $0x1305b
   11e85:	e8 08 fb ff ff       	call   11992 <klog>
   11e8a:	83 c4 10             	add    $0x10,%esp

        // klog("pte addr: 0x%x", (uint32_t)pte);

        pte->v = paddr | perm | PTE_P;
   11e8d:	8b 45 10             	mov    0x10(%ebp),%eax
   11e90:	0b 45 18             	or     0x18(%ebp),%eax
   11e93:	83 c8 01             	or     $0x1,%eax
   11e96:	89 c2                	mov    %eax,%edx
   11e98:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e9b:	89 10                	mov    %edx,(%eax)
        vaddr += MEM_PAGE_SIZE;
   11e9d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   11ea4:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   11eab:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11eb2:	3b 45 14             	cmp    0x14(%ebp),%eax
   11eb5:	7c 96                	jl     11e4d <memory_create_map+0xf>
    }

    return 0;
   11eb7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11ebc:	c9                   	leave  
   11ebd:	c3                   	ret    

00011ebe <create_kernel_table>:


void create_kernel_table (void) {
   11ebe:	55                   	push   %ebp
   11ebf:	89 e5                	mov    %esp,%ebp
   11ec1:	83 ec 28             	sub    $0x28,%esp
        {s_text,                e_text,                         s_text,                 0    },      // 内核代码区
        {s_data,                (void *)(MEM_EBDA_START),       s_data,                 PTE_W},      // 内核数据区
        {(void*)MEM_EXT_START,  (void*)MEM_EXT_END,             (void*)MEM_EXT_START,   PTE_W},
    };

    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11ec4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11ecb:	eb 7d                	jmp    11f4a <create_kernel_table+0x8c>
        memory_map_t * map = kernel_map + i;
   11ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ed0:	c1 e0 04             	shl    $0x4,%eax
   11ed3:	05 20 40 01 00       	add    $0x14020,%eax
   11ed8:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   11edb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ede:	8b 00                	mov    (%eax),%eax
   11ee0:	68 00 10 00 00       	push   $0x1000
   11ee5:	50                   	push   %eax
   11ee6:	e8 85 fb ff ff       	call   11a70 <down2>
   11eeb:	83 c4 08             	add    $0x8,%esp
   11eee:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend   = up2  ((uint32_t)map->vend, MEM_PAGE_SIZE);
   11ef1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ef4:	8b 40 04             	mov    0x4(%eax),%eax
   11ef7:	68 00 10 00 00       	push   $0x1000
   11efc:	50                   	push   %eax
   11efd:	e8 7b fb ff ff       	call   11a7d <up2>
   11f02:	83 c4 08             	add    $0x8,%esp
   11f05:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   11f08:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11f0b:	2b 45 ec             	sub    -0x14(%ebp),%eax
   11f0e:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   11f14:	85 c0                	test   %eax,%eax
   11f16:	0f 48 c2             	cmovs  %edx,%eax
   11f19:	c1 f8 0c             	sar    $0xc,%eax
   11f1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(g_kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   11f1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f22:	8b 50 0c             	mov    0xc(%eax),%edx
   11f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f28:	8b 40 08             	mov    0x8(%eax),%eax
   11f2b:	89 c1                	mov    %eax,%ecx
   11f2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f30:	83 ec 0c             	sub    $0xc,%esp
   11f33:	52                   	push   %edx
   11f34:	ff 75 e4             	pushl  -0x1c(%ebp)
   11f37:	51                   	push   %ecx
   11f38:	50                   	push   %eax
   11f39:	68 00 70 01 00       	push   $0x17000
   11f3e:	e8 fb fe ff ff       	call   11e3e <memory_create_map>
   11f43:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11f46:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f4d:	83 f8 03             	cmp    $0x3,%eax
   11f50:	0f 86 77 ff ff ff    	jbe    11ecd <create_kernel_table+0xf>
    }
}
   11f56:	90                   	nop
   11f57:	c9                   	leave  
   11f58:	c3                   	ret    

00011f59 <memory_init>:


void memory_init (boot_info_t* boot_info) {
   11f59:	55                   	push   %ebp
   11f5a:	89 e5                	mov    %esp,%ebp
   11f5c:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;
    uint8_t * mem_free = (uint8_t*)&mem_free_start;
   11f5f:	c7 45 f4 c6 c1 01 00 	movl   $0x1c1c6,-0xc(%ebp)
    klog("memory init");
   11f66:	83 ec 0c             	sub    $0xc,%esp
   11f69:	68 61 30 01 00       	push   $0x13061
   11f6e:	e8 1f fa ff ff       	call   11992 <klog>
   11f73:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   11f76:	83 ec 0c             	sub    $0xc,%esp
   11f79:	ff 75 08             	pushl  0x8(%ebp)
   11f7c:	e8 70 fd ff ff       	call   11cf1 <show_mem_info>
   11f81:	83 c4 10             	add    $0x10,%esp

    
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   11f84:	83 ec 0c             	sub    $0xc,%esp
   11f87:	ff 75 08             	pushl  0x8(%ebp)
   11f8a:	e8 c8 fd ff ff       	call   11d57 <total_mem_size>
   11f8f:	83 c4 10             	add    $0x10,%esp
   11f92:	2d 00 00 10 00       	sub    $0x100000,%eax
   11f97:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   11f9a:	83 ec 08             	sub    $0x8,%esp
   11f9d:	68 00 10 00 00       	push   $0x1000
   11fa2:	ff 75 f0             	pushl  -0x10(%ebp)
   11fa5:	e8 c6 fa ff ff       	call   11a70 <down2>
   11faa:	83 c4 10             	add    $0x10,%esp
   11fad:	89 45 f0             	mov    %eax,-0x10(%ebp)

    klog("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   11fb0:	83 ec 04             	sub    $0x4,%esp
   11fb3:	ff 75 f0             	pushl  -0x10(%ebp)
   11fb6:	68 00 00 10 00       	push   $0x100000
   11fbb:	68 6d 30 01 00       	push   $0x1306d
   11fc0:	e8 cd f9 ff ff       	call   11992 <klog>
   11fc5:	83 c4 10             	add    $0x10,%esp
    addr_alloc_init(&g_paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   11fc8:	83 ec 0c             	sub    $0xc,%esp
   11fcb:	68 00 10 00 00       	push   $0x1000
   11fd0:	ff 75 f0             	pushl  -0x10(%ebp)
   11fd3:	68 00 00 10 00       	push   $0x100000
   11fd8:	ff 75 f4             	pushl  -0xc(%ebp)
   11fdb:	68 00 60 01 00       	push   $0x16000
   11fe0:	e8 3e fb ff ff       	call   11b23 <addr_alloc_init>
   11fe5:	83 c4 20             	add    $0x20,%esp

    mem_free += bitmap_byte_count(g_paddr_alloc.size / MEM_PAGE_SIZE);
   11fe8:	a1 20 60 01 00       	mov    0x16020,%eax
   11fed:	c1 e8 0c             	shr    $0xc,%eax
   11ff0:	83 ec 0c             	sub    $0xc,%esp
   11ff3:	50                   	push   %eax
   11ff4:	e8 fe ef ff ff       	call   10ff7 <bitmap_byte_count>
   11ff9:	83 c4 10             	add    $0x10,%esp
   11ffc:	01 45 f4             	add    %eax,-0xc(%ebp)
    if (mem_free < (uint8_t *)0x800000) {
   11fff:	81 7d f4 ff ff 7f 00 	cmpl   $0x7fffff,-0xc(%ebp)
   12006:	77 10                	ja     12018 <memory_init+0xbf>
        klog("simple test ok!");
   12008:	83 ec 0c             	sub    $0xc,%esp
   1200b:	68 8b 30 01 00       	push   $0x1308b
   12010:	e8 7d f9 ff ff       	call   11992 <klog>
   12015:	83 c4 10             	add    $0x10,%esp
    }

    k_memset(g_kernel_page_dir, 0, sizeof(g_kernel_page_dir));  // 清空内核表
   12018:	83 ec 04             	sub    $0x4,%esp
   1201b:	68 00 10 00 00       	push   $0x1000
   12020:	6a 00                	push   $0x0
   12022:	68 00 70 01 00       	push   $0x17000
   12027:	e8 cb f3 ff ff       	call   113f7 <k_memset>
   1202c:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   1202f:	e8 8a fe ff ff       	call   11ebe <create_kernel_table>

    mmu_set_page_dir((uint32_t)g_kernel_page_dir);            // 重新设置页表
   12034:	b8 00 70 01 00       	mov    $0x17000,%eax
   12039:	83 ec 0c             	sub    $0xc,%esp
   1203c:	50                   	push   %eax
   1203d:	e8 5e fa ff ff       	call   11aa0 <mmu_set_page_dir>
   12042:	83 c4 10             	add    $0x10,%esp
    
}
   12045:	90                   	nop
   12046:	c9                   	leave  
   12047:	c3                   	ret    

00012048 <memory_create_uvm>:


uint32_t memory_create_uvm() {
   12048:	55                   	push   %ebp
   12049:	89 e5                	mov    %esp,%ebp
   1204b:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&g_paddr_alloc, 1);
   1204e:	83 ec 08             	sub    $0x8,%esp
   12051:	6a 01                	push   $0x1
   12053:	68 00 60 01 00       	push   $0x16000
   12058:	e8 1e fb ff ff       	call   11b7b <addr_alloc_page>
   1205d:	83 c4 10             	add    $0x10,%esp
   12060:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == (pde_t*)0) {
   12063:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12067:	75 07                	jne    12070 <memory_create_uvm+0x28>
        return 0;  // error
   12069:	b8 00 00 00 00       	mov    $0x0,%eax
   1206e:	eb 5b                	jmp    120cb <memory_create_uvm+0x83>
    }

    k_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   12070:	83 ec 04             	sub    $0x4,%esp
   12073:	68 00 10 00 00       	push   $0x1000
   12078:	6a 00                	push   $0x0
   1207a:	ff 75 f0             	pushl  -0x10(%ebp)
   1207d:	e8 75 f3 ff ff       	call   113f7 <k_memset>
   12082:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index( MEMORY_TASK_BASE );
   12085:	83 ec 0c             	sub    $0xc,%esp
   12088:	68 00 00 00 80       	push   $0x80000000
   1208d:	e8 1f fa ff ff       	call   11ab1 <pde_index>
   12092:	83 c4 10             	add    $0x10,%esp
   12095:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    for(int i=0; i<user_pde_start; i++) {
   12098:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1209f:	eb 1f                	jmp    120c0 <memory_create_uvm+0x78>
        page_dir[i].v = g_kernel_page_dir[i].v;
   120a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120a4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   120ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120ae:	01 c2                	add    %eax,%edx
   120b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120b3:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   120ba:	89 02                	mov    %eax,(%edx)
    for(int i=0; i<user_pde_start; i++) {
   120bc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   120c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120c3:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   120c6:	77 d9                	ja     120a1 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   120c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   120cb:	c9                   	leave  
   120cc:	c3                   	ret    

000120cd <memory_alloc_for_page_dir>:


uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   120cd:	55                   	push   %ebp
   120ce:	89 e5                	mov    %esp,%ebp
   120d0:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   120d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   120d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   120d9:	68 00 10 00 00       	push   $0x1000
   120de:	ff 75 10             	pushl  0x10(%ebp)
   120e1:	e8 97 f9 ff ff       	call   11a7d <up2>
   120e6:	83 c4 08             	add    $0x8,%esp
   120e9:	c1 e8 0c             	shr    $0xc,%eax
   120ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   120ef:	68 00 10 00 00       	push   $0x1000
   120f4:	ff 75 0c             	pushl  0xc(%ebp)
   120f7:	e8 74 f9 ff ff       	call   11a70 <down2>
   120fc:	83 c4 08             	add    $0x8,%esp
   120ff:	89 45 0c             	mov    %eax,0xc(%ebp)

    for (int i = 0; i < page_count; i++) {
   12102:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   12109:	e9 95 00 00 00       	jmp    121a3 <memory_alloc_for_page_dir+0xd6>
        uint32_t paddr = addr_alloc_page(&g_paddr_alloc, 1);
   1210e:	83 ec 08             	sub    $0x8,%esp
   12111:	6a 01                	push   $0x1
   12113:	68 00 60 01 00       	push   $0x16000
   12118:	e8 5e fa ff ff       	call   11b7b <addr_alloc_page>
   1211d:	83 c4 10             	add    $0x10,%esp
   12120:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   12123:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12127:	75 17                	jne    12140 <memory_alloc_for_page_dir+0x73>
            klog("mem alloc failed. no memory");
   12129:	83 ec 0c             	sub    $0xc,%esp
   1212c:	68 9b 30 01 00       	push   $0x1309b
   12131:	e8 5c f8 ff ff       	call   11992 <klog>
   12136:	83 c4 10             	add    $0x10,%esp
            return 0;
   12139:	b8 00 00 00 00       	mov    $0x0,%eax
   1213e:	eb 74                	jmp    121b4 <memory_alloc_for_page_dir+0xe7>
        }

        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   12140:	8b 55 14             	mov    0x14(%ebp),%edx
   12143:	8b 45 08             	mov    0x8(%ebp),%eax
   12146:	83 ec 0c             	sub    $0xc,%esp
   12149:	52                   	push   %edx
   1214a:	6a 01                	push   $0x1
   1214c:	ff 75 e8             	pushl  -0x18(%ebp)
   1214f:	ff 75 f4             	pushl  -0xc(%ebp)
   12152:	50                   	push   %eax
   12153:	e8 e6 fc ff ff       	call   11e3e <memory_create_map>
   12158:	83 c4 20             	add    $0x20,%esp
   1215b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   1215e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12162:	79 34                	jns    12198 <memory_alloc_for_page_dir+0xcb>
            klog("create memory map failed. err = %d", err);
   12164:	83 ec 08             	sub    $0x8,%esp
   12167:	ff 75 e4             	pushl  -0x1c(%ebp)
   1216a:	68 b8 30 01 00       	push   $0x130b8
   1216f:	e8 1e f8 ff ff       	call   11992 <klog>
   12174:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&g_paddr_alloc, vaddr, i + 1);
   12177:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1217a:	83 c0 01             	add    $0x1,%eax
   1217d:	83 ec 04             	sub    $0x4,%esp
   12180:	50                   	push   %eax
   12181:	ff 75 0c             	pushl  0xc(%ebp)
   12184:	68 00 60 01 00       	push   $0x16000
   12189:	e8 54 fa ff ff       	call   11be2 <addr_free_page>
   1218e:	83 c4 10             	add    $0x10,%esp
            return -1;
   12191:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12196:	eb 1c                	jmp    121b4 <memory_alloc_for_page_dir+0xe7>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   12198:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   1219f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   121a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   121a9:	0f 8c 5f ff ff ff    	jl     1210e <memory_alloc_for_page_dir+0x41>
    }

    return 0;
   121af:	b8 00 00 00 00       	mov    $0x0,%eax
}
   121b4:	c9                   	leave  
   121b5:	c3                   	ret    

000121b6 <memory_alloc_page_for>:


int memory_alloc_page_for(uint32_t addr, uint32_t size, int perm) {
   121b6:	55                   	push   %ebp
   121b7:	89 e5                	mov    %esp,%ebp
   121b9:	83 ec 18             	sub    $0x18,%esp
    
    uint32_t cr3 = task_current()->tss.cr3;
   121bc:	e8 e4 07 00 00       	call   129a5 <task_current>
   121c1:	8b 40 68             	mov    0x68(%eax),%eax
   121c4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return memory_alloc_for_page_dir(cr3, addr, size, perm);
   121c7:	ff 75 10             	pushl  0x10(%ebp)
   121ca:	ff 75 0c             	pushl  0xc(%ebp)
   121cd:	ff 75 08             	pushl  0x8(%ebp)
   121d0:	ff 75 f4             	pushl  -0xc(%ebp)
   121d3:	e8 f5 fe ff ff       	call   120cd <memory_alloc_for_page_dir>
   121d8:	83 c4 10             	add    $0x10,%esp
}
   121db:	c9                   	leave  
   121dc:	c3                   	ret    

000121dd <memory_alloc_page>:


// 0x80000000 以下
uint32_t memory_alloc_page() {
   121dd:	55                   	push   %ebp
   121de:	89 e5                	mov    %esp,%ebp
   121e0:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page(&g_paddr_alloc, 1);
   121e3:	83 ec 08             	sub    $0x8,%esp
   121e6:	6a 01                	push   $0x1
   121e8:	68 00 60 01 00       	push   $0x16000
   121ed:	e8 89 f9 ff ff       	call   11b7b <addr_alloc_page>
   121f2:	83 c4 10             	add    $0x10,%esp
   121f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   121f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   121fb:	c9                   	leave  
   121fc:	c3                   	ret    

000121fd <curr_page_dir>:

static pde_t* curr_page_dir() {
   121fd:	55                   	push   %ebp
   121fe:	89 e5                	mov    %esp,%ebp
   12200:	83 ec 08             	sub    $0x8,%esp

    return (pde_t*)( task_current()->tss.cr3 );
   12203:	e8 9d 07 00 00       	call   129a5 <task_current>
   12208:	8b 40 68             	mov    0x68(%eax),%eax
}
   1220b:	c9                   	leave  
   1220c:	c3                   	ret    

0001220d <memory_free_page>:

void memory_free_page(uint32_t addr) {
   1220d:	55                   	push   %ebp
   1220e:	89 e5                	mov    %esp,%ebp
   12210:	83 ec 18             	sub    $0x18,%esp
    if( addr < MEMORY_TASK_BASE ) {
   12213:	8b 45 08             	mov    0x8(%ebp),%eax
   12216:	85 c0                	test   %eax,%eax
   12218:	78 17                	js     12231 <memory_free_page+0x24>
        addr_free_page(&g_paddr_alloc, addr, 1);
   1221a:	83 ec 04             	sub    $0x4,%esp
   1221d:	6a 01                	push   $0x1
   1221f:	ff 75 08             	pushl  0x8(%ebp)
   12222:	68 00 60 01 00       	push   $0x16000
   12227:	e8 b6 f9 ff ff       	call   11be2 <addr_free_page>
   1222c:	83 c4 10             	add    $0x10,%esp
        if(pte == 0 && !pte->present) klog("free err");

        addr_free_page(&g_paddr_alloc, pte_paddr(pte), 1);
        pte->v = 0;
    }
   1222f:	eb 66                	jmp    12297 <memory_free_page+0x8a>
        pte_t* pte = find_pte(curr_page_dir(), addr, 0);
   12231:	e8 c7 ff ff ff       	call   121fd <curr_page_dir>
   12236:	83 ec 04             	sub    $0x4,%esp
   12239:	6a 00                	push   $0x0
   1223b:	ff 75 08             	pushl  0x8(%ebp)
   1223e:	50                   	push   %eax
   1223f:	e8 4a fb ff ff       	call   11d8e <find_pte>
   12244:	83 c4 10             	add    $0x10,%esp
   12247:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(pte == 0 && !pte->present) klog("free err");
   1224a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1224e:	75 1d                	jne    1226d <memory_free_page+0x60>
   12250:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12253:	0f b6 00             	movzbl (%eax),%eax
   12256:	83 e0 01             	and    $0x1,%eax
   12259:	84 c0                	test   %al,%al
   1225b:	75 10                	jne    1226d <memory_free_page+0x60>
   1225d:	83 ec 0c             	sub    $0xc,%esp
   12260:	68 db 30 01 00       	push   $0x130db
   12265:	e8 28 f7 ff ff       	call   11992 <klog>
   1226a:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&g_paddr_alloc, pte_paddr(pte), 1);
   1226d:	83 ec 0c             	sub    $0xc,%esp
   12270:	ff 75 f4             	pushl  -0xc(%ebp)
   12273:	e8 84 f8 ff ff       	call   11afc <pte_paddr>
   12278:	83 c4 10             	add    $0x10,%esp
   1227b:	83 ec 04             	sub    $0x4,%esp
   1227e:	6a 01                	push   $0x1
   12280:	50                   	push   %eax
   12281:	68 00 60 01 00       	push   $0x16000
   12286:	e8 57 f9 ff ff       	call   11be2 <addr_free_page>
   1228b:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   1228e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12291:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   12297:	90                   	nop
   12298:	c9                   	leave  
   12299:	c3                   	ret    

0001229a <list_count>:
static inline int list_count (list_t* list) {
   1229a:	55                   	push   %ebp
   1229b:	89 e5                	mov    %esp,%ebp
    return list->count;
   1229d:	8b 45 08             	mov    0x8(%ebp),%eax
   122a0:	8b 40 08             	mov    0x8(%eax),%eax
}
   122a3:	5d                   	pop    %ebp
   122a4:	c3                   	ret    

000122a5 <mutex_init>:
#include <mux.h>
#include <irq.h>
#include <log.h>

void mutex_init (mutex_t * mutex) {
   122a5:	55                   	push   %ebp
   122a6:	89 e5                	mov    %esp,%ebp
   122a8:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   122ab:	8b 45 08             	mov    0x8(%ebp),%eax
   122ae:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   122b5:	8b 45 08             	mov    0x8(%ebp),%eax
   122b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   122be:	8b 45 08             	mov    0x8(%ebp),%eax
   122c1:	83 c0 08             	add    $0x8,%eax
   122c4:	83 ec 0c             	sub    $0xc,%esp
   122c7:	50                   	push   %eax
   122c8:	e8 06 f4 ff ff       	call   116d3 <list_init>
   122cd:	83 c4 10             	add    $0x10,%esp
}
   122d0:	90                   	nop
   122d1:	c9                   	leave  
   122d2:	c3                   	ret    

000122d3 <mutex_lock>:

void mutex_lock (mutex_t * mutex) {
   122d3:	55                   	push   %ebp
   122d4:	89 e5                	mov    %esp,%ebp
   122d6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   122d9:	e8 f0 ec ff ff       	call   10fce <irq_enter_proection>
   122de:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   122e1:	e8 bf 06 00 00       	call   129a5 <task_current>
   122e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   122e9:	8b 45 08             	mov    0x8(%ebp),%eax
   122ec:	8b 40 04             	mov    0x4(%eax),%eax
   122ef:	85 c0                	test   %eax,%eax
   122f1:	75 14                	jne    12307 <mutex_lock+0x34>
        mutex->locked_count = 1;
   122f3:	8b 45 08             	mov    0x8(%ebp),%eax
   122f6:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   122fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12300:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12303:	89 10                	mov    %edx,(%eax)
   12305:	eb 4f                	jmp    12356 <mutex_lock+0x83>
    } else if (mutex->owner == curr) {
   12307:	8b 45 08             	mov    0x8(%ebp),%eax
   1230a:	8b 00                	mov    (%eax),%eax
   1230c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1230f:	75 11                	jne    12322 <mutex_lock+0x4f>
        mutex->locked_count++;
   12311:	8b 45 08             	mov    0x8(%ebp),%eax
   12314:	8b 40 04             	mov    0x4(%eax),%eax
   12317:	8d 50 01             	lea    0x1(%eax),%edx
   1231a:	8b 45 08             	mov    0x8(%ebp),%eax
   1231d:	89 50 04             	mov    %edx,0x4(%eax)
   12320:	eb 34                	jmp    12356 <mutex_lock+0x83>
    } else {
        task_t * curr = task_current();
   12322:	e8 7e 06 00 00       	call   129a5 <task_current>
   12327:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   1232a:	83 ec 0c             	sub    $0xc,%esp
   1232d:	ff 75 ec             	pushl  -0x14(%ebp)
   12330:	e8 af 06 00 00       	call   129e4 <task_set_block>
   12335:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   12338:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1233b:	8d 50 44             	lea    0x44(%eax),%edx
   1233e:	8b 45 08             	mov    0x8(%ebp),%eax
   12341:	83 c0 08             	add    $0x8,%eax
   12344:	83 ec 08             	sub    $0x8,%esp
   12347:	52                   	push   %edx
   12348:	50                   	push   %eax
   12349:	e8 09 f4 ff ff       	call   11757 <list_insert_last>
   1234e:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12351:	e8 5d 07 00 00       	call   12ab3 <task_dispatch>
    }

    irq_leave_proection(irq_state);
   12356:	83 ec 0c             	sub    $0xc,%esp
   12359:	ff 75 f4             	pushl  -0xc(%ebp)
   1235c:	e8 85 ec ff ff       	call   10fe6 <irq_leave_proection>
   12361:	83 c4 10             	add    $0x10,%esp
}
   12364:	90                   	nop
   12365:	c9                   	leave  
   12366:	c3                   	ret    

00012367 <mutex_unlock>:

void mutex_unlock (mutex_t * mutex) {
   12367:	55                   	push   %ebp
   12368:	89 e5                	mov    %esp,%ebp
   1236a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   1236d:	e8 5c ec ff ff       	call   10fce <irq_enter_proection>
   12372:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * curr = task_current();
   12375:	e8 2b 06 00 00       	call   129a5 <task_current>
   1237a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   1237d:	8b 45 08             	mov    0x8(%ebp),%eax
   12380:	8b 00                	mov    (%eax),%eax
   12382:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12385:	0f 85 88 00 00 00    	jne    12413 <mutex_unlock+0xac>
        if (--mutex->locked_count == 0) {
   1238b:	8b 45 08             	mov    0x8(%ebp),%eax
   1238e:	8b 40 04             	mov    0x4(%eax),%eax
   12391:	8d 50 ff             	lea    -0x1(%eax),%edx
   12394:	8b 45 08             	mov    0x8(%ebp),%eax
   12397:	89 50 04             	mov    %edx,0x4(%eax)
   1239a:	8b 45 08             	mov    0x8(%ebp),%eax
   1239d:	8b 40 04             	mov    0x4(%eax),%eax
   123a0:	85 c0                	test   %eax,%eax
   123a2:	75 6f                	jne    12413 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   123a4:	8b 45 08             	mov    0x8(%ebp),%eax
   123a7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   123ad:	8b 45 08             	mov    0x8(%ebp),%eax
   123b0:	83 c0 08             	add    $0x8,%eax
   123b3:	83 ec 0c             	sub    $0xc,%esp
   123b6:	50                   	push   %eax
   123b7:	e8 de fe ff ff       	call   1229a <list_count>
   123bc:	83 c4 10             	add    $0x10,%esp
   123bf:	85 c0                	test   %eax,%eax
   123c1:	74 50                	je     12413 <mutex_unlock+0xac>
                list_node_t * task_node = list_delete_first(&mutex->wait_list);
   123c3:	8b 45 08             	mov    0x8(%ebp),%eax
   123c6:	83 c0 08             	add    $0x8,%eax
   123c9:	83 ec 0c             	sub    $0xc,%esp
   123cc:	50                   	push   %eax
   123cd:	e8 e9 f3 ff ff       	call   117bb <list_delete_first>
   123d2:	83 c4 10             	add    $0x10,%esp
   123d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   123d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   123dc:	74 08                	je     123e6 <mutex_unlock+0x7f>
   123de:	8b 45 ec             	mov    -0x14(%ebp),%eax
   123e1:	83 e8 44             	sub    $0x44,%eax
   123e4:	eb 05                	jmp    123eb <mutex_unlock+0x84>
   123e6:	b8 00 00 00 00       	mov    $0x0,%eax
   123eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   123ee:	83 ec 0c             	sub    $0xc,%esp
   123f1:	ff 75 e8             	pushl  -0x18(%ebp)
   123f4:	e8 b6 05 00 00       	call   129af <task_set_ready>
   123f9:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   123fc:	8b 45 08             	mov    0x8(%ebp),%eax
   123ff:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   12406:	8b 45 08             	mov    0x8(%ebp),%eax
   12409:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1240c:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   1240e:	e8 a0 06 00 00       	call   12ab3 <task_dispatch>
            }
        }
    }

    irq_leave_proection(irq_state);
   12413:	83 ec 0c             	sub    $0xc,%esp
   12416:	ff 75 f4             	pushl  -0xc(%ebp)
   12419:	e8 c8 eb ff ff       	call   10fe6 <irq_leave_proection>
   1241e:	83 c4 10             	add    $0x10,%esp
   12421:	90                   	nop
   12422:	c9                   	leave  
   12423:	c3                   	ret    

00012424 <list_count>:
static inline int list_count (list_t* list) {
   12424:	55                   	push   %ebp
   12425:	89 e5                	mov    %esp,%ebp
    return list->count;
   12427:	8b 45 08             	mov    0x8(%ebp),%eax
   1242a:	8b 40 08             	mov    0x8(%eax),%eax
}
   1242d:	5d                   	pop    %ebp
   1242e:	c3                   	ret    

0001242f <sem_init>:
#include <sem.h>
#include <irq.h>

void sem_init(sem_t* sem, int init_count) {
   1242f:	55                   	push   %ebp
   12430:	89 e5                	mov    %esp,%ebp
   12432:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12435:	8b 45 08             	mov    0x8(%ebp),%eax
   12438:	8b 55 0c             	mov    0xc(%ebp),%edx
   1243b:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1243d:	8b 45 08             	mov    0x8(%ebp),%eax
   12440:	83 c0 04             	add    $0x4,%eax
   12443:	83 ec 0c             	sub    $0xc,%esp
   12446:	50                   	push   %eax
   12447:	e8 87 f2 ff ff       	call   116d3 <list_init>
   1244c:	83 c4 10             	add    $0x10,%esp
}
   1244f:	90                   	nop
   12450:	c9                   	leave  
   12451:	c3                   	ret    

00012452 <sem_wait>:

void sem_wait(sem_t* sem) {
   12452:	55                   	push   %ebp
   12453:	89 e5                	mov    %esp,%ebp
   12455:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12458:	e8 71 eb ff ff       	call   10fce <irq_enter_proection>
   1245d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0) {
   12460:	8b 45 08             	mov    0x8(%ebp),%eax
   12463:	8b 00                	mov    (%eax),%eax
   12465:	85 c0                	test   %eax,%eax
   12467:	7e 0f                	jle    12478 <sem_wait+0x26>
        sem->count--;
   12469:	8b 45 08             	mov    0x8(%ebp),%eax
   1246c:	8b 00                	mov    (%eax),%eax
   1246e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12471:	8b 45 08             	mov    0x8(%ebp),%eax
   12474:	89 10                	mov    %edx,(%eax)
   12476:	eb 34                	jmp    124ac <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   12478:	e8 28 05 00 00       	call   129a5 <task_current>
   1247d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   12480:	83 ec 0c             	sub    $0xc,%esp
   12483:	ff 75 f0             	pushl  -0x10(%ebp)
   12486:	e8 59 05 00 00       	call   129e4 <task_set_block>
   1248b:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   1248e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12491:	8d 50 44             	lea    0x44(%eax),%edx
   12494:	8b 45 08             	mov    0x8(%ebp),%eax
   12497:	83 c0 04             	add    $0x4,%eax
   1249a:	83 ec 08             	sub    $0x8,%esp
   1249d:	52                   	push   %edx
   1249e:	50                   	push   %eax
   1249f:	e8 b3 f2 ff ff       	call   11757 <list_insert_last>
   124a4:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   124a7:	e8 07 06 00 00       	call   12ab3 <task_dispatch>
    }
    irq_leave_proection(state);
   124ac:	83 ec 0c             	sub    $0xc,%esp
   124af:	ff 75 f4             	pushl  -0xc(%ebp)
   124b2:	e8 2f eb ff ff       	call   10fe6 <irq_leave_proection>
   124b7:	83 c4 10             	add    $0x10,%esp
}
   124ba:	90                   	nop
   124bb:	c9                   	leave  
   124bc:	c3                   	ret    

000124bd <sem_notify>:

void sem_notify(sem_t* sem) {
   124bd:	55                   	push   %ebp
   124be:	89 e5                	mov    %esp,%ebp
   124c0:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();
   124c3:	e8 06 eb ff ff       	call   10fce <irq_enter_proection>
   124c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list)) {
   124cb:	8b 45 08             	mov    0x8(%ebp),%eax
   124ce:	83 c0 04             	add    $0x4,%eax
   124d1:	83 ec 0c             	sub    $0xc,%esp
   124d4:	50                   	push   %eax
   124d5:	e8 4a ff ff ff       	call   12424 <list_count>
   124da:	83 c4 10             	add    $0x10,%esp
   124dd:	85 c0                	test   %eax,%eax
   124df:	74 40                	je     12521 <sem_notify+0x64>
        list_node_t* node = list_delete_first(&sem->wait_list);
   124e1:	8b 45 08             	mov    0x8(%ebp),%eax
   124e4:	83 c0 04             	add    $0x4,%eax
   124e7:	83 ec 0c             	sub    $0xc,%esp
   124ea:	50                   	push   %eax
   124eb:	e8 cb f2 ff ff       	call   117bb <list_delete_first>
   124f0:	83 c4 10             	add    $0x10,%esp
   124f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_t* task = list_node_parent(node, task_t, wait_node);
   124f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   124fa:	74 08                	je     12504 <sem_notify+0x47>
   124fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   124ff:	83 e8 44             	sub    $0x44,%eax
   12502:	eb 05                	jmp    12509 <sem_notify+0x4c>
   12504:	b8 00 00 00 00       	mov    $0x0,%eax
   12509:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   1250c:	83 ec 0c             	sub    $0xc,%esp
   1250f:	ff 75 ec             	pushl  -0x14(%ebp)
   12512:	e8 98 04 00 00       	call   129af <task_set_ready>
   12517:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1251a:	e8 94 05 00 00       	call   12ab3 <task_dispatch>
   1251f:	eb 0d                	jmp    1252e <sem_notify+0x71>
    } else {
        sem->count++;
   12521:	8b 45 08             	mov    0x8(%ebp),%eax
   12524:	8b 00                	mov    (%eax),%eax
   12526:	8d 50 01             	lea    0x1(%eax),%edx
   12529:	8b 45 08             	mov    0x8(%ebp),%eax
   1252c:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_proection(state);
   1252e:	83 ec 0c             	sub    $0xc,%esp
   12531:	ff 75 f4             	pushl  -0xc(%ebp)
   12534:	e8 ad ea ff ff       	call   10fe6 <irq_leave_proection>
   12539:	83 c4 10             	add    $0x10,%esp

}
   1253c:	90                   	nop
   1253d:	c9                   	leave  
   1253e:	c3                   	ret    

0001253f <sem_count>:

int  sem_count(sem_t* sem) {
   1253f:	55                   	push   %ebp
   12540:	89 e5                	mov    %esp,%ebp
   12542:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12545:	e8 84 ea ff ff       	call   10fce <irq_enter_proection>
   1254a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1254d:	8b 45 08             	mov    0x8(%ebp),%eax
   12550:	8b 00                	mov    (%eax),%eax
   12552:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_proection(state);
   12555:	83 ec 0c             	sub    $0xc,%esp
   12558:	ff 75 f4             	pushl  -0xc(%ebp)
   1255b:	e8 86 ea ff ff       	call   10fe6 <irq_leave_proection>
   12560:	83 c4 10             	add    $0x10,%esp
    return count;
   12563:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12566:	c9                   	leave  
   12567:	c3                   	ret    

00012568 <hlt>:
static inline void hlt() {
   12568:	55                   	push   %ebp
   12569:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   1256b:	f4                   	hlt    
}
   1256c:	90                   	nop
   1256d:	5d                   	pop    %ebp
   1256e:	c3                   	ret    

0001256f <write_cr3>:
static inline void write_cr3(uint32_t v) {
   1256f:	55                   	push   %ebp
   12570:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   12572:	8b 45 08             	mov    0x8(%ebp),%eax
   12575:	0f 22 d8             	mov    %eax,%cr3
}
   12578:	90                   	nop
   12579:	5d                   	pop    %ebp
   1257a:	c3                   	ret    

0001257b <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   1257b:	55                   	push   %ebp
   1257c:	89 e5                	mov    %esp,%ebp
   1257e:	83 ec 10             	sub    $0x10,%esp
	volatile uint32_t addr[] = {offset, selector };
   12581:	8b 45 0c             	mov    0xc(%ebp),%eax
   12584:	8b 55 08             	mov    0x8(%ebp),%edx
   12587:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1258a:	89 55 fc             	mov    %edx,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   1258d:	8d 45 f8             	lea    -0x8(%ebp),%eax
   12590:	ff 28                	ljmp   *(%eax)
}
   12592:	90                   	nop
   12593:	c9                   	leave  
   12594:	c3                   	ret    

00012595 <write_tr>:
static inline void write_tr (uint16_t tss_selector) {
   12595:	55                   	push   %ebp
   12596:	89 e5                	mov    %esp,%ebp
   12598:	83 ec 04             	sub    $0x4,%esp
   1259b:	8b 45 08             	mov    0x8(%ebp),%eax
   1259e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   125a2:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   125a6:	0f 00 d8             	ltr    %ax
}
   125a9:	90                   	nop
   125aa:	c9                   	leave  
   125ab:	c3                   	ret    

000125ac <list_node_init>:
static inline void list_node_init(list_node_t* node) {
   125ac:	55                   	push   %ebp
   125ad:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t*)0;
   125af:	8b 45 08             	mov    0x8(%ebp),%eax
   125b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   125b9:	8b 45 08             	mov    0x8(%ebp),%eax
   125bc:	8b 50 04             	mov    0x4(%eax),%edx
   125bf:	8b 45 08             	mov    0x8(%ebp),%eax
   125c2:	89 10                	mov    %edx,(%eax)
}
   125c4:	90                   	nop
   125c5:	5d                   	pop    %ebp
   125c6:	c3                   	ret    

000125c7 <list_node_next>:
static inline list_node_t* list_node_next(list_node_t* node) {
   125c7:	55                   	push   %ebp
   125c8:	89 e5                	mov    %esp,%ebp
    return node->next;
   125ca:	8b 45 08             	mov    0x8(%ebp),%eax
   125cd:	8b 40 04             	mov    0x4(%eax),%eax
}
   125d0:	5d                   	pop    %ebp
   125d1:	c3                   	ret    

000125d2 <list_count>:
static inline int list_count (list_t* list) {
   125d2:	55                   	push   %ebp
   125d3:	89 e5                	mov    %esp,%ebp
    return list->count;
   125d5:	8b 45 08             	mov    0x8(%ebp),%eax
   125d8:	8b 40 08             	mov    0x8(%eax),%eax
}
   125db:	5d                   	pop    %ebp
   125dc:	c3                   	ret    

000125dd <list_first>:
static inline list_node_t* list_first (list_t* list) {
   125dd:	55                   	push   %ebp
   125de:	89 e5                	mov    %esp,%ebp
    return list->first;
   125e0:	8b 45 08             	mov    0x8(%ebp),%eax
   125e3:	8b 00                	mov    (%eax),%eax
}
   125e5:	5d                   	pop    %ebp
   125e6:	c3                   	ret    

000125e7 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   125e7:	55                   	push   %ebp
   125e8:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   125ea:	ff 75 08             	pushl  0x8(%ebp)
   125ed:	e8 7d ff ff ff       	call   1256f <write_cr3>
   125f2:	83 c4 04             	add    $0x4,%esp
}
   125f5:	90                   	nop
   125f6:	c9                   	leave  
   125f7:	c3                   	ret    

000125f8 <idle_task_func>:

static task_manager_t g_task_manager;
static uint32_t idle_task_stack[2048];


static void idle_task_func() { for(;;) hlt(); }
   125f8:	55                   	push   %ebp
   125f9:	89 e5                	mov    %esp,%ebp
   125fb:	e8 68 ff ff ff       	call   12568 <hlt>
   12600:	eb f9                	jmp    125fb <idle_task_func+0x3>

00012602 <task_switch_from_to>:

void simple_switch(uint32_t **from, uint32_t* to);

void task_switch_from_to(task_t* from, task_t* to) {
   12602:	55                   	push   %ebp
   12603:	89 e5                	mov    %esp,%ebp
    #ifndef USE_TSS
    simple_switch(&from->stack, to->stack);  // 使用直接跳转机制
    #else
    far_jump(to->tss_sel, 0);             // 使用 tss 机制
   12605:	8b 45 0c             	mov    0xc(%ebp),%eax
   12608:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
   1260e:	6a 00                	push   $0x0
   12610:	50                   	push   %eax
   12611:	e8 65 ff ff ff       	call   1257b <far_jump>
   12616:	83 c4 08             	add    $0x8,%esp
    #endif
}
   12619:	90                   	nop
   1261a:	c9                   	leave  
   1261b:	c3                   	ret    

0001261c <tss_init>:


#ifdef USE_TSS
static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   1261c:	55                   	push   %ebp
   1261d:	89 e5                	mov    %esp,%ebp
   1261f:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   12622:	e8 9e de ff ff       	call   104c5 <gdt_alloc_desc>
   12627:	89 45 ec             	mov    %eax,-0x14(%ebp)

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), 
   1262a:	8b 45 08             	mov    0x8(%ebp),%eax
   1262d:	83 c0 4c             	add    $0x4c,%eax
   12630:	68 89 00 00 00       	push   $0x89
   12635:	6a 68                	push   $0x68
   12637:	50                   	push   %eax
   12638:	ff 75 ec             	pushl  -0x14(%ebp)
   1263b:	e8 64 dd ff ff       	call   103a4 <segment_desc_set>
   12640:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS );

    k_memset(&task->tss, 0, sizeof(tss_t));
   12643:	8b 45 08             	mov    0x8(%ebp),%eax
   12646:	83 c0 4c             	add    $0x4c,%eax
   12649:	83 ec 04             	sub    $0x4,%esp
   1264c:	6a 68                	push   $0x68
   1264e:	6a 00                	push   $0x0
   12650:	50                   	push   %eax
   12651:	e8 a1 ed ff ff       	call   113f7 <k_memset>
   12656:	83 c4 10             	add    $0x10,%esp

    uint32_t kernel_stack = memory_alloc_page();
   12659:	e8 7f fb ff ff       	call   121dd <memory_alloc_page>
   1265e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   12661:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12665:	0f 84 da 00 00 00    	je     12745 <tss_init+0x129>
        goto tss_init_failed;
    }

    int code_sel, data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   1266b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1266e:	83 e0 01             	and    $0x1,%eax
   12671:	85 c0                	test   %eax,%eax
   12673:	74 10                	je     12685 <tss_init+0x69>
        code_sel = KERNEL_SELECTOR_CS;
   12675:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   1267c:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   12683:	eb 16                	jmp    1269b <tss_init+0x7f>
    } else {
        code_sel = g_task_manager.app_code_sel | SEG_RPL3;
   12685:	a1 98 81 01 00       	mov    0x18198,%eax
   1268a:	83 c8 03             	or     $0x3,%eax
   1268d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = g_task_manager.app_data_sel | SEG_RPL3;
   12690:	a1 9c 81 01 00       	mov    0x1819c,%eax
   12695:	83 c8 03             	or     $0x3,%eax
   12698:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip  = entry;
   1269b:	8b 45 08             	mov    0x8(%ebp),%eax
   1269e:	8b 55 10             	mov    0x10(%ebp),%edx
   126a1:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp  = esp;
   126a4:	8b 45 08             	mov    0x8(%ebp),%eax
   126a7:	8b 55 14             	mov    0x14(%ebp),%edx
   126aa:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   126b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   126b3:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   126b9:	8b 45 08             	mov    0x8(%ebp),%eax
   126bc:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.ss  = data_sel;
   126bf:	8b 55 f0             	mov    -0x10(%ebp),%edx
   126c2:	8b 45 08             	mov    0x8(%ebp),%eax
   126c5:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   126cb:	8b 45 08             	mov    0x8(%ebp),%eax
   126ce:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es  = data_sel;
   126d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   126d8:	8b 45 08             	mov    0x8(%ebp),%eax
   126db:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.ds  = data_sel;
   126e1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   126e4:	8b 45 08             	mov    0x8(%ebp),%eax
   126e7:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.fs  = data_sel;
   126ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
   126f0:	8b 45 08             	mov    0x8(%ebp),%eax
   126f3:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
    task->tss.gs  = data_sel;
   126f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   126fc:	8b 45 08             	mov    0x8(%ebp),%eax
   126ff:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    task->tss.cs  = code_sel;
   12705:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12708:	8b 45 08             	mov    0x8(%ebp),%eax
   1270b:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    
    task->tss.eflags = EFLAGES_DEFAULT | EFLAGS_IF;
   12711:	8b 45 08             	mov    0x8(%ebp),%eax
   12714:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    uint32_t page_dir = memory_create_uvm();
   1271b:	e8 28 f9 ff ff       	call   12048 <memory_create_uvm>
   12720:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(page_dir == 0) {
   12723:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   12727:	74 1f                	je     12748 <tss_init+0x12c>
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   12729:	8b 45 08             	mov    0x8(%ebp),%eax
   1272c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   1272f:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss_sel = tss_sel;
   12732:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12735:	8b 45 08             	mov    0x8(%ebp),%eax
   12738:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)

    return 0;
   1273e:	b8 00 00 00 00       	mov    $0x0,%eax
   12743:	eb 2b                	jmp    12770 <tss_init+0x154>
        goto tss_init_failed;
   12745:	90                   	nop
   12746:	eb 01                	jmp    12749 <tss_init+0x12d>
        goto tss_init_failed;
   12748:	90                   	nop

tss_init_failed:

    gdt_free_sel(tss_sel);
   12749:	83 ec 0c             	sub    $0xc,%esp
   1274c:	ff 75 ec             	pushl  -0x14(%ebp)
   1274f:	e8 e6 dd ff ff       	call   1053a <gdt_free_sel>
   12754:	83 c4 10             	add    $0x10,%esp
    if(kernel_stack) {
   12757:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1275b:	74 0e                	je     1276b <tss_init+0x14f>
        memory_free_page(kernel_stack);
   1275d:	83 ec 0c             	sub    $0xc,%esp
   12760:	ff 75 e8             	pushl  -0x18(%ebp)
   12763:	e8 a5 fa ff ff       	call   1220d <memory_free_page>
   12768:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   1276b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12770:	c9                   	leave  
   12771:	c3                   	ret    

00012772 <task_init>:
#endif

// 初始化一个任务
int task_init(task_t* task, const char* name, int flag, 
    uint32_t entry, uint32_t esp) {
   12772:	55                   	push   %ebp
   12773:	89 e5                	mov    %esp,%ebp
   12775:	83 ec 18             	sub    $0x18,%esp
        *(--pesp) = 0;
        *(--pesp) = 0;
        task->stack = pesp;
    }
    #else
    if (tss_init(task, flag, entry, esp) == -1) return -1;  // 使用 tss 机制
   12778:	ff 75 18             	pushl  0x18(%ebp)
   1277b:	ff 75 14             	pushl  0x14(%ebp)
   1277e:	ff 75 10             	pushl  0x10(%ebp)
   12781:	ff 75 08             	pushl  0x8(%ebp)
   12784:	e8 93 fe ff ff       	call   1261c <tss_init>
   12789:	83 c4 10             	add    $0x10,%esp
   1278c:	83 f8 ff             	cmp    $0xffffffff,%eax
   1278f:	75 0a                	jne    1279b <task_init+0x29>
   12791:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12796:	e9 b5 00 00 00       	jmp    12850 <task_init+0xde>
    #endif

    k_strncpy(task->name, name, TASK_NAME_SIZE);        // 进程名
   1279b:	8b 45 08             	mov    0x8(%ebp),%eax
   1279e:	83 c0 08             	add    $0x8,%eax
   127a1:	83 ec 04             	sub    $0x4,%esp
   127a4:	6a 20                	push   $0x20
   127a6:	ff 75 0c             	pushl  0xc(%ebp)
   127a9:	50                   	push   %eax
   127aa:	e8 d4 ea ff ff       	call   11283 <k_strncpy>
   127af:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;                         // 状态  created
   127b2:	8b 45 08             	mov    0x8(%ebp),%eax
   127b5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;         //  最大时间片
   127bc:	8b 45 08             	mov    0x8(%ebp),%eax
   127bf:	c7 40 2c 0a 00 00 00 	movl   $0xa,0x2c(%eax)
    task->slice_ticks = TASK_TIME_SLICE_DEFAULT;        //  当前时间片
   127c6:	8b 45 08             	mov    0x8(%ebp),%eax
   127c9:	c7 40 28 0a 00 00 00 	movl   $0xa,0x28(%eax)
    task->sleep_ticks = 0;
   127d0:	8b 45 08             	mov    0x8(%ebp),%eax
   127d3:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node); 
   127da:	8b 45 08             	mov    0x8(%ebp),%eax
   127dd:	83 c0 3c             	add    $0x3c,%eax
   127e0:	83 ec 0c             	sub    $0xc,%esp
   127e3:	50                   	push   %eax
   127e4:	e8 c3 fd ff ff       	call   125ac <list_node_init>
   127e9:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   127ec:	8b 45 08             	mov    0x8(%ebp),%eax
   127ef:	83 c0 34             	add    $0x34,%eax
   127f2:	83 ec 0c             	sub    $0xc,%esp
   127f5:	50                   	push   %eax
   127f6:	e8 b1 fd ff ff       	call   125ac <list_node_init>
   127fb:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   127fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12801:	83 c0 44             	add    $0x44,%eax
   12804:	83 ec 0c             	sub    $0xc,%esp
   12807:	50                   	push   %eax
   12808:	e8 9f fd ff ff       	call   125ac <list_node_init>
   1280d:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12810:	e8 b9 e7 ff ff       	call   10fce <irq_enter_proection>
   12815:	89 45 f4             	mov    %eax,-0xc(%ebp)
        task_set_ready(task);                                        // 加入到就绪队列
   12818:	83 ec 0c             	sub    $0xc,%esp
   1281b:	ff 75 08             	pushl  0x8(%ebp)
   1281e:	e8 8c 01 00 00       	call   129af <task_set_ready>
   12823:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&g_task_manager.task_list, &task->all_node);  // 加入到所有队列
   12826:	8b 45 08             	mov    0x8(%ebp),%eax
   12829:	83 c0 3c             	add    $0x3c,%eax
   1282c:	83 ec 08             	sub    $0x8,%esp
   1282f:	50                   	push   %eax
   12830:	68 1c 80 01 00       	push   $0x1801c
   12835:	e8 1d ef ff ff       	call   11757 <list_insert_last>
   1283a:	83 c4 10             	add    $0x10,%esp
    irq_leave_proection(state);  //--leave protection
   1283d:	83 ec 0c             	sub    $0xc,%esp
   12840:	ff 75 f4             	pushl  -0xc(%ebp)
   12843:	e8 9e e7 ff ff       	call   10fe6 <irq_leave_proection>
   12848:	83 c4 10             	add    $0x10,%esp

    return 0;
   1284b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12850:	c9                   	leave  
   12851:	c3                   	ret    

00012852 <task_manager_init>:

// 初始化任务管理
void task_manager_init() {
   12852:	55                   	push   %ebp
   12853:	89 e5                	mov    %esp,%ebp
   12855:	83 ec 18             	sub    $0x18,%esp
    int seld = gdt_alloc_desc();
   12858:	e8 68 dc ff ff       	call   104c5 <gdt_alloc_desc>
   1285d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(seld, 0x00000000, 0xffffffff, 
   12860:	68 f2 40 00 00       	push   $0x40f2
   12865:	6a ff                	push   $0xffffffff
   12867:	6a 00                	push   $0x0
   12869:	ff 75 f4             	pushl  -0xc(%ebp)
   1286c:	e8 33 db ff ff       	call   103a4 <segment_desc_set>
   12871:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D
    );
    g_task_manager.app_data_sel = seld;
   12874:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12877:	a3 9c 81 01 00       	mov    %eax,0x1819c

    int selc = gdt_alloc_desc();
   1287c:	e8 44 dc ff ff       	call   104c5 <gdt_alloc_desc>
   12881:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(selc, 0x00000000, 0xffffffff, 
   12884:	68 fa 40 00 00       	push   $0x40fa
   12889:	6a ff                	push   $0xffffffff
   1288b:	6a 00                	push   $0x0
   1288d:	ff 75 f0             	pushl  -0x10(%ebp)
   12890:	e8 0f db ff ff       	call   103a4 <segment_desc_set>
   12895:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_CODE 
        | SEG_TYPE_RW | SEG_D
    );
    g_task_manager.app_code_sel = selc;
   12898:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1289b:	a3 98 81 01 00       	mov    %eax,0x18198

    list_init(&g_task_manager.ready_list);
   128a0:	83 ec 0c             	sub    $0xc,%esp
   128a3:	68 04 80 01 00       	push   $0x18004
   128a8:	e8 26 ee ff ff       	call   116d3 <list_init>
   128ad:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.task_list);
   128b0:	83 ec 0c             	sub    $0xc,%esp
   128b3:	68 1c 80 01 00       	push   $0x1801c
   128b8:	e8 16 ee ff ff       	call   116d3 <list_init>
   128bd:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.sleep_list);
   128c0:	83 ec 0c             	sub    $0xc,%esp
   128c3:	68 10 80 01 00       	push   $0x18010
   128c8:	e8 06 ee ff ff       	call   116d3 <list_init>
   128cd:	83 c4 10             	add    $0x10,%esp
    g_task_manager.curr_task = get_first_task();
   128d0:	e8 c6 00 00 00       	call   1299b <get_first_task>
   128d5:	a3 00 80 01 00       	mov    %eax,0x18000
    
    task_init(&g_task_manager.idle_task,  
   128da:	ba a0 a1 01 00       	mov    $0x1a1a0,%edx
   128df:	b8 f8 25 01 00       	mov    $0x125f8,%eax
   128e4:	83 ec 0c             	sub    $0xc,%esp
   128e7:	52                   	push   %edx
   128e8:	50                   	push   %eax
   128e9:	6a 01                	push   $0x1
   128eb:	68 e4 30 01 00       	push   $0x130e4
   128f0:	68 e0 80 01 00       	push   $0x180e0
   128f5:	e8 78 fe ff ff       	call   12772 <task_init>
   128fa:	83 c4 20             	add    $0x20,%esp
            "idle  task", 
            TASK_FLAGS_SYSTEM,
            (uint32_t)idle_task_func, 
            (uint32_t)&idle_task_stack[2048]
    );
}
   128fd:	90                   	nop
   128fe:	c9                   	leave  
   128ff:	c3                   	ret    

00012900 <first_task_init>:


void first_task_init() {
   12900:	55                   	push   %ebp
   12901:	89 e5                	mov    %esp,%ebp
   12903:	83 ec 18             	sub    $0x18,%esp

    void first_task_entry();
    extern uint8_t s_first_task[], e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   12906:	ba c6 c1 01 00       	mov    $0x1c1c6,%edx
   1290b:	b8 a0 c1 01 00       	mov    $0x1c1a0,%eax
   12910:	29 c2                	sub    %eax,%edx
   12912:	89 d0                	mov    %edx,%eax
   12914:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   12917:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)

    uint32_t first_start = (uint32_t)first_task_entry;
   1291e:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    // first_start + alloc_size 栈顶
    task_init(&g_task_manager.first_task, 
   12925:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12928:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1292b:	01 d0                	add    %edx,%eax
   1292d:	83 ec 0c             	sub    $0xc,%esp
   12930:	50                   	push   %eax
   12931:	ff 75 ec             	pushl  -0x14(%ebp)
   12934:	6a 00                	push   $0x0
   12936:	68 ef 30 01 00       	push   $0x130ef
   1293b:	68 28 80 01 00       	push   $0x18028
   12940:	e8 2d fe ff ff       	call   12772 <task_init>
   12945:	83 c4 20             	add    $0x20,%esp
            "first task", 0, 
            first_start, 
            first_start + alloc_size );
    
    mmu_set_page_dir((&g_task_manager)->first_task.tss.cr3);
   12948:	a1 90 80 01 00       	mov    0x18090,%eax
   1294d:	83 ec 0c             	sub    $0xc,%esp
   12950:	50                   	push   %eax
   12951:	e8 91 fc ff ff       	call   125e7 <mmu_set_page_dir>
   12956:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   12959:	83 ec 04             	sub    $0x4,%esp
   1295c:	6a 07                	push   $0x7
   1295e:	ff 75 f0             	pushl  -0x10(%ebp)
   12961:	ff 75 ec             	pushl  -0x14(%ebp)
   12964:	e8 4d f8 ff ff       	call   121b6 <memory_alloc_page_for>
   12969:	83 c4 10             	add    $0x10,%esp
    k_memcpy( (void*)first_start, (void *)&s_first_task, copy_size );
   1296c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1296f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12972:	83 ec 04             	sub    $0x4,%esp
   12975:	52                   	push   %edx
   12976:	68 a0 c1 01 00       	push   $0x1c1a0
   1297b:	50                   	push   %eax
   1297c:	e8 27 ea ff ff       	call   113a8 <k_memcpy>
   12981:	83 c4 10             	add    $0x10,%esp


    write_tr((&g_task_manager)->first_task.tss_sel);
   12984:	a1 dc 80 01 00       	mov    0x180dc,%eax
   12989:	0f b7 c0             	movzwl %ax,%eax
   1298c:	83 ec 0c             	sub    $0xc,%esp
   1298f:	50                   	push   %eax
   12990:	e8 00 fc ff ff       	call   12595 <write_tr>
   12995:	83 c4 10             	add    $0x10,%esp
}
   12998:	90                   	nop
   12999:	c9                   	leave  
   1299a:	c3                   	ret    

0001299b <get_first_task>:





task_t* get_first_task() {
   1299b:	55                   	push   %ebp
   1299c:	89 e5                	mov    %esp,%ebp
    return &g_task_manager.first_task;
   1299e:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   129a3:	5d                   	pop    %ebp
   129a4:	c3                   	ret    

000129a5 <task_current>:

task_t* task_current() {
   129a5:	55                   	push   %ebp
   129a6:	89 e5                	mov    %esp,%ebp
    return g_task_manager.curr_task;
   129a8:	a1 00 80 01 00       	mov    0x18000,%eax
}
   129ad:	5d                   	pop    %ebp
   129ae:	c3                   	ret    

000129af <task_set_ready>:


// 将任务添加到就绪队列 尾部 设置状态为 ready
void task_set_ready(task_t* task) {
   129af:	55                   	push   %ebp
   129b0:	89 e5                	mov    %esp,%ebp
   129b2:	83 ec 08             	sub    $0x8,%esp
    if (task == &g_task_manager.idle_task) {  // 空进程不应该加入就绪队列
   129b5:	81 7d 08 e0 80 01 00 	cmpl   $0x180e0,0x8(%ebp)
   129bc:	74 23                	je     129e1 <task_set_ready+0x32>
        return;
    }

    list_insert_last(&g_task_manager.ready_list, &task->run_node);
   129be:	8b 45 08             	mov    0x8(%ebp),%eax
   129c1:	83 c0 34             	add    $0x34,%eax
   129c4:	83 ec 08             	sub    $0x8,%esp
   129c7:	50                   	push   %eax
   129c8:	68 04 80 01 00       	push   $0x18004
   129cd:	e8 85 ed ff ff       	call   11757 <list_insert_last>
   129d2:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   129d5:	8b 45 08             	mov    0x8(%ebp),%eax
   129d8:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
   129df:	eb 01                	jmp    129e2 <task_set_ready+0x33>
        return;
   129e1:	90                   	nop
}
   129e2:	c9                   	leave  
   129e3:	c3                   	ret    

000129e4 <task_set_block>:

// 将 特定 任务从就绪队列删除
void task_set_block(task_t* task) {
   129e4:	55                   	push   %ebp
   129e5:	89 e5                	mov    %esp,%ebp
   129e7:	83 ec 08             	sub    $0x8,%esp
    if (task == &g_task_manager.idle_task) {  // 空进程不应该删除
   129ea:	81 7d 08 e0 80 01 00 	cmpl   $0x180e0,0x8(%ebp)
   129f1:	74 19                	je     12a0c <task_set_block+0x28>
        return;
    }
    list_delete(&g_task_manager.ready_list, &task->run_node);
   129f3:	8b 45 08             	mov    0x8(%ebp),%eax
   129f6:	83 c0 34             	add    $0x34,%eax
   129f9:	83 ec 08             	sub    $0x8,%esp
   129fc:	50                   	push   %eax
   129fd:	68 04 80 01 00       	push   $0x18004
   12a02:	e8 2d ee ff ff       	call   11834 <list_delete>
   12a07:	83 c4 10             	add    $0x10,%esp
   12a0a:	eb 01                	jmp    12a0d <task_set_block+0x29>
        return;
   12a0c:	90                   	nop
    // list_delete_first(&g_task_manager.ready_list);
}
   12a0d:	c9                   	leave  
   12a0e:	c3                   	ret    

00012a0f <sys_sched_yield>:

// 主动放弃cpu执行
int  sys_sched_yield() {
   12a0f:	55                   	push   %ebp
   12a10:	89 e5                	mov    %esp,%ebp
   12a12:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12a15:	e8 b4 e5 ff ff       	call   10fce <irq_enter_proection>
   12a1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if(list_count(&g_task_manager.ready_list) > 1) {
   12a1d:	83 ec 0c             	sub    $0xc,%esp
   12a20:	68 04 80 01 00       	push   $0x18004
   12a25:	e8 a8 fb ff ff       	call   125d2 <list_count>
   12a2a:	83 c4 10             	add    $0x10,%esp
   12a2d:	83 f8 01             	cmp    $0x1,%eax
   12a30:	7e 29                	jle    12a5b <sys_sched_yield+0x4c>
        task_t* curr = task_current();
   12a32:	e8 6e ff ff ff       	call   129a5 <task_current>
   12a37:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   12a3a:	83 ec 0c             	sub    $0xc,%esp
   12a3d:	ff 75 f0             	pushl  -0x10(%ebp)
   12a40:	e8 9f ff ff ff       	call   129e4 <task_set_block>
   12a45:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   12a48:	83 ec 0c             	sub    $0xc,%esp
   12a4b:	ff 75 f0             	pushl  -0x10(%ebp)
   12a4e:	e8 5c ff ff ff       	call   129af <task_set_ready>
   12a53:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12a56:	e8 58 00 00 00       	call   12ab3 <task_dispatch>
    }
    
    irq_leave_proection(state);  //--leave protection
   12a5b:	83 ec 0c             	sub    $0xc,%esp
   12a5e:	ff 75 f4             	pushl  -0xc(%ebp)
   12a61:	e8 80 e5 ff ff       	call   10fe6 <irq_leave_proection>
   12a66:	83 c4 10             	add    $0x10,%esp

    return 0;
   12a69:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12a6e:	c9                   	leave  
   12a6f:	c3                   	ret    

00012a70 <task_next_run>:

// 从就绪队列中找到一第一个任务
task_t * task_next_run() {
   12a70:	55                   	push   %ebp
   12a71:	89 e5                	mov    %esp,%ebp
   12a73:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&g_task_manager.ready_list) == 0) {
   12a76:	68 04 80 01 00       	push   $0x18004
   12a7b:	e8 52 fb ff ff       	call   125d2 <list_count>
   12a80:	83 c4 04             	add    $0x4,%esp
   12a83:	85 c0                	test   %eax,%eax
   12a85:	75 07                	jne    12a8e <task_next_run+0x1e>
        return &g_task_manager.idle_task;
   12a87:	b8 e0 80 01 00       	mov    $0x180e0,%eax
   12a8c:	eb 23                	jmp    12ab1 <task_next_run+0x41>
    }

    list_node_t * task_node = list_first(&g_task_manager.ready_list);
   12a8e:	68 04 80 01 00       	push   $0x18004
   12a93:	e8 45 fb ff ff       	call   125dd <list_first>
   12a98:	83 c4 04             	add    $0x4,%esp
   12a9b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   12a9e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   12aa2:	74 08                	je     12aac <task_next_run+0x3c>
   12aa4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12aa7:	83 e8 34             	sub    $0x34,%eax
   12aaa:	eb 05                	jmp    12ab1 <task_next_run+0x41>
   12aac:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12ab1:	c9                   	leave  
   12ab2:	c3                   	ret    

00012ab3 <task_dispatch>:

// 分配一个任务并从当前任务切换过去
void task_dispatch() {
   12ab3:	55                   	push   %ebp
   12ab4:	89 e5                	mov    %esp,%ebp
   12ab6:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12ab9:	e8 10 e5 ff ff       	call   10fce <irq_enter_proection>
   12abe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * to = task_next_run();
   12ac1:	e8 aa ff ff ff       	call   12a70 <task_next_run>
   12ac6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != g_task_manager.curr_task) {
   12ac9:	a1 00 80 01 00       	mov    0x18000,%eax
   12ace:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12ad1:	74 2b                	je     12afe <task_dispatch+0x4b>
        task_t * from = task_current();
   12ad3:	e8 cd fe ff ff       	call   129a5 <task_current>
   12ad8:	89 45 ec             	mov    %eax,-0x14(%ebp)

        g_task_manager.curr_task = to;   // 设置将要切换的任务为“当前任务”
   12adb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12ade:	a3 00 80 01 00       	mov    %eax,0x18000
        to->state = TASK_RUNNING;      // 设置 task running
   12ae3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12ae6:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

        task_switch_from_to(from, to);
   12aed:	83 ec 08             	sub    $0x8,%esp
   12af0:	ff 75 f0             	pushl  -0x10(%ebp)
   12af3:	ff 75 ec             	pushl  -0x14(%ebp)
   12af6:	e8 07 fb ff ff       	call   12602 <task_switch_from_to>
   12afb:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_proection(state);  //--leave protection
   12afe:	83 ec 0c             	sub    $0xc,%esp
   12b01:	ff 75 f4             	pushl  -0xc(%ebp)
   12b04:	e8 dd e4 ff ff       	call   10fe6 <irq_leave_proection>
   12b09:	83 c4 10             	add    $0x10,%esp
   
}
   12b0c:	90                   	nop
   12b0d:	c9                   	leave  
   12b0e:	c3                   	ret    

00012b0f <task_time_tick>:

// 检查当前任务的时间片是否用完，若用完强制切换到下一任务
void task_time_tick() {
   12b0f:	55                   	push   %ebp
   12b10:	89 e5                	mov    %esp,%ebp
   12b12:	83 ec 28             	sub    $0x28,%esp
    task_t* curr = task_current();
   12b15:	e8 8b fe ff ff       	call   129a5 <task_current>
   12b1a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int slice = --curr->slice_ticks;
   12b1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b20:	8b 40 28             	mov    0x28(%eax),%eax
   12b23:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b29:	89 50 28             	mov    %edx,0x28(%eax)
   12b2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b2f:	8b 40 28             	mov    0x28(%eax),%eax
   12b32:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if( slice == 0 && &g_task_manager.ready_list.count > 0) {
   12b35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12b39:	75 2d                	jne    12b68 <task_time_tick+0x59>
        curr->slice_ticks = curr->time_ticks;
   12b3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b3e:	8b 50 2c             	mov    0x2c(%eax),%edx
   12b41:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12b44:	89 50 28             	mov    %edx,0x28(%eax)

        task_set_block(curr);
   12b47:	83 ec 0c             	sub    $0xc,%esp
   12b4a:	ff 75 f0             	pushl  -0x10(%ebp)
   12b4d:	e8 92 fe ff ff       	call   129e4 <task_set_block>
   12b52:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   12b55:	83 ec 0c             	sub    $0xc,%esp
   12b58:	ff 75 f0             	pushl  -0x10(%ebp)
   12b5b:	e8 4f fe ff ff       	call   129af <task_set_ready>
   12b60:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12b63:	e8 4b ff ff ff       	call   12ab3 <task_dispatch>
    }

    list_node_t* sleep_lists_curr = list_first(&g_task_manager.sleep_list);
   12b68:	83 ec 0c             	sub    $0xc,%esp
   12b6b:	68 10 80 01 00       	push   $0x18010
   12b70:	e8 68 fa ff ff       	call   125dd <list_first>
   12b75:	83 c4 10             	add    $0x10,%esp
   12b78:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   12b7b:	eb 62                	jmp    12bdf <task_time_tick+0xd0>
        list_node_t * next = list_node_next(sleep_lists_curr);
   12b7d:	83 ec 0c             	sub    $0xc,%esp
   12b80:	ff 75 f4             	pushl  -0xc(%ebp)
   12b83:	e8 3f fa ff ff       	call   125c7 <list_node_next>
   12b88:	83 c4 10             	add    $0x10,%esp
   12b8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_t* task = list_node_parent(sleep_lists_curr, task_t, run_node);
   12b8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12b92:	74 08                	je     12b9c <task_time_tick+0x8d>
   12b94:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12b97:	83 e8 34             	sub    $0x34,%eax
   12b9a:	eb 05                	jmp    12ba1 <task_time_tick+0x92>
   12b9c:	b8 00 00 00 00       	mov    $0x0,%eax
   12ba1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        
        if(--task->sleep_ticks == 0) {
   12ba4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12ba7:	8b 40 30             	mov    0x30(%eax),%eax
   12baa:	8d 50 ff             	lea    -0x1(%eax),%edx
   12bad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12bb0:	89 50 30             	mov    %edx,0x30(%eax)
   12bb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12bb6:	8b 40 30             	mov    0x30(%eax),%eax
   12bb9:	85 c0                	test   %eax,%eax
   12bbb:	75 1c                	jne    12bd9 <task_time_tick+0xca>
            task_set_wakeup(task);
   12bbd:	83 ec 0c             	sub    $0xc,%esp
   12bc0:	ff 75 e4             	pushl  -0x1c(%ebp)
   12bc3:	e8 b8 00 00 00       	call   12c80 <task_set_wakeup>
   12bc8:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   12bcb:	83 ec 0c             	sub    $0xc,%esp
   12bce:	ff 75 e4             	pushl  -0x1c(%ebp)
   12bd1:	e8 d9 fd ff ff       	call   129af <task_set_ready>
   12bd6:	83 c4 10             	add    $0x10,%esp
        }
        sleep_lists_curr = next;
   12bd9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12bdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   12bdf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12be3:	75 98                	jne    12b7d <task_time_tick+0x6e>
    }

    task_dispatch();
   12be5:	e8 c9 fe ff ff       	call   12ab3 <task_dispatch>
}
   12bea:	90                   	nop
   12beb:	c9                   	leave  
   12bec:	c3                   	ret    

00012bed <sys_sleep>:



void sys_sleep(uint32_t ms) {
   12bed:	55                   	push   %ebp
   12bee:	89 e5                	mov    %esp,%ebp
   12bf0:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12bf3:	e8 d6 e3 ff ff       	call   10fce <irq_enter_proection>
   12bf8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12bfb:	e8 a5 fd ff ff       	call   129a5 <task_current>
   12c00:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_block(curr);
   12c03:	83 ec 0c             	sub    $0xc,%esp
   12c06:	ff 75 f0             	pushl  -0x10(%ebp)
   12c09:	e8 d6 fd ff ff       	call   129e4 <task_set_block>
   12c0e:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(curr, ms / OS_TICK_MS);
   12c11:	8b 45 08             	mov    0x8(%ebp),%eax
   12c14:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   12c19:	f7 e2                	mul    %edx
   12c1b:	89 d0                	mov    %edx,%eax
   12c1d:	c1 e8 03             	shr    $0x3,%eax
   12c20:	83 ec 08             	sub    $0x8,%esp
   12c23:	50                   	push   %eax
   12c24:	ff 75 f0             	pushl  -0x10(%ebp)
   12c27:	e8 19 00 00 00       	call   12c45 <task_set_sleep>
   12c2c:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   12c2f:	e8 7f fe ff ff       	call   12ab3 <task_dispatch>

    irq_leave_proection(state);
   12c34:	83 ec 0c             	sub    $0xc,%esp
   12c37:	ff 75 f4             	pushl  -0xc(%ebp)
   12c3a:	e8 a7 e3 ff ff       	call   10fe6 <irq_leave_proection>
   12c3f:	83 c4 10             	add    $0x10,%esp
}
   12c42:	90                   	nop
   12c43:	c9                   	leave  
   12c44:	c3                   	ret    

00012c45 <task_set_sleep>:

void task_set_sleep(task_t* task, uint32_t ticks) {
   12c45:	55                   	push   %ebp
   12c46:	89 e5                	mov    %esp,%ebp
   12c48:	83 ec 08             	sub    $0x8,%esp
    if(ticks <= 0) return;
   12c4b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12c4f:	74 2c                	je     12c7d <task_set_sleep+0x38>
    task->sleep_ticks = ticks;
   12c51:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c54:	8b 45 08             	mov    0x8(%ebp),%eax
   12c57:	89 50 30             	mov    %edx,0x30(%eax)
    task->state = TASK_SLEEP;
   12c5a:	8b 45 08             	mov    0x8(%ebp),%eax
   12c5d:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
    list_insert_last(&g_task_manager.sleep_list, 
   12c64:	8b 45 08             	mov    0x8(%ebp),%eax
   12c67:	83 c0 34             	add    $0x34,%eax
   12c6a:	83 ec 08             	sub    $0x8,%esp
   12c6d:	50                   	push   %eax
   12c6e:	68 10 80 01 00       	push   $0x18010
   12c73:	e8 df ea ff ff       	call   11757 <list_insert_last>
   12c78:	83 c4 10             	add    $0x10,%esp
   12c7b:	eb 01                	jmp    12c7e <task_set_sleep+0x39>
    if(ticks <= 0) return;
   12c7d:	90                   	nop
        &task->run_node);
}
   12c7e:	c9                   	leave  
   12c7f:	c3                   	ret    

00012c80 <task_set_wakeup>:

void task_set_wakeup(task_t* task) {
   12c80:	55                   	push   %ebp
   12c81:	89 e5                	mov    %esp,%ebp
   12c83:	83 ec 08             	sub    $0x8,%esp
    list_delete(&g_task_manager.sleep_list, 
   12c86:	8b 45 08             	mov    0x8(%ebp),%eax
   12c89:	83 c0 34             	add    $0x34,%eax
   12c8c:	83 ec 08             	sub    $0x8,%esp
   12c8f:	50                   	push   %eax
   12c90:	68 10 80 01 00       	push   $0x18010
   12c95:	e8 9a eb ff ff       	call   11834 <list_delete>
   12c9a:	83 c4 10             	add    $0x10,%esp
        &task->run_node);
   12c9d:	90                   	nop
   12c9e:	c9                   	leave  
   12c9f:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
    .text
    .global first_task_entry
    .extern first_task_main
first_task_entry:
	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
#include <task.h>
#include <log.h>

int first_task_main() {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 10             	sub    $0x10,%esp
    int xx = 10;
80000016:	c7 45 fc 0a 00 00 00 	movl   $0xa,-0x4(%ebp)
    for(;;) {
        // klog("first task");
        int y = 1000;
8000001d:	c7 45 f8 e8 03 00 00 	movl   $0x3e8,-0x8(%ebp)
    for(;;) {
80000024:	eb f7                	jmp    8000001d <first_task_main+0xd>
