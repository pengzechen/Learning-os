
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002b85 memsz 0x00002b85 flags r-x
    LOAD off    0x00004000 vaddr 0x00013000 paddr 0x00013000 align 2**12
         filesz 0x00000050 memsz 0x0000c270 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027eb  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000399  000127ec  000127ec  000037ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000050  00013000  00013000  00004000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000b270  00014000  00014000  00004050  2**12
                  ALLOC
  4 .debug_line   0000119d  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000039ca  00000000  00000000  000051ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010b6  00000000  00000000  00008bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001a0  00000000  00000000  00009c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000e3f  00000000  00000000  00009e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000ac4f  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00001150  00000000  00000000  0000ac60  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000127ec l    d  .rodata	00000000 .rodata
00013000 l    d  .data	00000000 .data
00014000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 mtime.c
000102bb l     F .text	0000001f outb
00014000 l     O .bss	00000004 sys_tick
00010302 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 gdt.c
0001037b l     F .text	00000028 lgdt
00014020 l     O .bss	00000800 gdt_table2
00000000 l    df *ABS*	00000000 init.c
000104db l     F .text	0000000b list_count
000104e6 l     F .text	0000000a list_first
000104f0 l     F .text	0000000b list_last
00000000 l    df *ABS*	00000000 irq.c
0001076e l     F .text	00000007 hlt
00010775 l     F .text	00000007 cli
0001077c l     F .text	00000007 sti
00010783 l     F .text	00000028 lidt
000107ab l     F .text	0000001d inb
000107c8 l     F .text	0000001f outb
000107e7 l     F .text	00000010 read_eflags
000107f7 l     F .text	0000000b write_eflags
00014820 l     O .bss	00000400 idt_table
00010802 l     F .text	00000030 default_handler
00010ad9 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00013000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 list.c
00011536 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0001172f l     F .text	0000001d inb
0001174c l     F .text	0000001f outb
00014c20 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mem.c
000118e6 l     F .text	0000000d down2
000118f3 l     F .text	00000017 up2
0001190a l     F .text	0000000c write_cr3
00011916 l     F .text	00000011 mmu_set_page_dir
00011927 l     F .text	00000014 pde_index
0001193b l     F .text	00000027 pde_paddr
00011962 l     F .text	00000010 pte_index
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00011972 l     F .text	00000058 addr_alloc_init
000119ca l     F .text	00000067 addr_alloc_page
00011a31 l     F .text	00000062 addr_free_page
00011b40 l     F .text	00000066 show_mem_info
00011ba6 l     F .text	00000037 total_mem_size
00013020 l     O .data	00000030 kernel_map.2268
00000000 l    df *ABS*	00000000 mutex.c
00011e97 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00012021 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 task.c
00012165 l     F .text	0000001b list_node_init
00012180 l     F .text	0000000b list_node_next
0001218b l     F .text	0000000b list_count
00012196 l     F .text	0000000a list_first
000121a0 l     F .text	00000007 hlt
000121a7 l     F .text	0000000a idle_task_func
00017000 l     O .bss	00000198 task_manager
000171a0 l     O .bss	00002000 task1_stack
000191a0 l     O .bss	00002000 idle_task_stack
0001b1a0 l     O .bss	00002000 task3_stack
0001d1a0 l     O .bss	000000b8 task3
00010ed6 g     F .text	0000003a bitmap_get_bit
000124f0 g     F .text	0000000a task_current
00010e44 g     F .text	00000018 irq_enter_proection
000116aa g     F .text	00000085 list_delete
00010e0e g     F .text	0000000b irq_enable_global
000115cd g     F .text	00000064 list_insert_last
000124fa g     F .text	00000035 task_set_ready
00010f10 g     F .text	0000001b bitmap_is_set
000108be g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
0001244a g     F .text	00000039 task3_func
00010a46 g     F .text	0000001c handle_virtual_exception
0001176b g     F .text	0000009d log_init
0001f260 g     O .bss	00000010 sem_test
0001072e g     F .text	00000040 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00013000 g       .data	00000000 s_data
00011169 g     F .text	0000007a k_strncmp
00010966 g     F .text	0000001c handle_segment_not_present
00010cf1 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
0001086a g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
00011c8d g     F .text	00000080 memory_create_map
000121cf g     F .text	000000cc tss_init
000101b3 g       .text	00000000 exception_handler_general_protection
0001213c g     F .text	00000029 sem_count
00010f2b g     F .text	000000d4 bitmap_set_bit
000109ba g     F .text	0000001c handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010e19 g     F .text	0000002b pic_send_eoi
00010000 g       .text	00000000 s_text
00012401 g     F .text	00000049 task1_func
0001204f g     F .text	0000006b sem_wait
000110b2 g     F .text	00000047 k_strcpy
000110f9 g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010429 g     F .text	0000006d gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
0001d260 g     O .bss	00002000 stack
00012738 g     F .text	00000058 sys_sleep
0001056b g     F .text	00000163 list_test
000108f6 g     F .text	0000001c handle_invalid_opcode
000111e3 g     F .text	0000003b k_strlen
000112ae g     F .text	00000064 k_memcmp
000100e2 g       .text	00000000 exception_handler_bound_range
000120ba g     F .text	00000082 sem_notify
000124e6 g     F .text	0000000a get_first_task
0001015c g       .text	00000000 exception_handler_invalid_tss
000113e9 g     F .text	0000014d k_vsprint
0001156e g     F .text	0000005f list_insert_first
000127cb g     F .text	00000020 task_set_wakeup
00010047 g       .text	00000000 exception_handler_divider
00011a93 g     F .text	000000ad some_test
000109d6 g     F .text	0000001c handle_fpu_error
00010e03 g     F .text	0000000b irq_disable_global
0001255a g     F .text	00000061 sys_sched_yield
0001f270 g       .bss	00000000 mem_free_start
00010832 g     F .text	0000001c handle_unknown
000104fb g     F .text	0000002b kernel_init
0001126d g     F .text	00000041 k_memset
0001202c g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010526 g     F .text	00000045 show_list
00011ed0 g     F .text	00000094 mutex_lock
00010229 g       .text	00000000 exception_handler_machine_check
00000000 g       *ABS*	00000000 kernel_base
00012790 g     F .text	0000003b task_set_sleep
00010aa9 g     F .text	00000030 irq_install
00010a2a g     F .text	0000001c handle_smd_exception
00011ea2 g     F .text	0000002e mutex_init
00012483 g     F .text	00000063 task1_func_init
00010d7c g     F .text	00000087 irq_disable
0001099e g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
00010e5c g     F .text	00000011 irq_leave_proection
00010e6d g     F .text	00000016 bitmap_byte_count
000109f2 g     F .text	0000001c handle_alignment_check
000125fe g     F .text	0000005c task_dispatch
00010a0e g     F .text	0000001c handle_machine_check
000125bb g     F .text	00000043 task_next_run
00011d0d g     F .text	0000009b create_kernel_table
00011549 g     F .text	00000025 list_init
00010982 g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
0001252f g     F .text	0000002b task_set_block
000108da g     F .text	0000001c handle_bound_range
000101ed g       .text	00000000 exception_handler_fpu_error
000121b1 g     F .text	0000001e task_switch_from_to
00010b6c g     F .text	00000185 irq_init
00011312 g     F .text	000000d7 k_itoa
00011f64 g     F .text	000000bd mutex_unlock
0001092e g     F .text	0000001c handle_double_fault
000102da g     F .text	00000028 handle_time
000103a3 g     F .text	00000086 segment_desc_set
000106ce g     F .text	00000060 offset_test
00012b85 g       .rodata	00000000 e_text
000108a2 g     F .text	0000001c handle_breakpoint
00010e83 g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010fff g     F .text	000000b3 bitmap_alloc_nbits
000123ac g     F .text	00000055 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
0001265a g     F .text	000000de task_time_tick
00011da8 g     F .text	000000ef memory_init
00010912 g     F .text	0000001c handle_device_unavailable
0001084e g     F .text	0000001c handle_divider
0001121e g     F .text	0000004f k_memcpy
0001229b g     F .text	00000111 task_init
00010496 g     F .text	00000045 gdt_alloc_desc
00011631 g     F .text	00000079 list_delete_first
00010a62 g     F .text	00000047 gate_desc_set
00011808 g     F .text	000000de klog
00010886 g     F .text	0000001c handle_NMI
0001094a g     F .text	0000001c handle_invalid_tss
00011bdd g     F .text	000000b0 find_pte
00010363 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 f2 04 00 00       	call   104fb <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc 60 f2 01 00       	mov    $0x1f260,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 06 07 00 00       	jmp    1072e <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 f9 07 00 00       	call   10832 <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 f6 07 00 00       	call   1084e <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 f3 07 00 00       	call   1086a <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 f0 07 00 00       	call   10886 <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 ed 07 00 00       	call   108a2 <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 ea 07 00 00       	call   108be <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 e7 07 00 00       	call   108da <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 e4 07 00 00       	call   108f6 <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 e1 07 00 00       	call   10912 <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 e0 07 00 00       	call   1092e <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 df 07 00 00       	call   1094a <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 de 07 00 00       	call   10966 <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 dd 07 00 00       	call   10982 <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 dc 07 00 00       	call   1099e <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 db 07 00 00       	call   109ba <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 d8 07 00 00       	call   109d6 <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 d7 07 00 00       	call   109f2 <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 d4 07 00 00       	call   10a0e <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 d1 07 00 00       	call   10a2a <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 ce 07 00 00       	call   10a46 <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 43 00 00 00       	call   102da <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch

simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp
    
    sti
   102b9:	fb                   	sti    
   102ba:	c3                   	ret    

000102bb <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   102bb:	55                   	push   %ebp
   102bc:	89 e5                	mov    %esp,%ebp
   102be:	83 ec 08             	sub    $0x8,%esp
   102c1:	8b 55 08             	mov    0x8(%ebp),%edx
   102c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   102cb:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   102ce:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   102d2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   102d6:	ee                   	out    %al,(%dx)
}
   102d7:	90                   	nop
   102d8:	c9                   	leave  
   102d9:	c3                   	ret    

000102da <handle_time>:


static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   102da:	55                   	push   %ebp
   102db:	89 e5                	mov    %esp,%ebp
   102dd:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   102e0:	a1 00 40 01 00       	mov    0x14000,%eax
   102e5:	83 c0 01             	add    $0x1,%eax
   102e8:	a3 00 40 01 00       	mov    %eax,0x14000
    pic_send_eoi(IRQ0_TIMER);
   102ed:	83 ec 0c             	sub    $0xc,%esp
   102f0:	6a 20                	push   $0x20
   102f2:	e8 22 0b 00 00       	call   10e19 <pic_send_eoi>
   102f7:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   102fa:	e8 5b 23 00 00       	call   1265a <task_time_tick>
} 
   102ff:	90                   	nop
   10300:	c9                   	leave  
   10301:	c3                   	ret    

00010302 <pit_init>:

static void pit_init (void) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
   10305:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10308:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1030f:	6a 36                	push   $0x36
   10311:	6a 43                	push   $0x43
   10313:	e8 a3 ff ff ff       	call   102bb <outb>
   10318:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   1031b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1031e:	0f b6 c0             	movzbl %al,%eax
   10321:	50                   	push   %eax
   10322:	6a 40                	push   $0x40
   10324:	e8 92 ff ff ff       	call   102bb <outb>
   10329:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   1032c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1032f:	c1 e8 08             	shr    $0x8,%eax
   10332:	0f b6 c0             	movzbl %al,%eax
   10335:	50                   	push   %eax
   10336:	6a 40                	push   $0x40
   10338:	e8 7e ff ff ff       	call   102bb <outb>
   1033d:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   10340:	b8 86 02 01 00       	mov    $0x10286,%eax
   10345:	83 ec 08             	sub    $0x8,%esp
   10348:	50                   	push   %eax
   10349:	6a 20                	push   $0x20
   1034b:	e8 59 07 00 00       	call   10aa9 <irq_install>
   10350:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10353:	83 ec 0c             	sub    $0xc,%esp
   10356:	6a 20                	push   $0x20
   10358:	e8 94 09 00 00       	call   10cf1 <irq_enable>
   1035d:	83 c4 10             	add    $0x10,%esp
}
   10360:	90                   	nop
   10361:	c9                   	leave  
   10362:	c3                   	ret    

00010363 <time_init>:

void time_init() {
   10363:	55                   	push   %ebp
   10364:	89 e5                	mov    %esp,%ebp
   10366:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10369:	c7 05 00 40 01 00 00 	movl   $0x0,0x14000
   10370:	00 00 00 

    pit_init();
   10373:	e8 8a ff ff ff       	call   10302 <pit_init>
   10378:	90                   	nop
   10379:	c9                   	leave  
   1037a:	c3                   	ret    

0001037b <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1037b:	55                   	push   %ebp
   1037c:	89 e5                	mov    %esp,%ebp
   1037e:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   10381:	8b 45 08             	mov    0x8(%ebp),%eax
   10384:	c1 e8 10             	shr    $0x10,%eax
   10387:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   10392:	8b 45 0c             	mov    0xc(%ebp),%eax
   10395:	83 e8 01             	sub    $0x1,%eax
   10398:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1039c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   103a0:	90                   	nop
   103a1:	c9                   	leave  
   103a2:	c3                   	ret    

000103a3 <segment_desc_set>:



static segment_desc_t gdt_table2[GDT_TABLE_SIZE];

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   103a3:	55                   	push   %ebp
   103a4:	89 e5                	mov    %esp,%ebp
   103a6:	83 ec 14             	sub    $0x14,%esp
   103a9:	8b 45 14             	mov    0x14(%ebp),%eax
   103ac:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table2 + (selector >> 3);
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	c1 f8 03             	sar    $0x3,%eax
   103b6:	c1 e0 03             	shl    $0x3,%eax
   103b9:	05 20 40 01 00       	add    $0x14020,%eax
   103be:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   103c1:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   103c8:	76 0f                	jbe    103d9 <segment_desc_set+0x36>
		attr |= 0x8000;
   103ca:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   103d0:	8b 45 10             	mov    0x10(%ebp),%eax
   103d3:	c1 e8 0c             	shr    $0xc,%eax
   103d6:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   103d9:	8b 45 10             	mov    0x10(%ebp),%eax
   103dc:	89 c2                	mov    %eax,%edx
   103de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103e1:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   103e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103e7:	89 c2                	mov    %eax,%edx
   103e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103ec:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   103f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   103f3:	c1 e8 10             	shr    $0x10,%eax
   103f6:	89 c2                	mov    %eax,%edx
   103f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103fb:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   103fe:	8b 45 10             	mov    0x10(%ebp),%eax
   10401:	c1 e8 10             	shr    $0x10,%eax
   10404:	c1 e0 08             	shl    $0x8,%eax
   10407:	66 25 00 0f          	and    $0xf00,%ax
   1040b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1040f:	89 c2                	mov    %eax,%edx
   10411:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10414:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10418:	8b 45 0c             	mov    0xc(%ebp),%eax
   1041b:	c1 e8 18             	shr    $0x18,%eax
   1041e:	89 c2                	mov    %eax,%edx
   10420:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10423:	88 50 07             	mov    %dl,0x7(%eax)
}
   10426:	90                   	nop
   10427:	c9                   	leave  
   10428:	c3                   	ret    

00010429 <gdt_init>:

void gdt_init() {
   10429:	55                   	push   %ebp
   1042a:	89 e5                	mov    %esp,%ebp
   1042c:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1042f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10436:	eb 19                	jmp    10451 <gdt_init+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10438:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1043b:	c1 e0 03             	shl    $0x3,%eax
   1043e:	6a 00                	push   $0x0
   10440:	6a 00                	push   $0x0
   10442:	6a 00                	push   $0x0
   10444:	50                   	push   %eax
   10445:	e8 59 ff ff ff       	call   103a3 <segment_desc_set>
   1044a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10451:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10458:	7e de                	jle    10438 <gdt_init+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1045a:	68 92 c0 00 00       	push   $0xc092
   1045f:	6a ff                	push   $0xffffffff
   10461:	6a 00                	push   $0x0
   10463:	6a 10                	push   $0x10
   10465:	e8 39 ff ff ff       	call   103a3 <segment_desc_set>
   1046a:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1046d:	68 9a c0 00 00       	push   $0xc09a
   10472:	6a ff                	push   $0xffffffff
   10474:	6a 00                	push   $0x0
   10476:	6a 08                	push   $0x8
   10478:	e8 26 ff ff ff       	call   103a3 <segment_desc_set>
   1047d:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)gdt_table2, sizeof(gdt_table2));
   10480:	b8 20 40 01 00       	mov    $0x14020,%eax
   10485:	68 00 08 00 00       	push   $0x800
   1048a:	50                   	push   %eax
   1048b:	e8 eb fe ff ff       	call   1037b <lgdt>
   10490:	83 c4 08             	add    $0x8,%esp

}
   10493:	90                   	nop
   10494:	c9                   	leave  
   10495:	c3                   	ret    

00010496 <gdt_alloc_desc>:

int  gdt_alloc_desc() {
   10496:	55                   	push   %ebp
   10497:	89 e5                	mov    %esp,%ebp
   10499:	83 ec 10             	sub    $0x10,%esp
    int i = 1;
   1049c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    for(; i < GDT_TABLE_SIZE; i++) {
   104a3:	eb 26                	jmp    104cb <gdt_alloc_desc+0x35>
        segment_desc_t* desc = gdt_table2 + i;
   104a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104a8:	c1 e0 03             	shl    $0x3,%eax
   104ab:	05 20 40 01 00       	add    $0x14020,%eax
   104b0:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   104b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   104b6:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104ba:	66 85 c0             	test   %ax,%ax
   104bd:	75 08                	jne    104c7 <gdt_alloc_desc+0x31>
            return ( i * sizeof(segment_desc_t) );
   104bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104c2:	c1 e0 03             	shl    $0x3,%eax
   104c5:	eb 12                	jmp    104d9 <gdt_alloc_desc+0x43>
    for(; i < GDT_TABLE_SIZE; i++) {
   104c7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104cb:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   104d2:	7e d1                	jle    104a5 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   104d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   104d9:	c9                   	leave  
   104da:	c3                   	ret    

000104db <list_count>:

static inline int list_is_empty (list_t* list) {
    return list->count == 0;
}

static inline int list_count (list_t* list) {
   104db:	55                   	push   %ebp
   104dc:	89 e5                	mov    %esp,%ebp
    return list->count;
   104de:	8b 45 08             	mov    0x8(%ebp),%eax
   104e1:	8b 40 08             	mov    0x8(%eax),%eax
}
   104e4:	5d                   	pop    %ebp
   104e5:	c3                   	ret    

000104e6 <list_first>:

static inline list_node_t* list_first (list_t* list) {
   104e6:	55                   	push   %ebp
   104e7:	89 e5                	mov    %esp,%ebp
    return list->first;
   104e9:	8b 45 08             	mov    0x8(%ebp),%eax
   104ec:	8b 00                	mov    (%eax),%eax
}
   104ee:	5d                   	pop    %ebp
   104ef:	c3                   	ret    

000104f0 <list_last>:

static inline list_node_t* list_last (list_t* list) {
   104f0:	55                   	push   %ebp
   104f1:	89 e5                	mov    %esp,%ebp
    return list->last;
   104f3:	8b 45 08             	mov    0x8(%ebp),%eax
   104f6:	8b 40 04             	mov    0x4(%eax),%eax
}
   104f9:	5d                   	pop    %ebp
   104fa:	c3                   	ret    

000104fb <kernel_init>:
#include <log.h>
#include <task.h>
#include <list.h>
#include <mem.h>

void kernel_init (boot_info_t * boot_info) {
   104fb:	55                   	push   %ebp
   104fc:	89 e5                	mov    %esp,%ebp
   104fe:	83 ec 08             	sub    $0x8,%esp
    log_init();
   10501:	e8 65 12 00 00       	call   1176b <log_init>
    gdt_init();
   10506:	e8 1e ff ff ff       	call   10429 <gdt_init>
    memory_init(boot_info);
   1050b:	83 ec 0c             	sub    $0xc,%esp
   1050e:	ff 75 08             	pushl  0x8(%ebp)
   10511:	e8 92 18 00 00       	call   11da8 <memory_init>
   10516:	83 c4 10             	add    $0x10,%esp
    irq_init();
   10519:	e8 4e 06 00 00       	call   10b6c <irq_init>
    time_init();
   1051e:	e8 40 fe ff ff       	call   10363 <time_init>
}
   10523:	90                   	nop
   10524:	c9                   	leave  
   10525:	c3                   	ret    

00010526 <show_list>:


void show_list(list_t list) {
   10526:	55                   	push   %ebp
   10527:	89 e5                	mov    %esp,%ebp
   10529:	56                   	push   %esi
   1052a:	53                   	push   %ebx
    klog("list: first=0x%x, last=0x%x, count=%d",
   1052b:	8d 45 08             	lea    0x8(%ebp),%eax
   1052e:	50                   	push   %eax
   1052f:	e8 a7 ff ff ff       	call   104db <list_count>
   10534:	83 c4 04             	add    $0x4,%esp
   10537:	89 c6                	mov    %eax,%esi
   10539:	8d 45 08             	lea    0x8(%ebp),%eax
   1053c:	50                   	push   %eax
   1053d:	e8 ae ff ff ff       	call   104f0 <list_last>
   10542:	83 c4 04             	add    $0x4,%esp
   10545:	89 c3                	mov    %eax,%ebx
   10547:	8d 45 08             	lea    0x8(%ebp),%eax
   1054a:	50                   	push   %eax
   1054b:	e8 96 ff ff ff       	call   104e6 <list_first>
   10550:	83 c4 04             	add    $0x4,%esp
   10553:	56                   	push   %esi
   10554:	53                   	push   %ebx
   10555:	50                   	push   %eax
   10556:	68 ec 27 01 00       	push   $0x127ec
   1055b:	e8 a8 12 00 00       	call   11808 <klog>
   10560:	83 c4 10             	add    $0x10,%esp
         list_first(&list), list_last(&list), list_count(&list) );
}
   10563:	90                   	nop
   10564:	8d 65 f8             	lea    -0x8(%ebp),%esp
   10567:	5b                   	pop    %ebx
   10568:	5e                   	pop    %esi
   10569:	5d                   	pop    %ebp
   1056a:	c3                   	ret    

0001056b <list_test>:

void list_test() {
   1056b:	55                   	push   %ebp
   1056c:	89 e5                	mov    %esp,%ebp
   1056e:	83 ec 58             	sub    $0x58,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   10571:	83 ec 0c             	sub    $0xc,%esp
   10574:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10577:	50                   	push   %eax
   10578:	e8 cc 0f 00 00       	call   11549 <list_init>
   1057d:	83 c4 10             	add    $0x10,%esp

    show_list(list);
   10580:	83 ec 04             	sub    $0x4,%esp
   10583:	ff 75 dc             	pushl  -0x24(%ebp)
   10586:	ff 75 d8             	pushl  -0x28(%ebp)
   10589:	ff 75 d4             	pushl  -0x2c(%ebp)
   1058c:	e8 95 ff ff ff       	call   10526 <show_list>
   10591:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10594:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1059b:	eb 3f                	jmp    105dc <list_test+0x71>
        list_node_t * node = nodes + i;
   1059d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105a0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   105a7:	8d 45 ac             	lea    -0x54(%ebp),%eax
   105aa:	01 d0                	add    %edx,%eax
   105ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   105af:	8b 45 e0             	mov    -0x20(%ebp),%eax
   105b2:	83 ec 04             	sub    $0x4,%esp
   105b5:	50                   	push   %eax
   105b6:	ff 75 f4             	pushl  -0xc(%ebp)
   105b9:	68 14 28 01 00       	push   $0x12814
   105be:	e8 45 12 00 00       	call   11808 <klog>
   105c3:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   105c6:	83 ec 08             	sub    $0x8,%esp
   105c9:	ff 75 e0             	pushl  -0x20(%ebp)
   105cc:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105cf:	50                   	push   %eax
   105d0:	e8 99 0f 00 00       	call   1156e <list_insert_first>
   105d5:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   105d8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105dc:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   105e0:	7e bb                	jle    1059d <list_test+0x32>
    }
    show_list(list);
   105e2:	83 ec 04             	sub    $0x4,%esp
   105e5:	ff 75 dc             	pushl  -0x24(%ebp)
   105e8:	ff 75 d8             	pushl  -0x28(%ebp)
   105eb:	ff 75 d4             	pushl  -0x2c(%ebp)
   105ee:	e8 33 ff ff ff       	call   10526 <show_list>
   105f3:	83 c4 10             	add    $0x10,%esp

    list_init(&list);
   105f6:	83 ec 0c             	sub    $0xc,%esp
   105f9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105fc:	50                   	push   %eax
   105fd:	e8 47 0f 00 00       	call   11549 <list_init>
   10602:	83 c4 10             	add    $0x10,%esp
    show_list(list);
   10605:	83 ec 04             	sub    $0x4,%esp
   10608:	ff 75 dc             	pushl  -0x24(%ebp)
   1060b:	ff 75 d8             	pushl  -0x28(%ebp)
   1060e:	ff 75 d4             	pushl  -0x2c(%ebp)
   10611:	e8 10 ff ff ff       	call   10526 <show_list>
   10616:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10619:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10620:	eb 3f                	jmp    10661 <list_test+0xf6>
        list_node_t * node = nodes + i;
   10622:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10625:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1062c:	8d 45 ac             	lea    -0x54(%ebp),%eax
   1062f:	01 d0                	add    %edx,%eax
   10631:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   10634:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10637:	83 ec 04             	sub    $0x4,%esp
   1063a:	50                   	push   %eax
   1063b:	ff 75 f0             	pushl  -0x10(%ebp)
   1063e:	68 14 28 01 00       	push   $0x12814
   10643:	e8 c0 11 00 00       	call   11808 <klog>
   10648:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   1064b:	83 ec 08             	sub    $0x8,%esp
   1064e:	ff 75 e4             	pushl  -0x1c(%ebp)
   10651:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10654:	50                   	push   %eax
   10655:	e8 73 0f 00 00       	call   115cd <list_insert_last>
   1065a:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   1065d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10661:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   10665:	7e bb                	jle    10622 <list_test+0xb7>
    }
    show_list(list);
   10667:	83 ec 04             	sub    $0x4,%esp
   1066a:	ff 75 dc             	pushl  -0x24(%ebp)
   1066d:	ff 75 d8             	pushl  -0x28(%ebp)
   10670:	ff 75 d4             	pushl  -0x2c(%ebp)
   10673:	e8 ae fe ff ff       	call   10526 <show_list>
   10678:	83 c4 10             	add    $0x10,%esp
    
    for(int i=0; i<5; i++) {
   1067b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10682:	eb 2d                	jmp    106b1 <list_test+0x146>
        list_node_t* node = list_delete_first(&list);
   10684:	83 ec 0c             	sub    $0xc,%esp
   10687:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   1068a:	50                   	push   %eax
   1068b:	e8 a1 0f 00 00       	call   11631 <list_delete_first>
   10690:	83 c4 10             	add    $0x10,%esp
   10693:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("delete first from list: %d, 0x%x", i, (uint32_t)node);
   10696:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10699:	83 ec 04             	sub    $0x4,%esp
   1069c:	50                   	push   %eax
   1069d:	ff 75 ec             	pushl  -0x14(%ebp)
   106a0:	68 34 28 01 00       	push   $0x12834
   106a5:	e8 5e 11 00 00       	call   11808 <klog>
   106aa:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   106ad:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   106b1:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   106b5:	7e cd                	jle    10684 <list_test+0x119>
    }

    show_list(list);
   106b7:	83 ec 04             	sub    $0x4,%esp
   106ba:	ff 75 dc             	pushl  -0x24(%ebp)
   106bd:	ff 75 d8             	pushl  -0x28(%ebp)
   106c0:	ff 75 d4             	pushl  -0x2c(%ebp)
   106c3:	e8 5e fe ff ff       	call   10526 <show_list>
   106c8:	83 c4 10             	add    $0x10,%esp

}
   106cb:	90                   	nop
   106cc:	c9                   	leave  
   106cd:	c3                   	ret    

000106ce <offset_test>:

void offset_test() {
   106ce:	55                   	push   %ebp
   106cf:	89 e5                	mov    %esp,%ebp
   106d1:	83 ec 28             	sub    $0x28,%esp
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   106d4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   106db:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   106e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   106e9:	c7 45 e4 56 34 12 00 	movl   $0x123456,-0x1c(%ebp)

    list_node_t * v_node = &v.node;
   106f0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   106f3:	83 c0 04             	add    $0x4,%eax
   106f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   106f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   106fd:	74 08                	je     10707 <offset_test+0x39>
   106ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10702:	83 e8 04             	sub    $0x4,%eax
   10705:	eb 05                	jmp    1070c <offset_test+0x3e>
   10707:	b8 00 00 00 00       	mov    $0x0,%eax
   1070c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    if(p->i != 0x123456) {
   1070f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10712:	8b 00                	mov    (%eax),%eax
   10714:	3d 56 34 12 00       	cmp    $0x123456,%eax
   10719:	74 10                	je     1072b <offset_test+0x5d>
        klog("error");
   1071b:	83 ec 0c             	sub    $0xc,%esp
   1071e:	68 55 28 01 00       	push   $0x12855
   10723:	e8 e0 10 00 00       	call   11808 <klog>
   10728:	83 c4 10             	add    $0x10,%esp
    }
}
   1072b:	90                   	nop
   1072c:	c9                   	leave  
   1072d:	c3                   	ret    

0001072e <init_main>:


void init_main() {
   1072e:	55                   	push   %ebp
   1072f:	89 e5                	mov    %esp,%ebp
   10731:	83 ec 08             	sub    $0x8,%esp
    klog("Kernal %s is running ... ", "1.0.0");
   10734:	83 ec 08             	sub    $0x8,%esp
   10737:	68 5b 28 01 00       	push   $0x1285b
   1073c:	68 61 28 01 00       	push   $0x12861
   10741:	e8 c2 10 00 00       	call   11808 <klog>
   10746:	83 c4 10             	add    $0x10,%esp

    task_manager_init();
   10749:	e8 5e 1c 00 00       	call   123ac <task_manager_init>
    task1_func_init();
   1074e:	e8 30 1d 00 00       	call   12483 <task1_func_init>
    irq_enable_global();
   10753:	e8 b6 06 00 00       	call   10e0e <irq_enable_global>
    
    task_switch_from_to(0, get_first_task());
   10758:	e8 89 1d 00 00       	call   124e6 <get_first_task>
   1075d:	83 ec 08             	sub    $0x8,%esp
   10760:	50                   	push   %eax
   10761:	6a 00                	push   $0x0
   10763:	e8 49 1a 00 00       	call   121b1 <task_switch_from_to>
   10768:	83 c4 10             	add    $0x10,%esp
   1076b:	90                   	nop
   1076c:	c9                   	leave  
   1076d:	c3                   	ret    

0001076e <hlt>:
static inline void hlt() {
   1076e:	55                   	push   %ebp
   1076f:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   10771:	f4                   	hlt    
}
   10772:	90                   	nop
   10773:	5d                   	pop    %ebp
   10774:	c3                   	ret    

00010775 <cli>:
static inline void cli() {
   10775:	55                   	push   %ebp
   10776:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   10778:	fa                   	cli    
}
   10779:	90                   	nop
   1077a:	5d                   	pop    %ebp
   1077b:	c3                   	ret    

0001077c <sti>:
static inline void sti() {
   1077c:	55                   	push   %ebp
   1077d:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   1077f:	fb                   	sti    
}
   10780:	90                   	nop
   10781:	5d                   	pop    %ebp
   10782:	c3                   	ret    

00010783 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10783:	55                   	push   %ebp
   10784:	89 e5                	mov    %esp,%ebp
   10786:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   10789:	8b 45 08             	mov    0x8(%ebp),%eax
   1078c:	c1 e8 10             	shr    $0x10,%eax
   1078f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   10793:	8b 45 08             	mov    0x8(%ebp),%eax
   10796:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   1079a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1079d:	83 e8 01             	sub    $0x1,%eax
   107a0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   107a4:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   107a8:	90                   	nop
   107a9:	c9                   	leave  
   107aa:	c3                   	ret    

000107ab <inb>:
static inline uint8_t inb(uint16_t  port) {
   107ab:	55                   	push   %ebp
   107ac:	89 e5                	mov    %esp,%ebp
   107ae:	83 ec 14             	sub    $0x14,%esp
   107b1:	8b 45 08             	mov    0x8(%ebp),%eax
   107b4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   107b8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   107bc:	89 c2                	mov    %eax,%edx
   107be:	ec                   	in     (%dx),%al
   107bf:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   107c2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   107c6:	c9                   	leave  
   107c7:	c3                   	ret    

000107c8 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   107c8:	55                   	push   %ebp
   107c9:	89 e5                	mov    %esp,%ebp
   107cb:	83 ec 08             	sub    $0x8,%esp
   107ce:	8b 55 08             	mov    0x8(%ebp),%edx
   107d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   107d4:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   107d8:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   107db:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   107df:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   107e3:	ee                   	out    %al,(%dx)
}
   107e4:	90                   	nop
   107e5:	c9                   	leave  
   107e6:	c3                   	ret    

000107e7 <read_eflags>:

static inline void write_tr (uint16_t tss_selector) {
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
}

static inline uint32_t read_eflags() {
   107e7:	55                   	push   %ebp
   107e8:	89 e5                	mov    %esp,%ebp
   107ea:	83 ec 10             	sub    $0x10,%esp
	uint32_t eflags;

	__asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   107ed:	9c                   	pushf  
   107ee:	58                   	pop    %eax
   107ef:	89 45 fc             	mov    %eax,-0x4(%ebp)

	return eflags;
   107f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   107f5:	c9                   	leave  
   107f6:	c3                   	ret    

000107f7 <write_eflags>:

static inline void write_eflags(uint32_t eflags) {
   107f7:	55                   	push   %ebp
   107f8:	89 e5                	mov    %esp,%ebp

	__asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   107fa:	8b 45 08             	mov    0x8(%ebp),%eax
   107fd:	50                   	push   %eax
   107fe:	9d                   	popf   


}
   107ff:	90                   	nop
   10800:	5d                   	pop    %ebp
   10801:	c3                   	ret    

00010802 <default_handler>:

//  -----------------------------------------   中断相关    -------------------------------------------
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void default_handler (exception_frame_t * frame, const char * message) {
   10802:	55                   	push   %ebp
   10803:	89 e5                	mov    %esp,%ebp
   10805:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   10808:	83 ec 0c             	sub    $0xc,%esp
   1080b:	68 7c 28 01 00       	push   $0x1287c
   10810:	e8 f3 0f 00 00       	call   11808 <klog>
   10815:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   10818:	83 ec 08             	sub    $0x8,%esp
   1081b:	ff 75 0c             	pushl  0xc(%ebp)
   1081e:	68 9d 28 01 00       	push   $0x1289d
   10823:	e8 e0 0f 00 00       	call   11808 <klog>
   10828:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1082b:	e8 3e ff ff ff       	call   1076e <hlt>
   10830:	eb f9                	jmp    1082b <default_handler+0x29>

00010832 <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   10832:	55                   	push   %ebp
   10833:	89 e5                	mov    %esp,%ebp
   10835:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   10838:	83 ec 08             	sub    $0x8,%esp
   1083b:	68 b8 28 01 00       	push   $0x128b8
   10840:	ff 75 08             	pushl  0x8(%ebp)
   10843:	e8 ba ff ff ff       	call   10802 <default_handler>
   10848:	83 c4 10             	add    $0x10,%esp
}
   1084b:	90                   	nop
   1084c:	c9                   	leave  
   1084d:	c3                   	ret    

0001084e <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   1084e:	55                   	push   %ebp
   1084f:	89 e5                	mov    %esp,%ebp
   10851:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   10854:	83 ec 08             	sub    $0x8,%esp
   10857:	68 cb 28 01 00       	push   $0x128cb
   1085c:	ff 75 08             	pushl  0x8(%ebp)
   1085f:	e8 9e ff ff ff       	call   10802 <default_handler>
   10864:	83 c4 10             	add    $0x10,%esp
}
   10867:	90                   	nop
   10868:	c9                   	leave  
   10869:	c3                   	ret    

0001086a <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   1086a:	55                   	push   %ebp
   1086b:	89 e5                	mov    %esp,%ebp
   1086d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   10870:	83 ec 08             	sub    $0x8,%esp
   10873:	68 da 28 01 00       	push   $0x128da
   10878:	ff 75 08             	pushl  0x8(%ebp)
   1087b:	e8 82 ff ff ff       	call   10802 <default_handler>
   10880:	83 c4 10             	add    $0x10,%esp
}
   10883:	90                   	nop
   10884:	c9                   	leave  
   10885:	c3                   	ret    

00010886 <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   10886:	55                   	push   %ebp
   10887:	89 e5                	mov    %esp,%ebp
   10889:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   1088c:	83 ec 08             	sub    $0x8,%esp
   1088f:	68 ea 28 01 00       	push   $0x128ea
   10894:	ff 75 08             	pushl  0x8(%ebp)
   10897:	e8 66 ff ff ff       	call   10802 <default_handler>
   1089c:	83 c4 10             	add    $0x10,%esp
}
   1089f:	90                   	nop
   108a0:	c9                   	leave  
   108a1:	c3                   	ret    

000108a2 <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   108a2:	55                   	push   %ebp
   108a3:	89 e5                	mov    %esp,%ebp
   108a5:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   108a8:	83 ec 08             	sub    $0x8,%esp
   108ab:	68 f9 28 01 00       	push   $0x128f9
   108b0:	ff 75 08             	pushl  0x8(%ebp)
   108b3:	e8 4a ff ff ff       	call   10802 <default_handler>
   108b8:	83 c4 10             	add    $0x10,%esp
}
   108bb:	90                   	nop
   108bc:	c9                   	leave  
   108bd:	c3                   	ret    

000108be <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   108be:	55                   	push   %ebp
   108bf:	89 e5                	mov    %esp,%ebp
   108c1:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   108c4:	83 ec 08             	sub    $0x8,%esp
   108c7:	68 05 29 01 00       	push   $0x12905
   108cc:	ff 75 08             	pushl  0x8(%ebp)
   108cf:	e8 2e ff ff ff       	call   10802 <default_handler>
   108d4:	83 c4 10             	add    $0x10,%esp
}
   108d7:	90                   	nop
   108d8:	c9                   	leave  
   108d9:	c3                   	ret    

000108da <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   108da:	55                   	push   %ebp
   108db:	89 e5                	mov    %esp,%ebp
   108dd:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   108e0:	83 ec 08             	sub    $0x8,%esp
   108e3:	68 0f 29 01 00       	push   $0x1290f
   108e8:	ff 75 08             	pushl  0x8(%ebp)
   108eb:	e8 12 ff ff ff       	call   10802 <default_handler>
   108f0:	83 c4 10             	add    $0x10,%esp
}
   108f3:	90                   	nop
   108f4:	c9                   	leave  
   108f5:	c3                   	ret    

000108f6 <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   108f6:	55                   	push   %ebp
   108f7:	89 e5                	mov    %esp,%ebp
   108f9:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   108fc:	83 ec 08             	sub    $0x8,%esp
   108ff:	68 25 29 01 00       	push   $0x12925
   10904:	ff 75 08             	pushl  0x8(%ebp)
   10907:	e8 f6 fe ff ff       	call   10802 <default_handler>
   1090c:	83 c4 10             	add    $0x10,%esp
}
   1090f:	90                   	nop
   10910:	c9                   	leave  
   10911:	c3                   	ret    

00010912 <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   10912:	55                   	push   %ebp
   10913:	89 e5                	mov    %esp,%ebp
   10915:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   10918:	83 ec 08             	sub    $0x8,%esp
   1091b:	68 35 29 01 00       	push   $0x12935
   10920:	ff 75 08             	pushl  0x8(%ebp)
   10923:	e8 da fe ff ff       	call   10802 <default_handler>
   10928:	83 c4 10             	add    $0x10,%esp
}
   1092b:	90                   	nop
   1092c:	c9                   	leave  
   1092d:	c3                   	ret    

0001092e <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   1092e:	55                   	push   %ebp
   1092f:	89 e5                	mov    %esp,%ebp
   10931:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   10934:	83 ec 08             	sub    $0x8,%esp
   10937:	68 4b 29 01 00       	push   $0x1294b
   1093c:	ff 75 08             	pushl  0x8(%ebp)
   1093f:	e8 be fe ff ff       	call   10802 <default_handler>
   10944:	83 c4 10             	add    $0x10,%esp
}
   10947:	90                   	nop
   10948:	c9                   	leave  
   10949:	c3                   	ret    

0001094a <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   1094a:	55                   	push   %ebp
   1094b:	89 e5                	mov    %esp,%ebp
   1094d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   10950:	83 ec 08             	sub    $0x8,%esp
   10953:	68 59 29 01 00       	push   $0x12959
   10958:	ff 75 08             	pushl  0x8(%ebp)
   1095b:	e8 a2 fe ff ff       	call   10802 <default_handler>
   10960:	83 c4 10             	add    $0x10,%esp
}
   10963:	90                   	nop
   10964:	c9                   	leave  
   10965:	c3                   	ret    

00010966 <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   10966:	55                   	push   %ebp
   10967:	89 e5                	mov    %esp,%ebp
   10969:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   1096c:	83 ec 08             	sub    $0x8,%esp
   1096f:	68 65 29 01 00       	push   $0x12965
   10974:	ff 75 08             	pushl  0x8(%ebp)
   10977:	e8 86 fe ff ff       	call   10802 <default_handler>
   1097c:	83 c4 10             	add    $0x10,%esp
}
   1097f:	90                   	nop
   10980:	c9                   	leave  
   10981:	c3                   	ret    

00010982 <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   10982:	55                   	push   %ebp
   10983:	89 e5                	mov    %esp,%ebp
   10985:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   10988:	83 ec 08             	sub    $0x8,%esp
   1098b:	68 7a 29 01 00       	push   $0x1297a
   10990:	ff 75 08             	pushl  0x8(%ebp)
   10993:	e8 6a fe ff ff       	call   10802 <default_handler>
   10998:	83 c4 10             	add    $0x10,%esp
}
   1099b:	90                   	nop
   1099c:	c9                   	leave  
   1099d:	c3                   	ret    

0001099e <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   1099e:	55                   	push   %ebp
   1099f:	89 e5                	mov    %esp,%ebp
   109a1:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   109a4:	83 ec 08             	sub    $0x8,%esp
   109a7:	68 90 29 01 00       	push   $0x12990
   109ac:	ff 75 08             	pushl  0x8(%ebp)
   109af:	e8 4e fe ff ff       	call   10802 <default_handler>
   109b4:	83 c4 10             	add    $0x10,%esp
}
   109b7:	90                   	nop
   109b8:	c9                   	leave  
   109b9:	c3                   	ret    

000109ba <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   109ba:	55                   	push   %ebp
   109bb:	89 e5                	mov    %esp,%ebp
   109bd:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: Page fault.");
   109c0:	83 ec 08             	sub    $0x8,%esp
   109c3:	68 bc 29 01 00       	push   $0x129bc
   109c8:	ff 75 08             	pushl  0x8(%ebp)
   109cb:	e8 32 fe ff ff       	call   10802 <default_handler>
   109d0:	83 c4 10             	add    $0x10,%esp
}
   109d3:	90                   	nop
   109d4:	c9                   	leave  
   109d5:	c3                   	ret    

000109d6 <handle_fpu_error>:
void handle_fpu_error(exception_frame_t * frame) {
   109d6:	55                   	push   %ebp
   109d7:	89 e5                	mov    %esp,%ebp
   109d9:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   109dc:	83 ec 08             	sub    $0x8,%esp
   109df:	68 df 29 01 00       	push   $0x129df
   109e4:	ff 75 08             	pushl  0x8(%ebp)
   109e7:	e8 16 fe ff ff       	call   10802 <default_handler>
   109ec:	83 c4 10             	add    $0x10,%esp
}
   109ef:	90                   	nop
   109f0:	c9                   	leave  
   109f1:	c3                   	ret    

000109f2 <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   109f2:	55                   	push   %ebp
   109f3:	89 e5                	mov    %esp,%ebp
   109f5:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   109f8:	83 ec 08             	sub    $0x8,%esp
   109fb:	68 fd 29 01 00       	push   $0x129fd
   10a00:	ff 75 08             	pushl  0x8(%ebp)
   10a03:	e8 fa fd ff ff       	call   10802 <default_handler>
   10a08:	83 c4 10             	add    $0x10,%esp
}
   10a0b:	90                   	nop
   10a0c:	c9                   	leave  
   10a0d:	c3                   	ret    

00010a0e <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   10a0e:	55                   	push   %ebp
   10a0f:	89 e5                	mov    %esp,%ebp
   10a11:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   10a14:	83 ec 08             	sub    $0x8,%esp
   10a17:	68 0e 2a 01 00       	push   $0x12a0e
   10a1c:	ff 75 08             	pushl  0x8(%ebp)
   10a1f:	e8 de fd ff ff       	call   10802 <default_handler>
   10a24:	83 c4 10             	add    $0x10,%esp
}
   10a27:	90                   	nop
   10a28:	c9                   	leave  
   10a29:	c3                   	ret    

00010a2a <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   10a2a:	55                   	push   %ebp
   10a2b:	89 e5                	mov    %esp,%ebp
   10a2d:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10a30:	83 ec 08             	sub    $0x8,%esp
   10a33:	68 20 2a 01 00       	push   $0x12a20
   10a38:	ff 75 08             	pushl  0x8(%ebp)
   10a3b:	e8 c2 fd ff ff       	call   10802 <default_handler>
   10a40:	83 c4 10             	add    $0x10,%esp
}
   10a43:	90                   	nop
   10a44:	c9                   	leave  
   10a45:	c3                   	ret    

00010a46 <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10a46:	55                   	push   %ebp
   10a47:	89 e5                	mov    %esp,%ebp
   10a49:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   10a4c:	83 ec 08             	sub    $0x8,%esp
   10a4f:	68 3f 2a 01 00       	push   $0x12a3f
   10a54:	ff 75 08             	pushl  0x8(%ebp)
   10a57:	e8 a6 fd ff ff       	call   10802 <default_handler>
   10a5c:	83 c4 10             	add    $0x10,%esp
}
   10a5f:	90                   	nop
   10a60:	c9                   	leave  
   10a61:	c3                   	ret    

00010a62 <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10a62:	55                   	push   %ebp
   10a63:	89 e5                	mov    %esp,%ebp
   10a65:	83 ec 08             	sub    $0x8,%esp
   10a68:	8b 55 0c             	mov    0xc(%ebp),%edx
   10a6b:	8b 45 14             	mov    0x14(%ebp),%eax
   10a6e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10a72:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10a76:	8b 45 10             	mov    0x10(%ebp),%eax
   10a79:	89 c2                	mov    %eax,%edx
   10a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7e:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10a81:	8b 45 08             	mov    0x8(%ebp),%eax
   10a84:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a88:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10a8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a93:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10a97:	8b 45 10             	mov    0x10(%ebp),%eax
   10a9a:	c1 e8 10             	shr    $0x10,%eax
   10a9d:	89 c2                	mov    %eax,%edx
   10a9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa2:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10aa6:	90                   	nop
   10aa7:	c9                   	leave  
   10aa8:	c3                   	ret    

00010aa9 <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   10aa9:	55                   	push   %ebp
   10aaa:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   10aac:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10ab0:	7e 07                	jle    10ab9 <irq_install+0x10>
        return -1;
   10ab2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ab7:	eb 1e                	jmp    10ad7 <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   10ab9:	8b 45 08             	mov    0x8(%ebp),%eax
   10abc:	c1 e0 03             	shl    $0x3,%eax
   10abf:	05 20 48 01 00       	add    $0x14820,%eax
   10ac4:	68 00 8e 00 00       	push   $0x8e00
   10ac9:	ff 75 0c             	pushl  0xc(%ebp)
   10acc:	6a 08                	push   $0x8
   10ace:	50                   	push   %eax
   10acf:	e8 8e ff ff ff       	call   10a62 <gate_desc_set>
   10ad4:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   10ad7:	c9                   	leave  
   10ad8:	c3                   	ret    

00010ad9 <init_pic>:

static void init_pic() {
   10ad9:	55                   	push   %ebp
   10ada:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10adc:	6a 11                	push   $0x11
   10ade:	6a 20                	push   $0x20
   10ae0:	e8 e3 fc ff ff       	call   107c8 <outb>
   10ae5:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10ae8:	6a 20                	push   $0x20
   10aea:	6a 21                	push   $0x21
   10aec:	e8 d7 fc ff ff       	call   107c8 <outb>
   10af1:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10af4:	6a 04                	push   $0x4
   10af6:	6a 21                	push   $0x21
   10af8:	e8 cb fc ff ff       	call   107c8 <outb>
   10afd:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10b00:	6a 01                	push   $0x1
   10b02:	6a 21                	push   $0x21
   10b04:	e8 bf fc ff ff       	call   107c8 <outb>
   10b09:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10b0c:	6a 11                	push   $0x11
   10b0e:	68 a0 00 00 00       	push   $0xa0
   10b13:	e8 b0 fc ff ff       	call   107c8 <outb>
   10b18:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10b1b:	6a 28                	push   $0x28
   10b1d:	68 a1 00 00 00       	push   $0xa1
   10b22:	e8 a1 fc ff ff       	call   107c8 <outb>
   10b27:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10b2a:	6a 02                	push   $0x2
   10b2c:	68 a1 00 00 00       	push   $0xa1
   10b31:	e8 92 fc ff ff       	call   107c8 <outb>
   10b36:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10b39:	6a 01                	push   $0x1
   10b3b:	68 a1 00 00 00       	push   $0xa1
   10b40:	e8 83 fc ff ff       	call   107c8 <outb>
   10b45:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10b48:	68 fb 00 00 00       	push   $0xfb
   10b4d:	6a 21                	push   $0x21
   10b4f:	e8 74 fc ff ff       	call   107c8 <outb>
   10b54:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10b57:	68 ff 00 00 00       	push   $0xff
   10b5c:	68 a1 00 00 00       	push   $0xa1
   10b61:	e8 62 fc ff ff       	call   107c8 <outb>
   10b66:	83 c4 08             	add    $0x8,%esp
}
   10b69:	90                   	nop
   10b6a:	c9                   	leave  
   10b6b:	c3                   	ret    

00010b6c <irq_init>:

void irq_init () {
   10b6c:	55                   	push   %ebp
   10b6d:	89 e5                	mov    %esp,%ebp
   10b6f:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10b72:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10b79:	eb 25                	jmp    10ba0 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10b7b:	ba 28 00 01 00       	mov    $0x10028,%edx
   10b80:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b83:	c1 e0 03             	shl    $0x3,%eax
   10b86:	05 20 48 01 00       	add    $0x14820,%eax
   10b8b:	68 00 8e 00 00       	push   $0x8e00
   10b90:	52                   	push   %edx
   10b91:	6a 08                	push   $0x8
   10b93:	50                   	push   %eax
   10b94:	e8 c9 fe ff ff       	call   10a62 <gate_desc_set>
   10b99:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10b9c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10ba0:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   10ba4:	76 d5                	jbe    10b7b <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10ba6:	b8 20 48 01 00       	mov    $0x14820,%eax
   10bab:	68 00 04 00 00       	push   $0x400
   10bb0:	50                   	push   %eax
   10bb1:	e8 cd fb ff ff       	call   10783 <lidt>
   10bb6:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   10bb9:	b8 47 00 01 00       	mov    $0x10047,%eax
   10bbe:	50                   	push   %eax
   10bbf:	6a 00                	push   $0x0
   10bc1:	e8 e3 fe ff ff       	call   10aa9 <irq_install>
   10bc6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   10bc9:	b8 66 00 01 00       	mov    $0x10066,%eax
   10bce:	50                   	push   %eax
   10bcf:	6a 01                	push   $0x1
   10bd1:	e8 d3 fe ff ff       	call   10aa9 <irq_install>
   10bd6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   10bd9:	b8 85 00 01 00       	mov    $0x10085,%eax
   10bde:	50                   	push   %eax
   10bdf:	6a 02                	push   $0x2
   10be1:	e8 c3 fe ff ff       	call   10aa9 <irq_install>
   10be6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   10be9:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   10bee:	50                   	push   %eax
   10bef:	6a 03                	push   $0x3
   10bf1:	e8 b3 fe ff ff       	call   10aa9 <irq_install>
   10bf6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10bf9:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   10bfe:	50                   	push   %eax
   10bff:	6a 04                	push   $0x4
   10c01:	e8 a3 fe ff ff       	call   10aa9 <irq_install>
   10c06:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10c09:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   10c0e:	50                   	push   %eax
   10c0f:	6a 05                	push   $0x5
   10c11:	e8 93 fe ff ff       	call   10aa9 <irq_install>
   10c16:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10c19:	b8 01 01 01 00       	mov    $0x10101,%eax
   10c1e:	50                   	push   %eax
   10c1f:	6a 06                	push   $0x6
   10c21:	e8 83 fe ff ff       	call   10aa9 <irq_install>
   10c26:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10c29:	b8 20 01 01 00       	mov    $0x10120,%eax
   10c2e:	50                   	push   %eax
   10c2f:	6a 07                	push   $0x7
   10c31:	e8 73 fe ff ff       	call   10aa9 <irq_install>
   10c36:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10c39:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   10c3e:	50                   	push   %eax
   10c3f:	6a 08                	push   $0x8
   10c41:	e8 63 fe ff ff       	call   10aa9 <irq_install>
   10c46:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10c49:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   10c4e:	50                   	push   %eax
   10c4f:	6a 0a                	push   $0xa
   10c51:	e8 53 fe ff ff       	call   10aa9 <irq_install>
   10c56:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10c59:	b8 79 01 01 00       	mov    $0x10179,%eax
   10c5e:	50                   	push   %eax
   10c5f:	6a 0b                	push   $0xb
   10c61:	e8 43 fe ff ff       	call   10aa9 <irq_install>
   10c66:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10c69:	b8 96 01 01 00       	mov    $0x10196,%eax
   10c6e:	50                   	push   %eax
   10c6f:	6a 0c                	push   $0xc
   10c71:	e8 33 fe ff ff       	call   10aa9 <irq_install>
   10c76:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10c79:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   10c7e:	50                   	push   %eax
   10c7f:	6a 0d                	push   $0xd
   10c81:	e8 23 fe ff ff       	call   10aa9 <irq_install>
   10c86:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10c89:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   10c8e:	50                   	push   %eax
   10c8f:	6a 0e                	push   $0xe
   10c91:	e8 13 fe ff ff       	call   10aa9 <irq_install>
   10c96:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   10c99:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   10c9e:	50                   	push   %eax
   10c9f:	6a 10                	push   $0x10
   10ca1:	e8 03 fe ff ff       	call   10aa9 <irq_install>
   10ca6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   10ca9:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   10cae:	50                   	push   %eax
   10caf:	6a 11                	push   $0x11
   10cb1:	e8 f3 fd ff ff       	call   10aa9 <irq_install>
   10cb6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   10cb9:	b8 29 02 01 00       	mov    $0x10229,%eax
   10cbe:	50                   	push   %eax
   10cbf:	6a 12                	push   $0x12
   10cc1:	e8 e3 fd ff ff       	call   10aa9 <irq_install>
   10cc6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   10cc9:	b8 48 02 01 00       	mov    $0x10248,%eax
   10cce:	50                   	push   %eax
   10ccf:	6a 13                	push   $0x13
   10cd1:	e8 d3 fd ff ff       	call   10aa9 <irq_install>
   10cd6:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   10cd9:	b8 67 02 01 00       	mov    $0x10267,%eax
   10cde:	50                   	push   %eax
   10cdf:	6a 14                	push   $0x14
   10ce1:	e8 c3 fd ff ff       	call   10aa9 <irq_install>
   10ce6:	83 c4 08             	add    $0x8,%esp

    init_pic();
   10ce9:	e8 eb fd ff ff       	call   10ad9 <init_pic>
}
   10cee:	90                   	nop
   10cef:	c9                   	leave  
   10cf0:	c3                   	ret    

00010cf1 <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10cf1:	55                   	push   %ebp
   10cf2:	89 e5                	mov    %esp,%ebp
   10cf4:	53                   	push   %ebx
   10cf5:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10cf8:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10cfc:	7e 78                	jle    10d76 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10cfe:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10d02:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d06:	7f 32                	jg     10d3a <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10d08:	6a 21                	push   $0x21
   10d0a:	e8 9c fa ff ff       	call   107ab <inb>
   10d0f:	83 c4 04             	add    $0x4,%esp
   10d12:	89 c2                	mov    %eax,%edx
   10d14:	8b 45 08             	mov    0x8(%ebp),%eax
   10d17:	bb 01 00 00 00       	mov    $0x1,%ebx
   10d1c:	89 c1                	mov    %eax,%ecx
   10d1e:	d3 e3                	shl    %cl,%ebx
   10d20:	89 d8                	mov    %ebx,%eax
   10d22:	f7 d0                	not    %eax
   10d24:	21 d0                	and    %edx,%eax
   10d26:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10d29:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10d2d:	50                   	push   %eax
   10d2e:	6a 21                	push   $0x21
   10d30:	e8 93 fa ff ff       	call   107c8 <outb>
   10d35:	83 c4 08             	add    $0x8,%esp
   10d38:	eb 3d                	jmp    10d77 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10d3a:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10d3e:	68 a1 00 00 00       	push   $0xa1
   10d43:	e8 63 fa ff ff       	call   107ab <inb>
   10d48:	83 c4 04             	add    $0x4,%esp
   10d4b:	89 c2                	mov    %eax,%edx
   10d4d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d50:	bb 01 00 00 00       	mov    $0x1,%ebx
   10d55:	89 c1                	mov    %eax,%ecx
   10d57:	d3 e3                	shl    %cl,%ebx
   10d59:	89 d8                	mov    %ebx,%eax
   10d5b:	f7 d0                	not    %eax
   10d5d:	21 d0                	and    %edx,%eax
   10d5f:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10d62:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d66:	50                   	push   %eax
   10d67:	68 a1 00 00 00       	push   $0xa1
   10d6c:	e8 57 fa ff ff       	call   107c8 <outb>
   10d71:	83 c4 08             	add    $0x8,%esp
   10d74:	eb 01                	jmp    10d77 <irq_enable+0x86>
        return;
   10d76:	90                   	nop
    }
}
   10d77:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d7a:	c9                   	leave  
   10d7b:	c3                   	ret    

00010d7c <irq_disable>:

void irq_disable(int irq_num) {
   10d7c:	55                   	push   %ebp
   10d7d:	89 e5                	mov    %esp,%ebp
   10d7f:	53                   	push   %ebx
   10d80:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10d83:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10d87:	7e 74                	jle    10dfd <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10d89:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10d8d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d91:	7f 30                	jg     10dc3 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10d93:	6a 21                	push   $0x21
   10d95:	e8 11 fa ff ff       	call   107ab <inb>
   10d9a:	83 c4 04             	add    $0x4,%esp
   10d9d:	89 c3                	mov    %eax,%ebx
   10d9f:	8b 45 08             	mov    0x8(%ebp),%eax
   10da2:	ba 01 00 00 00       	mov    $0x1,%edx
   10da7:	89 c1                	mov    %eax,%ecx
   10da9:	d3 e2                	shl    %cl,%edx
   10dab:	89 d0                	mov    %edx,%eax
   10dad:	09 d8                	or     %ebx,%eax
   10daf:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10db2:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10db6:	50                   	push   %eax
   10db7:	6a 21                	push   $0x21
   10db9:	e8 0a fa ff ff       	call   107c8 <outb>
   10dbe:	83 c4 08             	add    $0x8,%esp
   10dc1:	eb 3b                	jmp    10dfe <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10dc3:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10dc7:	68 a1 00 00 00       	push   $0xa1
   10dcc:	e8 da f9 ff ff       	call   107ab <inb>
   10dd1:	83 c4 04             	add    $0x4,%esp
   10dd4:	89 c3                	mov    %eax,%ebx
   10dd6:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd9:	ba 01 00 00 00       	mov    $0x1,%edx
   10dde:	89 c1                	mov    %eax,%ecx
   10de0:	d3 e2                	shl    %cl,%edx
   10de2:	89 d0                	mov    %edx,%eax
   10de4:	09 d8                	or     %ebx,%eax
   10de6:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10de9:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10ded:	50                   	push   %eax
   10dee:	68 a1 00 00 00       	push   $0xa1
   10df3:	e8 d0 f9 ff ff       	call   107c8 <outb>
   10df8:	83 c4 08             	add    $0x8,%esp
   10dfb:	eb 01                	jmp    10dfe <irq_disable+0x82>
        return;
   10dfd:	90                   	nop
    }
}
   10dfe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e01:	c9                   	leave  
   10e02:	c3                   	ret    

00010e03 <irq_disable_global>:

void irq_disable_global(void) {
   10e03:	55                   	push   %ebp
   10e04:	89 e5                	mov    %esp,%ebp
    cli();
   10e06:	e8 6a f9 ff ff       	call   10775 <cli>
}
   10e0b:	90                   	nop
   10e0c:	5d                   	pop    %ebp
   10e0d:	c3                   	ret    

00010e0e <irq_enable_global>:

void irq_enable_global(void) {
   10e0e:	55                   	push   %ebp
   10e0f:	89 e5                	mov    %esp,%ebp
    sti();
   10e11:	e8 66 f9 ff ff       	call   1077c <sti>
}
   10e16:	90                   	nop
   10e17:	5d                   	pop    %ebp
   10e18:	c3                   	ret    

00010e19 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10e19:	55                   	push   %ebp
   10e1a:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10e1c:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10e20:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e24:	7e 0f                	jle    10e35 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10e26:	6a 20                	push   $0x20
   10e28:	68 a0 00 00 00       	push   $0xa0
   10e2d:	e8 96 f9 ff ff       	call   107c8 <outb>
   10e32:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10e35:	6a 20                	push   $0x20
   10e37:	6a 20                	push   $0x20
   10e39:	e8 8a f9 ff ff       	call   107c8 <outb>
   10e3e:	83 c4 08             	add    $0x8,%esp
}
   10e41:	90                   	nop
   10e42:	c9                   	leave  
   10e43:	c3                   	ret    

00010e44 <irq_enter_proection>:


irq_state_t irq_enter_proection() {
   10e44:	55                   	push   %ebp
   10e45:	89 e5                	mov    %esp,%ebp
   10e47:	83 ec 10             	sub    $0x10,%esp
    irq_state_t  state = read_eflags();
   10e4a:	e8 98 f9 ff ff       	call   107e7 <read_eflags>
   10e4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   10e52:	e8 ac ff ff ff       	call   10e03 <irq_disable_global>

    return state;
   10e57:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10e5a:	c9                   	leave  
   10e5b:	c3                   	ret    

00010e5c <irq_leave_proection>:


void irq_leave_proection(irq_state_t state) {
   10e5c:	55                   	push   %ebp
   10e5d:	89 e5                	mov    %esp,%ebp

    write_eflags(state);
   10e5f:	ff 75 08             	pushl  0x8(%ebp)
   10e62:	e8 90 f9 ff ff       	call   107f7 <write_eflags>
   10e67:	83 c4 04             	add    $0x4,%esp
}
   10e6a:	90                   	nop
   10e6b:	c9                   	leave  
   10e6c:	c3                   	ret    

00010e6d <bitmap_byte_count>:
#include <bitmap.h>
#include <klib.h>

int bitmap_byte_count (int bit_count) {
   10e6d:	55                   	push   %ebp
   10e6e:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         
   10e70:	8b 45 08             	mov    0x8(%ebp),%eax
   10e73:	83 c0 07             	add    $0x7,%eax
   10e76:	8d 50 07             	lea    0x7(%eax),%edx
   10e79:	85 c0                	test   %eax,%eax
   10e7b:	0f 48 c2             	cmovs  %edx,%eax
   10e7e:	c1 f8 03             	sar    $0x3,%eax
}
   10e81:	5d                   	pop    %ebp
   10e82:	c3                   	ret    

00010e83 <bitmap_init>:

void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   10e83:	55                   	push   %ebp
   10e84:	89 e5                	mov    %esp,%ebp
   10e86:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   10e89:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8c:	8b 55 10             	mov    0x10(%ebp),%edx
   10e8f:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   10e91:	8b 45 08             	mov    0x8(%ebp),%eax
   10e94:	8b 55 0c             	mov    0xc(%ebp),%edx
   10e97:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   10e9a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e9d:	8b 00                	mov    (%eax),%eax
   10e9f:	50                   	push   %eax
   10ea0:	e8 c8 ff ff ff       	call   10e6d <bitmap_byte_count>
   10ea5:	83 c4 04             	add    $0x4,%esp
   10ea8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    k_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   10eab:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10eaf:	74 07                	je     10eb8 <bitmap_init+0x35>
   10eb1:	ba ff 00 00 00       	mov    $0xff,%edx
   10eb6:	eb 05                	jmp    10ebd <bitmap_init+0x3a>
   10eb8:	ba 00 00 00 00       	mov    $0x0,%edx
   10ebd:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec0:	8b 40 04             	mov    0x4(%eax),%eax
   10ec3:	83 ec 04             	sub    $0x4,%esp
   10ec6:	ff 75 f4             	pushl  -0xc(%ebp)
   10ec9:	52                   	push   %edx
   10eca:	50                   	push   %eax
   10ecb:	e8 9d 03 00 00       	call   1126d <k_memset>
   10ed0:	83 c4 10             	add    $0x10,%esp
}
   10ed3:	90                   	nop
   10ed4:	c9                   	leave  
   10ed5:	c3                   	ret    

00010ed6 <bitmap_get_bit>:


int bitmap_get_bit (bitmap_t * bitmap, int index) {
   10ed6:	55                   	push   %ebp
   10ed7:	89 e5                	mov    %esp,%ebp
   10ed9:	53                   	push   %ebx

    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   10eda:	8b 45 08             	mov    0x8(%ebp),%eax
   10edd:	8b 50 04             	mov    0x4(%eax),%edx
   10ee0:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ee3:	8d 48 07             	lea    0x7(%eax),%ecx
   10ee6:	85 c0                	test   %eax,%eax
   10ee8:	0f 48 c1             	cmovs  %ecx,%eax
   10eeb:	c1 f8 03             	sar    $0x3,%eax
   10eee:	01 d0                	add    %edx,%eax
   10ef0:	0f b6 00             	movzbl (%eax),%eax
   10ef3:	0f b6 d8             	movzbl %al,%ebx
   10ef6:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ef9:	99                   	cltd   
   10efa:	c1 ea 1d             	shr    $0x1d,%edx
   10efd:	01 d0                	add    %edx,%eax
   10eff:	83 e0 07             	and    $0x7,%eax
   10f02:	29 d0                	sub    %edx,%eax
   10f04:	89 c1                	mov    %eax,%ecx
   10f06:	d3 fb                	sar    %cl,%ebx
   10f08:	89 d8                	mov    %ebx,%eax
   10f0a:	83 e0 01             	and    $0x1,%eax
}
   10f0d:	5b                   	pop    %ebx
   10f0e:	5d                   	pop    %ebp
   10f0f:	c3                   	ret    

00010f10 <bitmap_is_set>:

int bitmap_is_set (bitmap_t * bitmap, int index) {
   10f10:	55                   	push   %ebp
   10f11:	89 e5                	mov    %esp,%ebp
    
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   10f13:	ff 75 0c             	pushl  0xc(%ebp)
   10f16:	ff 75 08             	pushl  0x8(%ebp)
   10f19:	e8 b8 ff ff ff       	call   10ed6 <bitmap_get_bit>
   10f1e:	83 c4 08             	add    $0x8,%esp
   10f21:	85 c0                	test   %eax,%eax
   10f23:	0f 95 c0             	setne  %al
   10f26:	0f b6 c0             	movzbl %al,%eax
}
   10f29:	c9                   	leave  
   10f2a:	c3                   	ret    

00010f2b <bitmap_set_bit>:



void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   10f2b:	55                   	push   %ebp
   10f2c:	89 e5                	mov    %esp,%ebp
   10f2e:	56                   	push   %esi
   10f2f:	53                   	push   %ebx
   10f30:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   10f33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10f3a:	e9 a2 00 00 00       	jmp    10fe1 <bitmap_set_bit+0xb6>
        if (bit) {
   10f3f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10f43:	74 4a                	je     10f8f <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   10f45:	8b 45 08             	mov    0x8(%ebp),%eax
   10f48:	8b 50 04             	mov    0x4(%eax),%edx
   10f4b:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f4e:	8d 48 07             	lea    0x7(%eax),%ecx
   10f51:	85 c0                	test   %eax,%eax
   10f53:	0f 48 c1             	cmovs  %ecx,%eax
   10f56:	c1 f8 03             	sar    $0x3,%eax
   10f59:	89 c3                	mov    %eax,%ebx
   10f5b:	89 d8                	mov    %ebx,%eax
   10f5d:	01 d0                	add    %edx,%eax
   10f5f:	0f b6 00             	movzbl (%eax),%eax
   10f62:	89 c6                	mov    %eax,%esi
   10f64:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f67:	99                   	cltd   
   10f68:	c1 ea 1d             	shr    $0x1d,%edx
   10f6b:	01 d0                	add    %edx,%eax
   10f6d:	83 e0 07             	and    $0x7,%eax
   10f70:	29 d0                	sub    %edx,%eax
   10f72:	ba 01 00 00 00       	mov    $0x1,%edx
   10f77:	89 c1                	mov    %eax,%ecx
   10f79:	d3 e2                	shl    %cl,%edx
   10f7b:	89 d0                	mov    %edx,%eax
   10f7d:	89 f2                	mov    %esi,%edx
   10f7f:	09 c2                	or     %eax,%edx
   10f81:	8b 45 08             	mov    0x8(%ebp),%eax
   10f84:	8b 40 04             	mov    0x4(%eax),%eax
   10f87:	89 d9                	mov    %ebx,%ecx
   10f89:	01 c8                	add    %ecx,%eax
   10f8b:	88 10                	mov    %dl,(%eax)
   10f8d:	eb 4a                	jmp    10fd9 <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   10f8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f92:	8b 50 04             	mov    0x4(%eax),%edx
   10f95:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f98:	8d 48 07             	lea    0x7(%eax),%ecx
   10f9b:	85 c0                	test   %eax,%eax
   10f9d:	0f 48 c1             	cmovs  %ecx,%eax
   10fa0:	c1 f8 03             	sar    $0x3,%eax
   10fa3:	89 c3                	mov    %eax,%ebx
   10fa5:	89 d8                	mov    %ebx,%eax
   10fa7:	01 d0                	add    %edx,%eax
   10fa9:	0f b6 00             	movzbl (%eax),%eax
   10fac:	89 c6                	mov    %eax,%esi
   10fae:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fb1:	99                   	cltd   
   10fb2:	c1 ea 1d             	shr    $0x1d,%edx
   10fb5:	01 d0                	add    %edx,%eax
   10fb7:	83 e0 07             	and    $0x7,%eax
   10fba:	29 d0                	sub    %edx,%eax
   10fbc:	ba 01 00 00 00       	mov    $0x1,%edx
   10fc1:	89 c1                	mov    %eax,%ecx
   10fc3:	d3 e2                	shl    %cl,%edx
   10fc5:	89 d0                	mov    %edx,%eax
   10fc7:	f7 d0                	not    %eax
   10fc9:	89 f2                	mov    %esi,%edx
   10fcb:	21 c2                	and    %eax,%edx
   10fcd:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd0:	8b 40 04             	mov    0x4(%eax),%eax
   10fd3:	89 d9                	mov    %ebx,%ecx
   10fd5:	01 c8                	add    %ecx,%eax
   10fd7:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   10fd9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10fdd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   10fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fe4:	3b 45 10             	cmp    0x10(%ebp),%eax
   10fe7:	7d 0e                	jge    10ff7 <bitmap_set_bit+0xcc>
   10fe9:	8b 45 08             	mov    0x8(%ebp),%eax
   10fec:	8b 00                	mov    (%eax),%eax
   10fee:	39 45 0c             	cmp    %eax,0xc(%ebp)
   10ff1:	0f 8c 48 ff ff ff    	jl     10f3f <bitmap_set_bit+0x14>
        }
    }
} 
   10ff7:	90                   	nop
   10ff8:	83 c4 10             	add    $0x10,%esp
   10ffb:	5b                   	pop    %ebx
   10ffc:	5e                   	pop    %esi
   10ffd:	5d                   	pop    %ebp
   10ffe:	c3                   	ret    

00010fff <bitmap_alloc_nbits>:



int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   10fff:	55                   	push   %ebp
   11000:	89 e5                	mov    %esp,%ebp
   11002:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   11005:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   1100c:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   11013:	e9 85 00 00 00       	jmp    1109d <bitmap_alloc_nbits+0x9e>
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   11018:	ff 75 fc             	pushl  -0x4(%ebp)
   1101b:	ff 75 08             	pushl  0x8(%ebp)
   1101e:	e8 b3 fe ff ff       	call   10ed6 <bitmap_get_bit>
   11023:	83 c4 08             	add    $0x8,%esp
   11026:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11029:	74 06                	je     11031 <bitmap_alloc_nbits+0x32>
            search_idx++;
   1102b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   1102f:	eb 6c                	jmp    1109d <bitmap_alloc_nbits+0x9e>
        }

        ok_idx = search_idx;
   11031:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11034:	89 45 f8             	mov    %eax,-0x8(%ebp)

        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   11037:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1103e:	eb 27                	jmp    11067 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   11040:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11043:	8d 50 01             	lea    0x1(%eax),%edx
   11046:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11049:	50                   	push   %eax
   1104a:	ff 75 08             	pushl  0x8(%ebp)
   1104d:	e8 84 fe ff ff       	call   10ed6 <bitmap_get_bit>
   11052:	83 c4 08             	add    $0x8,%esp
   11055:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11058:	74 09                	je     11063 <bitmap_alloc_nbits+0x64>
                ok_idx = -1;
   1105a:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   11061:	eb 16                	jmp    11079 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   11063:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11067:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1106a:	3b 45 10             	cmp    0x10(%ebp),%eax
   1106d:	7d 0a                	jge    11079 <bitmap_alloc_nbits+0x7a>
   1106f:	8b 45 08             	mov    0x8(%ebp),%eax
   11072:	8b 00                	mov    (%eax),%eax
   11074:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11077:	7c c7                	jl     11040 <bitmap_alloc_nbits+0x41>
            }
        }

        if (i >= count) {
   11079:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1107c:	3b 45 10             	cmp    0x10(%ebp),%eax
   1107f:	7c 1c                	jl     1109d <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   11081:	8b 45 0c             	mov    0xc(%ebp),%eax
   11084:	f7 d0                	not    %eax
   11086:	50                   	push   %eax
   11087:	ff 75 10             	pushl  0x10(%ebp)
   1108a:	ff 75 f8             	pushl  -0x8(%ebp)
   1108d:	ff 75 08             	pushl  0x8(%ebp)
   11090:	e8 96 fe ff ff       	call   10f2b <bitmap_set_bit>
   11095:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   11098:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1109b:	eb 13                	jmp    110b0 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   1109d:	8b 45 08             	mov    0x8(%ebp),%eax
   110a0:	8b 00                	mov    (%eax),%eax
   110a2:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   110a5:	0f 8c 6d ff ff ff    	jl     11018 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   110ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   110b0:	c9                   	leave  
   110b1:	c3                   	ret    

000110b2 <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   110b2:	55                   	push   %ebp
   110b3:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   110b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110b9:	74 3b                	je     110f6 <k_strcpy+0x44>
   110bb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110bf:	74 35                	je     110f6 <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   110c1:	eb 17                	jmp    110da <k_strcpy+0x28>
        *dest++ = *src++;
   110c3:	8b 55 0c             	mov    0xc(%ebp),%edx
   110c6:	8d 42 01             	lea    0x1(%edx),%eax
   110c9:	89 45 0c             	mov    %eax,0xc(%ebp)
   110cc:	8b 45 08             	mov    0x8(%ebp),%eax
   110cf:	8d 48 01             	lea    0x1(%eax),%ecx
   110d2:	89 4d 08             	mov    %ecx,0x8(%ebp)
   110d5:	0f b6 12             	movzbl (%edx),%edx
   110d8:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   110da:	8b 45 08             	mov    0x8(%ebp),%eax
   110dd:	0f b6 00             	movzbl (%eax),%eax
   110e0:	84 c0                	test   %al,%al
   110e2:	74 0a                	je     110ee <k_strcpy+0x3c>
   110e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   110e7:	0f b6 00             	movzbl (%eax),%eax
   110ea:	84 c0                	test   %al,%al
   110ec:	75 d5                	jne    110c3 <k_strcpy+0x11>
    }
    *dest = '\0'; 
   110ee:	8b 45 08             	mov    0x8(%ebp),%eax
   110f1:	c6 00 00             	movb   $0x0,(%eax)
   110f4:	eb 01                	jmp    110f7 <k_strcpy+0x45>
        return;
   110f6:	90                   	nop
}
   110f7:	5d                   	pop    %ebp
   110f8:	c3                   	ret    

000110f9 <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   110f9:	55                   	push   %ebp
   110fa:	89 e5                	mov    %esp,%ebp
   110fc:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   110ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11103:	74 61                	je     11166 <k_strncpy+0x6d>
   11105:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11109:	74 5b                	je     11166 <k_strncpy+0x6d>
   1110b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1110f:	74 55                	je     11166 <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   11111:	8b 45 08             	mov    0x8(%ebp),%eax
   11114:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   11117:	8b 45 0c             	mov    0xc(%ebp),%eax
   1111a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   1111d:	eb 17                	jmp    11136 <k_strncpy+0x3d>
        *d++ = *s++;
   1111f:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11122:	8d 42 01             	lea    0x1(%edx),%eax
   11125:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11128:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1112b:	8d 48 01             	lea    0x1(%eax),%ecx
   1112e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11131:	0f b6 12             	movzbl (%edx),%edx
   11134:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   11136:	8b 45 10             	mov    0x10(%ebp),%eax
   11139:	8d 50 ff             	lea    -0x1(%eax),%edx
   1113c:	89 55 10             	mov    %edx,0x10(%ebp)
   1113f:	85 c0                	test   %eax,%eax
   11141:	7e 0a                	jle    1114d <k_strncpy+0x54>
   11143:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11146:	0f b6 00             	movzbl (%eax),%eax
   11149:	84 c0                	test   %al,%al
   1114b:	75 d2                	jne    1111f <k_strncpy+0x26>
    } 
    if (size == 0) {
   1114d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11151:	75 0b                	jne    1115e <k_strncpy+0x65>
        *(d - 1) = '\0';
   11153:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11156:	83 e8 01             	sub    $0x1,%eax
   11159:	c6 00 00             	movb   $0x0,(%eax)
   1115c:	eb 09                	jmp    11167 <k_strncpy+0x6e>
    } else {
        *d = '\0';
   1115e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11161:	c6 00 00             	movb   $0x0,(%eax)
   11164:	eb 01                	jmp    11167 <k_strncpy+0x6e>
        return;
   11166:	90                   	nop
    }
}
   11167:	c9                   	leave  
   11168:	c3                   	ret    

00011169 <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   11169:	55                   	push   %ebp
   1116a:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   1116c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11170:	74 06                	je     11178 <k_strncmp+0xf>
   11172:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11176:	75 0f                	jne    11187 <k_strncmp+0x1e>
   11178:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1117d:	eb 62                	jmp    111e1 <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   1117f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   11183:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   11187:	8b 45 08             	mov    0x8(%ebp),%eax
   1118a:	0f b6 00             	movzbl (%eax),%eax
   1118d:	84 c0                	test   %al,%al
   1118f:	74 20                	je     111b1 <k_strncmp+0x48>
   11191:	8b 45 0c             	mov    0xc(%ebp),%eax
   11194:	0f b6 00             	movzbl (%eax),%eax
   11197:	84 c0                	test   %al,%al
   11199:	74 16                	je     111b1 <k_strncmp+0x48>
   1119b:	8b 45 08             	mov    0x8(%ebp),%eax
   1119e:	0f b6 10             	movzbl (%eax),%edx
   111a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   111a4:	0f b6 00             	movzbl (%eax),%eax
   111a7:	38 c2                	cmp    %al,%dl
   111a9:	75 06                	jne    111b1 <k_strncmp+0x48>
   111ab:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111af:	75 ce                	jne    1117f <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   111b1:	8b 45 08             	mov    0x8(%ebp),%eax
   111b4:	0f b6 00             	movzbl (%eax),%eax
   111b7:	84 c0                	test   %al,%al
   111b9:	74 21                	je     111dc <k_strncmp+0x73>
   111bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   111be:	0f b6 00             	movzbl (%eax),%eax
   111c1:	84 c0                	test   %al,%al
   111c3:	74 17                	je     111dc <k_strncmp+0x73>
   111c5:	8b 45 08             	mov    0x8(%ebp),%eax
   111c8:	0f b6 10             	movzbl (%eax),%edx
   111cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   111ce:	0f b6 00             	movzbl (%eax),%eax
   111d1:	38 c2                	cmp    %al,%dl
   111d3:	74 07                	je     111dc <k_strncmp+0x73>
   111d5:	b8 01 00 00 00       	mov    $0x1,%eax
   111da:	eb 05                	jmp    111e1 <k_strncmp+0x78>
   111dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111e1:	5d                   	pop    %ebp
   111e2:	c3                   	ret    

000111e3 <k_strlen>:
int k_strlen(const char *str) {
   111e3:	55                   	push   %ebp
   111e4:	89 e5                	mov    %esp,%ebp
   111e6:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   111e9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111ed:	75 07                	jne    111f6 <k_strlen+0x13>
        return 0;
   111ef:	b8 00 00 00 00       	mov    $0x0,%eax
   111f4:	eb 26                	jmp    1121c <k_strlen+0x39>
    }

    int len = 0;
   111f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   111fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11200:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   11203:	eb 04                	jmp    11209 <k_strlen+0x26>
        len++;
   11205:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   11209:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1120c:	8d 50 01             	lea    0x1(%eax),%edx
   1120f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11212:	0f b6 00             	movzbl (%eax),%eax
   11215:	84 c0                	test   %al,%al
   11217:	75 ec                	jne    11205 <k_strlen+0x22>
    }

    return len;
   11219:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1121c:	c9                   	leave  
   1121d:	c3                   	ret    

0001121e <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   1121e:	55                   	push   %ebp
   1121f:	89 e5                	mov    %esp,%ebp
   11221:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || size) {
   11224:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11228:	74 40                	je     1126a <k_memcpy+0x4c>
   1122a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1122e:	74 3a                	je     1126a <k_memcpy+0x4c>
   11230:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11234:	75 34                	jne    1126a <k_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   11236:	8b 45 0c             	mov    0xc(%ebp),%eax
   11239:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   1123c:	8b 45 08             	mov    0x8(%ebp),%eax
   1123f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   11242:	eb 17                	jmp    1125b <k_memcpy+0x3d>
        *d++ = *s++;
   11244:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11247:	8d 42 01             	lea    0x1(%edx),%eax
   1124a:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1124d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11250:	8d 48 01             	lea    0x1(%eax),%ecx
   11253:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11256:	0f b6 12             	movzbl (%edx),%edx
   11259:	88 10                	mov    %dl,(%eax)
    while(size--) {
   1125b:	8b 45 10             	mov    0x10(%ebp),%eax
   1125e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11261:	89 55 10             	mov    %edx,0x10(%ebp)
   11264:	85 c0                	test   %eax,%eax
   11266:	75 dc                	jne    11244 <k_memcpy+0x26>
   11268:	eb 01                	jmp    1126b <k_memcpy+0x4d>
        return;
   1126a:	90                   	nop
    }
}
   1126b:	c9                   	leave  
   1126c:	c3                   	ret    

0001126d <k_memset>:
void k_memset(void* dest, uint8_t v, int size) {
   1126d:	55                   	push   %ebp
   1126e:	89 e5                	mov    %esp,%ebp
   11270:	83 ec 14             	sub    $0x14,%esp
   11273:	8b 45 0c             	mov    0xc(%ebp),%eax
   11276:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   11279:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1127d:	74 2c                	je     112ab <k_memset+0x3e>
   1127f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11283:	74 26                	je     112ab <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   11285:	8b 45 08             	mov    0x8(%ebp),%eax
   11288:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   1128b:	eb 0f                	jmp    1129c <k_memset+0x2f>
        *d++ = v;
   1128d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11290:	8d 50 01             	lea    0x1(%eax),%edx
   11293:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11296:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1129a:	88 10                	mov    %dl,(%eax)
    while(size--) {
   1129c:	8b 45 10             	mov    0x10(%ebp),%eax
   1129f:	8d 50 ff             	lea    -0x1(%eax),%edx
   112a2:	89 55 10             	mov    %edx,0x10(%ebp)
   112a5:	85 c0                	test   %eax,%eax
   112a7:	75 e4                	jne    1128d <k_memset+0x20>
   112a9:	eb 01                	jmp    112ac <k_memset+0x3f>
    if(!dest || !size) return;
   112ab:	90                   	nop
    }
}
   112ac:	c9                   	leave  
   112ad:	c3                   	ret    

000112ae <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   112ae:	55                   	push   %ebp
   112af:	89 e5                	mov    %esp,%ebp
   112b1:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   112b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112b8:	74 0c                	je     112c6 <k_memcmp+0x18>
   112ba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112be:	74 06                	je     112c6 <k_memcmp+0x18>
   112c0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112c4:	74 07                	je     112cd <k_memcmp+0x1f>
        return 1;
   112c6:	b8 01 00 00 00       	mov    $0x1,%eax
   112cb:	eb 43                	jmp    11310 <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   112cd:	8b 45 08             	mov    0x8(%ebp),%eax
   112d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   112d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   112d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   112d9:	eb 23                	jmp    112fe <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   112db:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112de:	8d 50 01             	lea    0x1(%eax),%edx
   112e1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   112e4:	0f b6 08             	movzbl (%eax),%ecx
   112e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112ea:	8d 50 01             	lea    0x1(%eax),%edx
   112ed:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112f0:	0f b6 00             	movzbl (%eax),%eax
   112f3:	38 c1                	cmp    %al,%cl
   112f5:	74 07                	je     112fe <k_memcmp+0x50>
        return 1;
   112f7:	b8 01 00 00 00       	mov    $0x1,%eax
   112fc:	eb 12                	jmp    11310 <k_memcmp+0x62>
    while(size--) {
   112fe:	8b 45 10             	mov    0x10(%ebp),%eax
   11301:	8d 50 ff             	lea    -0x1(%eax),%edx
   11304:	89 55 10             	mov    %edx,0x10(%ebp)
   11307:	85 c0                	test   %eax,%eax
   11309:	75 d0                	jne    112db <k_memcmp+0x2d>
    }

    return 0;
   1130b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11310:	c9                   	leave  
   11311:	c3                   	ret    

00011312 <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   11312:	55                   	push   %ebp
   11313:	89 e5                	mov    %esp,%ebp
   11315:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11318:	8b 45 08             	mov    0x8(%ebp),%eax
   1131b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   1131e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11321:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   11324:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11328:	74 1d                	je     11347 <k_itoa+0x35>
   1132a:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1132e:	74 17                	je     11347 <k_itoa+0x35>
   11330:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11334:	74 11                	je     11347 <k_itoa+0x35>
   11336:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1133a:	74 0b                	je     11347 <k_itoa+0x35>
        *p = '\0';
   1133c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1133f:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11342:	e9 a0 00 00 00       	jmp    113e7 <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   11347:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1134b:	79 12                	jns    1135f <k_itoa+0x4d>
   1134d:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11351:	75 0c                	jne    1135f <k_itoa+0x4d>
        *p++ = '-';
   11353:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11356:	8d 50 01             	lea    0x1(%eax),%edx
   11359:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1135c:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   1135f:	8b 0d 00 30 01 00    	mov    0x13000,%ecx
   11365:	8b 45 0c             	mov    0xc(%ebp),%eax
   11368:	99                   	cltd   
   11369:	f7 7d 10             	idivl  0x10(%ebp)
   1136c:	89 d0                	mov    %edx,%eax
   1136e:	83 c0 0f             	add    $0xf,%eax
   11371:	01 c8                	add    %ecx,%eax
   11373:	0f b6 00             	movzbl (%eax),%eax
   11376:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11379:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1137c:	8d 50 01             	lea    0x1(%eax),%edx
   1137f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11382:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   11386:	88 10                	mov    %dl,(%eax)
        num /= base;
   11388:	8b 45 0c             	mov    0xc(%ebp),%eax
   1138b:	99                   	cltd   
   1138c:	f7 7d 10             	idivl  0x10(%ebp)
   1138f:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   11392:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11396:	75 c7                	jne    1135f <k_itoa+0x4d>

    *p-- = '\0';
   11398:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1139b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1139e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   113a1:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   113a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   113a8:	7f 08                	jg     113b2 <k_itoa+0xa0>
   113aa:	8b 45 08             	mov    0x8(%ebp),%eax
   113ad:	83 c0 01             	add    $0x1,%eax
   113b0:	eb 03                	jmp    113b5 <k_itoa+0xa3>
   113b2:	8b 45 08             	mov    0x8(%ebp),%eax
   113b5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   113b8:	eb 25                	jmp    113df <k_itoa+0xcd>
        char ch = *start;
   113ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113bd:	0f b6 00             	movzbl (%eax),%eax
   113c0:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   113c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113c6:	0f b6 10             	movzbl (%eax),%edx
   113c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113cc:	88 10                	mov    %dl,(%eax)
        *p = ch;
   113ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113d1:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   113d5:	88 10                	mov    %dl,(%eax)

        p--;
   113d7:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   113db:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   113df:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113e2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   113e5:	72 d3                	jb     113ba <k_itoa+0xa8>
    }
}
   113e7:	c9                   	leave  
   113e8:	c3                   	ret    

000113e9 <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   113e9:	55                   	push   %ebp
   113ea:	89 e5                	mov    %esp,%ebp
   113ec:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   113ef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   113f6:	8b 45 08             	mov    0x8(%ebp),%eax
   113f9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   113fc:	e9 19 01 00 00       	jmp    1151a <k_vsprint+0x131>
        switch (state) {
   11401:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11404:	85 c0                	test   %eax,%eax
   11406:	74 0a                	je     11412 <k_vsprint+0x29>
   11408:	83 f8 01             	cmp    $0x1,%eax
   1140b:	74 2b                	je     11438 <k_vsprint+0x4f>
   1140d:	e9 07 01 00 00       	jmp    11519 <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   11412:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11416:	75 0c                	jne    11424 <k_vsprint+0x3b>
                state = READ_FMT;
   11418:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1141f:	e9 f6 00 00 00       	jmp    1151a <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   11424:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11427:	8d 50 01             	lea    0x1(%eax),%edx
   1142a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1142d:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11431:	88 10                	mov    %dl,(%eax)
            }
            break;
   11433:	e9 e2 00 00 00       	jmp    1151a <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   11438:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1143c:	75 31                	jne    1146f <k_vsprint+0x86>
                int num  = va_arg(args, int);
   1143e:	8b 45 10             	mov    0x10(%ebp),%eax
   11441:	8d 50 04             	lea    0x4(%eax),%edx
   11444:	89 55 10             	mov    %edx,0x10(%ebp)
   11447:	8b 00                	mov    (%eax),%eax
   11449:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   1144c:	6a 0a                	push   $0xa
   1144e:	ff 75 e4             	pushl  -0x1c(%ebp)
   11451:	ff 75 f8             	pushl  -0x8(%ebp)
   11454:	e8 b9 fe ff ff       	call   11312 <k_itoa>
   11459:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   1145c:	ff 75 f8             	pushl  -0x8(%ebp)
   1145f:	e8 7f fd ff ff       	call   111e3 <k_strlen>
   11464:	83 c4 04             	add    $0x4,%esp
   11467:	01 45 f8             	add    %eax,-0x8(%ebp)
   1146a:	e9 a1 00 00 00       	jmp    11510 <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   1146f:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11473:	75 2e                	jne    114a3 <k_vsprint+0xba>
                int num  = va_arg(args, int);
   11475:	8b 45 10             	mov    0x10(%ebp),%eax
   11478:	8d 50 04             	lea    0x4(%eax),%edx
   1147b:	89 55 10             	mov    %edx,0x10(%ebp)
   1147e:	8b 00                	mov    (%eax),%eax
   11480:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   11483:	6a 10                	push   $0x10
   11485:	ff 75 e8             	pushl  -0x18(%ebp)
   11488:	ff 75 f8             	pushl  -0x8(%ebp)
   1148b:	e8 82 fe ff ff       	call   11312 <k_itoa>
   11490:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   11493:	ff 75 f8             	pushl  -0x8(%ebp)
   11496:	e8 48 fd ff ff       	call   111e3 <k_strlen>
   1149b:	83 c4 04             	add    $0x4,%esp
   1149e:	01 45 f8             	add    %eax,-0x8(%ebp)
   114a1:	eb 6d                	jmp    11510 <k_vsprint+0x127>

            }else if (ch == 'c') {
   114a3:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   114a7:	75 1f                	jne    114c8 <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   114a9:	8b 45 10             	mov    0x10(%ebp),%eax
   114ac:	8d 50 04             	lea    0x4(%eax),%edx
   114af:	89 55 10             	mov    %edx,0x10(%ebp)
   114b2:	8b 00                	mov    (%eax),%eax
   114b4:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   114b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114ba:	8d 50 01             	lea    0x1(%eax),%edx
   114bd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   114c0:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   114c4:	88 10                	mov    %dl,(%eax)
   114c6:	eb 48                	jmp    11510 <k_vsprint+0x127>

            }else if (ch == 's') {
   114c8:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   114cc:	75 42                	jne    11510 <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   114ce:	8b 45 10             	mov    0x10(%ebp),%eax
   114d1:	8d 50 04             	lea    0x4(%eax),%edx
   114d4:	89 55 10             	mov    %edx,0x10(%ebp)
   114d7:	8b 00                	mov    (%eax),%eax
   114d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   114dc:	ff 75 f4             	pushl  -0xc(%ebp)
   114df:	e8 ff fc ff ff       	call   111e3 <k_strlen>
   114e4:	83 c4 04             	add    $0x4,%esp
   114e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   114ea:	eb 17                	jmp    11503 <k_vsprint+0x11a>
                    *curr++ = *str++;
   114ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114ef:	8d 42 01             	lea    0x1(%edx),%eax
   114f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
   114f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114f8:	8d 48 01             	lea    0x1(%eax),%ecx
   114fb:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   114fe:	0f b6 12             	movzbl (%edx),%edx
   11501:	88 10                	mov    %dl,(%eax)
                while(len--) {
   11503:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11506:	8d 50 ff             	lea    -0x1(%eax),%edx
   11509:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1150c:	85 c0                	test   %eax,%eax
   1150e:	75 dc                	jne    114ec <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   11510:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11517:	eb 01                	jmp    1151a <k_vsprint+0x131>
        
        default:
            break;
   11519:	90                   	nop
    while((ch = *fmt++)) {
   1151a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1151d:	8d 50 01             	lea    0x1(%eax),%edx
   11520:	89 55 0c             	mov    %edx,0xc(%ebp)
   11523:	0f b6 00             	movzbl (%eax),%eax
   11526:	88 45 ef             	mov    %al,-0x11(%ebp)
   11529:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1152d:	0f 85 ce fe ff ff    	jne    11401 <k_vsprint+0x18>
        }
    }
   11533:	90                   	nop
   11534:	c9                   	leave  
   11535:	c3                   	ret    

00011536 <list_is_empty>:
static inline int list_is_empty (list_t* list) {
   11536:	55                   	push   %ebp
   11537:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   11539:	8b 45 08             	mov    0x8(%ebp),%eax
   1153c:	8b 40 08             	mov    0x8(%eax),%eax
   1153f:	85 c0                	test   %eax,%eax
   11541:	0f 94 c0             	sete   %al
   11544:	0f b6 c0             	movzbl %al,%eax
}
   11547:	5d                   	pop    %ebp
   11548:	c3                   	ret    

00011549 <list_init>:
#include <list.h>

void list_init(list_t* list) {
   11549:	55                   	push   %ebp
   1154a:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t*)0;
   1154c:	8b 45 08             	mov    0x8(%ebp),%eax
   1154f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11556:	8b 45 08             	mov    0x8(%ebp),%eax
   11559:	8b 50 04             	mov    0x4(%eax),%edx
   1155c:	8b 45 08             	mov    0x8(%ebp),%eax
   1155f:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11561:	8b 45 08             	mov    0x8(%ebp),%eax
   11564:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1156b:	90                   	nop
   1156c:	5d                   	pop    %ebp
   1156d:	c3                   	ret    

0001156e <list_insert_first>:

void list_insert_first (list_t* list, list_node_t* node) {
   1156e:	55                   	push   %ebp
   1156f:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   11571:	8b 45 08             	mov    0x8(%ebp),%eax
   11574:	8b 10                	mov    (%eax),%edx
   11576:	8b 45 0c             	mov    0xc(%ebp),%eax
   11579:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   1157c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1157f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if(list_is_empty(list)) {
   11585:	ff 75 08             	pushl  0x8(%ebp)
   11588:	e8 a9 ff ff ff       	call   11536 <list_is_empty>
   1158d:	83 c4 04             	add    $0x4,%esp
   11590:	85 c0                	test   %eax,%eax
   11592:	74 15                	je     115a9 <list_insert_first+0x3b>
        list->last = list->first = node;
   11594:	8b 45 08             	mov    0x8(%ebp),%eax
   11597:	8b 55 0c             	mov    0xc(%ebp),%edx
   1159a:	89 10                	mov    %edx,(%eax)
   1159c:	8b 45 08             	mov    0x8(%ebp),%eax
   1159f:	8b 10                	mov    (%eax),%edx
   115a1:	8b 45 08             	mov    0x8(%ebp),%eax
   115a4:	89 50 04             	mov    %edx,0x4(%eax)
   115a7:	eb 12                	jmp    115bb <list_insert_first+0x4d>
    } else {
        list->first->pre = node;
   115a9:	8b 45 08             	mov    0x8(%ebp),%eax
   115ac:	8b 00                	mov    (%eax),%eax
   115ae:	8b 55 0c             	mov    0xc(%ebp),%edx
   115b1:	89 10                	mov    %edx,(%eax)
        list->first = node;
   115b3:	8b 45 08             	mov    0x8(%ebp),%eax
   115b6:	8b 55 0c             	mov    0xc(%ebp),%edx
   115b9:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   115bb:	8b 45 08             	mov    0x8(%ebp),%eax
   115be:	8b 40 08             	mov    0x8(%eax),%eax
   115c1:	8d 50 01             	lea    0x1(%eax),%edx
   115c4:	8b 45 08             	mov    0x8(%ebp),%eax
   115c7:	89 50 08             	mov    %edx,0x8(%eax)
}
   115ca:	90                   	nop
   115cb:	c9                   	leave  
   115cc:	c3                   	ret    

000115cd <list_insert_last>:

void list_insert_last (list_t* list, list_node_t* node) {
   115cd:	55                   	push   %ebp
   115ce:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   115d0:	8b 45 08             	mov    0x8(%ebp),%eax
   115d3:	8b 50 04             	mov    0x4(%eax),%edx
   115d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   115d9:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   115db:	8b 45 0c             	mov    0xc(%ebp),%eax
   115de:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   115e5:	ff 75 08             	pushl  0x8(%ebp)
   115e8:	e8 49 ff ff ff       	call   11536 <list_is_empty>
   115ed:	83 c4 04             	add    $0x4,%esp
   115f0:	85 c0                	test   %eax,%eax
   115f2:	74 16                	je     1160a <list_insert_last+0x3d>
        list->first = list->last = node;
   115f4:	8b 45 08             	mov    0x8(%ebp),%eax
   115f7:	8b 55 0c             	mov    0xc(%ebp),%edx
   115fa:	89 50 04             	mov    %edx,0x4(%eax)
   115fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11600:	8b 50 04             	mov    0x4(%eax),%edx
   11603:	8b 45 08             	mov    0x8(%ebp),%eax
   11606:	89 10                	mov    %edx,(%eax)
   11608:	eb 15                	jmp    1161f <list_insert_last+0x52>
    } else {
        list->last->next = node;
   1160a:	8b 45 08             	mov    0x8(%ebp),%eax
   1160d:	8b 40 04             	mov    0x4(%eax),%eax
   11610:	8b 55 0c             	mov    0xc(%ebp),%edx
   11613:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11616:	8b 45 08             	mov    0x8(%ebp),%eax
   11619:	8b 55 0c             	mov    0xc(%ebp),%edx
   1161c:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   1161f:	8b 45 08             	mov    0x8(%ebp),%eax
   11622:	8b 40 08             	mov    0x8(%eax),%eax
   11625:	8d 50 01             	lea    0x1(%eax),%edx
   11628:	8b 45 08             	mov    0x8(%ebp),%eax
   1162b:	89 50 08             	mov    %edx,0x8(%eax)
}
   1162e:	90                   	nop
   1162f:	c9                   	leave  
   11630:	c3                   	ret    

00011631 <list_delete_first>:


list_node_t* list_delete_first (list_t* list) {
   11631:	55                   	push   %ebp
   11632:	89 e5                	mov    %esp,%ebp
   11634:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list)) {
   11637:	ff 75 08             	pushl  0x8(%ebp)
   1163a:	e8 f7 fe ff ff       	call   11536 <list_is_empty>
   1163f:	83 c4 04             	add    $0x4,%esp
   11642:	85 c0                	test   %eax,%eax
   11644:	74 07                	je     1164d <list_delete_first+0x1c>
        return (list_node_t*)0;
   11646:	b8 00 00 00 00       	mov    $0x0,%eax
   1164b:	eb 5b                	jmp    116a8 <list_delete_first+0x77>
    }

    list_node_t* remove_node = list->first;
   1164d:	8b 45 08             	mov    0x8(%ebp),%eax
   11650:	8b 00                	mov    (%eax),%eax
   11652:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   11655:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11658:	8b 50 04             	mov    0x4(%eax),%edx
   1165b:	8b 45 08             	mov    0x8(%ebp),%eax
   1165e:	89 10                	mov    %edx,(%eax)

    if( list->first == (list_node_t*)0 ) {
   11660:	8b 45 08             	mov    0x8(%ebp),%eax
   11663:	8b 00                	mov    (%eax),%eax
   11665:	85 c0                	test   %eax,%eax
   11667:	75 0c                	jne    11675 <list_delete_first+0x44>
        list->last = (list_node_t*)0;
   11669:	8b 45 08             	mov    0x8(%ebp),%eax
   1166c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11673:	eb 0c                	jmp    11681 <list_delete_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t*)0;
   11675:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11678:	8b 40 04             	mov    0x4(%eax),%eax
   1167b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        //list->first->pre = (list_node_t*)0;
    }

    remove_node->pre = remove_node->next = (list_node_t*)0;
   11681:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11684:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1168b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1168e:	8b 50 04             	mov    0x4(%eax),%edx
   11691:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11694:	89 10                	mov    %edx,(%eax)
    list->count--;
   11696:	8b 45 08             	mov    0x8(%ebp),%eax
   11699:	8b 40 08             	mov    0x8(%eax),%eax
   1169c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1169f:	8b 45 08             	mov    0x8(%ebp),%eax
   116a2:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   116a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116a8:	c9                   	leave  
   116a9:	c3                   	ret    

000116aa <list_delete>:

list_node_t* list_delete (list_t* list, list_node_t* node) {
   116aa:	55                   	push   %ebp
   116ab:	89 e5                	mov    %esp,%ebp
    if(node == list->first) {
   116ad:	8b 45 08             	mov    0x8(%ebp),%eax
   116b0:	8b 00                	mov    (%eax),%eax
   116b2:	39 45 0c             	cmp    %eax,0xc(%ebp)
   116b5:	75 0b                	jne    116c2 <list_delete+0x18>
        list->first = node->next;
   116b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   116ba:	8b 50 04             	mov    0x4(%eax),%edx
   116bd:	8b 45 08             	mov    0x8(%ebp),%eax
   116c0:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last) {
   116c2:	8b 45 08             	mov    0x8(%ebp),%eax
   116c5:	8b 40 04             	mov    0x4(%eax),%eax
   116c8:	39 45 0c             	cmp    %eax,0xc(%ebp)
   116cb:	75 0b                	jne    116d8 <list_delete+0x2e>
        list->last = node->pre;
   116cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   116d0:	8b 10                	mov    (%eax),%edx
   116d2:	8b 45 08             	mov    0x8(%ebp),%eax
   116d5:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if(node->pre) {
   116d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   116db:	8b 00                	mov    (%eax),%eax
   116dd:	85 c0                	test   %eax,%eax
   116df:	74 0e                	je     116ef <list_delete+0x45>
        node->pre->next = node->next;
   116e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   116e4:	8b 00                	mov    (%eax),%eax
   116e6:	8b 55 0c             	mov    0xc(%ebp),%edx
   116e9:	8b 52 04             	mov    0x4(%edx),%edx
   116ec:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) {
   116ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   116f2:	8b 40 04             	mov    0x4(%eax),%eax
   116f5:	85 c0                	test   %eax,%eax
   116f7:	74 0d                	je     11706 <list_delete+0x5c>
        node->next->pre = node->pre;
   116f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   116fc:	8b 40 04             	mov    0x4(%eax),%eax
   116ff:	8b 55 0c             	mov    0xc(%ebp),%edx
   11702:	8b 12                	mov    (%edx),%edx
   11704:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   11706:	8b 45 0c             	mov    0xc(%ebp),%eax
   11709:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11710:	8b 45 0c             	mov    0xc(%ebp),%eax
   11713:	8b 50 04             	mov    0x4(%eax),%edx
   11716:	8b 45 0c             	mov    0xc(%ebp),%eax
   11719:	89 10                	mov    %edx,(%eax)

    list->count--;
   1171b:	8b 45 08             	mov    0x8(%ebp),%eax
   1171e:	8b 40 08             	mov    0x8(%eax),%eax
   11721:	8d 50 ff             	lea    -0x1(%eax),%edx
   11724:	8b 45 08             	mov    0x8(%ebp),%eax
   11727:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   1172a:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   1172d:	5d                   	pop    %ebp
   1172e:	c3                   	ret    

0001172f <inb>:
static inline uint8_t inb(uint16_t  port) {
   1172f:	55                   	push   %ebp
   11730:	89 e5                	mov    %esp,%ebp
   11732:	83 ec 14             	sub    $0x14,%esp
   11735:	8b 45 08             	mov    0x8(%ebp),%eax
   11738:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   1173c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11740:	89 c2                	mov    %eax,%edx
   11742:	ec                   	in     (%dx),%al
   11743:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   11746:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1174a:	c9                   	leave  
   1174b:	c3                   	ret    

0001174c <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1174c:	55                   	push   %ebp
   1174d:	89 e5                	mov    %esp,%ebp
   1174f:	83 ec 08             	sub    $0x8,%esp
   11752:	8b 55 08             	mov    0x8(%ebp),%edx
   11755:	8b 45 0c             	mov    0xc(%ebp),%eax
   11758:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1175c:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1175f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11763:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11767:	ee                   	out    %al,(%dx)
}
   11768:	90                   	nop
   11769:	c9                   	leave  
   1176a:	c3                   	ret    

0001176b <log_init>:

#define COM1_PORT       0x3f8

static mutex_t mutex;

void log_init() {
   1176b:	55                   	push   %ebp
   1176c:	89 e5                	mov    %esp,%ebp
   1176e:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   11771:	83 ec 0c             	sub    $0xc,%esp
   11774:	68 20 4c 01 00       	push   $0x14c20
   11779:	e8 24 07 00 00       	call   11ea2 <mutex_init>
   1177e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   11781:	83 ec 08             	sub    $0x8,%esp
   11784:	6a 00                	push   $0x0
   11786:	68 f9 03 00 00       	push   $0x3f9
   1178b:	e8 bc ff ff ff       	call   1174c <outb>
   11790:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   11793:	83 ec 08             	sub    $0x8,%esp
   11796:	68 80 00 00 00       	push   $0x80
   1179b:	68 fb 03 00 00       	push   $0x3fb
   117a0:	e8 a7 ff ff ff       	call   1174c <outb>
   117a5:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   117a8:	83 ec 08             	sub    $0x8,%esp
   117ab:	6a 03                	push   $0x3
   117ad:	68 f8 03 00 00       	push   $0x3f8
   117b2:	e8 95 ff ff ff       	call   1174c <outb>
   117b7:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   117ba:	83 ec 08             	sub    $0x8,%esp
   117bd:	6a 00                	push   $0x0
   117bf:	68 f9 03 00 00       	push   $0x3f9
   117c4:	e8 83 ff ff ff       	call   1174c <outb>
   117c9:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   117cc:	83 ec 08             	sub    $0x8,%esp
   117cf:	6a 03                	push   $0x3
   117d1:	68 fb 03 00 00       	push   $0x3fb
   117d6:	e8 71 ff ff ff       	call   1174c <outb>
   117db:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   117de:	83 ec 08             	sub    $0x8,%esp
   117e1:	68 c7 00 00 00       	push   $0xc7
   117e6:	68 fa 03 00 00       	push   $0x3fa
   117eb:	e8 5c ff ff ff       	call   1174c <outb>
   117f0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   117f3:	83 ec 08             	sub    $0x8,%esp
   117f6:	6a 0f                	push   $0xf
   117f8:	68 fc 03 00 00       	push   $0x3fc
   117fd:	e8 4a ff ff ff       	call   1174c <outb>
   11802:	83 c4 10             	add    $0x10,%esp
}
   11805:	90                   	nop
   11806:	c9                   	leave  
   11807:	c3                   	ret    

00011808 <klog>:


void klog(const char* fmt, ...) {
   11808:	55                   	push   %ebp
   11809:	89 e5                	mov    %esp,%ebp
   1180b:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   11811:	83 ec 04             	sub    $0x4,%esp
   11814:	68 80 00 00 00       	push   $0x80
   11819:	6a 00                	push   $0x0
   1181b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11821:	50                   	push   %eax
   11822:	e8 46 fa ff ff       	call   1126d <k_memset>
   11827:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   1182a:	8d 45 0c             	lea    0xc(%ebp),%eax
   1182d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    k_vsprint(buf, fmt, args);
   11833:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11839:	83 ec 04             	sub    $0x4,%esp
   1183c:	50                   	push   %eax
   1183d:	ff 75 08             	pushl  0x8(%ebp)
   11840:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11846:	50                   	push   %eax
   11847:	e8 9d fb ff ff       	call   113e9 <k_vsprint>
   1184c:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   1184f:	83 ec 0c             	sub    $0xc,%esp
   11852:	68 20 4c 01 00       	push   $0x14c20
   11857:	e8 74 06 00 00       	call   11ed0 <mutex_lock>
   1185c:	83 c4 10             	add    $0x10,%esp
    // irq_state_t state = irq_enter_proection();

    const char *p = buf;
   1185f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11865:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11868:	eb 3b                	jmp    118a5 <klog+0x9d>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1186a:	90                   	nop
   1186b:	83 ec 0c             	sub    $0xc,%esp
   1186e:	68 fd 03 00 00       	push   $0x3fd
   11873:	e8 b7 fe ff ff       	call   1172f <inb>
   11878:	83 c4 10             	add    $0x10,%esp
   1187b:	0f b6 c0             	movzbl %al,%eax
   1187e:	83 e0 40             	and    $0x40,%eax
   11881:	85 c0                	test   %eax,%eax
   11883:	74 e6                	je     1186b <klog+0x63>
        outb(COM1_PORT, *p++);
   11885:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11888:	8d 50 01             	lea    0x1(%eax),%edx
   1188b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1188e:	0f b6 00             	movzbl (%eax),%eax
   11891:	0f b6 c0             	movzbl %al,%eax
   11894:	83 ec 08             	sub    $0x8,%esp
   11897:	50                   	push   %eax
   11898:	68 f8 03 00 00       	push   $0x3f8
   1189d:	e8 aa fe ff ff       	call   1174c <outb>
   118a2:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   118a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118a8:	0f b6 00             	movzbl (%eax),%eax
   118ab:	84 c0                	test   %al,%al
   118ad:	75 bb                	jne    1186a <klog+0x62>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   118af:	83 ec 08             	sub    $0x8,%esp
   118b2:	6a 0d                	push   $0xd
   118b4:	68 f8 03 00 00       	push   $0x3f8
   118b9:	e8 8e fe ff ff       	call   1174c <outb>
   118be:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   118c1:	83 ec 08             	sub    $0x8,%esp
   118c4:	6a 0a                	push   $0xa
   118c6:	68 f8 03 00 00       	push   $0x3f8
   118cb:	e8 7c fe ff ff       	call   1174c <outb>
   118d0:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   118d3:	83 ec 0c             	sub    $0xc,%esp
   118d6:	68 20 4c 01 00       	push   $0x14c20
   118db:	e8 84 06 00 00       	call   11f64 <mutex_unlock>
   118e0:	83 c4 10             	add    $0x10,%esp
    // irq_leave_proection(state);

}
   118e3:	90                   	nop
   118e4:	c9                   	leave  
   118e5:	c3                   	ret    

000118e6 <down2>:



void memory_init (boot_info_t* boot_info);

static inline uint32_t down2(uint32_t size, uint32_t bound) {
   118e6:	55                   	push   %ebp
   118e7:	89 e5                	mov    %esp,%ebp
    return size & ~ (bound - 1);
   118e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   118ec:	f7 d8                	neg    %eax
   118ee:	23 45 08             	and    0x8(%ebp),%eax
}
   118f1:	5d                   	pop    %ebp
   118f2:	c3                   	ret    

000118f3 <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   118f3:	55                   	push   %ebp
   118f4:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~ (bound - 1);
   118f6:	8b 55 08             	mov    0x8(%ebp),%edx
   118f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   118fc:	01 d0                	add    %edx,%eax
   118fe:	8d 50 ff             	lea    -0x1(%eax),%edx
   11901:	8b 45 0c             	mov    0xc(%ebp),%eax
   11904:	f7 d8                	neg    %eax
   11906:	21 d0                	and    %edx,%eax
}
   11908:	5d                   	pop    %ebp
   11909:	c3                   	ret    

0001190a <write_cr3>:
static inline void write_cr3(uint32_t v) {
   1190a:	55                   	push   %ebp
   1190b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1190d:	8b 45 08             	mov    0x8(%ebp),%eax
   11910:	0f 22 d8             	mov    %eax,%cr3
}
   11913:	90                   	nop
   11914:	5d                   	pop    %ebp
   11915:	c3                   	ret    

00011916 <mmu_set_page_dir>:
    };
}pte_t;
#pragma pack()


static inline void mmu_set_page_dir(uint32_t paddr) {
   11916:	55                   	push   %ebp
   11917:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11919:	ff 75 08             	pushl  0x8(%ebp)
   1191c:	e8 e9 ff ff ff       	call   1190a <write_cr3>
   11921:	83 c4 04             	add    $0x4,%esp
}
   11924:	90                   	nop
   11925:	c9                   	leave  
   11926:	c3                   	ret    

00011927 <pde_index>:

static inline uint32_t pde_index (uint32_t vaddr) {
   11927:	55                   	push   %ebp
   11928:	89 e5                	mov    %esp,%ebp
   1192a:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22);      // 只取高10位
   1192d:	8b 45 08             	mov    0x8(%ebp),%eax
   11930:	c1 e8 16             	shr    $0x16,%eax
   11933:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   11936:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11939:	c9                   	leave  
   1193a:	c3                   	ret    

0001193b <pde_paddr>:


static inline uint32_t pde_paddr (pde_t * pde) {
   1193b:	55                   	push   %ebp
   1193c:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   1193e:	8b 45 08             	mov    0x8(%ebp),%eax
   11941:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   11945:	c0 ea 04             	shr    $0x4,%dl
   11948:	0f b6 d2             	movzbl %dl,%edx
   1194b:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1194f:	c1 e1 04             	shl    $0x4,%ecx
   11952:	09 ca                	or     %ecx,%edx
   11954:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   11958:	c1 e0 0c             	shl    $0xc,%eax
   1195b:	09 d0                	or     %edx,%eax
   1195d:	c1 e0 0c             	shl    $0xc,%eax
}
   11960:	5d                   	pop    %ebp
   11961:	c3                   	ret    

00011962 <pte_index>:


static inline int pte_index (uint32_t vaddr) {
   11962:	55                   	push   %ebp
   11963:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   11965:	8b 45 08             	mov    0x8(%ebp),%eax
   11968:	c1 e8 0c             	shr    $0xc,%eax
   1196b:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   11970:	5d                   	pop    %ebp
   11971:	c3                   	ret    

00011972 <addr_alloc_init>:
static pde_t kernel_page_dir[PDE_CNT] __attribute__( (aligned(MEM_PAGE_SIZE)) );


static void 
addr_alloc_init(addr_alloc_t * alloc, uint8_t* bits, uint32_t start, 
uint32_t size, uint32_t page_size) {
   11972:	55                   	push   %ebp
   11973:	89 e5                	mov    %esp,%ebp
   11975:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   11978:	8b 45 08             	mov    0x8(%ebp),%eax
   1197b:	83 ec 0c             	sub    $0xc,%esp
   1197e:	50                   	push   %eax
   1197f:	e8 1e 05 00 00       	call   11ea2 <mutex_init>
   11984:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   11987:	8b 45 08             	mov    0x8(%ebp),%eax
   1198a:	8b 55 10             	mov    0x10(%ebp),%edx
   1198d:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   11990:	8b 45 08             	mov    0x8(%ebp),%eax
   11993:	8b 55 14             	mov    0x14(%ebp),%edx
   11996:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   11999:	8b 45 08             	mov    0x8(%ebp),%eax
   1199c:	8b 55 18             	mov    0x18(%ebp),%edx
   1199f:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   119a2:	8b 45 08             	mov    0x8(%ebp),%eax
   119a5:	8b 40 20             	mov    0x20(%eax),%eax
   119a8:	ba 00 00 00 00       	mov    $0x0,%edx
   119ad:	f7 75 18             	divl   0x18(%ebp)
   119b0:	89 c2                	mov    %eax,%edx
   119b2:	8b 45 08             	mov    0x8(%ebp),%eax
   119b5:	83 c0 14             	add    $0x14,%eax
   119b8:	6a 00                	push   $0x0
   119ba:	52                   	push   %edx
   119bb:	ff 75 0c             	pushl  0xc(%ebp)
   119be:	50                   	push   %eax
   119bf:	e8 bf f4 ff ff       	call   10e83 <bitmap_init>
   119c4:	83 c4 10             	add    $0x10,%esp
}
   119c7:	90                   	nop
   119c8:	c9                   	leave  
   119c9:	c3                   	ret    

000119ca <addr_alloc_page>:


static uint32_t 
addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   119ca:	55                   	push   %ebp
   119cb:	89 e5                	mov    %esp,%ebp
   119cd:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   119d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   119d7:	8b 45 08             	mov    0x8(%ebp),%eax
   119da:	83 ec 0c             	sub    $0xc,%esp
   119dd:	50                   	push   %eax
   119de:	e8 ed 04 00 00       	call   11ed0 <mutex_lock>
   119e3:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   119e6:	8b 45 08             	mov    0x8(%ebp),%eax
   119e9:	83 c0 14             	add    $0x14,%eax
   119ec:	83 ec 04             	sub    $0x4,%esp
   119ef:	ff 75 0c             	pushl  0xc(%ebp)
   119f2:	6a 00                	push   $0x0
   119f4:	50                   	push   %eax
   119f5:	e8 05 f6 ff ff       	call   10fff <bitmap_alloc_nbits>
   119fa:	83 c4 10             	add    $0x10,%esp
   119fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   11a00:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a04:	78 17                	js     11a1d <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   11a06:	8b 45 08             	mov    0x8(%ebp),%eax
   11a09:	8b 50 1c             	mov    0x1c(%eax),%edx
   11a0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0f:	8b 48 24             	mov    0x24(%eax),%ecx
   11a12:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a15:	0f af c1             	imul   %ecx,%eax
   11a18:	01 d0                	add    %edx,%eax
   11a1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   11a1d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a20:	83 ec 0c             	sub    $0xc,%esp
   11a23:	50                   	push   %eax
   11a24:	e8 3b 05 00 00       	call   11f64 <mutex_unlock>
   11a29:	83 c4 10             	add    $0x10,%esp
    return addr;
   11a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11a2f:	c9                   	leave  
   11a30:	c3                   	ret    

00011a31 <addr_free_page>:


static uint32_t
addr_free_page(addr_alloc_t * alloc, uint32_t addr, int page_count) {
   11a31:	55                   	push   %ebp
   11a32:	89 e5                	mov    %esp,%ebp
   11a34:	53                   	push   %ebx
   11a35:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   11a38:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3b:	83 ec 0c             	sub    $0xc,%esp
   11a3e:	50                   	push   %eax
   11a3f:	e8 8c 04 00 00       	call   11ed0 <mutex_lock>
   11a44:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   11a47:	8b 45 08             	mov    0x8(%ebp),%eax
   11a4a:	8b 40 1c             	mov    0x1c(%eax),%eax
   11a4d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a50:	89 d1                	mov    %edx,%ecx
   11a52:	29 c1                	sub    %eax,%ecx
   11a54:	8b 45 08             	mov    0x8(%ebp),%eax
   11a57:	8b 58 24             	mov    0x24(%eax),%ebx
   11a5a:	89 c8                	mov    %ecx,%eax
   11a5c:	ba 00 00 00 00       	mov    $0x0,%edx
   11a61:	f7 f3                	div    %ebx
   11a63:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   11a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a69:	8b 55 08             	mov    0x8(%ebp),%edx
   11a6c:	83 c2 14             	add    $0x14,%edx
   11a6f:	6a 00                	push   $0x0
   11a71:	ff 75 10             	pushl  0x10(%ebp)
   11a74:	50                   	push   %eax
   11a75:	52                   	push   %edx
   11a76:	e8 b0 f4 ff ff       	call   10f2b <bitmap_set_bit>
   11a7b:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   11a7e:	8b 45 08             	mov    0x8(%ebp),%eax
   11a81:	83 ec 0c             	sub    $0xc,%esp
   11a84:	50                   	push   %eax
   11a85:	e8 da 04 00 00       	call   11f64 <mutex_unlock>
   11a8a:	83 c4 10             	add    $0x10,%esp
}
   11a8d:	90                   	nop
   11a8e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11a91:	c9                   	leave  
   11a92:	c3                   	ret    

00011a93 <some_test>:


void some_test() {
   11a93:	55                   	push   %ebp
   11a94:	89 e5                	mov    %esp,%ebp
   11a96:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t addr_alloc;
    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64*4096, 4096);
   11a99:	83 ec 0c             	sub    $0xc,%esp
   11a9c:	68 00 10 00 00       	push   $0x1000
   11aa1:	68 00 00 04 00       	push   $0x40000
   11aa6:	68 00 10 00 00       	push   $0x1000
   11aab:	8d 45 b8             	lea    -0x48(%ebp),%eax
   11aae:	50                   	push   %eax
   11aaf:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11ab2:	50                   	push   %eax
   11ab3:	e8 ba fe ff ff       	call   11972 <addr_alloc_init>
   11ab8:	83 c4 20             	add    $0x20,%esp
    for(int i=0; i<32; i++) {
   11abb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11ac2:	eb 2b                	jmp    11aef <some_test+0x5c>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   11ac4:	83 ec 08             	sub    $0x8,%esp
   11ac7:	6a 02                	push   $0x2
   11ac9:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11acc:	50                   	push   %eax
   11acd:	e8 f8 fe ff ff       	call   119ca <addr_alloc_page>
   11ad2:	83 c4 10             	add    $0x10,%esp
   11ad5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("alloc addr: 0x%x", addr);
   11ad8:	83 ec 08             	sub    $0x8,%esp
   11adb:	ff 75 e8             	pushl  -0x18(%ebp)
   11ade:	68 7c 2a 01 00       	push   $0x12a7c
   11ae3:	e8 20 fd ff ff       	call   11808 <klog>
   11ae8:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11aeb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11aef:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   11af3:	7e cf                	jle    11ac4 <some_test+0x31>
    }
    uint32_t addr = 0x1000;
   11af5:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for(int i=0; i<32; i++) {
   11afc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11b03:	eb 32                	jmp    11b37 <some_test+0xa4>
        addr_free_page(&addr_alloc, addr, 2);
   11b05:	83 ec 04             	sub    $0x4,%esp
   11b08:	6a 02                	push   $0x2
   11b0a:	ff 75 f0             	pushl  -0x10(%ebp)
   11b0d:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11b10:	50                   	push   %eax
   11b11:	e8 1b ff ff ff       	call   11a31 <addr_free_page>
   11b16:	83 c4 10             	add    $0x10,%esp
        addr += 8192;
   11b19:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        klog("free addr: 0x%x", addr);
   11b20:	83 ec 08             	sub    $0x8,%esp
   11b23:	ff 75 f0             	pushl  -0x10(%ebp)
   11b26:	68 8d 2a 01 00       	push   $0x12a8d
   11b2b:	e8 d8 fc ff ff       	call   11808 <klog>
   11b30:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11b33:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11b37:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   11b3b:	7e c8                	jle    11b05 <some_test+0x72>
    }
}
   11b3d:	90                   	nop
   11b3e:	c9                   	leave  
   11b3f:	c3                   	ret    

00011b40 <show_mem_info>:


static void        
show_mem_info(boot_info_t* boot_info) {
   11b40:	55                   	push   %ebp
   11b41:	89 e5                	mov    %esp,%ebp
   11b43:	83 ec 18             	sub    $0x18,%esp
    klog("mem region");
   11b46:	83 ec 0c             	sub    $0xc,%esp
   11b49:	68 9d 2a 01 00       	push   $0x12a9d
   11b4e:	e8 b5 fc ff ff       	call   11808 <klog>
   11b53:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11b56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11b5d:	eb 29                	jmp    11b88 <show_mem_info+0x48>
        klog("[%d]: 0x%x - 0x%x", i, 
   11b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b62:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11b65:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   11b69:	8b 45 08             	mov    0x8(%ebp),%eax
   11b6c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11b6f:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   11b72:	52                   	push   %edx
   11b73:	50                   	push   %eax
   11b74:	ff 75 f4             	pushl  -0xc(%ebp)
   11b77:	68 a8 2a 01 00       	push   $0x12aa8
   11b7c:	e8 87 fc ff ff       	call   11808 <klog>
   11b81:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11b84:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11b88:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8b:	8b 40 50             	mov    0x50(%eax),%eax
   11b8e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11b91:	7c cc                	jl     11b5f <show_mem_info+0x1f>
            boot_info->ram_region_cfg[i].start, 
            boot_info->ram_region_cfg[i].size );
    }
    klog("");
   11b93:	83 ec 0c             	sub    $0xc,%esp
   11b96:	68 ba 2a 01 00       	push   $0x12aba
   11b9b:	e8 68 fc ff ff       	call   11808 <klog>
   11ba0:	83 c4 10             	add    $0x10,%esp
}
   11ba3:	90                   	nop
   11ba4:	c9                   	leave  
   11ba5:	c3                   	ret    

00011ba6 <total_mem_size>:


static uint32_t 
total_mem_size(boot_info_t* boot_info) {
   11ba6:	55                   	push   %ebp
   11ba7:	89 e5                	mov    %esp,%ebp
   11ba9:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   11bac:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11bb3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   11bba:	eb 11                	jmp    11bcd <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   11bbc:	8b 45 08             	mov    0x8(%ebp),%eax
   11bbf:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11bc2:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   11bc6:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11bc9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   11bcd:	8b 45 08             	mov    0x8(%ebp),%eax
   11bd0:	8b 40 50             	mov    0x50(%eax),%eax
   11bd3:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   11bd6:	7c e4                	jl     11bbc <total_mem_size+0x16>
    }
    return mem_size;
   11bd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11bdb:	c9                   	leave  
   11bdc:	c3                   	ret    

00011bdd <find_pte>:





pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   11bdd:	55                   	push   %ebp
   11bde:	89 e5                	mov    %esp,%ebp
   11be0:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   11be3:	ff 75 0c             	pushl  0xc(%ebp)
   11be6:	e8 3c fd ff ff       	call   11927 <pde_index>
   11beb:	83 c4 04             	add    $0x4,%esp
   11bee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf8:	01 d0                	add    %edx,%eax
   11bfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   11bfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c00:	0f b6 00             	movzbl (%eax),%eax
   11c03:	83 e0 01             	and    $0x1,%eax
   11c06:	84 c0                	test   %al,%al
   11c08:	74 10                	je     11c1a <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   11c0a:	ff 75 f0             	pushl  -0x10(%ebp)
   11c0d:	e8 29 fd ff ff       	call   1193b <pde_paddr>
   11c12:	83 c4 04             	add    $0x4,%esp
   11c15:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11c18:	eb 57                	jmp    11c71 <find_pte+0x94>
    } else {
        if (alloc == 0) {
   11c1a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11c1e:	75 07                	jne    11c27 <find_pte+0x4a>
            return (pte_t *)0;
   11c20:	b8 00 00 00 00       	mov    $0x0,%eax
   11c25:	eb 64                	jmp    11c8b <find_pte+0xae>
        }
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   11c27:	83 ec 08             	sub    $0x8,%esp
   11c2a:	6a 01                	push   $0x1
   11c2c:	68 00 50 01 00       	push   $0x15000
   11c31:	e8 94 fd ff ff       	call   119ca <addr_alloc_page>
   11c36:	83 c4 10             	add    $0x10,%esp
   11c39:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   11c3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11c40:	75 07                	jne    11c49 <find_pte+0x6c>
            return (pte_t *)0;
   11c42:	b8 00 00 00 00       	mov    $0x0,%eax
   11c47:	eb 42                	jmp    11c8b <find_pte+0xae>
        }
        pde->v = pg_paddr | PTE_P;
   11c49:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c4c:	83 c8 01             	or     $0x1,%eax
   11c4f:	89 c2                	mov    %eax,%edx
   11c51:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c54:	89 10                	mov    %edx,(%eax)

        page_table = (pte_t *)(pg_paddr);
   11c56:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11c59:	89 45 f4             	mov    %eax,-0xc(%ebp)
        k_memset(page_table, 0, MEM_PAGE_SIZE);
   11c5c:	83 ec 04             	sub    $0x4,%esp
   11c5f:	68 00 10 00 00       	push   $0x1000
   11c64:	6a 00                	push   $0x0
   11c66:	ff 75 f4             	pushl  -0xc(%ebp)
   11c69:	e8 ff f5 ff ff       	call   1126d <k_memset>
   11c6e:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   11c71:	83 ec 0c             	sub    $0xc,%esp
   11c74:	ff 75 0c             	pushl  0xc(%ebp)
   11c77:	e8 e6 fc ff ff       	call   11962 <pte_index>
   11c7c:	83 c4 10             	add    $0x10,%esp
   11c7f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c89:	01 d0                	add    %edx,%eax
}
   11c8b:	c9                   	leave  
   11c8c:	c3                   	ret    

00011c8d <memory_create_map>:

// 创建映射
int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   11c8d:	55                   	push   %ebp
   11c8e:	89 e5                	mov    %esp,%ebp
   11c90:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   11c93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11c9a:	eb 62                	jmp    11cfe <memory_create_map+0x71>
        // klog("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   11c9c:	83 ec 04             	sub    $0x4,%esp
   11c9f:	6a 01                	push   $0x1
   11ca1:	ff 75 0c             	pushl  0xc(%ebp)
   11ca4:	ff 75 08             	pushl  0x8(%ebp)
   11ca7:	e8 31 ff ff ff       	call   11bdd <find_pte>
   11cac:	83 c4 10             	add    $0x10,%esp
   11caf:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   11cb2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11cb6:	75 07                	jne    11cbf <memory_create_map+0x32>
            return -1;
   11cb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11cbd:	eb 4c                	jmp    11d0b <memory_create_map+0x7e>
        }
        if (pte->present != 0) klog("error");
   11cbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cc2:	0f b6 00             	movzbl (%eax),%eax
   11cc5:	83 e0 01             	and    $0x1,%eax
   11cc8:	84 c0                	test   %al,%al
   11cca:	74 10                	je     11cdc <memory_create_map+0x4f>
   11ccc:	83 ec 0c             	sub    $0xc,%esp
   11ccf:	68 bb 2a 01 00       	push   $0x12abb
   11cd4:	e8 2f fb ff ff       	call   11808 <klog>
   11cd9:	83 c4 10             	add    $0x10,%esp

        // klog("pte addr: 0x%x", (uint32_t)pte);

        pte->v = paddr | perm | PTE_P;
   11cdc:	8b 45 10             	mov    0x10(%ebp),%eax
   11cdf:	0b 45 18             	or     0x18(%ebp),%eax
   11ce2:	83 c8 01             	or     $0x1,%eax
   11ce5:	89 c2                	mov    %eax,%edx
   11ce7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cea:	89 10                	mov    %edx,(%eax)
        vaddr += MEM_PAGE_SIZE;
   11cec:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   11cf3:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   11cfa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d01:	3b 45 14             	cmp    0x14(%ebp),%eax
   11d04:	7c 96                	jl     11c9c <memory_create_map+0xf>
    }

    return 0;
   11d06:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d0b:	c9                   	leave  
   11d0c:	c3                   	ret    

00011d0d <create_kernel_table>:


void create_kernel_table (void) {
   11d0d:	55                   	push   %ebp
   11d0e:	89 e5                	mov    %esp,%ebp
   11d10:	83 ec 28             	sub    $0x28,%esp
        {kernel_base,   s_text,                         0,              0},      // 内核栈区
        {s_text,        e_text,                         s_text,         0},      // 内核代码区
        {s_data,        (void *)(MEM_EBDA_START),       s_data,         0},      // 内核数据区
    };

    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11d13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11d1a:	eb 7d                	jmp    11d99 <create_kernel_table+0x8c>
        memory_map_t * map = kernel_map + i;
   11d1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d1f:	c1 e0 04             	shl    $0x4,%eax
   11d22:	05 20 30 01 00       	add    $0x13020,%eax
   11d27:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   11d2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d2d:	8b 00                	mov    (%eax),%eax
   11d2f:	68 00 10 00 00       	push   $0x1000
   11d34:	50                   	push   %eax
   11d35:	e8 ac fb ff ff       	call   118e6 <down2>
   11d3a:	83 c4 08             	add    $0x8,%esp
   11d3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend   = up2  ((uint32_t)map->vend, MEM_PAGE_SIZE);
   11d40:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d43:	8b 40 04             	mov    0x4(%eax),%eax
   11d46:	68 00 10 00 00       	push   $0x1000
   11d4b:	50                   	push   %eax
   11d4c:	e8 a2 fb ff ff       	call   118f3 <up2>
   11d51:	83 c4 08             	add    $0x8,%esp
   11d54:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   11d57:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d5a:	2b 45 ec             	sub    -0x14(%ebp),%eax
   11d5d:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   11d63:	85 c0                	test   %eax,%eax
   11d65:	0f 48 c2             	cmovs  %edx,%eax
   11d68:	c1 f8 0c             	sar    $0xc,%eax
   11d6b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   11d6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d71:	8b 50 0c             	mov    0xc(%eax),%edx
   11d74:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d77:	8b 40 08             	mov    0x8(%eax),%eax
   11d7a:	89 c1                	mov    %eax,%ecx
   11d7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d7f:	83 ec 0c             	sub    $0xc,%esp
   11d82:	52                   	push   %edx
   11d83:	ff 75 e4             	pushl  -0x1c(%ebp)
   11d86:	51                   	push   %ecx
   11d87:	50                   	push   %eax
   11d88:	68 00 60 01 00       	push   $0x16000
   11d8d:	e8 fb fe ff ff       	call   11c8d <memory_create_map>
   11d92:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11d95:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d9c:	83 f8 02             	cmp    $0x2,%eax
   11d9f:	0f 86 77 ff ff ff    	jbe    11d1c <create_kernel_table+0xf>
    }
}
   11da5:	90                   	nop
   11da6:	c9                   	leave  
   11da7:	c3                   	ret    

00011da8 <memory_init>:


void memory_init (boot_info_t* boot_info) {
   11da8:	55                   	push   %ebp
   11da9:	89 e5                	mov    %esp,%ebp
   11dab:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;
    uint8_t * mem_free = (uint8_t*)&mem_free_start;
   11dae:	c7 45 f4 70 f2 01 00 	movl   $0x1f270,-0xc(%ebp)
    klog("memory init");
   11db5:	83 ec 0c             	sub    $0xc,%esp
   11db8:	68 c1 2a 01 00       	push   $0x12ac1
   11dbd:	e8 46 fa ff ff       	call   11808 <klog>
   11dc2:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   11dc5:	83 ec 0c             	sub    $0xc,%esp
   11dc8:	ff 75 08             	pushl  0x8(%ebp)
   11dcb:	e8 70 fd ff ff       	call   11b40 <show_mem_info>
   11dd0:	83 c4 10             	add    $0x10,%esp

    
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   11dd3:	83 ec 0c             	sub    $0xc,%esp
   11dd6:	ff 75 08             	pushl  0x8(%ebp)
   11dd9:	e8 c8 fd ff ff       	call   11ba6 <total_mem_size>
   11dde:	83 c4 10             	add    $0x10,%esp
   11de1:	2d 00 00 10 00       	sub    $0x100000,%eax
   11de6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   11de9:	83 ec 08             	sub    $0x8,%esp
   11dec:	68 00 10 00 00       	push   $0x1000
   11df1:	ff 75 f0             	pushl  -0x10(%ebp)
   11df4:	e8 ed fa ff ff       	call   118e6 <down2>
   11df9:	83 c4 10             	add    $0x10,%esp
   11dfc:	89 45 f0             	mov    %eax,-0x10(%ebp)

    klog("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   11dff:	83 ec 04             	sub    $0x4,%esp
   11e02:	ff 75 f0             	pushl  -0x10(%ebp)
   11e05:	68 00 00 10 00       	push   $0x100000
   11e0a:	68 cd 2a 01 00       	push   $0x12acd
   11e0f:	e8 f4 f9 ff ff       	call   11808 <klog>
   11e14:	83 c4 10             	add    $0x10,%esp
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   11e17:	83 ec 0c             	sub    $0xc,%esp
   11e1a:	68 00 10 00 00       	push   $0x1000
   11e1f:	ff 75 f0             	pushl  -0x10(%ebp)
   11e22:	68 00 00 10 00       	push   $0x100000
   11e27:	ff 75 f4             	pushl  -0xc(%ebp)
   11e2a:	68 00 50 01 00       	push   $0x15000
   11e2f:	e8 3e fb ff ff       	call   11972 <addr_alloc_init>
   11e34:	83 c4 20             	add    $0x20,%esp

    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   11e37:	a1 20 50 01 00       	mov    0x15020,%eax
   11e3c:	c1 e8 0c             	shr    $0xc,%eax
   11e3f:	83 ec 0c             	sub    $0xc,%esp
   11e42:	50                   	push   %eax
   11e43:	e8 25 f0 ff ff       	call   10e6d <bitmap_byte_count>
   11e48:	83 c4 10             	add    $0x10,%esp
   11e4b:	01 45 f4             	add    %eax,-0xc(%ebp)
    if (mem_free < (uint8_t *)0x800000) {
   11e4e:	81 7d f4 ff ff 7f 00 	cmpl   $0x7fffff,-0xc(%ebp)
   11e55:	77 10                	ja     11e67 <memory_init+0xbf>
        klog("simple test ok!");
   11e57:	83 ec 0c             	sub    $0xc,%esp
   11e5a:	68 eb 2a 01 00       	push   $0x12aeb
   11e5f:	e8 a4 f9 ff ff       	call   11808 <klog>
   11e64:	83 c4 10             	add    $0x10,%esp
    }

    k_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));  // 清空内核表
   11e67:	83 ec 04             	sub    $0x4,%esp
   11e6a:	68 00 10 00 00       	push   $0x1000
   11e6f:	6a 00                	push   $0x0
   11e71:	68 00 60 01 00       	push   $0x16000
   11e76:	e8 f2 f3 ff ff       	call   1126d <k_memset>
   11e7b:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   11e7e:	e8 8a fe ff ff       	call   11d0d <create_kernel_table>

    mmu_set_page_dir((uint32_t)kernel_page_dir);            // 重新设置页表
   11e83:	b8 00 60 01 00       	mov    $0x16000,%eax
   11e88:	83 ec 0c             	sub    $0xc,%esp
   11e8b:	50                   	push   %eax
   11e8c:	e8 85 fa ff ff       	call   11916 <mmu_set_page_dir>
   11e91:	83 c4 10             	add    $0x10,%esp
    
   11e94:	90                   	nop
   11e95:	c9                   	leave  
   11e96:	c3                   	ret    

00011e97 <list_count>:
static inline int list_count (list_t* list) {
   11e97:	55                   	push   %ebp
   11e98:	89 e5                	mov    %esp,%ebp
    return list->count;
   11e9a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e9d:	8b 40 08             	mov    0x8(%eax),%eax
}
   11ea0:	5d                   	pop    %ebp
   11ea1:	c3                   	ret    

00011ea2 <mutex_init>:
#include <mux.h>
#include <irq.h>
#include <log.h>

void mutex_init (mutex_t * mutex) {
   11ea2:	55                   	push   %ebp
   11ea3:	89 e5                	mov    %esp,%ebp
   11ea5:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   11ea8:	8b 45 08             	mov    0x8(%ebp),%eax
   11eab:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   11eb2:	8b 45 08             	mov    0x8(%ebp),%eax
   11eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   11ebb:	8b 45 08             	mov    0x8(%ebp),%eax
   11ebe:	83 c0 08             	add    $0x8,%eax
   11ec1:	83 ec 0c             	sub    $0xc,%esp
   11ec4:	50                   	push   %eax
   11ec5:	e8 7f f6 ff ff       	call   11549 <list_init>
   11eca:	83 c4 10             	add    $0x10,%esp
}
   11ecd:	90                   	nop
   11ece:	c9                   	leave  
   11ecf:	c3                   	ret    

00011ed0 <mutex_lock>:

void mutex_lock (mutex_t * mutex) {
   11ed0:	55                   	push   %ebp
   11ed1:	89 e5                	mov    %esp,%ebp
   11ed3:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   11ed6:	e8 69 ef ff ff       	call   10e44 <irq_enter_proection>
   11edb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   11ede:	e8 0d 06 00 00       	call   124f0 <task_current>
   11ee3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11ee6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee9:	8b 40 04             	mov    0x4(%eax),%eax
   11eec:	85 c0                	test   %eax,%eax
   11eee:	75 14                	jne    11f04 <mutex_lock+0x34>
        mutex->locked_count = 1;
   11ef0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef3:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   11efa:	8b 45 08             	mov    0x8(%ebp),%eax
   11efd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11f00:	89 10                	mov    %edx,(%eax)
   11f02:	eb 4f                	jmp    11f53 <mutex_lock+0x83>
    } else if (mutex->owner == curr) {
   11f04:	8b 45 08             	mov    0x8(%ebp),%eax
   11f07:	8b 00                	mov    (%eax),%eax
   11f09:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f0c:	75 11                	jne    11f1f <mutex_lock+0x4f>
        mutex->locked_count++;
   11f0e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f11:	8b 40 04             	mov    0x4(%eax),%eax
   11f14:	8d 50 01             	lea    0x1(%eax),%edx
   11f17:	8b 45 08             	mov    0x8(%ebp),%eax
   11f1a:	89 50 04             	mov    %edx,0x4(%eax)
   11f1d:	eb 34                	jmp    11f53 <mutex_lock+0x83>
    } else {
        task_t * curr = task_current();
   11f1f:	e8 cc 05 00 00       	call   124f0 <task_current>
   11f24:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   11f27:	83 ec 0c             	sub    $0xc,%esp
   11f2a:	ff 75 ec             	pushl  -0x14(%ebp)
   11f2d:	e8 fd 05 00 00       	call   1252f <task_set_block>
   11f32:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   11f35:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f38:	8d 50 44             	lea    0x44(%eax),%edx
   11f3b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f3e:	83 c0 08             	add    $0x8,%eax
   11f41:	83 ec 08             	sub    $0x8,%esp
   11f44:	52                   	push   %edx
   11f45:	50                   	push   %eax
   11f46:	e8 82 f6 ff ff       	call   115cd <list_insert_last>
   11f4b:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11f4e:	e8 ab 06 00 00       	call   125fe <task_dispatch>
    }

    irq_leave_proection(irq_state);
   11f53:	83 ec 0c             	sub    $0xc,%esp
   11f56:	ff 75 f4             	pushl  -0xc(%ebp)
   11f59:	e8 fe ee ff ff       	call   10e5c <irq_leave_proection>
   11f5e:	83 c4 10             	add    $0x10,%esp
}
   11f61:	90                   	nop
   11f62:	c9                   	leave  
   11f63:	c3                   	ret    

00011f64 <mutex_unlock>:

void mutex_unlock (mutex_t * mutex) {
   11f64:	55                   	push   %ebp
   11f65:	89 e5                	mov    %esp,%ebp
   11f67:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   11f6a:	e8 d5 ee ff ff       	call   10e44 <irq_enter_proection>
   11f6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * curr = task_current();
   11f72:	e8 79 05 00 00       	call   124f0 <task_current>
   11f77:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   11f7a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f7d:	8b 00                	mov    (%eax),%eax
   11f7f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f82:	0f 85 88 00 00 00    	jne    12010 <mutex_unlock+0xac>
        if (--mutex->locked_count == 0) {
   11f88:	8b 45 08             	mov    0x8(%ebp),%eax
   11f8b:	8b 40 04             	mov    0x4(%eax),%eax
   11f8e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f91:	8b 45 08             	mov    0x8(%ebp),%eax
   11f94:	89 50 04             	mov    %edx,0x4(%eax)
   11f97:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9a:	8b 40 04             	mov    0x4(%eax),%eax
   11f9d:	85 c0                	test   %eax,%eax
   11f9f:	75 6f                	jne    12010 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   11fa1:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   11faa:	8b 45 08             	mov    0x8(%ebp),%eax
   11fad:	83 c0 08             	add    $0x8,%eax
   11fb0:	83 ec 0c             	sub    $0xc,%esp
   11fb3:	50                   	push   %eax
   11fb4:	e8 de fe ff ff       	call   11e97 <list_count>
   11fb9:	83 c4 10             	add    $0x10,%esp
   11fbc:	85 c0                	test   %eax,%eax
   11fbe:	74 50                	je     12010 <mutex_unlock+0xac>
                list_node_t * task_node = list_delete_first(&mutex->wait_list);
   11fc0:	8b 45 08             	mov    0x8(%ebp),%eax
   11fc3:	83 c0 08             	add    $0x8,%eax
   11fc6:	83 ec 0c             	sub    $0xc,%esp
   11fc9:	50                   	push   %eax
   11fca:	e8 62 f6 ff ff       	call   11631 <list_delete_first>
   11fcf:	83 c4 10             	add    $0x10,%esp
   11fd2:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   11fd5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11fd9:	74 08                	je     11fe3 <mutex_unlock+0x7f>
   11fdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fde:	83 e8 44             	sub    $0x44,%eax
   11fe1:	eb 05                	jmp    11fe8 <mutex_unlock+0x84>
   11fe3:	b8 00 00 00 00       	mov    $0x0,%eax
   11fe8:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11feb:	83 ec 0c             	sub    $0xc,%esp
   11fee:	ff 75 e8             	pushl  -0x18(%ebp)
   11ff1:	e8 04 05 00 00       	call   124fa <task_set_ready>
   11ff6:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   11ff9:	8b 45 08             	mov    0x8(%ebp),%eax
   11ffc:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   12003:	8b 45 08             	mov    0x8(%ebp),%eax
   12006:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12009:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   1200b:	e8 ee 05 00 00       	call   125fe <task_dispatch>
            }
        }
    }

    irq_leave_proection(irq_state);
   12010:	83 ec 0c             	sub    $0xc,%esp
   12013:	ff 75 f4             	pushl  -0xc(%ebp)
   12016:	e8 41 ee ff ff       	call   10e5c <irq_leave_proection>
   1201b:	83 c4 10             	add    $0x10,%esp
   1201e:	90                   	nop
   1201f:	c9                   	leave  
   12020:	c3                   	ret    

00012021 <list_count>:
static inline int list_count (list_t* list) {
   12021:	55                   	push   %ebp
   12022:	89 e5                	mov    %esp,%ebp
    return list->count;
   12024:	8b 45 08             	mov    0x8(%ebp),%eax
   12027:	8b 40 08             	mov    0x8(%eax),%eax
}
   1202a:	5d                   	pop    %ebp
   1202b:	c3                   	ret    

0001202c <sem_init>:
#include <sem.h>
#include <irq.h>

void sem_init(sem_t* sem, int init_count) {
   1202c:	55                   	push   %ebp
   1202d:	89 e5                	mov    %esp,%ebp
   1202f:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12032:	8b 45 08             	mov    0x8(%ebp),%eax
   12035:	8b 55 0c             	mov    0xc(%ebp),%edx
   12038:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1203a:	8b 45 08             	mov    0x8(%ebp),%eax
   1203d:	83 c0 04             	add    $0x4,%eax
   12040:	83 ec 0c             	sub    $0xc,%esp
   12043:	50                   	push   %eax
   12044:	e8 00 f5 ff ff       	call   11549 <list_init>
   12049:	83 c4 10             	add    $0x10,%esp
}
   1204c:	90                   	nop
   1204d:	c9                   	leave  
   1204e:	c3                   	ret    

0001204f <sem_wait>:

void sem_wait(sem_t* sem) {
   1204f:	55                   	push   %ebp
   12050:	89 e5                	mov    %esp,%ebp
   12052:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12055:	e8 ea ed ff ff       	call   10e44 <irq_enter_proection>
   1205a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0) {
   1205d:	8b 45 08             	mov    0x8(%ebp),%eax
   12060:	8b 00                	mov    (%eax),%eax
   12062:	85 c0                	test   %eax,%eax
   12064:	7e 0f                	jle    12075 <sem_wait+0x26>
        sem->count--;
   12066:	8b 45 08             	mov    0x8(%ebp),%eax
   12069:	8b 00                	mov    (%eax),%eax
   1206b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1206e:	8b 45 08             	mov    0x8(%ebp),%eax
   12071:	89 10                	mov    %edx,(%eax)
   12073:	eb 34                	jmp    120a9 <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   12075:	e8 76 04 00 00       	call   124f0 <task_current>
   1207a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   1207d:	83 ec 0c             	sub    $0xc,%esp
   12080:	ff 75 f0             	pushl  -0x10(%ebp)
   12083:	e8 a7 04 00 00       	call   1252f <task_set_block>
   12088:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   1208b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1208e:	8d 50 44             	lea    0x44(%eax),%edx
   12091:	8b 45 08             	mov    0x8(%ebp),%eax
   12094:	83 c0 04             	add    $0x4,%eax
   12097:	83 ec 08             	sub    $0x8,%esp
   1209a:	52                   	push   %edx
   1209b:	50                   	push   %eax
   1209c:	e8 2c f5 ff ff       	call   115cd <list_insert_last>
   120a1:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   120a4:	e8 55 05 00 00       	call   125fe <task_dispatch>
    }
    irq_leave_proection(state);
   120a9:	83 ec 0c             	sub    $0xc,%esp
   120ac:	ff 75 f4             	pushl  -0xc(%ebp)
   120af:	e8 a8 ed ff ff       	call   10e5c <irq_leave_proection>
   120b4:	83 c4 10             	add    $0x10,%esp
}
   120b7:	90                   	nop
   120b8:	c9                   	leave  
   120b9:	c3                   	ret    

000120ba <sem_notify>:

void sem_notify(sem_t* sem) {
   120ba:	55                   	push   %ebp
   120bb:	89 e5                	mov    %esp,%ebp
   120bd:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();
   120c0:	e8 7f ed ff ff       	call   10e44 <irq_enter_proection>
   120c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list)) {
   120c8:	8b 45 08             	mov    0x8(%ebp),%eax
   120cb:	83 c0 04             	add    $0x4,%eax
   120ce:	83 ec 0c             	sub    $0xc,%esp
   120d1:	50                   	push   %eax
   120d2:	e8 4a ff ff ff       	call   12021 <list_count>
   120d7:	83 c4 10             	add    $0x10,%esp
   120da:	85 c0                	test   %eax,%eax
   120dc:	74 40                	je     1211e <sem_notify+0x64>
        list_node_t* node = list_delete_first(&sem->wait_list);
   120de:	8b 45 08             	mov    0x8(%ebp),%eax
   120e1:	83 c0 04             	add    $0x4,%eax
   120e4:	83 ec 0c             	sub    $0xc,%esp
   120e7:	50                   	push   %eax
   120e8:	e8 44 f5 ff ff       	call   11631 <list_delete_first>
   120ed:	83 c4 10             	add    $0x10,%esp
   120f0:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_t* task = list_node_parent(node, task_t, wait_node);
   120f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   120f7:	74 08                	je     12101 <sem_notify+0x47>
   120f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120fc:	83 e8 44             	sub    $0x44,%eax
   120ff:	eb 05                	jmp    12106 <sem_notify+0x4c>
   12101:	b8 00 00 00 00       	mov    $0x0,%eax
   12106:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   12109:	83 ec 0c             	sub    $0xc,%esp
   1210c:	ff 75 ec             	pushl  -0x14(%ebp)
   1210f:	e8 e6 03 00 00       	call   124fa <task_set_ready>
   12114:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12117:	e8 e2 04 00 00       	call   125fe <task_dispatch>
   1211c:	eb 0d                	jmp    1212b <sem_notify+0x71>
    } else {
        sem->count++;
   1211e:	8b 45 08             	mov    0x8(%ebp),%eax
   12121:	8b 00                	mov    (%eax),%eax
   12123:	8d 50 01             	lea    0x1(%eax),%edx
   12126:	8b 45 08             	mov    0x8(%ebp),%eax
   12129:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_proection(state);
   1212b:	83 ec 0c             	sub    $0xc,%esp
   1212e:	ff 75 f4             	pushl  -0xc(%ebp)
   12131:	e8 26 ed ff ff       	call   10e5c <irq_leave_proection>
   12136:	83 c4 10             	add    $0x10,%esp

}
   12139:	90                   	nop
   1213a:	c9                   	leave  
   1213b:	c3                   	ret    

0001213c <sem_count>:

int  sem_count(sem_t* sem) {
   1213c:	55                   	push   %ebp
   1213d:	89 e5                	mov    %esp,%ebp
   1213f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12142:	e8 fd ec ff ff       	call   10e44 <irq_enter_proection>
   12147:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1214a:	8b 45 08             	mov    0x8(%ebp),%eax
   1214d:	8b 00                	mov    (%eax),%eax
   1214f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_proection(state);
   12152:	83 ec 0c             	sub    $0xc,%esp
   12155:	ff 75 f4             	pushl  -0xc(%ebp)
   12158:	e8 ff ec ff ff       	call   10e5c <irq_leave_proection>
   1215d:	83 c4 10             	add    $0x10,%esp
    return count;
   12160:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12163:	c9                   	leave  
   12164:	c3                   	ret    

00012165 <list_node_init>:
static inline void list_node_init(list_node_t* node) {
   12165:	55                   	push   %ebp
   12166:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t*)0;
   12168:	8b 45 08             	mov    0x8(%ebp),%eax
   1216b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12172:	8b 45 08             	mov    0x8(%ebp),%eax
   12175:	8b 50 04             	mov    0x4(%eax),%edx
   12178:	8b 45 08             	mov    0x8(%ebp),%eax
   1217b:	89 10                	mov    %edx,(%eax)
}
   1217d:	90                   	nop
   1217e:	5d                   	pop    %ebp
   1217f:	c3                   	ret    

00012180 <list_node_next>:
static inline list_node_t* list_node_next(list_node_t* node) {
   12180:	55                   	push   %ebp
   12181:	89 e5                	mov    %esp,%ebp
    return node->next;
   12183:	8b 45 08             	mov    0x8(%ebp),%eax
   12186:	8b 40 04             	mov    0x4(%eax),%eax
}
   12189:	5d                   	pop    %ebp
   1218a:	c3                   	ret    

0001218b <list_count>:
static inline int list_count (list_t* list) {
   1218b:	55                   	push   %ebp
   1218c:	89 e5                	mov    %esp,%ebp
    return list->count;
   1218e:	8b 45 08             	mov    0x8(%ebp),%eax
   12191:	8b 40 08             	mov    0x8(%eax),%eax
}
   12194:	5d                   	pop    %ebp
   12195:	c3                   	ret    

00012196 <list_first>:
static inline list_node_t* list_first (list_t* list) {
   12196:	55                   	push   %ebp
   12197:	89 e5                	mov    %esp,%ebp
    return list->first;
   12199:	8b 45 08             	mov    0x8(%ebp),%eax
   1219c:	8b 00                	mov    (%eax),%eax
}
   1219e:	5d                   	pop    %ebp
   1219f:	c3                   	ret    

000121a0 <hlt>:
static inline void hlt() {
   121a0:	55                   	push   %ebp
   121a1:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   121a3:	f4                   	hlt    
}
   121a4:	90                   	nop
   121a5:	5d                   	pop    %ebp
   121a6:	c3                   	ret    

000121a7 <idle_task_func>:
#include <cpu.h>
#include <klib.h>
#include <os_cfg.h>
#include <log.h>

static void idle_task_func() { for(;;) hlt(); }
   121a7:	55                   	push   %ebp
   121a8:	89 e5                	mov    %esp,%ebp
   121aa:	e8 f1 ff ff ff       	call   121a0 <hlt>
   121af:	eb f9                	jmp    121aa <idle_task_func+0x3>

000121b1 <task_switch_from_to>:

void simple_switch(uint32_t **from, uint32_t* to);

void task_switch_from_to(task_t* from, task_t* to) {
   121b1:	55                   	push   %ebp
   121b2:	89 e5                	mov    %esp,%ebp
   121b4:	83 ec 08             	sub    $0x8,%esp
    // far_jump(to->tss_sel, 0);             // 使用 tss 机制
    simple_switch(&from->stack, to->stack);  // 使用直接跳转机制
   121b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   121ba:	8b 10                	mov    (%eax),%edx
   121bc:	8b 45 08             	mov    0x8(%ebp),%eax
   121bf:	83 ec 08             	sub    $0x8,%esp
   121c2:	52                   	push   %edx
   121c3:	50                   	push   %eax
   121c4:	e8 dc e0 ff ff       	call   102a5 <simple_switch>
   121c9:	83 c4 10             	add    $0x10,%esp
}
   121cc:	90                   	nop
   121cd:	c9                   	leave  
   121ce:	c3                   	ret    

000121cf <tss_init>:
static uint32_t task3_stack[2048];
static task_t task3;
sem_t  sem_test;


int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   121cf:	55                   	push   %ebp
   121d0:	89 e5                	mov    %esp,%ebp
   121d2:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   121d5:	e8 bc e2 ff ff       	call   10496 <gdt_alloc_desc>
   121da:	89 45 f4             	mov    %eax,-0xc(%ebp)


    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), 
   121dd:	8b 45 08             	mov    0x8(%ebp),%eax
   121e0:	83 c0 4c             	add    $0x4c,%eax
   121e3:	68 89 00 00 00       	push   $0x89
   121e8:	6a 68                	push   $0x68
   121ea:	50                   	push   %eax
   121eb:	ff 75 f4             	pushl  -0xc(%ebp)
   121ee:	e8 b0 e1 ff ff       	call   103a3 <segment_desc_set>
   121f3:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS
    );

    k_memset(&task->tss, 0, sizeof(tss_t));
   121f6:	8b 45 08             	mov    0x8(%ebp),%eax
   121f9:	83 c0 4c             	add    $0x4c,%eax
   121fc:	83 ec 04             	sub    $0x4,%esp
   121ff:	6a 68                	push   $0x68
   12201:	6a 00                	push   $0x0
   12203:	50                   	push   %eax
   12204:	e8 64 f0 ff ff       	call   1126d <k_memset>
   12209:	83 c4 10             	add    $0x10,%esp

    task->tss.eip  = entry;
   1220c:	8b 45 08             	mov    0x8(%ebp),%eax
   1220f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12212:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp  = esp;
   12215:	8b 45 08             	mov    0x8(%ebp),%eax
   12218:	8b 55 10             	mov    0x10(%ebp),%edx
   1221b:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.esp0 = esp;
   12221:	8b 45 08             	mov    0x8(%ebp),%eax
   12224:	8b 55 10             	mov    0x10(%ebp),%edx
   12227:	89 50 50             	mov    %edx,0x50(%eax)

    task->tss.ss  = KERNEL_SELECTOR_DS;
   1222a:	8b 45 08             	mov    0x8(%ebp),%eax
   1222d:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   12234:	00 00 00 
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   12237:	8b 45 08             	mov    0x8(%ebp),%eax
   1223a:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es  = KERNEL_SELECTOR_DS;
   12241:	8b 45 08             	mov    0x8(%ebp),%eax
   12244:	c7 80 94 00 00 00 10 	movl   $0x10,0x94(%eax)
   1224b:	00 00 00 
    task->tss.ds  = KERNEL_SELECTOR_DS;
   1224e:	8b 45 08             	mov    0x8(%ebp),%eax
   12251:	c7 80 a0 00 00 00 10 	movl   $0x10,0xa0(%eax)
   12258:	00 00 00 
    task->tss.fs  = KERNEL_SELECTOR_DS;
   1225b:	8b 45 08             	mov    0x8(%ebp),%eax
   1225e:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   12265:	00 00 00 
    task->tss.gs  = KERNEL_SELECTOR_DS;
   12268:	8b 45 08             	mov    0x8(%ebp),%eax
   1226b:	c7 80 a8 00 00 00 10 	movl   $0x10,0xa8(%eax)
   12272:	00 00 00 

    task->tss.cs  = KERNEL_SELECTOR_CS;
   12275:	8b 45 08             	mov    0x8(%ebp),%eax
   12278:	c7 80 98 00 00 00 08 	movl   $0x8,0x98(%eax)
   1227f:	00 00 00 

    task->tss.eflags = EFLAGES_DEFAULT | EFLAGS_IF;
   12282:	8b 45 08             	mov    0x8(%ebp),%eax
   12285:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    task->tss_sel = tss_sel;
   1228c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1228f:	8b 45 08             	mov    0x8(%ebp),%eax
   12292:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
}
   12298:	90                   	nop
   12299:	c9                   	leave  
   1229a:	c3                   	ret    

0001229b <task_init>:

// 初始化一个任务
int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   1229b:	55                   	push   %ebp
   1229c:	89 e5                	mov    %esp,%ebp
   1229e:	83 ec 18             	sub    $0x18,%esp
    // tss_init(task, entry, esp);  // 使用 tss 机制

    // 使用直接跳转机制
    uint32_t* pesp = (uint32_t*)esp;
   122a1:	8b 45 14             	mov    0x14(%ebp),%eax
   122a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pesp) {
   122a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   122ab:	74 48                	je     122f5 <task_init+0x5a>
        *(--pesp) = entry;
   122ad:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   122b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122b4:	8b 55 10             	mov    0x10(%ebp),%edx
   122b7:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;
   122b9:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   122bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   122c6:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   122ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   122d3:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   122d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122da:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   122e0:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   122e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122e7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        task->stack = pesp;
   122ed:	8b 45 08             	mov    0x8(%ebp),%eax
   122f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   122f3:	89 10                	mov    %edx,(%eax)
    }
    // 使用直接跳转机制

    k_strncpy(task->name, name, TASK_NAME_SIZE);        // 进程名
   122f5:	8b 45 08             	mov    0x8(%ebp),%eax
   122f8:	83 c0 08             	add    $0x8,%eax
   122fb:	83 ec 04             	sub    $0x4,%esp
   122fe:	6a 20                	push   $0x20
   12300:	ff 75 0c             	pushl  0xc(%ebp)
   12303:	50                   	push   %eax
   12304:	e8 f0 ed ff ff       	call   110f9 <k_strncpy>
   12309:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;                         // 状态  created
   1230c:	8b 45 08             	mov    0x8(%ebp),%eax
   1230f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;         //  最大时间片
   12316:	8b 45 08             	mov    0x8(%ebp),%eax
   12319:	c7 40 2c 0a 00 00 00 	movl   $0xa,0x2c(%eax)
    task->slice_ticks = TASK_TIME_SLICE_DEFAULT;        //  当前时间片
   12320:	8b 45 08             	mov    0x8(%ebp),%eax
   12323:	c7 40 28 0a 00 00 00 	movl   $0xa,0x28(%eax)
    task->sleep_ticks = 0;
   1232a:	8b 45 08             	mov    0x8(%ebp),%eax
   1232d:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node); 
   12334:	8b 45 08             	mov    0x8(%ebp),%eax
   12337:	83 c0 3c             	add    $0x3c,%eax
   1233a:	83 ec 0c             	sub    $0xc,%esp
   1233d:	50                   	push   %eax
   1233e:	e8 22 fe ff ff       	call   12165 <list_node_init>
   12343:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   12346:	8b 45 08             	mov    0x8(%ebp),%eax
   12349:	83 c0 34             	add    $0x34,%eax
   1234c:	83 ec 0c             	sub    $0xc,%esp
   1234f:	50                   	push   %eax
   12350:	e8 10 fe ff ff       	call   12165 <list_node_init>
   12355:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   12358:	8b 45 08             	mov    0x8(%ebp),%eax
   1235b:	83 c0 44             	add    $0x44,%eax
   1235e:	83 ec 0c             	sub    $0xc,%esp
   12361:	50                   	push   %eax
   12362:	e8 fe fd ff ff       	call   12165 <list_node_init>
   12367:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   1236a:	e8 d5 ea ff ff       	call   10e44 <irq_enter_proection>
   1236f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_ready(task);                                        // 加入到就绪队列
   12372:	83 ec 0c             	sub    $0xc,%esp
   12375:	ff 75 08             	pushl  0x8(%ebp)
   12378:	e8 7d 01 00 00       	call   124fa <task_set_ready>
   1237d:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&task_manager.task_list, &task->all_node);  // 加入到所有队列
   12380:	8b 45 08             	mov    0x8(%ebp),%eax
   12383:	83 c0 3c             	add    $0x3c,%eax
   12386:	83 ec 08             	sub    $0x8,%esp
   12389:	50                   	push   %eax
   1238a:	68 1c 70 01 00       	push   $0x1701c
   1238f:	e8 39 f2 ff ff       	call   115cd <list_insert_last>
   12394:	83 c4 10             	add    $0x10,%esp
    irq_leave_proection(state);  //--leave protection
   12397:	83 ec 0c             	sub    $0xc,%esp
   1239a:	ff 75 f0             	pushl  -0x10(%ebp)
   1239d:	e8 ba ea ff ff       	call   10e5c <irq_leave_proection>
   123a2:	83 c4 10             	add    $0x10,%esp

    return 0;
   123a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   123aa:	c9                   	leave  
   123ab:	c3                   	ret    

000123ac <task_manager_init>:

// 初始化任务管理
void task_manager_init() {
   123ac:	55                   	push   %ebp
   123ad:	89 e5                	mov    %esp,%ebp
   123af:	83 ec 08             	sub    $0x8,%esp
    sem_init(&sem_test, 0);
   123b2:	83 ec 08             	sub    $0x8,%esp
   123b5:	6a 00                	push   $0x0
   123b7:	68 60 f2 01 00       	push   $0x1f260
   123bc:	e8 6b fc ff ff       	call   1202c <sem_init>
   123c1:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.ready_list);
   123c4:	83 ec 0c             	sub    $0xc,%esp
   123c7:	68 04 70 01 00       	push   $0x17004
   123cc:	e8 78 f1 ff ff       	call   11549 <list_init>
   123d1:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   123d4:	83 ec 0c             	sub    $0xc,%esp
   123d7:	68 1c 70 01 00       	push   $0x1701c
   123dc:	e8 68 f1 ff ff       	call   11549 <list_init>
   123e1:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   123e4:	83 ec 0c             	sub    $0xc,%esp
   123e7:	68 10 70 01 00       	push   $0x17010
   123ec:	e8 58 f1 ff ff       	call   11549 <list_init>
   123f1:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = get_first_task();
   123f4:	e8 ed 00 00 00       	call   124e6 <get_first_task>
   123f9:	a3 00 70 01 00       	mov    %eax,0x17000
}
   123fe:	90                   	nop
   123ff:	c9                   	leave  
   12400:	c3                   	ret    

00012401 <task1_func>:


void task1_func() {
   12401:	55                   	push   %ebp
   12402:	89 e5                	mov    %esp,%ebp
   12404:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   12407:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("-------------------------11111-----------------: %d", count--);
   1240e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12411:	8d 50 ff             	lea    -0x1(%eax),%edx
   12414:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12417:	83 ec 08             	sub    $0x8,%esp
   1241a:	50                   	push   %eax
   1241b:	68 fc 2a 01 00       	push   $0x12afc
   12420:	e8 e3 f3 ff ff       	call   11808 <klog>
   12425:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   12428:	83 ec 0c             	sub    $0xc,%esp
   1242b:	68 e8 03 00 00       	push   $0x3e8
   12430:	e8 03 03 00 00       	call   12738 <sys_sleep>
   12435:	83 c4 10             	add    $0x10,%esp
        sem_notify(&sem_test);
   12438:	83 ec 0c             	sub    $0xc,%esp
   1243b:	68 60 f2 01 00       	push   $0x1f260
   12440:	e8 75 fc ff ff       	call   120ba <sem_notify>
   12445:	83 c4 10             	add    $0x10,%esp
        klog("-------------------------11111-----------------: %d", count--);
   12448:	eb c4                	jmp    1240e <task1_func+0xd>

0001244a <task3_func>:
    }
}


void task3_func() {
   1244a:	55                   	push   %ebp
   1244b:	89 e5                	mov    %esp,%ebp
   1244d:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   12450:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        sem_wait(&sem_test);
   12457:	83 ec 0c             	sub    $0xc,%esp
   1245a:	68 60 f2 01 00       	push   $0x1f260
   1245f:	e8 eb fb ff ff       	call   1204f <sem_wait>
   12464:	83 c4 10             	add    $0x10,%esp
        klog("-------------------------33333-----------------: %d", count++);
   12467:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1246a:	8d 50 01             	lea    0x1(%eax),%edx
   1246d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12470:	83 ec 08             	sub    $0x8,%esp
   12473:	50                   	push   %eax
   12474:	68 30 2b 01 00       	push   $0x12b30
   12479:	e8 8a f3 ff ff       	call   11808 <klog>
   1247e:	83 c4 10             	add    $0x10,%esp
        sem_wait(&sem_test);
   12481:	eb d4                	jmp    12457 <task3_func+0xd>

00012483 <task1_func_init>:
    }
}


void task1_func_init() {
   12483:	55                   	push   %ebp
   12484:	89 e5                	mov    %esp,%ebp
   12486:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 
   12489:	ba a0 91 01 00       	mov    $0x191a0,%edx
   1248e:	b8 01 24 01 00       	mov    $0x12401,%eax
   12493:	52                   	push   %edx
   12494:	50                   	push   %eax
   12495:	68 64 2b 01 00       	push   $0x12b64
   1249a:	68 28 70 01 00       	push   $0x17028
   1249f:	e8 f7 fd ff ff       	call   1229b <task_init>
   124a4:	83 c4 10             	add    $0x10,%esp
        (uint32_t)task1_func, (uint32_t)&task1_stack[2048]);

    task_init(&task_manager.idle_task,  "idle  task", 
   124a7:	ba a0 b1 01 00       	mov    $0x1b1a0,%edx
   124ac:	b8 a7 21 01 00       	mov    $0x121a7,%eax
   124b1:	52                   	push   %edx
   124b2:	50                   	push   %eax
   124b3:	68 6f 2b 01 00       	push   $0x12b6f
   124b8:	68 e0 70 01 00       	push   $0x170e0
   124bd:	e8 d9 fd ff ff       	call   1229b <task_init>
   124c2:	83 c4 10             	add    $0x10,%esp
        (uint32_t)idle_task_func, (uint32_t)&idle_task_stack[2048]);

    task_init(&task3,                   "test  task", 
   124c5:	ba a0 d1 01 00       	mov    $0x1d1a0,%edx
   124ca:	b8 4a 24 01 00       	mov    $0x1244a,%eax
   124cf:	52                   	push   %edx
   124d0:	50                   	push   %eax
   124d1:	68 7a 2b 01 00       	push   $0x12b7a
   124d6:	68 a0 d1 01 00       	push   $0x1d1a0
   124db:	e8 bb fd ff ff       	call   1229b <task_init>
   124e0:	83 c4 10             	add    $0x10,%esp
        (uint32_t)task3_func, (uint32_t)&task3_stack[2048]);

}
   124e3:	90                   	nop
   124e4:	c9                   	leave  
   124e5:	c3                   	ret    

000124e6 <get_first_task>:


task_t* get_first_task() {
   124e6:	55                   	push   %ebp
   124e7:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   124e9:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   124ee:	5d                   	pop    %ebp
   124ef:	c3                   	ret    

000124f0 <task_current>:

task_t* task_current() {
   124f0:	55                   	push   %ebp
   124f1:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   124f3:	a1 00 70 01 00       	mov    0x17000,%eax
}
   124f8:	5d                   	pop    %ebp
   124f9:	c3                   	ret    

000124fa <task_set_ready>:


// 将任务添加到就绪队列 尾部 设置状态为 ready
void task_set_ready(task_t* task) {
   124fa:	55                   	push   %ebp
   124fb:	89 e5                	mov    %esp,%ebp
   124fd:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {  // 空进程不应该加入就绪队列
   12500:	81 7d 08 e0 70 01 00 	cmpl   $0x170e0,0x8(%ebp)
   12507:	74 23                	je     1252c <task_set_ready+0x32>
        return;
    }

    list_insert_last(&task_manager.ready_list, &task->run_node);
   12509:	8b 45 08             	mov    0x8(%ebp),%eax
   1250c:	83 c0 34             	add    $0x34,%eax
   1250f:	83 ec 08             	sub    $0x8,%esp
   12512:	50                   	push   %eax
   12513:	68 04 70 01 00       	push   $0x17004
   12518:	e8 b0 f0 ff ff       	call   115cd <list_insert_last>
   1251d:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   12520:	8b 45 08             	mov    0x8(%ebp),%eax
   12523:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
   1252a:	eb 01                	jmp    1252d <task_set_ready+0x33>
        return;
   1252c:	90                   	nop
}
   1252d:	c9                   	leave  
   1252e:	c3                   	ret    

0001252f <task_set_block>:

// 将 特定 任务从就绪队列删除
void task_set_block(task_t* task) {
   1252f:	55                   	push   %ebp
   12530:	89 e5                	mov    %esp,%ebp
   12532:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {  // 空进程不应该删除
   12535:	81 7d 08 e0 70 01 00 	cmpl   $0x170e0,0x8(%ebp)
   1253c:	74 19                	je     12557 <task_set_block+0x28>
        return;
    }
    list_delete(&task_manager.ready_list, &task->run_node);
   1253e:	8b 45 08             	mov    0x8(%ebp),%eax
   12541:	83 c0 34             	add    $0x34,%eax
   12544:	83 ec 08             	sub    $0x8,%esp
   12547:	50                   	push   %eax
   12548:	68 04 70 01 00       	push   $0x17004
   1254d:	e8 58 f1 ff ff       	call   116aa <list_delete>
   12552:	83 c4 10             	add    $0x10,%esp
   12555:	eb 01                	jmp    12558 <task_set_block+0x29>
        return;
   12557:	90                   	nop
    // list_delete_first(&task_manager.ready_list);
}
   12558:	c9                   	leave  
   12559:	c3                   	ret    

0001255a <sys_sched_yield>:

// 主动放弃cpu执行
int  sys_sched_yield() {
   1255a:	55                   	push   %ebp
   1255b:	89 e5                	mov    %esp,%ebp
   1255d:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12560:	e8 df e8 ff ff       	call   10e44 <irq_enter_proection>
   12565:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if(list_count(&task_manager.ready_list) > 1) {
   12568:	83 ec 0c             	sub    $0xc,%esp
   1256b:	68 04 70 01 00       	push   $0x17004
   12570:	e8 16 fc ff ff       	call   1218b <list_count>
   12575:	83 c4 10             	add    $0x10,%esp
   12578:	83 f8 01             	cmp    $0x1,%eax
   1257b:	7e 29                	jle    125a6 <sys_sched_yield+0x4c>
        task_t* curr = task_current();
   1257d:	e8 6e ff ff ff       	call   124f0 <task_current>
   12582:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   12585:	83 ec 0c             	sub    $0xc,%esp
   12588:	ff 75 f0             	pushl  -0x10(%ebp)
   1258b:	e8 9f ff ff ff       	call   1252f <task_set_block>
   12590:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   12593:	83 ec 0c             	sub    $0xc,%esp
   12596:	ff 75 f0             	pushl  -0x10(%ebp)
   12599:	e8 5c ff ff ff       	call   124fa <task_set_ready>
   1259e:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   125a1:	e8 58 00 00 00       	call   125fe <task_dispatch>
    }
    
    irq_leave_proection(state);  //--leave protection
   125a6:	83 ec 0c             	sub    $0xc,%esp
   125a9:	ff 75 f4             	pushl  -0xc(%ebp)
   125ac:	e8 ab e8 ff ff       	call   10e5c <irq_leave_proection>
   125b1:	83 c4 10             	add    $0x10,%esp

    return 0;
   125b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   125b9:	c9                   	leave  
   125ba:	c3                   	ret    

000125bb <task_next_run>:

// 从就绪队列中找到一第一个任务
task_t * task_next_run() {
   125bb:	55                   	push   %ebp
   125bc:	89 e5                	mov    %esp,%ebp
   125be:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0) {
   125c1:	68 04 70 01 00       	push   $0x17004
   125c6:	e8 c0 fb ff ff       	call   1218b <list_count>
   125cb:	83 c4 04             	add    $0x4,%esp
   125ce:	85 c0                	test   %eax,%eax
   125d0:	75 07                	jne    125d9 <task_next_run+0x1e>
        return &task_manager.idle_task;
   125d2:	b8 e0 70 01 00       	mov    $0x170e0,%eax
   125d7:	eb 23                	jmp    125fc <task_next_run+0x41>
    }

    list_node_t * task_node = list_first(&task_manager.ready_list);
   125d9:	68 04 70 01 00       	push   $0x17004
   125de:	e8 b3 fb ff ff       	call   12196 <list_first>
   125e3:	83 c4 04             	add    $0x4,%esp
   125e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   125e9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   125ed:	74 08                	je     125f7 <task_next_run+0x3c>
   125ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125f2:	83 e8 34             	sub    $0x34,%eax
   125f5:	eb 05                	jmp    125fc <task_next_run+0x41>
   125f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   125fc:	c9                   	leave  
   125fd:	c3                   	ret    

000125fe <task_dispatch>:

// 分配一个任务并从当前任务切换过去
void task_dispatch() {
   125fe:	55                   	push   %ebp
   125ff:	89 e5                	mov    %esp,%ebp
   12601:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12604:	e8 3b e8 ff ff       	call   10e44 <irq_enter_proection>
   12609:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * to = task_next_run();
   1260c:	e8 aa ff ff ff       	call   125bb <task_next_run>
   12611:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task) {
   12614:	a1 00 70 01 00       	mov    0x17000,%eax
   12619:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1261c:	74 2b                	je     12649 <task_dispatch+0x4b>
        task_t * from = task_current();
   1261e:	e8 cd fe ff ff       	call   124f0 <task_current>
   12623:	89 45 ec             	mov    %eax,-0x14(%ebp)

        task_manager.curr_task = to;   // 设置将要切换的任务为“当前任务”
   12626:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12629:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;      // 设置 task running
   1262e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12631:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

        task_switch_from_to(from, to);
   12638:	83 ec 08             	sub    $0x8,%esp
   1263b:	ff 75 f0             	pushl  -0x10(%ebp)
   1263e:	ff 75 ec             	pushl  -0x14(%ebp)
   12641:	e8 6b fb ff ff       	call   121b1 <task_switch_from_to>
   12646:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_proection(state);  //--leave protection
   12649:	83 ec 0c             	sub    $0xc,%esp
   1264c:	ff 75 f4             	pushl  -0xc(%ebp)
   1264f:	e8 08 e8 ff ff       	call   10e5c <irq_leave_proection>
   12654:	83 c4 10             	add    $0x10,%esp
   
}
   12657:	90                   	nop
   12658:	c9                   	leave  
   12659:	c3                   	ret    

0001265a <task_time_tick>:

// 检查当前任务的时间片是否用完，若用完强制切换到下一任务
void task_time_tick() {
   1265a:	55                   	push   %ebp
   1265b:	89 e5                	mov    %esp,%ebp
   1265d:	83 ec 28             	sub    $0x28,%esp
    task_t* curr = task_current();
   12660:	e8 8b fe ff ff       	call   124f0 <task_current>
   12665:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int slice = --curr->slice_ticks;
   12668:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1266b:	8b 40 28             	mov    0x28(%eax),%eax
   1266e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12671:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12674:	89 50 28             	mov    %edx,0x28(%eax)
   12677:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1267a:	8b 40 28             	mov    0x28(%eax),%eax
   1267d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if( slice == 0 && &task_manager.ready_list.count > 0) {
   12680:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12684:	75 2d                	jne    126b3 <task_time_tick+0x59>
        curr->slice_ticks = curr->time_ticks;
   12686:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12689:	8b 50 2c             	mov    0x2c(%eax),%edx
   1268c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1268f:	89 50 28             	mov    %edx,0x28(%eax)

        task_set_block(curr);
   12692:	83 ec 0c             	sub    $0xc,%esp
   12695:	ff 75 f0             	pushl  -0x10(%ebp)
   12698:	e8 92 fe ff ff       	call   1252f <task_set_block>
   1269d:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   126a0:	83 ec 0c             	sub    $0xc,%esp
   126a3:	ff 75 f0             	pushl  -0x10(%ebp)
   126a6:	e8 4f fe ff ff       	call   124fa <task_set_ready>
   126ab:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   126ae:	e8 4b ff ff ff       	call   125fe <task_dispatch>
    }

    list_node_t* sleep_lists_curr = list_first(&task_manager.sleep_list);
   126b3:	83 ec 0c             	sub    $0xc,%esp
   126b6:	68 10 70 01 00       	push   $0x17010
   126bb:	e8 d6 fa ff ff       	call   12196 <list_first>
   126c0:	83 c4 10             	add    $0x10,%esp
   126c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   126c6:	eb 62                	jmp    1272a <task_time_tick+0xd0>
        list_node_t * next = list_node_next(sleep_lists_curr);
   126c8:	83 ec 0c             	sub    $0xc,%esp
   126cb:	ff 75 f4             	pushl  -0xc(%ebp)
   126ce:	e8 ad fa ff ff       	call   12180 <list_node_next>
   126d3:	83 c4 10             	add    $0x10,%esp
   126d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_t* task = list_node_parent(sleep_lists_curr, task_t, run_node);
   126d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   126dd:	74 08                	je     126e7 <task_time_tick+0x8d>
   126df:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126e2:	83 e8 34             	sub    $0x34,%eax
   126e5:	eb 05                	jmp    126ec <task_time_tick+0x92>
   126e7:	b8 00 00 00 00       	mov    $0x0,%eax
   126ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        
        if(--task->sleep_ticks == 0) {
   126ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   126f2:	8b 40 30             	mov    0x30(%eax),%eax
   126f5:	8d 50 ff             	lea    -0x1(%eax),%edx
   126f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   126fb:	89 50 30             	mov    %edx,0x30(%eax)
   126fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12701:	8b 40 30             	mov    0x30(%eax),%eax
   12704:	85 c0                	test   %eax,%eax
   12706:	75 1c                	jne    12724 <task_time_tick+0xca>
            task_set_wakeup(task);
   12708:	83 ec 0c             	sub    $0xc,%esp
   1270b:	ff 75 e4             	pushl  -0x1c(%ebp)
   1270e:	e8 b8 00 00 00       	call   127cb <task_set_wakeup>
   12713:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   12716:	83 ec 0c             	sub    $0xc,%esp
   12719:	ff 75 e4             	pushl  -0x1c(%ebp)
   1271c:	e8 d9 fd ff ff       	call   124fa <task_set_ready>
   12721:	83 c4 10             	add    $0x10,%esp
        }
        sleep_lists_curr = next;
   12724:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12727:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   1272a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1272e:	75 98                	jne    126c8 <task_time_tick+0x6e>
    }

    task_dispatch();
   12730:	e8 c9 fe ff ff       	call   125fe <task_dispatch>
}
   12735:	90                   	nop
   12736:	c9                   	leave  
   12737:	c3                   	ret    

00012738 <sys_sleep>:



void sys_sleep(uint32_t ms) {
   12738:	55                   	push   %ebp
   12739:	89 e5                	mov    %esp,%ebp
   1273b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   1273e:	e8 01 e7 ff ff       	call   10e44 <irq_enter_proection>
   12743:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12746:	e8 a5 fd ff ff       	call   124f0 <task_current>
   1274b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_block(curr);
   1274e:	83 ec 0c             	sub    $0xc,%esp
   12751:	ff 75 f0             	pushl  -0x10(%ebp)
   12754:	e8 d6 fd ff ff       	call   1252f <task_set_block>
   12759:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(curr, ms / OS_TICK_MS);
   1275c:	8b 45 08             	mov    0x8(%ebp),%eax
   1275f:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   12764:	f7 e2                	mul    %edx
   12766:	89 d0                	mov    %edx,%eax
   12768:	c1 e8 03             	shr    $0x3,%eax
   1276b:	83 ec 08             	sub    $0x8,%esp
   1276e:	50                   	push   %eax
   1276f:	ff 75 f0             	pushl  -0x10(%ebp)
   12772:	e8 19 00 00 00       	call   12790 <task_set_sleep>
   12777:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   1277a:	e8 7f fe ff ff       	call   125fe <task_dispatch>

    irq_leave_proection(state);
   1277f:	83 ec 0c             	sub    $0xc,%esp
   12782:	ff 75 f4             	pushl  -0xc(%ebp)
   12785:	e8 d2 e6 ff ff       	call   10e5c <irq_leave_proection>
   1278a:	83 c4 10             	add    $0x10,%esp
}
   1278d:	90                   	nop
   1278e:	c9                   	leave  
   1278f:	c3                   	ret    

00012790 <task_set_sleep>:

void task_set_sleep(task_t* task, uint32_t ticks) {
   12790:	55                   	push   %ebp
   12791:	89 e5                	mov    %esp,%ebp
   12793:	83 ec 08             	sub    $0x8,%esp
    if(ticks <= 0) return;
   12796:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1279a:	74 2c                	je     127c8 <task_set_sleep+0x38>
    task->sleep_ticks = ticks;
   1279c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1279f:	8b 45 08             	mov    0x8(%ebp),%eax
   127a2:	89 50 30             	mov    %edx,0x30(%eax)
    task->state = TASK_SLEEP;
   127a5:	8b 45 08             	mov    0x8(%ebp),%eax
   127a8:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
    list_insert_last(&task_manager.sleep_list, 
   127af:	8b 45 08             	mov    0x8(%ebp),%eax
   127b2:	83 c0 34             	add    $0x34,%eax
   127b5:	83 ec 08             	sub    $0x8,%esp
   127b8:	50                   	push   %eax
   127b9:	68 10 70 01 00       	push   $0x17010
   127be:	e8 0a ee ff ff       	call   115cd <list_insert_last>
   127c3:	83 c4 10             	add    $0x10,%esp
   127c6:	eb 01                	jmp    127c9 <task_set_sleep+0x39>
    if(ticks <= 0) return;
   127c8:	90                   	nop
        &task->run_node);
}
   127c9:	c9                   	leave  
   127ca:	c3                   	ret    

000127cb <task_set_wakeup>:

void task_set_wakeup(task_t* task) {
   127cb:	55                   	push   %ebp
   127cc:	89 e5                	mov    %esp,%ebp
   127ce:	83 ec 08             	sub    $0x8,%esp
    list_delete(&task_manager.sleep_list, 
   127d1:	8b 45 08             	mov    0x8(%ebp),%eax
   127d4:	83 c0 34             	add    $0x34,%eax
   127d7:	83 ec 08             	sub    $0x8,%esp
   127da:	50                   	push   %eax
   127db:	68 10 70 01 00       	push   $0x17010
   127e0:	e8 c5 ee ff ff       	call   116aa <list_delete>
   127e5:	83 c4 10             	add    $0x10,%esp
        &task->run_node);
   127e8:	90                   	nop
   127e9:	c9                   	leave  
   127ea:	c3                   	ret    
