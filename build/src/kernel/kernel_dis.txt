
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000005b6 memsz 0x000005b6 flags r-x
    LOAD off    0x00002000 vaddr 0x00011000 paddr 0x00011000 align 2**12
         filesz 0x00000000 memsz 0x00000c04 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b6  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000c04  00011000  00011000  00002000  2**5
                  ALLOC
  2 .comment      00000011  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  000015c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000098b  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000399  00000000  00000000  00001fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000370  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000035c  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003a9  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
00010080 l     F .text	00000007 cli
00010087 l     F .text	00000007 sti
0001008e l     F .text	00000028 lgdt
000100b6 l     F .text	00000028 lidt
000100de l     F .text	0000001d inb
000100fb l     F .text	0000001f outb
00011000 l     O .bss	00000800 gdt_table
00011800 l     O .bss	00000400 idt_table
0001021f l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000104c7 l     F .text	0000001f outb
00011c00 l     O .bss	00000004 sys_tick
0001050f l     F .text	00000072 pit_init
00000000 l    df *ABS*	00000000 init.c
000103cf g     F .text	0000000b irq_enable_global
000105b1 g     F .text	00000005 init_main
000102b2 g     F .text	0000008b irq_enable
00010023 g       .text	00000000 exception_handler_unknown
000103da g     F .text	0000002b pic_send_eoi
00010405 g     F .text	0000006d gdt_init
00010061 g       .text	00000000 exception_handler_time
00010042 g       .text	00000000 exception_handler_divider
000103c4 g     F .text	0000000b irq_disable_global
0001011a g     F .text	00000006 handle_unknown
00010599 g     F .text	00000018 kernel_init
00010000 g       .text	00000000 _start
000101ed g     F .text	00000032 irq_install
0001033d g     F .text	00000087 irq_disable
00011000 g       .bss	00000000 __bss_start
00010472 g     F .text	00000055 irq_init
000104ec g     F .text	00000023 handle_time
00010120 g     F .text	00000086 segment_desc_set
00011000 g       .bss	00000000 _edata
00011c04 g       .bss	00000000 _end
000104e6 g     F .text	00000006 handle_divider
000101a6 g     F .text	00000047 gate_desc_set
00010581 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # push %eax
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax
    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 90 05 00 00       	call   10599 <kernel_init>
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs
    jmp init_main
   1001e:	e9 8e 05 00 00       	jmp    105b1 <init_main>

00010023 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0 
   10023:	6a 00                	push   $0x0
   10025:	6a ff                	push   $0xffffffff
   10027:	60                   	pusha  
   10028:	1e                   	push   %ds
   10029:	06                   	push   %es
   1002a:	0f a0                	push   %fs
   1002c:	0f a8                	push   %gs
   1002e:	54                   	push   %esp
   1002f:	e8 e6 00 00 00       	call   1011a <handle_unknown>
   10034:	83 c4 04             	add    $0x4,%esp
   10037:	0f a9                	pop    %gs
   10039:	0f a1                	pop    %fs
   1003b:	07                   	pop    %es
   1003c:	1f                   	pop    %ds
   1003d:	61                   	popa   
   1003e:	83 c4 08             	add    $0x8,%esp
   10041:	cf                   	iret   

00010042 <exception_handler_divider>:
exception_handler divider,  0, 0 
   10042:	6a 00                	push   $0x0
   10044:	6a 00                	push   $0x0
   10046:	60                   	pusha  
   10047:	1e                   	push   %ds
   10048:	06                   	push   %es
   10049:	0f a0                	push   %fs
   1004b:	0f a8                	push   %gs
   1004d:	54                   	push   %esp
   1004e:	e8 93 04 00 00       	call   104e6 <handle_divider>
   10053:	83 c4 04             	add    $0x4,%esp
   10056:	0f a9                	pop    %gs
   10058:	0f a1                	pop    %fs
   1005a:	07                   	pop    %es
   1005b:	1f                   	pop    %ds
   1005c:	61                   	popa   
   1005d:	83 c4 08             	add    $0x8,%esp
   10060:	cf                   	iret   

00010061 <exception_handler_time>:

   10061:	6a 00                	push   $0x0
   10063:	6a 20                	push   $0x20
   10065:	60                   	pusha  
   10066:	1e                   	push   %ds
   10067:	06                   	push   %es
   10068:	0f a0                	push   %fs
   1006a:	0f a8                	push   %gs
   1006c:	54                   	push   %esp
   1006d:	e8 7a 04 00 00       	call   104ec <handle_time>
   10072:	83 c4 04             	add    $0x4,%esp
   10075:	0f a9                	pop    %gs
   10077:	0f a1                	pop    %fs
   10079:	07                   	pop    %es
   1007a:	1f                   	pop    %ds
   1007b:	61                   	popa   
   1007c:	83 c4 08             	add    $0x8,%esp
   1007f:	cf                   	iret   

00010080 <cli>:

static inline void hlt() {
	__asm__ __volatile__("hlt");
}

static inline void cli() {
   10080:	55                   	push   %ebp
   10081:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   10083:	fa                   	cli    
}
   10084:	90                   	nop
   10085:	5d                   	pop    %ebp
   10086:	c3                   	ret    

00010087 <sti>:

static inline void sti() {
   10087:	55                   	push   %ebp
   10088:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   1008a:	fb                   	sti    
}
   1008b:	90                   	nop
   1008c:	5d                   	pop    %ebp
   1008d:	c3                   	ret    

0001008e <lgdt>:

static inline void lgdt(uint32_t start, uint32_t size) {
   1008e:	55                   	push   %ebp
   1008f:	89 e5                	mov    %esp,%ebp
   10091:	83 ec 10             	sub    $0x10,%esp
		uint16_t limit;
		uint16_t start15_0;
		uint16_t start31_16;
	} gdt;

	gdt.start31_16 = start >> 16;
   10094:	8b 45 08             	mov    0x8(%ebp),%eax
   10097:	c1 e8 10             	shr    $0x10,%eax
   1009a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   1009e:	8b 45 08             	mov    0x8(%ebp),%eax
   100a1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   100a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   100a8:	83 e8 01             	sub    $0x1,%eax
   100ab:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   100af:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   100b3:	90                   	nop
   100b4:	c9                   	leave  
   100b5:	c3                   	ret    

000100b6 <lidt>:

static inline void lidt(uint32_t start, uint32_t size) {
   100b6:	55                   	push   %ebp
   100b7:	89 e5                	mov    %esp,%ebp
   100b9:	83 ec 10             	sub    $0x10,%esp
		uint16_t limit;
		uint16_t start15_0;
		uint16_t start31_16;
	} idt;

	idt.start31_16 = start >> 16;
   100bc:	8b 45 08             	mov    0x8(%ebp),%eax
   100bf:	c1 e8 10             	shr    $0x10,%eax
   100c2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   100c6:	8b 45 08             	mov    0x8(%ebp),%eax
   100c9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   100cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   100d0:	83 e8 01             	sub    $0x1,%eax
   100d3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

	__asm__ __volatile__("lidt %0"::"m"(idt));
   100d7:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   100db:	90                   	nop
   100dc:	c9                   	leave  
   100dd:	c3                   	ret    

000100de <inb>:

static inline uint8_t inb(uint16_t  port) {
   100de:	55                   	push   %ebp
   100df:	89 e5                	mov    %esp,%ebp
   100e1:	83 ec 14             	sub    $0x14,%esp
   100e4:	8b 45 08             	mov    0x8(%ebp),%eax
   100e7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint8_t rv;
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   100eb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   100ef:	89 c2                	mov    %eax,%edx
   100f1:	ec                   	in     (%dx),%al
   100f2:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   100f5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   100f9:	c9                   	leave  
   100fa:	c3                   	ret    

000100fb <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   100fb:	55                   	push   %ebp
   100fc:	89 e5                	mov    %esp,%ebp
   100fe:	83 ec 08             	sub    $0x8,%esp
   10101:	8b 55 08             	mov    0x8(%ebp),%edx
   10104:	8b 45 0c             	mov    0xc(%ebp),%eax
   10107:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1010b:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1010e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10112:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10116:	ee                   	out    %al,(%dx)
}
   10117:	90                   	nop
   10118:	c9                   	leave  
   10119:	c3                   	ret    

0001011a <handle_unknown>:
static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static gate_desc_t idt_table[IDT_TABLE_NR];


void exception_handler_unknown();
void handle_unknown(exception_frame_t * frame) {}
   1011a:	55                   	push   %ebp
   1011b:	89 e5                	mov    %esp,%ebp
   1011d:	90                   	nop
   1011e:	5d                   	pop    %ebp
   1011f:	c3                   	ret    

00010120 <segment_desc_set>:


void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   10120:	55                   	push   %ebp
   10121:	89 e5                	mov    %esp,%ebp
   10123:	83 ec 14             	sub    $0x14,%esp
   10126:	8b 45 14             	mov    0x14(%ebp),%eax
   10129:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   1012d:	8b 45 08             	mov    0x8(%ebp),%eax
   10130:	c1 f8 03             	sar    $0x3,%eax
   10133:	c1 e0 03             	shl    $0x3,%eax
   10136:	05 00 10 01 00       	add    $0x11000,%eax
   1013b:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   1013e:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10145:	76 0f                	jbe    10156 <segment_desc_set+0x36>
		attr |= 0x8000;
   10147:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1014d:	8b 45 10             	mov    0x10(%ebp),%eax
   10150:	c1 e8 0c             	shr    $0xc,%eax
   10153:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   10156:	8b 45 10             	mov    0x10(%ebp),%eax
   10159:	89 c2                	mov    %eax,%edx
   1015b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1015e:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   10161:	8b 45 0c             	mov    0xc(%ebp),%eax
   10164:	89 c2                	mov    %eax,%edx
   10166:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10169:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   1016d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10170:	c1 e8 10             	shr    $0x10,%eax
   10173:	89 c2                	mov    %eax,%edx
   10175:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10178:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1017b:	8b 45 10             	mov    0x10(%ebp),%eax
   1017e:	c1 e8 10             	shr    $0x10,%eax
   10181:	c1 e0 08             	shl    $0x8,%eax
   10184:	66 25 00 0f          	and    $0xf00,%ax
   10188:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1018c:	89 c2                	mov    %eax,%edx
   1018e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10191:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10195:	8b 45 0c             	mov    0xc(%ebp),%eax
   10198:	c1 e8 18             	shr    $0x18,%eax
   1019b:	89 c2                	mov    %eax,%edx
   1019d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   101a0:	88 50 07             	mov    %dl,0x7(%eax)
}
   101a3:	90                   	nop
   101a4:	c9                   	leave  
   101a5:	c3                   	ret    

000101a6 <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   101a6:	55                   	push   %ebp
   101a7:	89 e5                	mov    %esp,%ebp
   101a9:	83 ec 08             	sub    $0x8,%esp
   101ac:	8b 55 0c             	mov    0xc(%ebp),%edx
   101af:	8b 45 14             	mov    0x14(%ebp),%eax
   101b2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   101b6:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   101ba:	8b 45 10             	mov    0x10(%ebp),%eax
   101bd:	89 c2                	mov    %eax,%edx
   101bf:	8b 45 08             	mov    0x8(%ebp),%eax
   101c2:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   101c5:	8b 45 08             	mov    0x8(%ebp),%eax
   101c8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   101cc:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   101d0:	8b 45 08             	mov    0x8(%ebp),%eax
   101d3:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   101d7:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   101db:	8b 45 10             	mov    0x10(%ebp),%eax
   101de:	c1 e8 10             	shr    $0x10,%eax
   101e1:	89 c2                	mov    %eax,%edx
   101e3:	8b 45 08             	mov    0x8(%ebp),%eax
   101e6:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   101ea:	90                   	nop
   101eb:	c9                   	leave  
   101ec:	c3                   	ret    

000101ed <irq_install>:



int irq_install(int irq_num, irq_handler_t handler) {
   101ed:	55                   	push   %ebp
   101ee:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   101f0:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   101f4:	7e 07                	jle    101fd <irq_install+0x10>
        return -1;
   101f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   101fb:	eb 20                	jmp    1021d <irq_install+0x30>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   101fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   10200:	8b 55 08             	mov    0x8(%ebp),%edx
   10203:	c1 e2 03             	shl    $0x3,%edx
   10206:	81 c2 00 18 01 00    	add    $0x11800,%edx
   1020c:	68 00 8e 00 00       	push   $0x8e00
   10211:	50                   	push   %eax
   10212:	6a 08                	push   $0x8
   10214:	52                   	push   %edx
   10215:	e8 8c ff ff ff       	call   101a6 <gate_desc_set>
   1021a:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   1021d:	c9                   	leave  
   1021e:	c3                   	ret    

0001021f <init_pic>:

static void init_pic(void) {
   1021f:	55                   	push   %ebp
   10220:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10222:	6a 11                	push   $0x11
   10224:	6a 20                	push   $0x20
   10226:	e8 d0 fe ff ff       	call   100fb <outb>
   1022b:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   1022e:	6a 20                	push   $0x20
   10230:	6a 21                	push   $0x21
   10232:	e8 c4 fe ff ff       	call   100fb <outb>
   10237:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   1023a:	6a 04                	push   $0x4
   1023c:	6a 21                	push   $0x21
   1023e:	e8 b8 fe ff ff       	call   100fb <outb>
   10243:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10246:	6a 01                	push   $0x1
   10248:	6a 21                	push   $0x21
   1024a:	e8 ac fe ff ff       	call   100fb <outb>
   1024f:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10252:	6a 11                	push   $0x11
   10254:	68 a0 00 00 00       	push   $0xa0
   10259:	e8 9d fe ff ff       	call   100fb <outb>
   1025e:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10261:	6a 28                	push   $0x28
   10263:	68 a1 00 00 00       	push   $0xa1
   10268:	e8 8e fe ff ff       	call   100fb <outb>
   1026d:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10270:	6a 02                	push   $0x2
   10272:	68 a1 00 00 00       	push   $0xa1
   10277:	e8 7f fe ff ff       	call   100fb <outb>
   1027c:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   1027f:	6a 01                	push   $0x1
   10281:	68 a1 00 00 00       	push   $0xa1
   10286:	e8 70 fe ff ff       	call   100fb <outb>
   1028b:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   1028e:	68 fb 00 00 00       	push   $0xfb
   10293:	6a 21                	push   $0x21
   10295:	e8 61 fe ff ff       	call   100fb <outb>
   1029a:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   1029d:	68 ff 00 00 00       	push   $0xff
   102a2:	68 a1 00 00 00       	push   $0xa1
   102a7:	e8 4f fe ff ff       	call   100fb <outb>
   102ac:	83 c4 08             	add    $0x8,%esp
}
   102af:	90                   	nop
   102b0:	c9                   	leave  
   102b1:	c3                   	ret    

000102b2 <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   102b2:	55                   	push   %ebp
   102b3:	89 e5                	mov    %esp,%ebp
   102b5:	53                   	push   %ebx
   102b6:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   102b9:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   102bd:	7e 78                	jle    10337 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   102bf:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   102c3:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   102c7:	7f 32                	jg     102fb <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   102c9:	6a 21                	push   $0x21
   102cb:	e8 0e fe ff ff       	call   100de <inb>
   102d0:	83 c4 04             	add    $0x4,%esp
   102d3:	89 c2                	mov    %eax,%edx
   102d5:	8b 45 08             	mov    0x8(%ebp),%eax
   102d8:	bb 01 00 00 00       	mov    $0x1,%ebx
   102dd:	89 c1                	mov    %eax,%ecx
   102df:	d3 e3                	shl    %cl,%ebx
   102e1:	89 d8                	mov    %ebx,%eax
   102e3:	f7 d0                	not    %eax
   102e5:	21 d0                	and    %edx,%eax
   102e7:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   102ea:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   102ee:	50                   	push   %eax
   102ef:	6a 21                	push   $0x21
   102f1:	e8 05 fe ff ff       	call   100fb <outb>
   102f6:	83 c4 08             	add    $0x8,%esp
   102f9:	eb 3d                	jmp    10338 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   102fb:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   102ff:	68 a1 00 00 00       	push   $0xa1
   10304:	e8 d5 fd ff ff       	call   100de <inb>
   10309:	83 c4 04             	add    $0x4,%esp
   1030c:	89 c2                	mov    %eax,%edx
   1030e:	8b 45 08             	mov    0x8(%ebp),%eax
   10311:	bb 01 00 00 00       	mov    $0x1,%ebx
   10316:	89 c1                	mov    %eax,%ecx
   10318:	d3 e3                	shl    %cl,%ebx
   1031a:	89 d8                	mov    %ebx,%eax
   1031c:	f7 d0                	not    %eax
   1031e:	21 d0                	and    %edx,%eax
   10320:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10323:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10327:	50                   	push   %eax
   10328:	68 a1 00 00 00       	push   $0xa1
   1032d:	e8 c9 fd ff ff       	call   100fb <outb>
   10332:	83 c4 08             	add    $0x8,%esp
   10335:	eb 01                	jmp    10338 <irq_enable+0x86>
        return;
   10337:	90                   	nop
    }
}
   10338:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1033b:	c9                   	leave  
   1033c:	c3                   	ret    

0001033d <irq_disable>:

void irq_disable(int irq_num) {
   1033d:	55                   	push   %ebp
   1033e:	89 e5                	mov    %esp,%ebp
   10340:	53                   	push   %ebx
   10341:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10344:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10348:	7e 74                	jle    103be <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   1034a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   1034e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10352:	7f 30                	jg     10384 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10354:	6a 21                	push   $0x21
   10356:	e8 83 fd ff ff       	call   100de <inb>
   1035b:	83 c4 04             	add    $0x4,%esp
   1035e:	89 c3                	mov    %eax,%ebx
   10360:	8b 45 08             	mov    0x8(%ebp),%eax
   10363:	ba 01 00 00 00       	mov    $0x1,%edx
   10368:	89 c1                	mov    %eax,%ecx
   1036a:	d3 e2                	shl    %cl,%edx
   1036c:	89 d0                	mov    %edx,%eax
   1036e:	09 d8                	or     %ebx,%eax
   10370:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10373:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10377:	50                   	push   %eax
   10378:	6a 21                	push   $0x21
   1037a:	e8 7c fd ff ff       	call   100fb <outb>
   1037f:	83 c4 08             	add    $0x8,%esp
   10382:	eb 3b                	jmp    103bf <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10384:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10388:	68 a1 00 00 00       	push   $0xa1
   1038d:	e8 4c fd ff ff       	call   100de <inb>
   10392:	83 c4 04             	add    $0x4,%esp
   10395:	89 c3                	mov    %eax,%ebx
   10397:	8b 45 08             	mov    0x8(%ebp),%eax
   1039a:	ba 01 00 00 00       	mov    $0x1,%edx
   1039f:	89 c1                	mov    %eax,%ecx
   103a1:	d3 e2                	shl    %cl,%edx
   103a3:	89 d0                	mov    %edx,%eax
   103a5:	09 d8                	or     %ebx,%eax
   103a7:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   103aa:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   103ae:	50                   	push   %eax
   103af:	68 a1 00 00 00       	push   $0xa1
   103b4:	e8 42 fd ff ff       	call   100fb <outb>
   103b9:	83 c4 08             	add    $0x8,%esp
   103bc:	eb 01                	jmp    103bf <irq_disable+0x82>
        return;
   103be:	90                   	nop
    }
}
   103bf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103c2:	c9                   	leave  
   103c3:	c3                   	ret    

000103c4 <irq_disable_global>:

void irq_disable_global(void) {
   103c4:	55                   	push   %ebp
   103c5:	89 e5                	mov    %esp,%ebp
    cli();
   103c7:	e8 b4 fc ff ff       	call   10080 <cli>
}
   103cc:	90                   	nop
   103cd:	5d                   	pop    %ebp
   103ce:	c3                   	ret    

000103cf <irq_enable_global>:

void irq_enable_global(void) {
   103cf:	55                   	push   %ebp
   103d0:	89 e5                	mov    %esp,%ebp
    sti();
   103d2:	e8 b0 fc ff ff       	call   10087 <sti>
}
   103d7:	90                   	nop
   103d8:	5d                   	pop    %ebp
   103d9:	c3                   	ret    

000103da <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   103da:	55                   	push   %ebp
   103db:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   103dd:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) {
   103e1:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   103e5:	7e 0f                	jle    103f6 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   103e7:	6a 20                	push   $0x20
   103e9:	68 a0 00 00 00       	push   $0xa0
   103ee:	e8 08 fd ff ff       	call   100fb <outb>
   103f3:	83 c4 08             	add    $0x8,%esp
    }
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   103f6:	6a 20                	push   $0x20
   103f8:	6a 20                	push   $0x20
   103fa:	e8 fc fc ff ff       	call   100fb <outb>
   103ff:	83 c4 08             	add    $0x8,%esp

}
   10402:	90                   	nop
   10403:	c9                   	leave  
   10404:	c3                   	ret    

00010405 <gdt_init>:


void gdt_init() {
   10405:	55                   	push   %ebp
   10406:	89 e5                	mov    %esp,%ebp
   10408:	83 ec 10             	sub    $0x10,%esp
    for(int i=1; i < GDT_TABLE_SIZE; i++) {
   1040b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10412:	eb 19                	jmp    1042d <gdt_init+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   10414:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10417:	c1 e0 03             	shl    $0x3,%eax
   1041a:	6a 00                	push   $0x0
   1041c:	6a 00                	push   $0x0
   1041e:	6a 00                	push   $0x0
   10420:	50                   	push   %eax
   10421:	e8 fa fc ff ff       	call   10120 <segment_desc_set>
   10426:	83 c4 10             	add    $0x10,%esp
    for(int i=1; i < GDT_TABLE_SIZE; i++) {
   10429:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1042d:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10434:	7e de                	jle    10414 <gdt_init+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10436:	68 92 c0 00 00       	push   $0xc092
   1043b:	6a ff                	push   $0xffffffff
   1043d:	6a 00                	push   $0x0
   1043f:	6a 10                	push   $0x10
   10441:	e8 da fc ff ff       	call   10120 <segment_desc_set>
   10446:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NOMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G );
    
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10449:	68 9a c0 00 00       	push   $0xc09a
   1044e:	6a ff                	push   $0xffffffff
   10450:	6a 00                	push   $0x0
   10452:	6a 08                	push   $0x8
   10454:	e8 c7 fc ff ff       	call   10120 <segment_desc_set>
   10459:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NOMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G );

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1045c:	b8 00 10 01 00       	mov    $0x11000,%eax
   10461:	68 00 08 00 00       	push   $0x800
   10466:	50                   	push   %eax
   10467:	e8 22 fc ff ff       	call   1008e <lgdt>
   1046c:	83 c4 08             	add    $0x8,%esp

}
   1046f:	90                   	nop
   10470:	c9                   	leave  
   10471:	c3                   	ret    

00010472 <irq_init>:

void irq_init () {
   10472:	55                   	push   %ebp
   10473:	89 e5                	mov    %esp,%ebp
   10475:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   10478:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1047f:	eb 25                	jmp    104a6 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10481:	ba 23 00 01 00       	mov    $0x10023,%edx
   10486:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10489:	c1 e0 03             	shl    $0x3,%eax
   1048c:	05 00 18 01 00       	add    $0x11800,%eax
   10491:	68 00 8e 00 00       	push   $0x8e00
   10496:	52                   	push   %edx
   10497:	6a 08                	push   $0x8
   10499:	50                   	push   %eax
   1049a:	e8 07 fd ff ff       	call   101a6 <gate_desc_set>
   1049f:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   104a2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104a6:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   104aa:	76 d5                	jbe    10481 <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	}

    lidt((uint32_t)idt_table, sizeof(idt_table));
   104ac:	b8 00 18 01 00       	mov    $0x11800,%eax
   104b1:	68 00 04 00 00       	push   $0x400
   104b6:	50                   	push   %eax
   104b7:	e8 fa fb ff ff       	call   100b6 <lidt>
   104bc:	83 c4 08             	add    $0x8,%esp

    init_pic();
   104bf:	e8 5b fd ff ff       	call   1021f <init_pic>
}
   104c4:	90                   	nop
   104c5:	c9                   	leave  
   104c6:	c3                   	ret    

000104c7 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   104c7:	55                   	push   %ebp
   104c8:	89 e5                	mov    %esp,%ebp
   104ca:	83 ec 08             	sub    $0x8,%esp
   104cd:	8b 55 08             	mov    0x8(%ebp),%edx
   104d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   104d3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   104d7:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   104da:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   104de:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   104e2:	ee                   	out    %al,(%dx)
}
   104e3:	90                   	nop
   104e4:	c9                   	leave  
   104e5:	c3                   	ret    

000104e6 <handle_divider>:
#include "comm/cpu_ins.h"

static uint32_t sys_tick;

void exception_handler_divider();
void handle_divider(exception_frame_t * frame) {}
   104e6:	55                   	push   %ebp
   104e7:	89 e5                	mov    %esp,%ebp
   104e9:	90                   	nop
   104ea:	5d                   	pop    %ebp
   104eb:	c3                   	ret    

000104ec <handle_time>:


void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   104ec:	55                   	push   %ebp
   104ed:	89 e5                	mov    %esp,%ebp
   104ef:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   104f2:	a1 00 1c 01 00       	mov    0x11c00,%eax
   104f7:	83 c0 01             	add    $0x1,%eax
   104fa:	a3 00 1c 01 00       	mov    %eax,0x11c00
    pic_send_eoi(IRQ0_TIMER);
   104ff:	83 ec 0c             	sub    $0xc,%esp
   10502:	6a 20                	push   $0x20
   10504:	e8 d1 fe ff ff       	call   103da <pic_send_eoi>
   10509:	83 c4 10             	add    $0x10,%esp
}
   1050c:	90                   	nop
   1050d:	c9                   	leave  
   1050e:	c3                   	ret    

0001050f <pit_init>:

static void pit_init (void) {
   1050f:	55                   	push   %ebp
   10510:	89 e5                	mov    %esp,%ebp
   10512:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10515:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1051c:	6a 36                	push   $0x36
   1051e:	6a 43                	push   $0x43
   10520:	e8 a2 ff ff ff       	call   104c7 <outb>
   10525:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);   // 加载低8位
   10528:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1052b:	0f b6 c0             	movzbl %al,%eax
   1052e:	50                   	push   %eax
   1052f:	6a 40                	push   $0x40
   10531:	e8 91 ff ff ff       	call   104c7 <outb>
   10536:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   10539:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1053c:	c1 e8 08             	shr    $0x8,%eax
   1053f:	0f b6 c0             	movzbl %al,%eax
   10542:	50                   	push   %eax
   10543:	6a 40                	push   $0x40
   10545:	e8 7d ff ff ff       	call   104c7 <outb>
   1054a:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, exception_handler_time);
   1054d:	83 ec 08             	sub    $0x8,%esp
   10550:	68 61 00 01 00       	push   $0x10061
   10555:	6a 20                	push   $0x20
   10557:	e8 91 fc ff ff       	call   101ed <irq_install>
   1055c:	83 c4 10             	add    $0x10,%esp
    irq_install(0, exception_handler_divider);
   1055f:	83 ec 08             	sub    $0x8,%esp
   10562:	68 42 00 01 00       	push   $0x10042
   10567:	6a 00                	push   $0x0
   10569:	e8 7f fc ff ff       	call   101ed <irq_install>
   1056e:	83 c4 10             	add    $0x10,%esp
    
    irq_enable(IRQ0_TIMER);
   10571:	83 ec 0c             	sub    $0xc,%esp
   10574:	6a 20                	push   $0x20
   10576:	e8 37 fd ff ff       	call   102b2 <irq_enable>
   1057b:	83 c4 10             	add    $0x10,%esp
}
   1057e:	90                   	nop
   1057f:	c9                   	leave  
   10580:	c3                   	ret    

00010581 <time_init>:

void time_init() {
   10581:	55                   	push   %ebp
   10582:	89 e5                	mov    %esp,%ebp
   10584:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10587:	c7 05 00 1c 01 00 00 	movl   $0x0,0x11c00
   1058e:	00 00 00 

    pit_init();
   10591:	e8 79 ff ff ff       	call   1050f <pit_init>
   10596:	90                   	nop
   10597:	c9                   	leave  
   10598:	c3                   	ret    

00010599 <kernel_init>:
#include <loader/loader.h>
#include <cpu.h>
#include "mtime.h"

void kernel_init (boot_info_t * boot_info) {
   10599:	55                   	push   %ebp
   1059a:	89 e5                	mov    %esp,%ebp
   1059c:	83 ec 08             	sub    $0x8,%esp
    gdt_init();
   1059f:	e8 61 fe ff ff       	call   10405 <gdt_init>
    irq_init();
   105a4:	e8 c9 fe ff ff       	call   10472 <irq_init>
    time_init();
   105a9:	e8 d3 ff ff ff       	call   10581 <time_init>
    
    // irq_enable_global();
}
   105ae:	90                   	nop
   105af:	c9                   	leave  
   105b0:	c3                   	ret    

000105b1 <init_main>:

void init_main() {
   105b1:	55                   	push   %ebp
   105b2:	89 e5                	mov    %esp,%ebp
    // int a = 3 / 0;
    
    for(;;) {}
   105b4:	eb fe                	jmp    105b4 <init_main+0x3>
