
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002545 memsz 0x00002545 flags r-x
    LOAD off    0x00004000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000004 memsz 0x00008ed0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000222c  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000319  0001222c  0001222c  0000322c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00200000  00200000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008eb0  00200020  00200020  00004004  2**5
                  ALLOC
  4 .debug_line   00000f42  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e0c  00000000  00000000  00004f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e2e  00000000  00000000  00007d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000180  00000000  00000000  00008b80  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000c03  00000000  00000000  00008d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00009903  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000f18  00000000  00000000  00009914  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
0001222c l    d  .rodata	00000000 .rodata
00200000 l    d  .data	00000000 .data
00200020 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 mtime.c
000102bb l     F .text	0000001f outb
00200020 l     O .bss	00000004 sys_tick
00010302 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 gdt.c
0001037b l     F .text	00000028 lgdt
00200040 l     O .bss	00000800 gdt_table2
00000000 l    df *ABS*	00000000 init.c
000104db l     F .text	0000000b list_count
000104e6 l     F .text	0000000a list_first
000104f0 l     F .text	0000000b list_last
00000000 l    df *ABS*	00000000 irq.c
00010760 l     F .text	00000007 hlt
00010767 l     F .text	00000007 cli
0001076e l     F .text	00000007 sti
00010775 l     F .text	00000028 lidt
0001079d l     F .text	0000001d inb
000107ba l     F .text	0000001f outb
000107d9 l     F .text	00000010 read_eflags
000107e9 l     F .text	0000000b write_eflags
00200840 l     O .bss	00000400 idt_table
000107f4 l     F .text	00000030 default_handler
00010acb l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00200000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 list.c
00011528 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011721 l     F .text	0000001d inb
0001173e l     F .text	0000001f outb
00200c40 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mutex.c
000118d8 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00011a62 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 task.c
00011ba6 l     F .text	0000001b list_node_init
00011bc1 l     F .text	0000000b list_node_next
00011bcc l     F .text	0000000b list_count
00011bd7 l     F .text	0000000a list_first
00011be1 l     F .text	00000007 hlt
00011be8 l     F .text	0000000a idle_task_func
00200c60 l     O .bss	00000198 task_manager
00200e00 l     O .bss	00002000 task1_stack
00202e00 l     O .bss	00002000 idle_task_stack
00204e00 l     O .bss	00002000 task3_stack
00206e00 l     O .bss	000000b8 task3
00010ec8 g     F .text	0000003a bitmap_get_bit
00011f31 g     F .text	0000000a task_current
00010e36 g     F .text	00000018 irq_enter_proection
0001169c g     F .text	00000085 list_delete
00010e00 g     F .text	0000000b irq_enable_global
000115bf g     F .text	00000064 list_insert_last
00011f3b g     F .text	00000035 task_set_ready
00010f02 g     F .text	0000001b bitmap_is_set
000108b0 g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
00011e8b g     F .text	00000039 task3_func
00010a38 g     F .text	0000001c handle_virtual_exception
0001175d g     F .text	0000009d log_init
00208ec0 g     O .bss	00000010 sem_test
00010720 g     F .text	00000040 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
0001115b g     F .text	0000007a k_strncmp
00010958 g     F .text	0000001c handle_segment_not_present
00010ce3 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
0001085c g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
00011c10 g     F .text	000000cc tss_init
000101b3 g       .text	00000000 exception_handler_general_protection
00011b7d g     F .text	00000029 sem_count
00010f1d g     F .text	000000d4 bitmap_set_bit
000109ac g     F .text	0000001c handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010e0b g     F .text	0000002b pic_send_eoi
00011e42 g     F .text	00000049 task1_func
00011a90 g     F .text	0000006b sem_wait
000110a4 g     F .text	00000047 k_strcpy
000110eb g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010429 g     F .text	0000006d gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
00206ec0 g     O .bss	00002000 stack
00012179 g     F .text	00000058 sys_sleep
0001055d g     F .text	00000163 list_test
000108e8 g     F .text	0000001c handle_invalid_opcode
000111d5 g     F .text	0000003b k_strlen
000112a0 g     F .text	00000064 k_memcmp
000100e2 g       .text	00000000 exception_handler_bound_range
00011afb g     F .text	00000082 sem_notify
00011f27 g     F .text	0000000a get_first_task
0001015c g       .text	00000000 exception_handler_invalid_tss
000113db g     F .text	0000014d k_vsprint
00011560 g     F .text	0000005f list_insert_first
0001220c g     F .text	00000020 task_set_wakeup
00010047 g       .text	00000000 exception_handler_divider
000109c8 g     F .text	0000001c handle_fpu_error
00010df5 g     F .text	0000000b irq_disable_global
00011f9b g     F .text	00000061 sys_sched_yield
00010824 g     F .text	0000001c handle_unknown
000104fb g     F .text	0000001d kernel_init
0001125f g     F .text	00000041 k_memset
00011a6d g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010518 g     F .text	00000045 show_list
00011911 g     F .text	00000094 mutex_lock
00010229 g       .text	00000000 exception_handler_machine_check
000121d1 g     F .text	0000003b task_set_sleep
00010a9b g     F .text	00000030 irq_install
00010a1c g     F .text	0000001c handle_smd_exception
000118e3 g     F .text	0000002e mutex_init
00011ec4 g     F .text	00000063 task1_func_init
00010d6e g     F .text	00000087 irq_disable
00010990 g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
00010e4e g     F .text	00000011 irq_leave_proection
00010e5f g     F .text	00000016 bitmap_byte_count
000109e4 g     F .text	0000001c handle_alignment_check
0001203f g     F .text	0000005c task_dispatch
00010a00 g     F .text	0000001c handle_machine_check
00011ffc g     F .text	00000043 task_next_run
0001153b g     F .text	00000025 list_init
00010974 g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
00011f70 g     F .text	0000002b task_set_block
000108cc g     F .text	0000001c handle_bound_range
000101ed g       .text	00000000 exception_handler_fpu_error
00011bf2 g     F .text	0000001e task_switch_from_to
00010b5e g     F .text	00000185 irq_init
00011304 g     F .text	000000d7 k_itoa
000119a5 g     F .text	000000bd mutex_unlock
00010920 g     F .text	0000001c handle_double_fault
000102da g     F .text	00000028 handle_time
000103a3 g     F .text	00000086 segment_desc_set
000106c0 g     F .text	00000060 offset_test
00010894 g     F .text	0000001c handle_breakpoint
00010e75 g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010ff1 g     F .text	000000b3 bitmap_alloc_nbits
00011ded g     F .text	00000055 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
0001209b g     F .text	000000de task_time_tick
00010904 g     F .text	0000001c handle_device_unavailable
00010840 g     F .text	0000001c handle_divider
00011210 g     F .text	0000004f k_memcpy
00011cdc g     F .text	00000111 task_init
00010496 g     F .text	00000045 gdt_alloc_desc
00011623 g     F .text	00000079 list_delete_first
00010a54 g     F .text	00000047 gate_desc_set
000117fa g     F .text	000000de klog
00010878 g     F .text	0000001c handle_NMI
0001093c g     F .text	0000001c handle_invalid_tss
00010363 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 f2 04 00 00       	call   104fb <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc c0 8e 20 00       	mov    $0x208ec0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 f8 06 00 00       	jmp    10720 <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 eb 07 00 00       	call   10824 <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 e8 07 00 00       	call   10840 <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 e5 07 00 00       	call   1085c <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 e2 07 00 00       	call   10878 <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 df 07 00 00       	call   10894 <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 dc 07 00 00       	call   108b0 <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 d9 07 00 00       	call   108cc <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 d6 07 00 00       	call   108e8 <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 d3 07 00 00       	call   10904 <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 d2 07 00 00       	call   10920 <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 d1 07 00 00       	call   1093c <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 d0 07 00 00       	call   10958 <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 cf 07 00 00       	call   10974 <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 ce 07 00 00       	call   10990 <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 cd 07 00 00       	call   109ac <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 ca 07 00 00       	call   109c8 <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 c9 07 00 00       	call   109e4 <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 c6 07 00 00       	call   10a00 <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 c3 07 00 00       	call   10a1c <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 c0 07 00 00       	call   10a38 <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 43 00 00 00       	call   102da <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch

simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp
    
    sti
   102b9:	fb                   	sti    
   102ba:	c3                   	ret    

000102bb <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   102bb:	55                   	push   %ebp
   102bc:	89 e5                	mov    %esp,%ebp
   102be:	83 ec 08             	sub    $0x8,%esp
   102c1:	8b 55 08             	mov    0x8(%ebp),%edx
   102c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   102cb:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   102ce:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   102d2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   102d6:	ee                   	out    %al,(%dx)
}
   102d7:	90                   	nop
   102d8:	c9                   	leave  
   102d9:	c3                   	ret    

000102da <handle_time>:


static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   102da:	55                   	push   %ebp
   102db:	89 e5                	mov    %esp,%ebp
   102dd:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   102e0:	a1 20 00 20 00       	mov    0x200020,%eax
   102e5:	83 c0 01             	add    $0x1,%eax
   102e8:	a3 20 00 20 00       	mov    %eax,0x200020
    pic_send_eoi(IRQ0_TIMER);
   102ed:	83 ec 0c             	sub    $0xc,%esp
   102f0:	6a 20                	push   $0x20
   102f2:	e8 14 0b 00 00       	call   10e0b <pic_send_eoi>
   102f7:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   102fa:	e8 9c 1d 00 00       	call   1209b <task_time_tick>
} 
   102ff:	90                   	nop
   10300:	c9                   	leave  
   10301:	c3                   	ret    

00010302 <pit_init>:

static void pit_init (void) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
   10305:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10308:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1030f:	6a 36                	push   $0x36
   10311:	6a 43                	push   $0x43
   10313:	e8 a3 ff ff ff       	call   102bb <outb>
   10318:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   1031b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1031e:	0f b6 c0             	movzbl %al,%eax
   10321:	50                   	push   %eax
   10322:	6a 40                	push   $0x40
   10324:	e8 92 ff ff ff       	call   102bb <outb>
   10329:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   1032c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1032f:	c1 e8 08             	shr    $0x8,%eax
   10332:	0f b6 c0             	movzbl %al,%eax
   10335:	50                   	push   %eax
   10336:	6a 40                	push   $0x40
   10338:	e8 7e ff ff ff       	call   102bb <outb>
   1033d:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   10340:	b8 86 02 01 00       	mov    $0x10286,%eax
   10345:	83 ec 08             	sub    $0x8,%esp
   10348:	50                   	push   %eax
   10349:	6a 20                	push   $0x20
   1034b:	e8 4b 07 00 00       	call   10a9b <irq_install>
   10350:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10353:	83 ec 0c             	sub    $0xc,%esp
   10356:	6a 20                	push   $0x20
   10358:	e8 86 09 00 00       	call   10ce3 <irq_enable>
   1035d:	83 c4 10             	add    $0x10,%esp
}
   10360:	90                   	nop
   10361:	c9                   	leave  
   10362:	c3                   	ret    

00010363 <time_init>:

void time_init() {
   10363:	55                   	push   %ebp
   10364:	89 e5                	mov    %esp,%ebp
   10366:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10369:	c7 05 20 00 20 00 00 	movl   $0x0,0x200020
   10370:	00 00 00 

    pit_init();
   10373:	e8 8a ff ff ff       	call   10302 <pit_init>
   10378:	90                   	nop
   10379:	c9                   	leave  
   1037a:	c3                   	ret    

0001037b <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1037b:	55                   	push   %ebp
   1037c:	89 e5                	mov    %esp,%ebp
   1037e:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   10381:	8b 45 08             	mov    0x8(%ebp),%eax
   10384:	c1 e8 10             	shr    $0x10,%eax
   10387:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   10392:	8b 45 0c             	mov    0xc(%ebp),%eax
   10395:	83 e8 01             	sub    $0x1,%eax
   10398:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1039c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   103a0:	90                   	nop
   103a1:	c9                   	leave  
   103a2:	c3                   	ret    

000103a3 <segment_desc_set>:



static segment_desc_t gdt_table2[GDT_TABLE_SIZE];

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   103a3:	55                   	push   %ebp
   103a4:	89 e5                	mov    %esp,%ebp
   103a6:	83 ec 14             	sub    $0x14,%esp
   103a9:	8b 45 14             	mov    0x14(%ebp),%eax
   103ac:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table2 + (selector >> 3);
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	c1 f8 03             	sar    $0x3,%eax
   103b6:	c1 e0 03             	shl    $0x3,%eax
   103b9:	05 40 00 20 00       	add    $0x200040,%eax
   103be:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   103c1:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   103c8:	76 0f                	jbe    103d9 <segment_desc_set+0x36>
		attr |= 0x8000;
   103ca:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   103d0:	8b 45 10             	mov    0x10(%ebp),%eax
   103d3:	c1 e8 0c             	shr    $0xc,%eax
   103d6:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   103d9:	8b 45 10             	mov    0x10(%ebp),%eax
   103dc:	89 c2                	mov    %eax,%edx
   103de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103e1:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   103e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103e7:	89 c2                	mov    %eax,%edx
   103e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103ec:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   103f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   103f3:	c1 e8 10             	shr    $0x10,%eax
   103f6:	89 c2                	mov    %eax,%edx
   103f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103fb:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   103fe:	8b 45 10             	mov    0x10(%ebp),%eax
   10401:	c1 e8 10             	shr    $0x10,%eax
   10404:	c1 e0 08             	shl    $0x8,%eax
   10407:	66 25 00 0f          	and    $0xf00,%ax
   1040b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1040f:	89 c2                	mov    %eax,%edx
   10411:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10414:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10418:	8b 45 0c             	mov    0xc(%ebp),%eax
   1041b:	c1 e8 18             	shr    $0x18,%eax
   1041e:	89 c2                	mov    %eax,%edx
   10420:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10423:	88 50 07             	mov    %dl,0x7(%eax)
}
   10426:	90                   	nop
   10427:	c9                   	leave  
   10428:	c3                   	ret    

00010429 <gdt_init>:

void gdt_init() {
   10429:	55                   	push   %ebp
   1042a:	89 e5                	mov    %esp,%ebp
   1042c:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1042f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10436:	eb 19                	jmp    10451 <gdt_init+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10438:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1043b:	c1 e0 03             	shl    $0x3,%eax
   1043e:	6a 00                	push   $0x0
   10440:	6a 00                	push   $0x0
   10442:	6a 00                	push   $0x0
   10444:	50                   	push   %eax
   10445:	e8 59 ff ff ff       	call   103a3 <segment_desc_set>
   1044a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10451:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10458:	7e de                	jle    10438 <gdt_init+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1045a:	68 92 c0 00 00       	push   $0xc092
   1045f:	6a ff                	push   $0xffffffff
   10461:	6a 00                	push   $0x0
   10463:	6a 10                	push   $0x10
   10465:	e8 39 ff ff ff       	call   103a3 <segment_desc_set>
   1046a:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1046d:	68 9a c0 00 00       	push   $0xc09a
   10472:	6a ff                	push   $0xffffffff
   10474:	6a 00                	push   $0x0
   10476:	6a 08                	push   $0x8
   10478:	e8 26 ff ff ff       	call   103a3 <segment_desc_set>
   1047d:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)gdt_table2, sizeof(gdt_table2));
   10480:	b8 40 00 20 00       	mov    $0x200040,%eax
   10485:	68 00 08 00 00       	push   $0x800
   1048a:	50                   	push   %eax
   1048b:	e8 eb fe ff ff       	call   1037b <lgdt>
   10490:	83 c4 08             	add    $0x8,%esp

}
   10493:	90                   	nop
   10494:	c9                   	leave  
   10495:	c3                   	ret    

00010496 <gdt_alloc_desc>:

int  gdt_alloc_desc() {
   10496:	55                   	push   %ebp
   10497:	89 e5                	mov    %esp,%ebp
   10499:	83 ec 10             	sub    $0x10,%esp
    int i = 1;
   1049c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    for(; i < GDT_TABLE_SIZE; i++) {
   104a3:	eb 26                	jmp    104cb <gdt_alloc_desc+0x35>
        segment_desc_t* desc = gdt_table2 + i;
   104a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104a8:	c1 e0 03             	shl    $0x3,%eax
   104ab:	05 40 00 20 00       	add    $0x200040,%eax
   104b0:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   104b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   104b6:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104ba:	66 85 c0             	test   %ax,%ax
   104bd:	75 08                	jne    104c7 <gdt_alloc_desc+0x31>
            return ( i * sizeof(segment_desc_t) );
   104bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104c2:	c1 e0 03             	shl    $0x3,%eax
   104c5:	eb 12                	jmp    104d9 <gdt_alloc_desc+0x43>
    for(; i < GDT_TABLE_SIZE; i++) {
   104c7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104cb:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   104d2:	7e d1                	jle    104a5 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   104d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   104d9:	c9                   	leave  
   104da:	c3                   	ret    

000104db <list_count>:

static inline int list_is_empty (list_t* list) {
    return list->count == 0;
}

static inline int list_count (list_t* list) {
   104db:	55                   	push   %ebp
   104dc:	89 e5                	mov    %esp,%ebp
    return list->count;
   104de:	8b 45 08             	mov    0x8(%ebp),%eax
   104e1:	8b 40 08             	mov    0x8(%eax),%eax
}
   104e4:	5d                   	pop    %ebp
   104e5:	c3                   	ret    

000104e6 <list_first>:

static inline list_node_t* list_first (list_t* list) {
   104e6:	55                   	push   %ebp
   104e7:	89 e5                	mov    %esp,%ebp
    return list->first;
   104e9:	8b 45 08             	mov    0x8(%ebp),%eax
   104ec:	8b 00                	mov    (%eax),%eax
}
   104ee:	5d                   	pop    %ebp
   104ef:	c3                   	ret    

000104f0 <list_last>:

static inline list_node_t* list_last (list_t* list) {
   104f0:	55                   	push   %ebp
   104f1:	89 e5                	mov    %esp,%ebp
    return list->last;
   104f3:	8b 45 08             	mov    0x8(%ebp),%eax
   104f6:	8b 40 04             	mov    0x4(%eax),%eax
}
   104f9:	5d                   	pop    %ebp
   104fa:	c3                   	ret    

000104fb <kernel_init>:
#include <mtime.h>
#include <log.h>
#include <task.h>
#include <list.h>

void kernel_init (boot_info_t * boot_info) {
   104fb:	55                   	push   %ebp
   104fc:	89 e5                	mov    %esp,%ebp
   104fe:	83 ec 08             	sub    $0x8,%esp
    log_init();
   10501:	e8 57 12 00 00       	call   1175d <log_init>
    gdt_init();
   10506:	e8 1e ff ff ff       	call   10429 <gdt_init>
    irq_init();
   1050b:	e8 4e 06 00 00       	call   10b5e <irq_init>
    time_init();
   10510:	e8 4e fe ff ff       	call   10363 <time_init>
}
   10515:	90                   	nop
   10516:	c9                   	leave  
   10517:	c3                   	ret    

00010518 <show_list>:


void show_list(list_t list) {
   10518:	55                   	push   %ebp
   10519:	89 e5                	mov    %esp,%ebp
   1051b:	56                   	push   %esi
   1051c:	53                   	push   %ebx
    klog("list: first=0x%x, last=0x%x, count=%d",
   1051d:	8d 45 08             	lea    0x8(%ebp),%eax
   10520:	50                   	push   %eax
   10521:	e8 b5 ff ff ff       	call   104db <list_count>
   10526:	83 c4 04             	add    $0x4,%esp
   10529:	89 c6                	mov    %eax,%esi
   1052b:	8d 45 08             	lea    0x8(%ebp),%eax
   1052e:	50                   	push   %eax
   1052f:	e8 bc ff ff ff       	call   104f0 <list_last>
   10534:	83 c4 04             	add    $0x4,%esp
   10537:	89 c3                	mov    %eax,%ebx
   10539:	8d 45 08             	lea    0x8(%ebp),%eax
   1053c:	50                   	push   %eax
   1053d:	e8 a4 ff ff ff       	call   104e6 <list_first>
   10542:	83 c4 04             	add    $0x4,%esp
   10545:	56                   	push   %esi
   10546:	53                   	push   %ebx
   10547:	50                   	push   %eax
   10548:	68 2c 22 01 00       	push   $0x1222c
   1054d:	e8 a8 12 00 00       	call   117fa <klog>
   10552:	83 c4 10             	add    $0x10,%esp
         list_first(&list), list_last(&list), list_count(&list) );
}
   10555:	90                   	nop
   10556:	8d 65 f8             	lea    -0x8(%ebp),%esp
   10559:	5b                   	pop    %ebx
   1055a:	5e                   	pop    %esi
   1055b:	5d                   	pop    %ebp
   1055c:	c3                   	ret    

0001055d <list_test>:

void list_test() {
   1055d:	55                   	push   %ebp
   1055e:	89 e5                	mov    %esp,%ebp
   10560:	83 ec 58             	sub    $0x58,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   10563:	83 ec 0c             	sub    $0xc,%esp
   10566:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10569:	50                   	push   %eax
   1056a:	e8 cc 0f 00 00       	call   1153b <list_init>
   1056f:	83 c4 10             	add    $0x10,%esp

    show_list(list);
   10572:	83 ec 04             	sub    $0x4,%esp
   10575:	ff 75 dc             	pushl  -0x24(%ebp)
   10578:	ff 75 d8             	pushl  -0x28(%ebp)
   1057b:	ff 75 d4             	pushl  -0x2c(%ebp)
   1057e:	e8 95 ff ff ff       	call   10518 <show_list>
   10583:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10586:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1058d:	eb 3f                	jmp    105ce <list_test+0x71>
        list_node_t * node = nodes + i;
   1058f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10592:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   10599:	8d 45 ac             	lea    -0x54(%ebp),%eax
   1059c:	01 d0                	add    %edx,%eax
   1059e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   105a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
   105a4:	83 ec 04             	sub    $0x4,%esp
   105a7:	50                   	push   %eax
   105a8:	ff 75 f4             	pushl  -0xc(%ebp)
   105ab:	68 54 22 01 00       	push   $0x12254
   105b0:	e8 45 12 00 00       	call   117fa <klog>
   105b5:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   105b8:	83 ec 08             	sub    $0x8,%esp
   105bb:	ff 75 e0             	pushl  -0x20(%ebp)
   105be:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105c1:	50                   	push   %eax
   105c2:	e8 99 0f 00 00       	call   11560 <list_insert_first>
   105c7:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   105ca:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105ce:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   105d2:	7e bb                	jle    1058f <list_test+0x32>
    }
    show_list(list);
   105d4:	83 ec 04             	sub    $0x4,%esp
   105d7:	ff 75 dc             	pushl  -0x24(%ebp)
   105da:	ff 75 d8             	pushl  -0x28(%ebp)
   105dd:	ff 75 d4             	pushl  -0x2c(%ebp)
   105e0:	e8 33 ff ff ff       	call   10518 <show_list>
   105e5:	83 c4 10             	add    $0x10,%esp

    list_init(&list);
   105e8:	83 ec 0c             	sub    $0xc,%esp
   105eb:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105ee:	50                   	push   %eax
   105ef:	e8 47 0f 00 00       	call   1153b <list_init>
   105f4:	83 c4 10             	add    $0x10,%esp
    show_list(list);
   105f7:	83 ec 04             	sub    $0x4,%esp
   105fa:	ff 75 dc             	pushl  -0x24(%ebp)
   105fd:	ff 75 d8             	pushl  -0x28(%ebp)
   10600:	ff 75 d4             	pushl  -0x2c(%ebp)
   10603:	e8 10 ff ff ff       	call   10518 <show_list>
   10608:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   1060b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10612:	eb 3f                	jmp    10653 <list_test+0xf6>
        list_node_t * node = nodes + i;
   10614:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10617:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1061e:	8d 45 ac             	lea    -0x54(%ebp),%eax
   10621:	01 d0                	add    %edx,%eax
   10623:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   10626:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10629:	83 ec 04             	sub    $0x4,%esp
   1062c:	50                   	push   %eax
   1062d:	ff 75 f0             	pushl  -0x10(%ebp)
   10630:	68 54 22 01 00       	push   $0x12254
   10635:	e8 c0 11 00 00       	call   117fa <klog>
   1063a:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   1063d:	83 ec 08             	sub    $0x8,%esp
   10640:	ff 75 e4             	pushl  -0x1c(%ebp)
   10643:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10646:	50                   	push   %eax
   10647:	e8 73 0f 00 00       	call   115bf <list_insert_last>
   1064c:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   1064f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10653:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   10657:	7e bb                	jle    10614 <list_test+0xb7>
    }
    show_list(list);
   10659:	83 ec 04             	sub    $0x4,%esp
   1065c:	ff 75 dc             	pushl  -0x24(%ebp)
   1065f:	ff 75 d8             	pushl  -0x28(%ebp)
   10662:	ff 75 d4             	pushl  -0x2c(%ebp)
   10665:	e8 ae fe ff ff       	call   10518 <show_list>
   1066a:	83 c4 10             	add    $0x10,%esp
    
    for(int i=0; i<5; i++) {
   1066d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10674:	eb 2d                	jmp    106a3 <list_test+0x146>
        list_node_t* node = list_delete_first(&list);
   10676:	83 ec 0c             	sub    $0xc,%esp
   10679:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   1067c:	50                   	push   %eax
   1067d:	e8 a1 0f 00 00       	call   11623 <list_delete_first>
   10682:	83 c4 10             	add    $0x10,%esp
   10685:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("delete first from list: %d, 0x%x", i, (uint32_t)node);
   10688:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1068b:	83 ec 04             	sub    $0x4,%esp
   1068e:	50                   	push   %eax
   1068f:	ff 75 ec             	pushl  -0x14(%ebp)
   10692:	68 74 22 01 00       	push   $0x12274
   10697:	e8 5e 11 00 00       	call   117fa <klog>
   1069c:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   1069f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   106a3:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   106a7:	7e cd                	jle    10676 <list_test+0x119>
    }

    show_list(list);
   106a9:	83 ec 04             	sub    $0x4,%esp
   106ac:	ff 75 dc             	pushl  -0x24(%ebp)
   106af:	ff 75 d8             	pushl  -0x28(%ebp)
   106b2:	ff 75 d4             	pushl  -0x2c(%ebp)
   106b5:	e8 5e fe ff ff       	call   10518 <show_list>
   106ba:	83 c4 10             	add    $0x10,%esp

}
   106bd:	90                   	nop
   106be:	c9                   	leave  
   106bf:	c3                   	ret    

000106c0 <offset_test>:

void offset_test() {
   106c0:	55                   	push   %ebp
   106c1:	89 e5                	mov    %esp,%ebp
   106c3:	83 ec 28             	sub    $0x28,%esp
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   106c6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   106cd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   106d4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   106db:	c7 45 e4 56 34 12 00 	movl   $0x123456,-0x1c(%ebp)

    list_node_t * v_node = &v.node;
   106e2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   106e5:	83 c0 04             	add    $0x4,%eax
   106e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   106eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   106ef:	74 08                	je     106f9 <offset_test+0x39>
   106f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106f4:	83 e8 04             	sub    $0x4,%eax
   106f7:	eb 05                	jmp    106fe <offset_test+0x3e>
   106f9:	b8 00 00 00 00       	mov    $0x0,%eax
   106fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    if(p->i != 0x123456) {
   10701:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10704:	8b 00                	mov    (%eax),%eax
   10706:	3d 56 34 12 00       	cmp    $0x123456,%eax
   1070b:	74 10                	je     1071d <offset_test+0x5d>
        klog("error");
   1070d:	83 ec 0c             	sub    $0xc,%esp
   10710:	68 95 22 01 00       	push   $0x12295
   10715:	e8 e0 10 00 00       	call   117fa <klog>
   1071a:	83 c4 10             	add    $0x10,%esp
    }
}
   1071d:	90                   	nop
   1071e:	c9                   	leave  
   1071f:	c3                   	ret    

00010720 <init_main>:


void init_main() {
   10720:	55                   	push   %ebp
   10721:	89 e5                	mov    %esp,%ebp
   10723:	83 ec 08             	sub    $0x8,%esp
    klog("Kernal %s is running ... ", "1.0.0");
   10726:	83 ec 08             	sub    $0x8,%esp
   10729:	68 9b 22 01 00       	push   $0x1229b
   1072e:	68 a1 22 01 00       	push   $0x122a1
   10733:	e8 c2 10 00 00       	call   117fa <klog>
   10738:	83 c4 10             	add    $0x10,%esp

    task_manager_init();
   1073b:	e8 ad 16 00 00       	call   11ded <task_manager_init>
    task1_func_init();
   10740:	e8 7f 17 00 00       	call   11ec4 <task1_func_init>
    irq_enable_global();
   10745:	e8 b6 06 00 00       	call   10e00 <irq_enable_global>
    
    task_switch_from_to(0, get_first_task());
   1074a:	e8 d8 17 00 00       	call   11f27 <get_first_task>
   1074f:	83 ec 08             	sub    $0x8,%esp
   10752:	50                   	push   %eax
   10753:	6a 00                	push   $0x0
   10755:	e8 98 14 00 00       	call   11bf2 <task_switch_from_to>
   1075a:	83 c4 10             	add    $0x10,%esp
   1075d:	90                   	nop
   1075e:	c9                   	leave  
   1075f:	c3                   	ret    

00010760 <hlt>:
static inline void hlt() {
   10760:	55                   	push   %ebp
   10761:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   10763:	f4                   	hlt    
}
   10764:	90                   	nop
   10765:	5d                   	pop    %ebp
   10766:	c3                   	ret    

00010767 <cli>:
static inline void cli() {
   10767:	55                   	push   %ebp
   10768:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   1076a:	fa                   	cli    
}
   1076b:	90                   	nop
   1076c:	5d                   	pop    %ebp
   1076d:	c3                   	ret    

0001076e <sti>:
static inline void sti() {
   1076e:	55                   	push   %ebp
   1076f:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   10771:	fb                   	sti    
}
   10772:	90                   	nop
   10773:	5d                   	pop    %ebp
   10774:	c3                   	ret    

00010775 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10775:	55                   	push   %ebp
   10776:	89 e5                	mov    %esp,%ebp
   10778:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   1077b:	8b 45 08             	mov    0x8(%ebp),%eax
   1077e:	c1 e8 10             	shr    $0x10,%eax
   10781:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   10785:	8b 45 08             	mov    0x8(%ebp),%eax
   10788:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   1078c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1078f:	83 e8 01             	sub    $0x1,%eax
   10792:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   10796:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1079a:	90                   	nop
   1079b:	c9                   	leave  
   1079c:	c3                   	ret    

0001079d <inb>:
static inline uint8_t inb(uint16_t  port) {
   1079d:	55                   	push   %ebp
   1079e:	89 e5                	mov    %esp,%ebp
   107a0:	83 ec 14             	sub    $0x14,%esp
   107a3:	8b 45 08             	mov    0x8(%ebp),%eax
   107a6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   107aa:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   107ae:	89 c2                	mov    %eax,%edx
   107b0:	ec                   	in     (%dx),%al
   107b1:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   107b4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   107b8:	c9                   	leave  
   107b9:	c3                   	ret    

000107ba <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   107ba:	55                   	push   %ebp
   107bb:	89 e5                	mov    %esp,%ebp
   107bd:	83 ec 08             	sub    $0x8,%esp
   107c0:	8b 55 08             	mov    0x8(%ebp),%edx
   107c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   107c6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   107ca:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   107cd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   107d1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   107d5:	ee                   	out    %al,(%dx)
}
   107d6:	90                   	nop
   107d7:	c9                   	leave  
   107d8:	c3                   	ret    

000107d9 <read_eflags>:

static inline void write_tr (uint16_t tss_selector) {
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
}

static inline uint32_t read_eflags() {
   107d9:	55                   	push   %ebp
   107da:	89 e5                	mov    %esp,%ebp
   107dc:	83 ec 10             	sub    $0x10,%esp
	uint32_t eflags;

	__asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   107df:	9c                   	pushf  
   107e0:	58                   	pop    %eax
   107e1:	89 45 fc             	mov    %eax,-0x4(%ebp)

	return eflags;
   107e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   107e7:	c9                   	leave  
   107e8:	c3                   	ret    

000107e9 <write_eflags>:

static inline void write_eflags(uint32_t eflags) {
   107e9:	55                   	push   %ebp
   107ea:	89 e5                	mov    %esp,%ebp

	__asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   107ec:	8b 45 08             	mov    0x8(%ebp),%eax
   107ef:	50                   	push   %eax
   107f0:	9d                   	popf   


}
   107f1:	90                   	nop
   107f2:	5d                   	pop    %ebp
   107f3:	c3                   	ret    

000107f4 <default_handler>:

//  -----------------------------------------   中断相关    -------------------------------------------
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void default_handler (exception_frame_t * frame, const char * message) {
   107f4:	55                   	push   %ebp
   107f5:	89 e5                	mov    %esp,%ebp
   107f7:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   107fa:	83 ec 0c             	sub    $0xc,%esp
   107fd:	68 bc 22 01 00       	push   $0x122bc
   10802:	e8 f3 0f 00 00       	call   117fa <klog>
   10807:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   1080a:	83 ec 08             	sub    $0x8,%esp
   1080d:	ff 75 0c             	pushl  0xc(%ebp)
   10810:	68 dd 22 01 00       	push   $0x122dd
   10815:	e8 e0 0f 00 00       	call   117fa <klog>
   1081a:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   1081d:	e8 3e ff ff ff       	call   10760 <hlt>
   10822:	eb f9                	jmp    1081d <default_handler+0x29>

00010824 <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   10824:	55                   	push   %ebp
   10825:	89 e5                	mov    %esp,%ebp
   10827:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   1082a:	83 ec 08             	sub    $0x8,%esp
   1082d:	68 f8 22 01 00       	push   $0x122f8
   10832:	ff 75 08             	pushl  0x8(%ebp)
   10835:	e8 ba ff ff ff       	call   107f4 <default_handler>
   1083a:	83 c4 10             	add    $0x10,%esp
}
   1083d:	90                   	nop
   1083e:	c9                   	leave  
   1083f:	c3                   	ret    

00010840 <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   10840:	55                   	push   %ebp
   10841:	89 e5                	mov    %esp,%ebp
   10843:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   10846:	83 ec 08             	sub    $0x8,%esp
   10849:	68 0b 23 01 00       	push   $0x1230b
   1084e:	ff 75 08             	pushl  0x8(%ebp)
   10851:	e8 9e ff ff ff       	call   107f4 <default_handler>
   10856:	83 c4 10             	add    $0x10,%esp
}
   10859:	90                   	nop
   1085a:	c9                   	leave  
   1085b:	c3                   	ret    

0001085c <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   1085c:	55                   	push   %ebp
   1085d:	89 e5                	mov    %esp,%ebp
   1085f:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   10862:	83 ec 08             	sub    $0x8,%esp
   10865:	68 1a 23 01 00       	push   $0x1231a
   1086a:	ff 75 08             	pushl  0x8(%ebp)
   1086d:	e8 82 ff ff ff       	call   107f4 <default_handler>
   10872:	83 c4 10             	add    $0x10,%esp
}
   10875:	90                   	nop
   10876:	c9                   	leave  
   10877:	c3                   	ret    

00010878 <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   10878:	55                   	push   %ebp
   10879:	89 e5                	mov    %esp,%ebp
   1087b:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   1087e:	83 ec 08             	sub    $0x8,%esp
   10881:	68 2a 23 01 00       	push   $0x1232a
   10886:	ff 75 08             	pushl  0x8(%ebp)
   10889:	e8 66 ff ff ff       	call   107f4 <default_handler>
   1088e:	83 c4 10             	add    $0x10,%esp
}
   10891:	90                   	nop
   10892:	c9                   	leave  
   10893:	c3                   	ret    

00010894 <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   10894:	55                   	push   %ebp
   10895:	89 e5                	mov    %esp,%ebp
   10897:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   1089a:	83 ec 08             	sub    $0x8,%esp
   1089d:	68 39 23 01 00       	push   $0x12339
   108a2:	ff 75 08             	pushl  0x8(%ebp)
   108a5:	e8 4a ff ff ff       	call   107f4 <default_handler>
   108aa:	83 c4 10             	add    $0x10,%esp
}
   108ad:	90                   	nop
   108ae:	c9                   	leave  
   108af:	c3                   	ret    

000108b0 <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   108b0:	55                   	push   %ebp
   108b1:	89 e5                	mov    %esp,%ebp
   108b3:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   108b6:	83 ec 08             	sub    $0x8,%esp
   108b9:	68 45 23 01 00       	push   $0x12345
   108be:	ff 75 08             	pushl  0x8(%ebp)
   108c1:	e8 2e ff ff ff       	call   107f4 <default_handler>
   108c6:	83 c4 10             	add    $0x10,%esp
}
   108c9:	90                   	nop
   108ca:	c9                   	leave  
   108cb:	c3                   	ret    

000108cc <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   108cc:	55                   	push   %ebp
   108cd:	89 e5                	mov    %esp,%ebp
   108cf:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   108d2:	83 ec 08             	sub    $0x8,%esp
   108d5:	68 4f 23 01 00       	push   $0x1234f
   108da:	ff 75 08             	pushl  0x8(%ebp)
   108dd:	e8 12 ff ff ff       	call   107f4 <default_handler>
   108e2:	83 c4 10             	add    $0x10,%esp
}
   108e5:	90                   	nop
   108e6:	c9                   	leave  
   108e7:	c3                   	ret    

000108e8 <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   108e8:	55                   	push   %ebp
   108e9:	89 e5                	mov    %esp,%ebp
   108eb:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   108ee:	83 ec 08             	sub    $0x8,%esp
   108f1:	68 65 23 01 00       	push   $0x12365
   108f6:	ff 75 08             	pushl  0x8(%ebp)
   108f9:	e8 f6 fe ff ff       	call   107f4 <default_handler>
   108fe:	83 c4 10             	add    $0x10,%esp
}
   10901:	90                   	nop
   10902:	c9                   	leave  
   10903:	c3                   	ret    

00010904 <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   10904:	55                   	push   %ebp
   10905:	89 e5                	mov    %esp,%ebp
   10907:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   1090a:	83 ec 08             	sub    $0x8,%esp
   1090d:	68 75 23 01 00       	push   $0x12375
   10912:	ff 75 08             	pushl  0x8(%ebp)
   10915:	e8 da fe ff ff       	call   107f4 <default_handler>
   1091a:	83 c4 10             	add    $0x10,%esp
}
   1091d:	90                   	nop
   1091e:	c9                   	leave  
   1091f:	c3                   	ret    

00010920 <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   10920:	55                   	push   %ebp
   10921:	89 e5                	mov    %esp,%ebp
   10923:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   10926:	83 ec 08             	sub    $0x8,%esp
   10929:	68 8b 23 01 00       	push   $0x1238b
   1092e:	ff 75 08             	pushl  0x8(%ebp)
   10931:	e8 be fe ff ff       	call   107f4 <default_handler>
   10936:	83 c4 10             	add    $0x10,%esp
}
   10939:	90                   	nop
   1093a:	c9                   	leave  
   1093b:	c3                   	ret    

0001093c <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   1093c:	55                   	push   %ebp
   1093d:	89 e5                	mov    %esp,%ebp
   1093f:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   10942:	83 ec 08             	sub    $0x8,%esp
   10945:	68 99 23 01 00       	push   $0x12399
   1094a:	ff 75 08             	pushl  0x8(%ebp)
   1094d:	e8 a2 fe ff ff       	call   107f4 <default_handler>
   10952:	83 c4 10             	add    $0x10,%esp
}
   10955:	90                   	nop
   10956:	c9                   	leave  
   10957:	c3                   	ret    

00010958 <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   10958:	55                   	push   %ebp
   10959:	89 e5                	mov    %esp,%ebp
   1095b:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   1095e:	83 ec 08             	sub    $0x8,%esp
   10961:	68 a5 23 01 00       	push   $0x123a5
   10966:	ff 75 08             	pushl  0x8(%ebp)
   10969:	e8 86 fe ff ff       	call   107f4 <default_handler>
   1096e:	83 c4 10             	add    $0x10,%esp
}
   10971:	90                   	nop
   10972:	c9                   	leave  
   10973:	c3                   	ret    

00010974 <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   10974:	55                   	push   %ebp
   10975:	89 e5                	mov    %esp,%ebp
   10977:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   1097a:	83 ec 08             	sub    $0x8,%esp
   1097d:	68 ba 23 01 00       	push   $0x123ba
   10982:	ff 75 08             	pushl  0x8(%ebp)
   10985:	e8 6a fe ff ff       	call   107f4 <default_handler>
   1098a:	83 c4 10             	add    $0x10,%esp
}
   1098d:	90                   	nop
   1098e:	c9                   	leave  
   1098f:	c3                   	ret    

00010990 <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   10990:	55                   	push   %ebp
   10991:	89 e5                	mov    %esp,%ebp
   10993:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   10996:	83 ec 08             	sub    $0x8,%esp
   10999:	68 d0 23 01 00       	push   $0x123d0
   1099e:	ff 75 08             	pushl  0x8(%ebp)
   109a1:	e8 4e fe ff ff       	call   107f4 <default_handler>
   109a6:	83 c4 10             	add    $0x10,%esp
}
   109a9:	90                   	nop
   109aa:	c9                   	leave  
   109ab:	c3                   	ret    

000109ac <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   109ac:	55                   	push   %ebp
   109ad:	89 e5                	mov    %esp,%ebp
   109af:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: Page fault.");
   109b2:	83 ec 08             	sub    $0x8,%esp
   109b5:	68 fc 23 01 00       	push   $0x123fc
   109ba:	ff 75 08             	pushl  0x8(%ebp)
   109bd:	e8 32 fe ff ff       	call   107f4 <default_handler>
   109c2:	83 c4 10             	add    $0x10,%esp
}
   109c5:	90                   	nop
   109c6:	c9                   	leave  
   109c7:	c3                   	ret    

000109c8 <handle_fpu_error>:
void handle_fpu_error(exception_frame_t * frame) {
   109c8:	55                   	push   %ebp
   109c9:	89 e5                	mov    %esp,%ebp
   109cb:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   109ce:	83 ec 08             	sub    $0x8,%esp
   109d1:	68 1f 24 01 00       	push   $0x1241f
   109d6:	ff 75 08             	pushl  0x8(%ebp)
   109d9:	e8 16 fe ff ff       	call   107f4 <default_handler>
   109de:	83 c4 10             	add    $0x10,%esp
}
   109e1:	90                   	nop
   109e2:	c9                   	leave  
   109e3:	c3                   	ret    

000109e4 <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   109e4:	55                   	push   %ebp
   109e5:	89 e5                	mov    %esp,%ebp
   109e7:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   109ea:	83 ec 08             	sub    $0x8,%esp
   109ed:	68 3d 24 01 00       	push   $0x1243d
   109f2:	ff 75 08             	pushl  0x8(%ebp)
   109f5:	e8 fa fd ff ff       	call   107f4 <default_handler>
   109fa:	83 c4 10             	add    $0x10,%esp
}
   109fd:	90                   	nop
   109fe:	c9                   	leave  
   109ff:	c3                   	ret    

00010a00 <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   10a00:	55                   	push   %ebp
   10a01:	89 e5                	mov    %esp,%ebp
   10a03:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   10a06:	83 ec 08             	sub    $0x8,%esp
   10a09:	68 4e 24 01 00       	push   $0x1244e
   10a0e:	ff 75 08             	pushl  0x8(%ebp)
   10a11:	e8 de fd ff ff       	call   107f4 <default_handler>
   10a16:	83 c4 10             	add    $0x10,%esp
}
   10a19:	90                   	nop
   10a1a:	c9                   	leave  
   10a1b:	c3                   	ret    

00010a1c <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   10a1c:	55                   	push   %ebp
   10a1d:	89 e5                	mov    %esp,%ebp
   10a1f:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10a22:	83 ec 08             	sub    $0x8,%esp
   10a25:	68 60 24 01 00       	push   $0x12460
   10a2a:	ff 75 08             	pushl  0x8(%ebp)
   10a2d:	e8 c2 fd ff ff       	call   107f4 <default_handler>
   10a32:	83 c4 10             	add    $0x10,%esp
}
   10a35:	90                   	nop
   10a36:	c9                   	leave  
   10a37:	c3                   	ret    

00010a38 <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10a38:	55                   	push   %ebp
   10a39:	89 e5                	mov    %esp,%ebp
   10a3b:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   10a3e:	83 ec 08             	sub    $0x8,%esp
   10a41:	68 7f 24 01 00       	push   $0x1247f
   10a46:	ff 75 08             	pushl  0x8(%ebp)
   10a49:	e8 a6 fd ff ff       	call   107f4 <default_handler>
   10a4e:	83 c4 10             	add    $0x10,%esp
}
   10a51:	90                   	nop
   10a52:	c9                   	leave  
   10a53:	c3                   	ret    

00010a54 <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10a54:	55                   	push   %ebp
   10a55:	89 e5                	mov    %esp,%ebp
   10a57:	83 ec 08             	sub    $0x8,%esp
   10a5a:	8b 55 0c             	mov    0xc(%ebp),%edx
   10a5d:	8b 45 14             	mov    0x14(%ebp),%eax
   10a60:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10a64:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10a68:	8b 45 10             	mov    0x10(%ebp),%eax
   10a6b:	89 c2                	mov    %eax,%edx
   10a6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a70:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10a73:	8b 45 08             	mov    0x8(%ebp),%eax
   10a76:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a7a:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10a7e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a81:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a85:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10a89:	8b 45 10             	mov    0x10(%ebp),%eax
   10a8c:	c1 e8 10             	shr    $0x10,%eax
   10a8f:	89 c2                	mov    %eax,%edx
   10a91:	8b 45 08             	mov    0x8(%ebp),%eax
   10a94:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10a98:	90                   	nop
   10a99:	c9                   	leave  
   10a9a:	c3                   	ret    

00010a9b <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   10a9b:	55                   	push   %ebp
   10a9c:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   10a9e:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10aa2:	7e 07                	jle    10aab <irq_install+0x10>
        return -1;
   10aa4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10aa9:	eb 1e                	jmp    10ac9 <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   10aab:	8b 45 08             	mov    0x8(%ebp),%eax
   10aae:	c1 e0 03             	shl    $0x3,%eax
   10ab1:	05 40 08 20 00       	add    $0x200840,%eax
   10ab6:	68 00 8e 00 00       	push   $0x8e00
   10abb:	ff 75 0c             	pushl  0xc(%ebp)
   10abe:	6a 08                	push   $0x8
   10ac0:	50                   	push   %eax
   10ac1:	e8 8e ff ff ff       	call   10a54 <gate_desc_set>
   10ac6:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   10ac9:	c9                   	leave  
   10aca:	c3                   	ret    

00010acb <init_pic>:

static void init_pic() {
   10acb:	55                   	push   %ebp
   10acc:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10ace:	6a 11                	push   $0x11
   10ad0:	6a 20                	push   $0x20
   10ad2:	e8 e3 fc ff ff       	call   107ba <outb>
   10ad7:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10ada:	6a 20                	push   $0x20
   10adc:	6a 21                	push   $0x21
   10ade:	e8 d7 fc ff ff       	call   107ba <outb>
   10ae3:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10ae6:	6a 04                	push   $0x4
   10ae8:	6a 21                	push   $0x21
   10aea:	e8 cb fc ff ff       	call   107ba <outb>
   10aef:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10af2:	6a 01                	push   $0x1
   10af4:	6a 21                	push   $0x21
   10af6:	e8 bf fc ff ff       	call   107ba <outb>
   10afb:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10afe:	6a 11                	push   $0x11
   10b00:	68 a0 00 00 00       	push   $0xa0
   10b05:	e8 b0 fc ff ff       	call   107ba <outb>
   10b0a:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10b0d:	6a 28                	push   $0x28
   10b0f:	68 a1 00 00 00       	push   $0xa1
   10b14:	e8 a1 fc ff ff       	call   107ba <outb>
   10b19:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10b1c:	6a 02                	push   $0x2
   10b1e:	68 a1 00 00 00       	push   $0xa1
   10b23:	e8 92 fc ff ff       	call   107ba <outb>
   10b28:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10b2b:	6a 01                	push   $0x1
   10b2d:	68 a1 00 00 00       	push   $0xa1
   10b32:	e8 83 fc ff ff       	call   107ba <outb>
   10b37:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10b3a:	68 fb 00 00 00       	push   $0xfb
   10b3f:	6a 21                	push   $0x21
   10b41:	e8 74 fc ff ff       	call   107ba <outb>
   10b46:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10b49:	68 ff 00 00 00       	push   $0xff
   10b4e:	68 a1 00 00 00       	push   $0xa1
   10b53:	e8 62 fc ff ff       	call   107ba <outb>
   10b58:	83 c4 08             	add    $0x8,%esp
}
   10b5b:	90                   	nop
   10b5c:	c9                   	leave  
   10b5d:	c3                   	ret    

00010b5e <irq_init>:

void irq_init () {
   10b5e:	55                   	push   %ebp
   10b5f:	89 e5                	mov    %esp,%ebp
   10b61:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10b64:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10b6b:	eb 25                	jmp    10b92 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10b6d:	ba 28 00 01 00       	mov    $0x10028,%edx
   10b72:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b75:	c1 e0 03             	shl    $0x3,%eax
   10b78:	05 40 08 20 00       	add    $0x200840,%eax
   10b7d:	68 00 8e 00 00       	push   $0x8e00
   10b82:	52                   	push   %edx
   10b83:	6a 08                	push   $0x8
   10b85:	50                   	push   %eax
   10b86:	e8 c9 fe ff ff       	call   10a54 <gate_desc_set>
   10b8b:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10b8e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10b92:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   10b96:	76 d5                	jbe    10b6d <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10b98:	b8 40 08 20 00       	mov    $0x200840,%eax
   10b9d:	68 00 04 00 00       	push   $0x400
   10ba2:	50                   	push   %eax
   10ba3:	e8 cd fb ff ff       	call   10775 <lidt>
   10ba8:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   10bab:	b8 47 00 01 00       	mov    $0x10047,%eax
   10bb0:	50                   	push   %eax
   10bb1:	6a 00                	push   $0x0
   10bb3:	e8 e3 fe ff ff       	call   10a9b <irq_install>
   10bb8:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   10bbb:	b8 66 00 01 00       	mov    $0x10066,%eax
   10bc0:	50                   	push   %eax
   10bc1:	6a 01                	push   $0x1
   10bc3:	e8 d3 fe ff ff       	call   10a9b <irq_install>
   10bc8:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   10bcb:	b8 85 00 01 00       	mov    $0x10085,%eax
   10bd0:	50                   	push   %eax
   10bd1:	6a 02                	push   $0x2
   10bd3:	e8 c3 fe ff ff       	call   10a9b <irq_install>
   10bd8:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   10bdb:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   10be0:	50                   	push   %eax
   10be1:	6a 03                	push   $0x3
   10be3:	e8 b3 fe ff ff       	call   10a9b <irq_install>
   10be8:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10beb:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   10bf0:	50                   	push   %eax
   10bf1:	6a 04                	push   $0x4
   10bf3:	e8 a3 fe ff ff       	call   10a9b <irq_install>
   10bf8:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10bfb:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   10c00:	50                   	push   %eax
   10c01:	6a 05                	push   $0x5
   10c03:	e8 93 fe ff ff       	call   10a9b <irq_install>
   10c08:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10c0b:	b8 01 01 01 00       	mov    $0x10101,%eax
   10c10:	50                   	push   %eax
   10c11:	6a 06                	push   $0x6
   10c13:	e8 83 fe ff ff       	call   10a9b <irq_install>
   10c18:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10c1b:	b8 20 01 01 00       	mov    $0x10120,%eax
   10c20:	50                   	push   %eax
   10c21:	6a 07                	push   $0x7
   10c23:	e8 73 fe ff ff       	call   10a9b <irq_install>
   10c28:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10c2b:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   10c30:	50                   	push   %eax
   10c31:	6a 08                	push   $0x8
   10c33:	e8 63 fe ff ff       	call   10a9b <irq_install>
   10c38:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10c3b:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   10c40:	50                   	push   %eax
   10c41:	6a 0a                	push   $0xa
   10c43:	e8 53 fe ff ff       	call   10a9b <irq_install>
   10c48:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10c4b:	b8 79 01 01 00       	mov    $0x10179,%eax
   10c50:	50                   	push   %eax
   10c51:	6a 0b                	push   $0xb
   10c53:	e8 43 fe ff ff       	call   10a9b <irq_install>
   10c58:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10c5b:	b8 96 01 01 00       	mov    $0x10196,%eax
   10c60:	50                   	push   %eax
   10c61:	6a 0c                	push   $0xc
   10c63:	e8 33 fe ff ff       	call   10a9b <irq_install>
   10c68:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10c6b:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   10c70:	50                   	push   %eax
   10c71:	6a 0d                	push   $0xd
   10c73:	e8 23 fe ff ff       	call   10a9b <irq_install>
   10c78:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10c7b:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   10c80:	50                   	push   %eax
   10c81:	6a 0e                	push   $0xe
   10c83:	e8 13 fe ff ff       	call   10a9b <irq_install>
   10c88:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   10c8b:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   10c90:	50                   	push   %eax
   10c91:	6a 10                	push   $0x10
   10c93:	e8 03 fe ff ff       	call   10a9b <irq_install>
   10c98:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   10c9b:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   10ca0:	50                   	push   %eax
   10ca1:	6a 11                	push   $0x11
   10ca3:	e8 f3 fd ff ff       	call   10a9b <irq_install>
   10ca8:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   10cab:	b8 29 02 01 00       	mov    $0x10229,%eax
   10cb0:	50                   	push   %eax
   10cb1:	6a 12                	push   $0x12
   10cb3:	e8 e3 fd ff ff       	call   10a9b <irq_install>
   10cb8:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   10cbb:	b8 48 02 01 00       	mov    $0x10248,%eax
   10cc0:	50                   	push   %eax
   10cc1:	6a 13                	push   $0x13
   10cc3:	e8 d3 fd ff ff       	call   10a9b <irq_install>
   10cc8:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   10ccb:	b8 67 02 01 00       	mov    $0x10267,%eax
   10cd0:	50                   	push   %eax
   10cd1:	6a 14                	push   $0x14
   10cd3:	e8 c3 fd ff ff       	call   10a9b <irq_install>
   10cd8:	83 c4 08             	add    $0x8,%esp

    init_pic();
   10cdb:	e8 eb fd ff ff       	call   10acb <init_pic>
}
   10ce0:	90                   	nop
   10ce1:	c9                   	leave  
   10ce2:	c3                   	ret    

00010ce3 <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10ce3:	55                   	push   %ebp
   10ce4:	89 e5                	mov    %esp,%ebp
   10ce6:	53                   	push   %ebx
   10ce7:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10cea:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10cee:	7e 78                	jle    10d68 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10cf0:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10cf4:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10cf8:	7f 32                	jg     10d2c <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10cfa:	6a 21                	push   $0x21
   10cfc:	e8 9c fa ff ff       	call   1079d <inb>
   10d01:	83 c4 04             	add    $0x4,%esp
   10d04:	89 c2                	mov    %eax,%edx
   10d06:	8b 45 08             	mov    0x8(%ebp),%eax
   10d09:	bb 01 00 00 00       	mov    $0x1,%ebx
   10d0e:	89 c1                	mov    %eax,%ecx
   10d10:	d3 e3                	shl    %cl,%ebx
   10d12:	89 d8                	mov    %ebx,%eax
   10d14:	f7 d0                	not    %eax
   10d16:	21 d0                	and    %edx,%eax
   10d18:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10d1b:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10d1f:	50                   	push   %eax
   10d20:	6a 21                	push   $0x21
   10d22:	e8 93 fa ff ff       	call   107ba <outb>
   10d27:	83 c4 08             	add    $0x8,%esp
   10d2a:	eb 3d                	jmp    10d69 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10d2c:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10d30:	68 a1 00 00 00       	push   $0xa1
   10d35:	e8 63 fa ff ff       	call   1079d <inb>
   10d3a:	83 c4 04             	add    $0x4,%esp
   10d3d:	89 c2                	mov    %eax,%edx
   10d3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d42:	bb 01 00 00 00       	mov    $0x1,%ebx
   10d47:	89 c1                	mov    %eax,%ecx
   10d49:	d3 e3                	shl    %cl,%ebx
   10d4b:	89 d8                	mov    %ebx,%eax
   10d4d:	f7 d0                	not    %eax
   10d4f:	21 d0                	and    %edx,%eax
   10d51:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10d54:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d58:	50                   	push   %eax
   10d59:	68 a1 00 00 00       	push   $0xa1
   10d5e:	e8 57 fa ff ff       	call   107ba <outb>
   10d63:	83 c4 08             	add    $0x8,%esp
   10d66:	eb 01                	jmp    10d69 <irq_enable+0x86>
        return;
   10d68:	90                   	nop
    }
}
   10d69:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d6c:	c9                   	leave  
   10d6d:	c3                   	ret    

00010d6e <irq_disable>:

void irq_disable(int irq_num) {
   10d6e:	55                   	push   %ebp
   10d6f:	89 e5                	mov    %esp,%ebp
   10d71:	53                   	push   %ebx
   10d72:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10d75:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10d79:	7e 74                	jle    10def <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10d7b:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10d7f:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d83:	7f 30                	jg     10db5 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10d85:	6a 21                	push   $0x21
   10d87:	e8 11 fa ff ff       	call   1079d <inb>
   10d8c:	83 c4 04             	add    $0x4,%esp
   10d8f:	89 c3                	mov    %eax,%ebx
   10d91:	8b 45 08             	mov    0x8(%ebp),%eax
   10d94:	ba 01 00 00 00       	mov    $0x1,%edx
   10d99:	89 c1                	mov    %eax,%ecx
   10d9b:	d3 e2                	shl    %cl,%edx
   10d9d:	89 d0                	mov    %edx,%eax
   10d9f:	09 d8                	or     %ebx,%eax
   10da1:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10da4:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10da8:	50                   	push   %eax
   10da9:	6a 21                	push   $0x21
   10dab:	e8 0a fa ff ff       	call   107ba <outb>
   10db0:	83 c4 08             	add    $0x8,%esp
   10db3:	eb 3b                	jmp    10df0 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10db5:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10db9:	68 a1 00 00 00       	push   $0xa1
   10dbe:	e8 da f9 ff ff       	call   1079d <inb>
   10dc3:	83 c4 04             	add    $0x4,%esp
   10dc6:	89 c3                	mov    %eax,%ebx
   10dc8:	8b 45 08             	mov    0x8(%ebp),%eax
   10dcb:	ba 01 00 00 00       	mov    $0x1,%edx
   10dd0:	89 c1                	mov    %eax,%ecx
   10dd2:	d3 e2                	shl    %cl,%edx
   10dd4:	89 d0                	mov    %edx,%eax
   10dd6:	09 d8                	or     %ebx,%eax
   10dd8:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10ddb:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10ddf:	50                   	push   %eax
   10de0:	68 a1 00 00 00       	push   $0xa1
   10de5:	e8 d0 f9 ff ff       	call   107ba <outb>
   10dea:	83 c4 08             	add    $0x8,%esp
   10ded:	eb 01                	jmp    10df0 <irq_disable+0x82>
        return;
   10def:	90                   	nop
    }
}
   10df0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10df3:	c9                   	leave  
   10df4:	c3                   	ret    

00010df5 <irq_disable_global>:

void irq_disable_global(void) {
   10df5:	55                   	push   %ebp
   10df6:	89 e5                	mov    %esp,%ebp
    cli();
   10df8:	e8 6a f9 ff ff       	call   10767 <cli>
}
   10dfd:	90                   	nop
   10dfe:	5d                   	pop    %ebp
   10dff:	c3                   	ret    

00010e00 <irq_enable_global>:

void irq_enable_global(void) {
   10e00:	55                   	push   %ebp
   10e01:	89 e5                	mov    %esp,%ebp
    sti();
   10e03:	e8 66 f9 ff ff       	call   1076e <sti>
}
   10e08:	90                   	nop
   10e09:	5d                   	pop    %ebp
   10e0a:	c3                   	ret    

00010e0b <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10e0b:	55                   	push   %ebp
   10e0c:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10e0e:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10e12:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e16:	7e 0f                	jle    10e27 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10e18:	6a 20                	push   $0x20
   10e1a:	68 a0 00 00 00       	push   $0xa0
   10e1f:	e8 96 f9 ff ff       	call   107ba <outb>
   10e24:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10e27:	6a 20                	push   $0x20
   10e29:	6a 20                	push   $0x20
   10e2b:	e8 8a f9 ff ff       	call   107ba <outb>
   10e30:	83 c4 08             	add    $0x8,%esp
}
   10e33:	90                   	nop
   10e34:	c9                   	leave  
   10e35:	c3                   	ret    

00010e36 <irq_enter_proection>:


irq_state_t irq_enter_proection() {
   10e36:	55                   	push   %ebp
   10e37:	89 e5                	mov    %esp,%ebp
   10e39:	83 ec 10             	sub    $0x10,%esp
    irq_state_t  state = read_eflags();
   10e3c:	e8 98 f9 ff ff       	call   107d9 <read_eflags>
   10e41:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   10e44:	e8 ac ff ff ff       	call   10df5 <irq_disable_global>

    return state;
   10e49:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10e4c:	c9                   	leave  
   10e4d:	c3                   	ret    

00010e4e <irq_leave_proection>:


void irq_leave_proection(irq_state_t state) {
   10e4e:	55                   	push   %ebp
   10e4f:	89 e5                	mov    %esp,%ebp

    write_eflags(state);
   10e51:	ff 75 08             	pushl  0x8(%ebp)
   10e54:	e8 90 f9 ff ff       	call   107e9 <write_eflags>
   10e59:	83 c4 04             	add    $0x4,%esp
}
   10e5c:	90                   	nop
   10e5d:	c9                   	leave  
   10e5e:	c3                   	ret    

00010e5f <bitmap_byte_count>:
#include <bitmap.h>
#include <klib.h>

int bitmap_byte_count (int bit_count) {
   10e5f:	55                   	push   %ebp
   10e60:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         
   10e62:	8b 45 08             	mov    0x8(%ebp),%eax
   10e65:	83 c0 07             	add    $0x7,%eax
   10e68:	8d 50 07             	lea    0x7(%eax),%edx
   10e6b:	85 c0                	test   %eax,%eax
   10e6d:	0f 48 c2             	cmovs  %edx,%eax
   10e70:	c1 f8 03             	sar    $0x3,%eax
}
   10e73:	5d                   	pop    %ebp
   10e74:	c3                   	ret    

00010e75 <bitmap_init>:

void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   10e75:	55                   	push   %ebp
   10e76:	89 e5                	mov    %esp,%ebp
   10e78:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   10e7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7e:	8b 55 10             	mov    0x10(%ebp),%edx
   10e81:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   10e83:	8b 45 08             	mov    0x8(%ebp),%eax
   10e86:	8b 55 0c             	mov    0xc(%ebp),%edx
   10e89:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   10e8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8f:	8b 00                	mov    (%eax),%eax
   10e91:	50                   	push   %eax
   10e92:	e8 c8 ff ff ff       	call   10e5f <bitmap_byte_count>
   10e97:	83 c4 04             	add    $0x4,%esp
   10e9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    k_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   10e9d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10ea1:	74 07                	je     10eaa <bitmap_init+0x35>
   10ea3:	ba ff 00 00 00       	mov    $0xff,%edx
   10ea8:	eb 05                	jmp    10eaf <bitmap_init+0x3a>
   10eaa:	ba 00 00 00 00       	mov    $0x0,%edx
   10eaf:	8b 45 08             	mov    0x8(%ebp),%eax
   10eb2:	8b 40 04             	mov    0x4(%eax),%eax
   10eb5:	83 ec 04             	sub    $0x4,%esp
   10eb8:	ff 75 f4             	pushl  -0xc(%ebp)
   10ebb:	52                   	push   %edx
   10ebc:	50                   	push   %eax
   10ebd:	e8 9d 03 00 00       	call   1125f <k_memset>
   10ec2:	83 c4 10             	add    $0x10,%esp
}
   10ec5:	90                   	nop
   10ec6:	c9                   	leave  
   10ec7:	c3                   	ret    

00010ec8 <bitmap_get_bit>:


int bitmap_get_bit (bitmap_t * bitmap, int index) {
   10ec8:	55                   	push   %ebp
   10ec9:	89 e5                	mov    %esp,%ebp
   10ecb:	53                   	push   %ebx

    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   10ecc:	8b 45 08             	mov    0x8(%ebp),%eax
   10ecf:	8b 50 04             	mov    0x4(%eax),%edx
   10ed2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ed5:	8d 48 07             	lea    0x7(%eax),%ecx
   10ed8:	85 c0                	test   %eax,%eax
   10eda:	0f 48 c1             	cmovs  %ecx,%eax
   10edd:	c1 f8 03             	sar    $0x3,%eax
   10ee0:	01 d0                	add    %edx,%eax
   10ee2:	0f b6 00             	movzbl (%eax),%eax
   10ee5:	0f b6 d8             	movzbl %al,%ebx
   10ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10eeb:	99                   	cltd   
   10eec:	c1 ea 1d             	shr    $0x1d,%edx
   10eef:	01 d0                	add    %edx,%eax
   10ef1:	83 e0 07             	and    $0x7,%eax
   10ef4:	29 d0                	sub    %edx,%eax
   10ef6:	89 c1                	mov    %eax,%ecx
   10ef8:	d3 fb                	sar    %cl,%ebx
   10efa:	89 d8                	mov    %ebx,%eax
   10efc:	83 e0 01             	and    $0x1,%eax
}
   10eff:	5b                   	pop    %ebx
   10f00:	5d                   	pop    %ebp
   10f01:	c3                   	ret    

00010f02 <bitmap_is_set>:

int bitmap_is_set (bitmap_t * bitmap, int index) {
   10f02:	55                   	push   %ebp
   10f03:	89 e5                	mov    %esp,%ebp
    
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   10f05:	ff 75 0c             	pushl  0xc(%ebp)
   10f08:	ff 75 08             	pushl  0x8(%ebp)
   10f0b:	e8 b8 ff ff ff       	call   10ec8 <bitmap_get_bit>
   10f10:	83 c4 08             	add    $0x8,%esp
   10f13:	85 c0                	test   %eax,%eax
   10f15:	0f 95 c0             	setne  %al
   10f18:	0f b6 c0             	movzbl %al,%eax
}
   10f1b:	c9                   	leave  
   10f1c:	c3                   	ret    

00010f1d <bitmap_set_bit>:



void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   10f1d:	55                   	push   %ebp
   10f1e:	89 e5                	mov    %esp,%ebp
   10f20:	56                   	push   %esi
   10f21:	53                   	push   %ebx
   10f22:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   10f25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10f2c:	e9 a2 00 00 00       	jmp    10fd3 <bitmap_set_bit+0xb6>
        if (bit) {
   10f31:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10f35:	74 4a                	je     10f81 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   10f37:	8b 45 08             	mov    0x8(%ebp),%eax
   10f3a:	8b 50 04             	mov    0x4(%eax),%edx
   10f3d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f40:	8d 48 07             	lea    0x7(%eax),%ecx
   10f43:	85 c0                	test   %eax,%eax
   10f45:	0f 48 c1             	cmovs  %ecx,%eax
   10f48:	c1 f8 03             	sar    $0x3,%eax
   10f4b:	89 c3                	mov    %eax,%ebx
   10f4d:	89 d8                	mov    %ebx,%eax
   10f4f:	01 d0                	add    %edx,%eax
   10f51:	0f b6 00             	movzbl (%eax),%eax
   10f54:	89 c6                	mov    %eax,%esi
   10f56:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f59:	99                   	cltd   
   10f5a:	c1 ea 1d             	shr    $0x1d,%edx
   10f5d:	01 d0                	add    %edx,%eax
   10f5f:	83 e0 07             	and    $0x7,%eax
   10f62:	29 d0                	sub    %edx,%eax
   10f64:	ba 01 00 00 00       	mov    $0x1,%edx
   10f69:	89 c1                	mov    %eax,%ecx
   10f6b:	d3 e2                	shl    %cl,%edx
   10f6d:	89 d0                	mov    %edx,%eax
   10f6f:	89 f2                	mov    %esi,%edx
   10f71:	09 c2                	or     %eax,%edx
   10f73:	8b 45 08             	mov    0x8(%ebp),%eax
   10f76:	8b 40 04             	mov    0x4(%eax),%eax
   10f79:	89 d9                	mov    %ebx,%ecx
   10f7b:	01 c8                	add    %ecx,%eax
   10f7d:	88 10                	mov    %dl,(%eax)
   10f7f:	eb 4a                	jmp    10fcb <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   10f81:	8b 45 08             	mov    0x8(%ebp),%eax
   10f84:	8b 50 04             	mov    0x4(%eax),%edx
   10f87:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f8a:	8d 48 07             	lea    0x7(%eax),%ecx
   10f8d:	85 c0                	test   %eax,%eax
   10f8f:	0f 48 c1             	cmovs  %ecx,%eax
   10f92:	c1 f8 03             	sar    $0x3,%eax
   10f95:	89 c3                	mov    %eax,%ebx
   10f97:	89 d8                	mov    %ebx,%eax
   10f99:	01 d0                	add    %edx,%eax
   10f9b:	0f b6 00             	movzbl (%eax),%eax
   10f9e:	89 c6                	mov    %eax,%esi
   10fa0:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fa3:	99                   	cltd   
   10fa4:	c1 ea 1d             	shr    $0x1d,%edx
   10fa7:	01 d0                	add    %edx,%eax
   10fa9:	83 e0 07             	and    $0x7,%eax
   10fac:	29 d0                	sub    %edx,%eax
   10fae:	ba 01 00 00 00       	mov    $0x1,%edx
   10fb3:	89 c1                	mov    %eax,%ecx
   10fb5:	d3 e2                	shl    %cl,%edx
   10fb7:	89 d0                	mov    %edx,%eax
   10fb9:	f7 d0                	not    %eax
   10fbb:	89 f2                	mov    %esi,%edx
   10fbd:	21 c2                	and    %eax,%edx
   10fbf:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc2:	8b 40 04             	mov    0x4(%eax),%eax
   10fc5:	89 d9                	mov    %ebx,%ecx
   10fc7:	01 c8                	add    %ecx,%eax
   10fc9:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   10fcb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10fcf:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   10fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd6:	3b 45 10             	cmp    0x10(%ebp),%eax
   10fd9:	7d 0e                	jge    10fe9 <bitmap_set_bit+0xcc>
   10fdb:	8b 45 08             	mov    0x8(%ebp),%eax
   10fde:	8b 00                	mov    (%eax),%eax
   10fe0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   10fe3:	0f 8c 48 ff ff ff    	jl     10f31 <bitmap_set_bit+0x14>
        }
    }
} 
   10fe9:	90                   	nop
   10fea:	83 c4 10             	add    $0x10,%esp
   10fed:	5b                   	pop    %ebx
   10fee:	5e                   	pop    %esi
   10fef:	5d                   	pop    %ebp
   10ff0:	c3                   	ret    

00010ff1 <bitmap_alloc_nbits>:



int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   10ff1:	55                   	push   %ebp
   10ff2:	89 e5                	mov    %esp,%ebp
   10ff4:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   10ff7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   10ffe:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   11005:	e9 85 00 00 00       	jmp    1108f <bitmap_alloc_nbits+0x9e>
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   1100a:	ff 75 fc             	pushl  -0x4(%ebp)
   1100d:	ff 75 08             	pushl  0x8(%ebp)
   11010:	e8 b3 fe ff ff       	call   10ec8 <bitmap_get_bit>
   11015:	83 c4 08             	add    $0x8,%esp
   11018:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1101b:	74 06                	je     11023 <bitmap_alloc_nbits+0x32>
            search_idx++;
   1101d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   11021:	eb 6c                	jmp    1108f <bitmap_alloc_nbits+0x9e>
        }

        ok_idx = search_idx;
   11023:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11026:	89 45 f8             	mov    %eax,-0x8(%ebp)

        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   11029:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11030:	eb 27                	jmp    11059 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   11032:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11035:	8d 50 01             	lea    0x1(%eax),%edx
   11038:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1103b:	50                   	push   %eax
   1103c:	ff 75 08             	pushl  0x8(%ebp)
   1103f:	e8 84 fe ff ff       	call   10ec8 <bitmap_get_bit>
   11044:	83 c4 08             	add    $0x8,%esp
   11047:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1104a:	74 09                	je     11055 <bitmap_alloc_nbits+0x64>
                ok_idx = -1;
   1104c:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   11053:	eb 16                	jmp    1106b <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   11055:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11059:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1105c:	3b 45 10             	cmp    0x10(%ebp),%eax
   1105f:	7d 0a                	jge    1106b <bitmap_alloc_nbits+0x7a>
   11061:	8b 45 08             	mov    0x8(%ebp),%eax
   11064:	8b 00                	mov    (%eax),%eax
   11066:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11069:	7c c7                	jl     11032 <bitmap_alloc_nbits+0x41>
            }
        }

        if (i >= count) {
   1106b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1106e:	3b 45 10             	cmp    0x10(%ebp),%eax
   11071:	7c 1c                	jl     1108f <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   11073:	8b 45 0c             	mov    0xc(%ebp),%eax
   11076:	f7 d0                	not    %eax
   11078:	50                   	push   %eax
   11079:	ff 75 10             	pushl  0x10(%ebp)
   1107c:	ff 75 f8             	pushl  -0x8(%ebp)
   1107f:	ff 75 08             	pushl  0x8(%ebp)
   11082:	e8 96 fe ff ff       	call   10f1d <bitmap_set_bit>
   11087:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   1108a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1108d:	eb 13                	jmp    110a2 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   1108f:	8b 45 08             	mov    0x8(%ebp),%eax
   11092:	8b 00                	mov    (%eax),%eax
   11094:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11097:	0f 8c 6d ff ff ff    	jl     1100a <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   1109d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   110a2:	c9                   	leave  
   110a3:	c3                   	ret    

000110a4 <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   110a4:	55                   	push   %ebp
   110a5:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   110a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110ab:	74 3b                	je     110e8 <k_strcpy+0x44>
   110ad:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110b1:	74 35                	je     110e8 <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   110b3:	eb 17                	jmp    110cc <k_strcpy+0x28>
        *dest++ = *src++;
   110b5:	8b 55 0c             	mov    0xc(%ebp),%edx
   110b8:	8d 42 01             	lea    0x1(%edx),%eax
   110bb:	89 45 0c             	mov    %eax,0xc(%ebp)
   110be:	8b 45 08             	mov    0x8(%ebp),%eax
   110c1:	8d 48 01             	lea    0x1(%eax),%ecx
   110c4:	89 4d 08             	mov    %ecx,0x8(%ebp)
   110c7:	0f b6 12             	movzbl (%edx),%edx
   110ca:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   110cc:	8b 45 08             	mov    0x8(%ebp),%eax
   110cf:	0f b6 00             	movzbl (%eax),%eax
   110d2:	84 c0                	test   %al,%al
   110d4:	74 0a                	je     110e0 <k_strcpy+0x3c>
   110d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   110d9:	0f b6 00             	movzbl (%eax),%eax
   110dc:	84 c0                	test   %al,%al
   110de:	75 d5                	jne    110b5 <k_strcpy+0x11>
    }
    *dest = '\0'; 
   110e0:	8b 45 08             	mov    0x8(%ebp),%eax
   110e3:	c6 00 00             	movb   $0x0,(%eax)
   110e6:	eb 01                	jmp    110e9 <k_strcpy+0x45>
        return;
   110e8:	90                   	nop
}
   110e9:	5d                   	pop    %ebp
   110ea:	c3                   	ret    

000110eb <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   110eb:	55                   	push   %ebp
   110ec:	89 e5                	mov    %esp,%ebp
   110ee:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   110f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110f5:	74 61                	je     11158 <k_strncpy+0x6d>
   110f7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110fb:	74 5b                	je     11158 <k_strncpy+0x6d>
   110fd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11101:	74 55                	je     11158 <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   11103:	8b 45 08             	mov    0x8(%ebp),%eax
   11106:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   11109:	8b 45 0c             	mov    0xc(%ebp),%eax
   1110c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   1110f:	eb 17                	jmp    11128 <k_strncpy+0x3d>
        *d++ = *s++;
   11111:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11114:	8d 42 01             	lea    0x1(%edx),%eax
   11117:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1111a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1111d:	8d 48 01             	lea    0x1(%eax),%ecx
   11120:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11123:	0f b6 12             	movzbl (%edx),%edx
   11126:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   11128:	8b 45 10             	mov    0x10(%ebp),%eax
   1112b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1112e:	89 55 10             	mov    %edx,0x10(%ebp)
   11131:	85 c0                	test   %eax,%eax
   11133:	7e 0a                	jle    1113f <k_strncpy+0x54>
   11135:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11138:	0f b6 00             	movzbl (%eax),%eax
   1113b:	84 c0                	test   %al,%al
   1113d:	75 d2                	jne    11111 <k_strncpy+0x26>
    } 
    if (size == 0) {
   1113f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11143:	75 0b                	jne    11150 <k_strncpy+0x65>
        *(d - 1) = '\0';
   11145:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11148:	83 e8 01             	sub    $0x1,%eax
   1114b:	c6 00 00             	movb   $0x0,(%eax)
   1114e:	eb 09                	jmp    11159 <k_strncpy+0x6e>
    } else {
        *d = '\0';
   11150:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11153:	c6 00 00             	movb   $0x0,(%eax)
   11156:	eb 01                	jmp    11159 <k_strncpy+0x6e>
        return;
   11158:	90                   	nop
    }
}
   11159:	c9                   	leave  
   1115a:	c3                   	ret    

0001115b <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   1115b:	55                   	push   %ebp
   1115c:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   1115e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11162:	74 06                	je     1116a <k_strncmp+0xf>
   11164:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11168:	75 0f                	jne    11179 <k_strncmp+0x1e>
   1116a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1116f:	eb 62                	jmp    111d3 <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   11171:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   11175:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   11179:	8b 45 08             	mov    0x8(%ebp),%eax
   1117c:	0f b6 00             	movzbl (%eax),%eax
   1117f:	84 c0                	test   %al,%al
   11181:	74 20                	je     111a3 <k_strncmp+0x48>
   11183:	8b 45 0c             	mov    0xc(%ebp),%eax
   11186:	0f b6 00             	movzbl (%eax),%eax
   11189:	84 c0                	test   %al,%al
   1118b:	74 16                	je     111a3 <k_strncmp+0x48>
   1118d:	8b 45 08             	mov    0x8(%ebp),%eax
   11190:	0f b6 10             	movzbl (%eax),%edx
   11193:	8b 45 0c             	mov    0xc(%ebp),%eax
   11196:	0f b6 00             	movzbl (%eax),%eax
   11199:	38 c2                	cmp    %al,%dl
   1119b:	75 06                	jne    111a3 <k_strncmp+0x48>
   1119d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111a1:	75 ce                	jne    11171 <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   111a3:	8b 45 08             	mov    0x8(%ebp),%eax
   111a6:	0f b6 00             	movzbl (%eax),%eax
   111a9:	84 c0                	test   %al,%al
   111ab:	74 21                	je     111ce <k_strncmp+0x73>
   111ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   111b0:	0f b6 00             	movzbl (%eax),%eax
   111b3:	84 c0                	test   %al,%al
   111b5:	74 17                	je     111ce <k_strncmp+0x73>
   111b7:	8b 45 08             	mov    0x8(%ebp),%eax
   111ba:	0f b6 10             	movzbl (%eax),%edx
   111bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   111c0:	0f b6 00             	movzbl (%eax),%eax
   111c3:	38 c2                	cmp    %al,%dl
   111c5:	74 07                	je     111ce <k_strncmp+0x73>
   111c7:	b8 01 00 00 00       	mov    $0x1,%eax
   111cc:	eb 05                	jmp    111d3 <k_strncmp+0x78>
   111ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111d3:	5d                   	pop    %ebp
   111d4:	c3                   	ret    

000111d5 <k_strlen>:
int k_strlen(const char *str) {
   111d5:	55                   	push   %ebp
   111d6:	89 e5                	mov    %esp,%ebp
   111d8:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   111db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111df:	75 07                	jne    111e8 <k_strlen+0x13>
        return 0;
   111e1:	b8 00 00 00 00       	mov    $0x0,%eax
   111e6:	eb 26                	jmp    1120e <k_strlen+0x39>
    }

    int len = 0;
   111e8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   111ef:	8b 45 08             	mov    0x8(%ebp),%eax
   111f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   111f5:	eb 04                	jmp    111fb <k_strlen+0x26>
        len++;
   111f7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   111fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111fe:	8d 50 01             	lea    0x1(%eax),%edx
   11201:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11204:	0f b6 00             	movzbl (%eax),%eax
   11207:	84 c0                	test   %al,%al
   11209:	75 ec                	jne    111f7 <k_strlen+0x22>
    }

    return len;
   1120b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1120e:	c9                   	leave  
   1120f:	c3                   	ret    

00011210 <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   11210:	55                   	push   %ebp
   11211:	89 e5                	mov    %esp,%ebp
   11213:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || size) {
   11216:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1121a:	74 40                	je     1125c <k_memcpy+0x4c>
   1121c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11220:	74 3a                	je     1125c <k_memcpy+0x4c>
   11222:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11226:	75 34                	jne    1125c <k_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   11228:	8b 45 0c             	mov    0xc(%ebp),%eax
   1122b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   1122e:	8b 45 08             	mov    0x8(%ebp),%eax
   11231:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   11234:	eb 17                	jmp    1124d <k_memcpy+0x3d>
        *d++ = *s++;
   11236:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11239:	8d 42 01             	lea    0x1(%edx),%eax
   1123c:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1123f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11242:	8d 48 01             	lea    0x1(%eax),%ecx
   11245:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11248:	0f b6 12             	movzbl (%edx),%edx
   1124b:	88 10                	mov    %dl,(%eax)
    while(size--) {
   1124d:	8b 45 10             	mov    0x10(%ebp),%eax
   11250:	8d 50 ff             	lea    -0x1(%eax),%edx
   11253:	89 55 10             	mov    %edx,0x10(%ebp)
   11256:	85 c0                	test   %eax,%eax
   11258:	75 dc                	jne    11236 <k_memcpy+0x26>
   1125a:	eb 01                	jmp    1125d <k_memcpy+0x4d>
        return;
   1125c:	90                   	nop
    }
}
   1125d:	c9                   	leave  
   1125e:	c3                   	ret    

0001125f <k_memset>:
void k_memset(void* dest, uint8_t v, int size) {
   1125f:	55                   	push   %ebp
   11260:	89 e5                	mov    %esp,%ebp
   11262:	83 ec 14             	sub    $0x14,%esp
   11265:	8b 45 0c             	mov    0xc(%ebp),%eax
   11268:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   1126b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1126f:	74 2c                	je     1129d <k_memset+0x3e>
   11271:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11275:	74 26                	je     1129d <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   11277:	8b 45 08             	mov    0x8(%ebp),%eax
   1127a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   1127d:	eb 0f                	jmp    1128e <k_memset+0x2f>
        *d++ = v;
   1127f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11282:	8d 50 01             	lea    0x1(%eax),%edx
   11285:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11288:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1128c:	88 10                	mov    %dl,(%eax)
    while(size--) {
   1128e:	8b 45 10             	mov    0x10(%ebp),%eax
   11291:	8d 50 ff             	lea    -0x1(%eax),%edx
   11294:	89 55 10             	mov    %edx,0x10(%ebp)
   11297:	85 c0                	test   %eax,%eax
   11299:	75 e4                	jne    1127f <k_memset+0x20>
   1129b:	eb 01                	jmp    1129e <k_memset+0x3f>
    if(!dest || !size) return;
   1129d:	90                   	nop
    }
}
   1129e:	c9                   	leave  
   1129f:	c3                   	ret    

000112a0 <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   112a0:	55                   	push   %ebp
   112a1:	89 e5                	mov    %esp,%ebp
   112a3:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   112a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112aa:	74 0c                	je     112b8 <k_memcmp+0x18>
   112ac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112b0:	74 06                	je     112b8 <k_memcmp+0x18>
   112b2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112b6:	74 07                	je     112bf <k_memcmp+0x1f>
        return 1;
   112b8:	b8 01 00 00 00       	mov    $0x1,%eax
   112bd:	eb 43                	jmp    11302 <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   112bf:	8b 45 08             	mov    0x8(%ebp),%eax
   112c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   112c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   112cb:	eb 23                	jmp    112f0 <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   112cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112d0:	8d 50 01             	lea    0x1(%eax),%edx
   112d3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   112d6:	0f b6 08             	movzbl (%eax),%ecx
   112d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112dc:	8d 50 01             	lea    0x1(%eax),%edx
   112df:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112e2:	0f b6 00             	movzbl (%eax),%eax
   112e5:	38 c1                	cmp    %al,%cl
   112e7:	74 07                	je     112f0 <k_memcmp+0x50>
        return 1;
   112e9:	b8 01 00 00 00       	mov    $0x1,%eax
   112ee:	eb 12                	jmp    11302 <k_memcmp+0x62>
    while(size--) {
   112f0:	8b 45 10             	mov    0x10(%ebp),%eax
   112f3:	8d 50 ff             	lea    -0x1(%eax),%edx
   112f6:	89 55 10             	mov    %edx,0x10(%ebp)
   112f9:	85 c0                	test   %eax,%eax
   112fb:	75 d0                	jne    112cd <k_memcmp+0x2d>
    }

    return 0;
   112fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11302:	c9                   	leave  
   11303:	c3                   	ret    

00011304 <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   11304:	55                   	push   %ebp
   11305:	89 e5                	mov    %esp,%ebp
   11307:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   1130a:	8b 45 08             	mov    0x8(%ebp),%eax
   1130d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   11310:	8b 45 0c             	mov    0xc(%ebp),%eax
   11313:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   11316:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1131a:	74 1d                	je     11339 <k_itoa+0x35>
   1131c:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11320:	74 17                	je     11339 <k_itoa+0x35>
   11322:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11326:	74 11                	je     11339 <k_itoa+0x35>
   11328:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1132c:	74 0b                	je     11339 <k_itoa+0x35>
        *p = '\0';
   1132e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11331:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11334:	e9 a0 00 00 00       	jmp    113d9 <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   11339:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1133d:	79 12                	jns    11351 <k_itoa+0x4d>
   1133f:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11343:	75 0c                	jne    11351 <k_itoa+0x4d>
        *p++ = '-';
   11345:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11348:	8d 50 01             	lea    0x1(%eax),%edx
   1134b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1134e:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   11351:	8b 0d 00 00 20 00    	mov    0x200000,%ecx
   11357:	8b 45 0c             	mov    0xc(%ebp),%eax
   1135a:	99                   	cltd   
   1135b:	f7 7d 10             	idivl  0x10(%ebp)
   1135e:	89 d0                	mov    %edx,%eax
   11360:	83 c0 0f             	add    $0xf,%eax
   11363:	01 c8                	add    %ecx,%eax
   11365:	0f b6 00             	movzbl (%eax),%eax
   11368:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   1136b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1136e:	8d 50 01             	lea    0x1(%eax),%edx
   11371:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11374:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   11378:	88 10                	mov    %dl,(%eax)
        num /= base;
   1137a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1137d:	99                   	cltd   
   1137e:	f7 7d 10             	idivl  0x10(%ebp)
   11381:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   11384:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11388:	75 c7                	jne    11351 <k_itoa+0x4d>

    *p-- = '\0';
   1138a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1138d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11390:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11393:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   11396:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1139a:	7f 08                	jg     113a4 <k_itoa+0xa0>
   1139c:	8b 45 08             	mov    0x8(%ebp),%eax
   1139f:	83 c0 01             	add    $0x1,%eax
   113a2:	eb 03                	jmp    113a7 <k_itoa+0xa3>
   113a4:	8b 45 08             	mov    0x8(%ebp),%eax
   113a7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   113aa:	eb 25                	jmp    113d1 <k_itoa+0xcd>
        char ch = *start;
   113ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113af:	0f b6 00             	movzbl (%eax),%eax
   113b2:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   113b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113b8:	0f b6 10             	movzbl (%eax),%edx
   113bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113be:	88 10                	mov    %dl,(%eax)
        *p = ch;
   113c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113c3:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   113c7:	88 10                	mov    %dl,(%eax)

        p--;
   113c9:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   113cd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   113d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113d4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   113d7:	72 d3                	jb     113ac <k_itoa+0xa8>
    }
}
   113d9:	c9                   	leave  
   113da:	c3                   	ret    

000113db <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   113db:	55                   	push   %ebp
   113dc:	89 e5                	mov    %esp,%ebp
   113de:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   113e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   113e8:	8b 45 08             	mov    0x8(%ebp),%eax
   113eb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   113ee:	e9 19 01 00 00       	jmp    1150c <k_vsprint+0x131>
        switch (state) {
   113f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113f6:	85 c0                	test   %eax,%eax
   113f8:	74 0a                	je     11404 <k_vsprint+0x29>
   113fa:	83 f8 01             	cmp    $0x1,%eax
   113fd:	74 2b                	je     1142a <k_vsprint+0x4f>
   113ff:	e9 07 01 00 00       	jmp    1150b <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   11404:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11408:	75 0c                	jne    11416 <k_vsprint+0x3b>
                state = READ_FMT;
   1140a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11411:	e9 f6 00 00 00       	jmp    1150c <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   11416:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11419:	8d 50 01             	lea    0x1(%eax),%edx
   1141c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1141f:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11423:	88 10                	mov    %dl,(%eax)
            }
            break;
   11425:	e9 e2 00 00 00       	jmp    1150c <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   1142a:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1142e:	75 31                	jne    11461 <k_vsprint+0x86>
                int num  = va_arg(args, int);
   11430:	8b 45 10             	mov    0x10(%ebp),%eax
   11433:	8d 50 04             	lea    0x4(%eax),%edx
   11436:	89 55 10             	mov    %edx,0x10(%ebp)
   11439:	8b 00                	mov    (%eax),%eax
   1143b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   1143e:	6a 0a                	push   $0xa
   11440:	ff 75 e4             	pushl  -0x1c(%ebp)
   11443:	ff 75 f8             	pushl  -0x8(%ebp)
   11446:	e8 b9 fe ff ff       	call   11304 <k_itoa>
   1144b:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   1144e:	ff 75 f8             	pushl  -0x8(%ebp)
   11451:	e8 7f fd ff ff       	call   111d5 <k_strlen>
   11456:	83 c4 04             	add    $0x4,%esp
   11459:	01 45 f8             	add    %eax,-0x8(%ebp)
   1145c:	e9 a1 00 00 00       	jmp    11502 <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   11461:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11465:	75 2e                	jne    11495 <k_vsprint+0xba>
                int num  = va_arg(args, int);
   11467:	8b 45 10             	mov    0x10(%ebp),%eax
   1146a:	8d 50 04             	lea    0x4(%eax),%edx
   1146d:	89 55 10             	mov    %edx,0x10(%ebp)
   11470:	8b 00                	mov    (%eax),%eax
   11472:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   11475:	6a 10                	push   $0x10
   11477:	ff 75 e8             	pushl  -0x18(%ebp)
   1147a:	ff 75 f8             	pushl  -0x8(%ebp)
   1147d:	e8 82 fe ff ff       	call   11304 <k_itoa>
   11482:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   11485:	ff 75 f8             	pushl  -0x8(%ebp)
   11488:	e8 48 fd ff ff       	call   111d5 <k_strlen>
   1148d:	83 c4 04             	add    $0x4,%esp
   11490:	01 45 f8             	add    %eax,-0x8(%ebp)
   11493:	eb 6d                	jmp    11502 <k_vsprint+0x127>

            }else if (ch == 'c') {
   11495:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11499:	75 1f                	jne    114ba <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   1149b:	8b 45 10             	mov    0x10(%ebp),%eax
   1149e:	8d 50 04             	lea    0x4(%eax),%edx
   114a1:	89 55 10             	mov    %edx,0x10(%ebp)
   114a4:	8b 00                	mov    (%eax),%eax
   114a6:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   114a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114ac:	8d 50 01             	lea    0x1(%eax),%edx
   114af:	89 55 f8             	mov    %edx,-0x8(%ebp)
   114b2:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   114b6:	88 10                	mov    %dl,(%eax)
   114b8:	eb 48                	jmp    11502 <k_vsprint+0x127>

            }else if (ch == 's') {
   114ba:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   114be:	75 42                	jne    11502 <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   114c0:	8b 45 10             	mov    0x10(%ebp),%eax
   114c3:	8d 50 04             	lea    0x4(%eax),%edx
   114c6:	89 55 10             	mov    %edx,0x10(%ebp)
   114c9:	8b 00                	mov    (%eax),%eax
   114cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   114ce:	ff 75 f4             	pushl  -0xc(%ebp)
   114d1:	e8 ff fc ff ff       	call   111d5 <k_strlen>
   114d6:	83 c4 04             	add    $0x4,%esp
   114d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   114dc:	eb 17                	jmp    114f5 <k_vsprint+0x11a>
                    *curr++ = *str++;
   114de:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114e1:	8d 42 01             	lea    0x1(%edx),%eax
   114e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
   114e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114ea:	8d 48 01             	lea    0x1(%eax),%ecx
   114ed:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   114f0:	0f b6 12             	movzbl (%edx),%edx
   114f3:	88 10                	mov    %dl,(%eax)
                while(len--) {
   114f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114f8:	8d 50 ff             	lea    -0x1(%eax),%edx
   114fb:	89 55 f0             	mov    %edx,-0x10(%ebp)
   114fe:	85 c0                	test   %eax,%eax
   11500:	75 dc                	jne    114de <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   11502:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11509:	eb 01                	jmp    1150c <k_vsprint+0x131>
        
        default:
            break;
   1150b:	90                   	nop
    while((ch = *fmt++)) {
   1150c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1150f:	8d 50 01             	lea    0x1(%eax),%edx
   11512:	89 55 0c             	mov    %edx,0xc(%ebp)
   11515:	0f b6 00             	movzbl (%eax),%eax
   11518:	88 45 ef             	mov    %al,-0x11(%ebp)
   1151b:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1151f:	0f 85 ce fe ff ff    	jne    113f3 <k_vsprint+0x18>
        }
    }
   11525:	90                   	nop
   11526:	c9                   	leave  
   11527:	c3                   	ret    

00011528 <list_is_empty>:
static inline int list_is_empty (list_t* list) {
   11528:	55                   	push   %ebp
   11529:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   1152b:	8b 45 08             	mov    0x8(%ebp),%eax
   1152e:	8b 40 08             	mov    0x8(%eax),%eax
   11531:	85 c0                	test   %eax,%eax
   11533:	0f 94 c0             	sete   %al
   11536:	0f b6 c0             	movzbl %al,%eax
}
   11539:	5d                   	pop    %ebp
   1153a:	c3                   	ret    

0001153b <list_init>:
#include <list.h>

void list_init(list_t* list) {
   1153b:	55                   	push   %ebp
   1153c:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t*)0;
   1153e:	8b 45 08             	mov    0x8(%ebp),%eax
   11541:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11548:	8b 45 08             	mov    0x8(%ebp),%eax
   1154b:	8b 50 04             	mov    0x4(%eax),%edx
   1154e:	8b 45 08             	mov    0x8(%ebp),%eax
   11551:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11553:	8b 45 08             	mov    0x8(%ebp),%eax
   11556:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1155d:	90                   	nop
   1155e:	5d                   	pop    %ebp
   1155f:	c3                   	ret    

00011560 <list_insert_first>:

void list_insert_first (list_t* list, list_node_t* node) {
   11560:	55                   	push   %ebp
   11561:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   11563:	8b 45 08             	mov    0x8(%ebp),%eax
   11566:	8b 10                	mov    (%eax),%edx
   11568:	8b 45 0c             	mov    0xc(%ebp),%eax
   1156b:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   1156e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11571:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if(list_is_empty(list)) {
   11577:	ff 75 08             	pushl  0x8(%ebp)
   1157a:	e8 a9 ff ff ff       	call   11528 <list_is_empty>
   1157f:	83 c4 04             	add    $0x4,%esp
   11582:	85 c0                	test   %eax,%eax
   11584:	74 15                	je     1159b <list_insert_first+0x3b>
        list->last = list->first = node;
   11586:	8b 45 08             	mov    0x8(%ebp),%eax
   11589:	8b 55 0c             	mov    0xc(%ebp),%edx
   1158c:	89 10                	mov    %edx,(%eax)
   1158e:	8b 45 08             	mov    0x8(%ebp),%eax
   11591:	8b 10                	mov    (%eax),%edx
   11593:	8b 45 08             	mov    0x8(%ebp),%eax
   11596:	89 50 04             	mov    %edx,0x4(%eax)
   11599:	eb 12                	jmp    115ad <list_insert_first+0x4d>
    } else {
        list->first->pre = node;
   1159b:	8b 45 08             	mov    0x8(%ebp),%eax
   1159e:	8b 00                	mov    (%eax),%eax
   115a0:	8b 55 0c             	mov    0xc(%ebp),%edx
   115a3:	89 10                	mov    %edx,(%eax)
        list->first = node;
   115a5:	8b 45 08             	mov    0x8(%ebp),%eax
   115a8:	8b 55 0c             	mov    0xc(%ebp),%edx
   115ab:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   115ad:	8b 45 08             	mov    0x8(%ebp),%eax
   115b0:	8b 40 08             	mov    0x8(%eax),%eax
   115b3:	8d 50 01             	lea    0x1(%eax),%edx
   115b6:	8b 45 08             	mov    0x8(%ebp),%eax
   115b9:	89 50 08             	mov    %edx,0x8(%eax)
}
   115bc:	90                   	nop
   115bd:	c9                   	leave  
   115be:	c3                   	ret    

000115bf <list_insert_last>:

void list_insert_last (list_t* list, list_node_t* node) {
   115bf:	55                   	push   %ebp
   115c0:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   115c2:	8b 45 08             	mov    0x8(%ebp),%eax
   115c5:	8b 50 04             	mov    0x4(%eax),%edx
   115c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   115cb:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   115cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   115d0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   115d7:	ff 75 08             	pushl  0x8(%ebp)
   115da:	e8 49 ff ff ff       	call   11528 <list_is_empty>
   115df:	83 c4 04             	add    $0x4,%esp
   115e2:	85 c0                	test   %eax,%eax
   115e4:	74 16                	je     115fc <list_insert_last+0x3d>
        list->first = list->last = node;
   115e6:	8b 45 08             	mov    0x8(%ebp),%eax
   115e9:	8b 55 0c             	mov    0xc(%ebp),%edx
   115ec:	89 50 04             	mov    %edx,0x4(%eax)
   115ef:	8b 45 08             	mov    0x8(%ebp),%eax
   115f2:	8b 50 04             	mov    0x4(%eax),%edx
   115f5:	8b 45 08             	mov    0x8(%ebp),%eax
   115f8:	89 10                	mov    %edx,(%eax)
   115fa:	eb 15                	jmp    11611 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   115fc:	8b 45 08             	mov    0x8(%ebp),%eax
   115ff:	8b 40 04             	mov    0x4(%eax),%eax
   11602:	8b 55 0c             	mov    0xc(%ebp),%edx
   11605:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11608:	8b 45 08             	mov    0x8(%ebp),%eax
   1160b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1160e:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   11611:	8b 45 08             	mov    0x8(%ebp),%eax
   11614:	8b 40 08             	mov    0x8(%eax),%eax
   11617:	8d 50 01             	lea    0x1(%eax),%edx
   1161a:	8b 45 08             	mov    0x8(%ebp),%eax
   1161d:	89 50 08             	mov    %edx,0x8(%eax)
}
   11620:	90                   	nop
   11621:	c9                   	leave  
   11622:	c3                   	ret    

00011623 <list_delete_first>:


list_node_t* list_delete_first (list_t* list) {
   11623:	55                   	push   %ebp
   11624:	89 e5                	mov    %esp,%ebp
   11626:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list)) {
   11629:	ff 75 08             	pushl  0x8(%ebp)
   1162c:	e8 f7 fe ff ff       	call   11528 <list_is_empty>
   11631:	83 c4 04             	add    $0x4,%esp
   11634:	85 c0                	test   %eax,%eax
   11636:	74 07                	je     1163f <list_delete_first+0x1c>
        return (list_node_t*)0;
   11638:	b8 00 00 00 00       	mov    $0x0,%eax
   1163d:	eb 5b                	jmp    1169a <list_delete_first+0x77>
    }

    list_node_t* remove_node = list->first;
   1163f:	8b 45 08             	mov    0x8(%ebp),%eax
   11642:	8b 00                	mov    (%eax),%eax
   11644:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   11647:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1164a:	8b 50 04             	mov    0x4(%eax),%edx
   1164d:	8b 45 08             	mov    0x8(%ebp),%eax
   11650:	89 10                	mov    %edx,(%eax)

    if( list->first == (list_node_t*)0 ) {
   11652:	8b 45 08             	mov    0x8(%ebp),%eax
   11655:	8b 00                	mov    (%eax),%eax
   11657:	85 c0                	test   %eax,%eax
   11659:	75 0c                	jne    11667 <list_delete_first+0x44>
        list->last = (list_node_t*)0;
   1165b:	8b 45 08             	mov    0x8(%ebp),%eax
   1165e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11665:	eb 0c                	jmp    11673 <list_delete_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t*)0;
   11667:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1166a:	8b 40 04             	mov    0x4(%eax),%eax
   1166d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        //list->first->pre = (list_node_t*)0;
    }

    remove_node->pre = remove_node->next = (list_node_t*)0;
   11673:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11676:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1167d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11680:	8b 50 04             	mov    0x4(%eax),%edx
   11683:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11686:	89 10                	mov    %edx,(%eax)
    list->count--;
   11688:	8b 45 08             	mov    0x8(%ebp),%eax
   1168b:	8b 40 08             	mov    0x8(%eax),%eax
   1168e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11691:	8b 45 08             	mov    0x8(%ebp),%eax
   11694:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   11697:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1169a:	c9                   	leave  
   1169b:	c3                   	ret    

0001169c <list_delete>:

list_node_t* list_delete (list_t* list, list_node_t* node) {
   1169c:	55                   	push   %ebp
   1169d:	89 e5                	mov    %esp,%ebp
    if(node == list->first) {
   1169f:	8b 45 08             	mov    0x8(%ebp),%eax
   116a2:	8b 00                	mov    (%eax),%eax
   116a4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   116a7:	75 0b                	jne    116b4 <list_delete+0x18>
        list->first = node->next;
   116a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   116ac:	8b 50 04             	mov    0x4(%eax),%edx
   116af:	8b 45 08             	mov    0x8(%ebp),%eax
   116b2:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last) {
   116b4:	8b 45 08             	mov    0x8(%ebp),%eax
   116b7:	8b 40 04             	mov    0x4(%eax),%eax
   116ba:	39 45 0c             	cmp    %eax,0xc(%ebp)
   116bd:	75 0b                	jne    116ca <list_delete+0x2e>
        list->last = node->pre;
   116bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   116c2:	8b 10                	mov    (%eax),%edx
   116c4:	8b 45 08             	mov    0x8(%ebp),%eax
   116c7:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if(node->pre) {
   116ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   116cd:	8b 00                	mov    (%eax),%eax
   116cf:	85 c0                	test   %eax,%eax
   116d1:	74 0e                	je     116e1 <list_delete+0x45>
        node->pre->next = node->next;
   116d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   116d6:	8b 00                	mov    (%eax),%eax
   116d8:	8b 55 0c             	mov    0xc(%ebp),%edx
   116db:	8b 52 04             	mov    0x4(%edx),%edx
   116de:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) {
   116e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   116e4:	8b 40 04             	mov    0x4(%eax),%eax
   116e7:	85 c0                	test   %eax,%eax
   116e9:	74 0d                	je     116f8 <list_delete+0x5c>
        node->next->pre = node->pre;
   116eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   116ee:	8b 40 04             	mov    0x4(%eax),%eax
   116f1:	8b 55 0c             	mov    0xc(%ebp),%edx
   116f4:	8b 12                	mov    (%edx),%edx
   116f6:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   116f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   116fb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11702:	8b 45 0c             	mov    0xc(%ebp),%eax
   11705:	8b 50 04             	mov    0x4(%eax),%edx
   11708:	8b 45 0c             	mov    0xc(%ebp),%eax
   1170b:	89 10                	mov    %edx,(%eax)

    list->count--;
   1170d:	8b 45 08             	mov    0x8(%ebp),%eax
   11710:	8b 40 08             	mov    0x8(%eax),%eax
   11713:	8d 50 ff             	lea    -0x1(%eax),%edx
   11716:	8b 45 08             	mov    0x8(%ebp),%eax
   11719:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   1171c:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   1171f:	5d                   	pop    %ebp
   11720:	c3                   	ret    

00011721 <inb>:
static inline uint8_t inb(uint16_t  port) {
   11721:	55                   	push   %ebp
   11722:	89 e5                	mov    %esp,%ebp
   11724:	83 ec 14             	sub    $0x14,%esp
   11727:	8b 45 08             	mov    0x8(%ebp),%eax
   1172a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   1172e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11732:	89 c2                	mov    %eax,%edx
   11734:	ec                   	in     (%dx),%al
   11735:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   11738:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1173c:	c9                   	leave  
   1173d:	c3                   	ret    

0001173e <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1173e:	55                   	push   %ebp
   1173f:	89 e5                	mov    %esp,%ebp
   11741:	83 ec 08             	sub    $0x8,%esp
   11744:	8b 55 08             	mov    0x8(%ebp),%edx
   11747:	8b 45 0c             	mov    0xc(%ebp),%eax
   1174a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1174e:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   11751:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11755:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11759:	ee                   	out    %al,(%dx)
}
   1175a:	90                   	nop
   1175b:	c9                   	leave  
   1175c:	c3                   	ret    

0001175d <log_init>:

#define COM1_PORT       0x3f8

static mutex_t mutex;

void log_init() {
   1175d:	55                   	push   %ebp
   1175e:	89 e5                	mov    %esp,%ebp
   11760:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   11763:	83 ec 0c             	sub    $0xc,%esp
   11766:	68 40 0c 20 00       	push   $0x200c40
   1176b:	e8 73 01 00 00       	call   118e3 <mutex_init>
   11770:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   11773:	83 ec 08             	sub    $0x8,%esp
   11776:	6a 00                	push   $0x0
   11778:	68 f9 03 00 00       	push   $0x3f9
   1177d:	e8 bc ff ff ff       	call   1173e <outb>
   11782:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   11785:	83 ec 08             	sub    $0x8,%esp
   11788:	68 80 00 00 00       	push   $0x80
   1178d:	68 fb 03 00 00       	push   $0x3fb
   11792:	e8 a7 ff ff ff       	call   1173e <outb>
   11797:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   1179a:	83 ec 08             	sub    $0x8,%esp
   1179d:	6a 03                	push   $0x3
   1179f:	68 f8 03 00 00       	push   $0x3f8
   117a4:	e8 95 ff ff ff       	call   1173e <outb>
   117a9:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   117ac:	83 ec 08             	sub    $0x8,%esp
   117af:	6a 00                	push   $0x0
   117b1:	68 f9 03 00 00       	push   $0x3f9
   117b6:	e8 83 ff ff ff       	call   1173e <outb>
   117bb:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   117be:	83 ec 08             	sub    $0x8,%esp
   117c1:	6a 03                	push   $0x3
   117c3:	68 fb 03 00 00       	push   $0x3fb
   117c8:	e8 71 ff ff ff       	call   1173e <outb>
   117cd:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   117d0:	83 ec 08             	sub    $0x8,%esp
   117d3:	68 c7 00 00 00       	push   $0xc7
   117d8:	68 fa 03 00 00       	push   $0x3fa
   117dd:	e8 5c ff ff ff       	call   1173e <outb>
   117e2:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   117e5:	83 ec 08             	sub    $0x8,%esp
   117e8:	6a 0f                	push   $0xf
   117ea:	68 fc 03 00 00       	push   $0x3fc
   117ef:	e8 4a ff ff ff       	call   1173e <outb>
   117f4:	83 c4 10             	add    $0x10,%esp
}
   117f7:	90                   	nop
   117f8:	c9                   	leave  
   117f9:	c3                   	ret    

000117fa <klog>:


void klog(const char* fmt, ...) {
   117fa:	55                   	push   %ebp
   117fb:	89 e5                	mov    %esp,%ebp
   117fd:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   11803:	83 ec 04             	sub    $0x4,%esp
   11806:	68 80 00 00 00       	push   $0x80
   1180b:	6a 00                	push   $0x0
   1180d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11813:	50                   	push   %eax
   11814:	e8 46 fa ff ff       	call   1125f <k_memset>
   11819:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   1181c:	8d 45 0c             	lea    0xc(%ebp),%eax
   1181f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    k_vsprint(buf, fmt, args);
   11825:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1182b:	83 ec 04             	sub    $0x4,%esp
   1182e:	50                   	push   %eax
   1182f:	ff 75 08             	pushl  0x8(%ebp)
   11832:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11838:	50                   	push   %eax
   11839:	e8 9d fb ff ff       	call   113db <k_vsprint>
   1183e:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   11841:	83 ec 0c             	sub    $0xc,%esp
   11844:	68 40 0c 20 00       	push   $0x200c40
   11849:	e8 c3 00 00 00       	call   11911 <mutex_lock>
   1184e:	83 c4 10             	add    $0x10,%esp
    // irq_state_t state = irq_enter_proection();

    const char *p = buf;
   11851:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11857:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   1185a:	eb 3b                	jmp    11897 <klog+0x9d>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1185c:	90                   	nop
   1185d:	83 ec 0c             	sub    $0xc,%esp
   11860:	68 fd 03 00 00       	push   $0x3fd
   11865:	e8 b7 fe ff ff       	call   11721 <inb>
   1186a:	83 c4 10             	add    $0x10,%esp
   1186d:	0f b6 c0             	movzbl %al,%eax
   11870:	83 e0 40             	and    $0x40,%eax
   11873:	85 c0                	test   %eax,%eax
   11875:	74 e6                	je     1185d <klog+0x63>
        outb(COM1_PORT, *p++);
   11877:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1187a:	8d 50 01             	lea    0x1(%eax),%edx
   1187d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11880:	0f b6 00             	movzbl (%eax),%eax
   11883:	0f b6 c0             	movzbl %al,%eax
   11886:	83 ec 08             	sub    $0x8,%esp
   11889:	50                   	push   %eax
   1188a:	68 f8 03 00 00       	push   $0x3f8
   1188f:	e8 aa fe ff ff       	call   1173e <outb>
   11894:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   11897:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1189a:	0f b6 00             	movzbl (%eax),%eax
   1189d:	84 c0                	test   %al,%al
   1189f:	75 bb                	jne    1185c <klog+0x62>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   118a1:	83 ec 08             	sub    $0x8,%esp
   118a4:	6a 0d                	push   $0xd
   118a6:	68 f8 03 00 00       	push   $0x3f8
   118ab:	e8 8e fe ff ff       	call   1173e <outb>
   118b0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   118b3:	83 ec 08             	sub    $0x8,%esp
   118b6:	6a 0a                	push   $0xa
   118b8:	68 f8 03 00 00       	push   $0x3f8
   118bd:	e8 7c fe ff ff       	call   1173e <outb>
   118c2:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   118c5:	83 ec 0c             	sub    $0xc,%esp
   118c8:	68 40 0c 20 00       	push   $0x200c40
   118cd:	e8 d3 00 00 00       	call   119a5 <mutex_unlock>
   118d2:	83 c4 10             	add    $0x10,%esp
    // irq_leave_proection(state);

}
   118d5:	90                   	nop
   118d6:	c9                   	leave  
   118d7:	c3                   	ret    

000118d8 <list_count>:
static inline int list_count (list_t* list) {
   118d8:	55                   	push   %ebp
   118d9:	89 e5                	mov    %esp,%ebp
    return list->count;
   118db:	8b 45 08             	mov    0x8(%ebp),%eax
   118de:	8b 40 08             	mov    0x8(%eax),%eax
}
   118e1:	5d                   	pop    %ebp
   118e2:	c3                   	ret    

000118e3 <mutex_init>:
#include <mux.h>
#include <irq.h>
#include <log.h>

void mutex_init (mutex_t * mutex) {
   118e3:	55                   	push   %ebp
   118e4:	89 e5                	mov    %esp,%ebp
   118e6:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   118e9:	8b 45 08             	mov    0x8(%ebp),%eax
   118ec:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   118f3:	8b 45 08             	mov    0x8(%ebp),%eax
   118f6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   118fc:	8b 45 08             	mov    0x8(%ebp),%eax
   118ff:	83 c0 08             	add    $0x8,%eax
   11902:	83 ec 0c             	sub    $0xc,%esp
   11905:	50                   	push   %eax
   11906:	e8 30 fc ff ff       	call   1153b <list_init>
   1190b:	83 c4 10             	add    $0x10,%esp
}
   1190e:	90                   	nop
   1190f:	c9                   	leave  
   11910:	c3                   	ret    

00011911 <mutex_lock>:

void mutex_lock (mutex_t * mutex) {
   11911:	55                   	push   %ebp
   11912:	89 e5                	mov    %esp,%ebp
   11914:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   11917:	e8 1a f5 ff ff       	call   10e36 <irq_enter_proection>
   1191c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   1191f:	e8 0d 06 00 00       	call   11f31 <task_current>
   11924:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11927:	8b 45 08             	mov    0x8(%ebp),%eax
   1192a:	8b 40 04             	mov    0x4(%eax),%eax
   1192d:	85 c0                	test   %eax,%eax
   1192f:	75 14                	jne    11945 <mutex_lock+0x34>
        mutex->locked_count = 1;
   11931:	8b 45 08             	mov    0x8(%ebp),%eax
   11934:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   1193b:	8b 45 08             	mov    0x8(%ebp),%eax
   1193e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11941:	89 10                	mov    %edx,(%eax)
   11943:	eb 4f                	jmp    11994 <mutex_lock+0x83>
    } else if (mutex->owner == curr) {
   11945:	8b 45 08             	mov    0x8(%ebp),%eax
   11948:	8b 00                	mov    (%eax),%eax
   1194a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1194d:	75 11                	jne    11960 <mutex_lock+0x4f>
        mutex->locked_count++;
   1194f:	8b 45 08             	mov    0x8(%ebp),%eax
   11952:	8b 40 04             	mov    0x4(%eax),%eax
   11955:	8d 50 01             	lea    0x1(%eax),%edx
   11958:	8b 45 08             	mov    0x8(%ebp),%eax
   1195b:	89 50 04             	mov    %edx,0x4(%eax)
   1195e:	eb 34                	jmp    11994 <mutex_lock+0x83>
    } else {
        task_t * curr = task_current();
   11960:	e8 cc 05 00 00       	call   11f31 <task_current>
   11965:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   11968:	83 ec 0c             	sub    $0xc,%esp
   1196b:	ff 75 ec             	pushl  -0x14(%ebp)
   1196e:	e8 fd 05 00 00       	call   11f70 <task_set_block>
   11973:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   11976:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11979:	8d 50 44             	lea    0x44(%eax),%edx
   1197c:	8b 45 08             	mov    0x8(%ebp),%eax
   1197f:	83 c0 08             	add    $0x8,%eax
   11982:	83 ec 08             	sub    $0x8,%esp
   11985:	52                   	push   %edx
   11986:	50                   	push   %eax
   11987:	e8 33 fc ff ff       	call   115bf <list_insert_last>
   1198c:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1198f:	e8 ab 06 00 00       	call   1203f <task_dispatch>
    }

    irq_leave_proection(irq_state);
   11994:	83 ec 0c             	sub    $0xc,%esp
   11997:	ff 75 f4             	pushl  -0xc(%ebp)
   1199a:	e8 af f4 ff ff       	call   10e4e <irq_leave_proection>
   1199f:	83 c4 10             	add    $0x10,%esp
}
   119a2:	90                   	nop
   119a3:	c9                   	leave  
   119a4:	c3                   	ret    

000119a5 <mutex_unlock>:

void mutex_unlock (mutex_t * mutex) {
   119a5:	55                   	push   %ebp
   119a6:	89 e5                	mov    %esp,%ebp
   119a8:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   119ab:	e8 86 f4 ff ff       	call   10e36 <irq_enter_proection>
   119b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * curr = task_current();
   119b3:	e8 79 05 00 00       	call   11f31 <task_current>
   119b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   119bb:	8b 45 08             	mov    0x8(%ebp),%eax
   119be:	8b 00                	mov    (%eax),%eax
   119c0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   119c3:	0f 85 88 00 00 00    	jne    11a51 <mutex_unlock+0xac>
        if (--mutex->locked_count == 0) {
   119c9:	8b 45 08             	mov    0x8(%ebp),%eax
   119cc:	8b 40 04             	mov    0x4(%eax),%eax
   119cf:	8d 50 ff             	lea    -0x1(%eax),%edx
   119d2:	8b 45 08             	mov    0x8(%ebp),%eax
   119d5:	89 50 04             	mov    %edx,0x4(%eax)
   119d8:	8b 45 08             	mov    0x8(%ebp),%eax
   119db:	8b 40 04             	mov    0x4(%eax),%eax
   119de:	85 c0                	test   %eax,%eax
   119e0:	75 6f                	jne    11a51 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   119e2:	8b 45 08             	mov    0x8(%ebp),%eax
   119e5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   119eb:	8b 45 08             	mov    0x8(%ebp),%eax
   119ee:	83 c0 08             	add    $0x8,%eax
   119f1:	83 ec 0c             	sub    $0xc,%esp
   119f4:	50                   	push   %eax
   119f5:	e8 de fe ff ff       	call   118d8 <list_count>
   119fa:	83 c4 10             	add    $0x10,%esp
   119fd:	85 c0                	test   %eax,%eax
   119ff:	74 50                	je     11a51 <mutex_unlock+0xac>
                list_node_t * task_node = list_delete_first(&mutex->wait_list);
   11a01:	8b 45 08             	mov    0x8(%ebp),%eax
   11a04:	83 c0 08             	add    $0x8,%eax
   11a07:	83 ec 0c             	sub    $0xc,%esp
   11a0a:	50                   	push   %eax
   11a0b:	e8 13 fc ff ff       	call   11623 <list_delete_first>
   11a10:	83 c4 10             	add    $0x10,%esp
   11a13:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   11a16:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11a1a:	74 08                	je     11a24 <mutex_unlock+0x7f>
   11a1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a1f:	83 e8 44             	sub    $0x44,%eax
   11a22:	eb 05                	jmp    11a29 <mutex_unlock+0x84>
   11a24:	b8 00 00 00 00       	mov    $0x0,%eax
   11a29:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   11a2c:	83 ec 0c             	sub    $0xc,%esp
   11a2f:	ff 75 e8             	pushl  -0x18(%ebp)
   11a32:	e8 04 05 00 00       	call   11f3b <task_set_ready>
   11a37:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   11a3a:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3d:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   11a44:	8b 45 08             	mov    0x8(%ebp),%eax
   11a47:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11a4a:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   11a4c:	e8 ee 05 00 00       	call   1203f <task_dispatch>
            }
        }
    }

    irq_leave_proection(irq_state);
   11a51:	83 ec 0c             	sub    $0xc,%esp
   11a54:	ff 75 f4             	pushl  -0xc(%ebp)
   11a57:	e8 f2 f3 ff ff       	call   10e4e <irq_leave_proection>
   11a5c:	83 c4 10             	add    $0x10,%esp
   11a5f:	90                   	nop
   11a60:	c9                   	leave  
   11a61:	c3                   	ret    

00011a62 <list_count>:
static inline int list_count (list_t* list) {
   11a62:	55                   	push   %ebp
   11a63:	89 e5                	mov    %esp,%ebp
    return list->count;
   11a65:	8b 45 08             	mov    0x8(%ebp),%eax
   11a68:	8b 40 08             	mov    0x8(%eax),%eax
}
   11a6b:	5d                   	pop    %ebp
   11a6c:	c3                   	ret    

00011a6d <sem_init>:
#include <sem.h>
#include <irq.h>

void sem_init(sem_t* sem, int init_count) {
   11a6d:	55                   	push   %ebp
   11a6e:	89 e5                	mov    %esp,%ebp
   11a70:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   11a73:	8b 45 08             	mov    0x8(%ebp),%eax
   11a76:	8b 55 0c             	mov    0xc(%ebp),%edx
   11a79:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7e:	83 c0 04             	add    $0x4,%eax
   11a81:	83 ec 0c             	sub    $0xc,%esp
   11a84:	50                   	push   %eax
   11a85:	e8 b1 fa ff ff       	call   1153b <list_init>
   11a8a:	83 c4 10             	add    $0x10,%esp
}
   11a8d:	90                   	nop
   11a8e:	c9                   	leave  
   11a8f:	c3                   	ret    

00011a90 <sem_wait>:

void sem_wait(sem_t* sem) {
   11a90:	55                   	push   %ebp
   11a91:	89 e5                	mov    %esp,%ebp
   11a93:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   11a96:	e8 9b f3 ff ff       	call   10e36 <irq_enter_proection>
   11a9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0) {
   11a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa1:	8b 00                	mov    (%eax),%eax
   11aa3:	85 c0                	test   %eax,%eax
   11aa5:	7e 0f                	jle    11ab6 <sem_wait+0x26>
        sem->count--;
   11aa7:	8b 45 08             	mov    0x8(%ebp),%eax
   11aaa:	8b 00                	mov    (%eax),%eax
   11aac:	8d 50 ff             	lea    -0x1(%eax),%edx
   11aaf:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab2:	89 10                	mov    %edx,(%eax)
   11ab4:	eb 34                	jmp    11aea <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   11ab6:	e8 76 04 00 00       	call   11f31 <task_current>
   11abb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   11abe:	83 ec 0c             	sub    $0xc,%esp
   11ac1:	ff 75 f0             	pushl  -0x10(%ebp)
   11ac4:	e8 a7 04 00 00       	call   11f70 <task_set_block>
   11ac9:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   11acc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11acf:	8d 50 44             	lea    0x44(%eax),%edx
   11ad2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ad5:	83 c0 04             	add    $0x4,%eax
   11ad8:	83 ec 08             	sub    $0x8,%esp
   11adb:	52                   	push   %edx
   11adc:	50                   	push   %eax
   11add:	e8 dd fa ff ff       	call   115bf <list_insert_last>
   11ae2:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11ae5:	e8 55 05 00 00       	call   1203f <task_dispatch>
    }
    irq_leave_proection(state);
   11aea:	83 ec 0c             	sub    $0xc,%esp
   11aed:	ff 75 f4             	pushl  -0xc(%ebp)
   11af0:	e8 59 f3 ff ff       	call   10e4e <irq_leave_proection>
   11af5:	83 c4 10             	add    $0x10,%esp
}
   11af8:	90                   	nop
   11af9:	c9                   	leave  
   11afa:	c3                   	ret    

00011afb <sem_notify>:

void sem_notify(sem_t* sem) {
   11afb:	55                   	push   %ebp
   11afc:	89 e5                	mov    %esp,%ebp
   11afe:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();
   11b01:	e8 30 f3 ff ff       	call   10e36 <irq_enter_proection>
   11b06:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list)) {
   11b09:	8b 45 08             	mov    0x8(%ebp),%eax
   11b0c:	83 c0 04             	add    $0x4,%eax
   11b0f:	83 ec 0c             	sub    $0xc,%esp
   11b12:	50                   	push   %eax
   11b13:	e8 4a ff ff ff       	call   11a62 <list_count>
   11b18:	83 c4 10             	add    $0x10,%esp
   11b1b:	85 c0                	test   %eax,%eax
   11b1d:	74 40                	je     11b5f <sem_notify+0x64>
        list_node_t* node = list_delete_first(&sem->wait_list);
   11b1f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b22:	83 c0 04             	add    $0x4,%eax
   11b25:	83 ec 0c             	sub    $0xc,%esp
   11b28:	50                   	push   %eax
   11b29:	e8 f5 fa ff ff       	call   11623 <list_delete_first>
   11b2e:	83 c4 10             	add    $0x10,%esp
   11b31:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_t* task = list_node_parent(node, task_t, wait_node);
   11b34:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11b38:	74 08                	je     11b42 <sem_notify+0x47>
   11b3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b3d:	83 e8 44             	sub    $0x44,%eax
   11b40:	eb 05                	jmp    11b47 <sem_notify+0x4c>
   11b42:	b8 00 00 00 00       	mov    $0x0,%eax
   11b47:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11b4a:	83 ec 0c             	sub    $0xc,%esp
   11b4d:	ff 75 ec             	pushl  -0x14(%ebp)
   11b50:	e8 e6 03 00 00       	call   11f3b <task_set_ready>
   11b55:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11b58:	e8 e2 04 00 00       	call   1203f <task_dispatch>
   11b5d:	eb 0d                	jmp    11b6c <sem_notify+0x71>
    } else {
        sem->count++;
   11b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b62:	8b 00                	mov    (%eax),%eax
   11b64:	8d 50 01             	lea    0x1(%eax),%edx
   11b67:	8b 45 08             	mov    0x8(%ebp),%eax
   11b6a:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_proection(state);
   11b6c:	83 ec 0c             	sub    $0xc,%esp
   11b6f:	ff 75 f4             	pushl  -0xc(%ebp)
   11b72:	e8 d7 f2 ff ff       	call   10e4e <irq_leave_proection>
   11b77:	83 c4 10             	add    $0x10,%esp

}
   11b7a:	90                   	nop
   11b7b:	c9                   	leave  
   11b7c:	c3                   	ret    

00011b7d <sem_count>:

int  sem_count(sem_t* sem) {
   11b7d:	55                   	push   %ebp
   11b7e:	89 e5                	mov    %esp,%ebp
   11b80:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   11b83:	e8 ae f2 ff ff       	call   10e36 <irq_enter_proection>
   11b88:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11b8b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8e:	8b 00                	mov    (%eax),%eax
   11b90:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_proection(state);
   11b93:	83 ec 0c             	sub    $0xc,%esp
   11b96:	ff 75 f4             	pushl  -0xc(%ebp)
   11b99:	e8 b0 f2 ff ff       	call   10e4e <irq_leave_proection>
   11b9e:	83 c4 10             	add    $0x10,%esp
    return count;
   11ba1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ba4:	c9                   	leave  
   11ba5:	c3                   	ret    

00011ba6 <list_node_init>:
static inline void list_node_init(list_node_t* node) {
   11ba6:	55                   	push   %ebp
   11ba7:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t*)0;
   11ba9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bac:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11bb3:	8b 45 08             	mov    0x8(%ebp),%eax
   11bb6:	8b 50 04             	mov    0x4(%eax),%edx
   11bb9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bbc:	89 10                	mov    %edx,(%eax)
}
   11bbe:	90                   	nop
   11bbf:	5d                   	pop    %ebp
   11bc0:	c3                   	ret    

00011bc1 <list_node_next>:
static inline list_node_t* list_node_next(list_node_t* node) {
   11bc1:	55                   	push   %ebp
   11bc2:	89 e5                	mov    %esp,%ebp
    return node->next;
   11bc4:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc7:	8b 40 04             	mov    0x4(%eax),%eax
}
   11bca:	5d                   	pop    %ebp
   11bcb:	c3                   	ret    

00011bcc <list_count>:
static inline int list_count (list_t* list) {
   11bcc:	55                   	push   %ebp
   11bcd:	89 e5                	mov    %esp,%ebp
    return list->count;
   11bcf:	8b 45 08             	mov    0x8(%ebp),%eax
   11bd2:	8b 40 08             	mov    0x8(%eax),%eax
}
   11bd5:	5d                   	pop    %ebp
   11bd6:	c3                   	ret    

00011bd7 <list_first>:
static inline list_node_t* list_first (list_t* list) {
   11bd7:	55                   	push   %ebp
   11bd8:	89 e5                	mov    %esp,%ebp
    return list->first;
   11bda:	8b 45 08             	mov    0x8(%ebp),%eax
   11bdd:	8b 00                	mov    (%eax),%eax
}
   11bdf:	5d                   	pop    %ebp
   11be0:	c3                   	ret    

00011be1 <hlt>:
static inline void hlt() {
   11be1:	55                   	push   %ebp
   11be2:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   11be4:	f4                   	hlt    
}
   11be5:	90                   	nop
   11be6:	5d                   	pop    %ebp
   11be7:	c3                   	ret    

00011be8 <idle_task_func>:
#include <cpu.h>
#include <klib.h>
#include <os_cfg.h>
#include <log.h>

static void idle_task_func() { for(;;) hlt(); }
   11be8:	55                   	push   %ebp
   11be9:	89 e5                	mov    %esp,%ebp
   11beb:	e8 f1 ff ff ff       	call   11be1 <hlt>
   11bf0:	eb f9                	jmp    11beb <idle_task_func+0x3>

00011bf2 <task_switch_from_to>:

void simple_switch(uint32_t **from, uint32_t* to);

void task_switch_from_to(task_t* from, task_t* to) {
   11bf2:	55                   	push   %ebp
   11bf3:	89 e5                	mov    %esp,%ebp
   11bf5:	83 ec 08             	sub    $0x8,%esp
    // far_jump(to->tss_sel, 0);             // 使用 tss 机制
    simple_switch(&from->stack, to->stack);  // 使用直接跳转机制
   11bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bfb:	8b 10                	mov    (%eax),%edx
   11bfd:	8b 45 08             	mov    0x8(%ebp),%eax
   11c00:	83 ec 08             	sub    $0x8,%esp
   11c03:	52                   	push   %edx
   11c04:	50                   	push   %eax
   11c05:	e8 9b e6 ff ff       	call   102a5 <simple_switch>
   11c0a:	83 c4 10             	add    $0x10,%esp
}
   11c0d:	90                   	nop
   11c0e:	c9                   	leave  
   11c0f:	c3                   	ret    

00011c10 <tss_init>:
static uint32_t task3_stack[2048];
static task_t task3;
sem_t  sem_test;


int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   11c10:	55                   	push   %ebp
   11c11:	89 e5                	mov    %esp,%ebp
   11c13:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   11c16:	e8 7b e8 ff ff       	call   10496 <gdt_alloc_desc>
   11c1b:	89 45 f4             	mov    %eax,-0xc(%ebp)


    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), 
   11c1e:	8b 45 08             	mov    0x8(%ebp),%eax
   11c21:	83 c0 4c             	add    $0x4c,%eax
   11c24:	68 89 00 00 00       	push   $0x89
   11c29:	6a 68                	push   $0x68
   11c2b:	50                   	push   %eax
   11c2c:	ff 75 f4             	pushl  -0xc(%ebp)
   11c2f:	e8 6f e7 ff ff       	call   103a3 <segment_desc_set>
   11c34:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS
    );

    k_memset(&task->tss, 0, sizeof(tss_t));
   11c37:	8b 45 08             	mov    0x8(%ebp),%eax
   11c3a:	83 c0 4c             	add    $0x4c,%eax
   11c3d:	83 ec 04             	sub    $0x4,%esp
   11c40:	6a 68                	push   $0x68
   11c42:	6a 00                	push   $0x0
   11c44:	50                   	push   %eax
   11c45:	e8 15 f6 ff ff       	call   1125f <k_memset>
   11c4a:	83 c4 10             	add    $0x10,%esp

    task->tss.eip  = entry;
   11c4d:	8b 45 08             	mov    0x8(%ebp),%eax
   11c50:	8b 55 0c             	mov    0xc(%ebp),%edx
   11c53:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp  = esp;
   11c56:	8b 45 08             	mov    0x8(%ebp),%eax
   11c59:	8b 55 10             	mov    0x10(%ebp),%edx
   11c5c:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.esp0 = esp;
   11c62:	8b 45 08             	mov    0x8(%ebp),%eax
   11c65:	8b 55 10             	mov    0x10(%ebp),%edx
   11c68:	89 50 50             	mov    %edx,0x50(%eax)

    task->tss.ss  = KERNEL_SELECTOR_DS;
   11c6b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c6e:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   11c75:	00 00 00 
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   11c78:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7b:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es  = KERNEL_SELECTOR_DS;
   11c82:	8b 45 08             	mov    0x8(%ebp),%eax
   11c85:	c7 80 94 00 00 00 10 	movl   $0x10,0x94(%eax)
   11c8c:	00 00 00 
    task->tss.ds  = KERNEL_SELECTOR_DS;
   11c8f:	8b 45 08             	mov    0x8(%ebp),%eax
   11c92:	c7 80 a0 00 00 00 10 	movl   $0x10,0xa0(%eax)
   11c99:	00 00 00 
    task->tss.fs  = KERNEL_SELECTOR_DS;
   11c9c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9f:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   11ca6:	00 00 00 
    task->tss.gs  = KERNEL_SELECTOR_DS;
   11ca9:	8b 45 08             	mov    0x8(%ebp),%eax
   11cac:	c7 80 a8 00 00 00 10 	movl   $0x10,0xa8(%eax)
   11cb3:	00 00 00 

    task->tss.cs  = KERNEL_SELECTOR_CS;
   11cb6:	8b 45 08             	mov    0x8(%ebp),%eax
   11cb9:	c7 80 98 00 00 00 08 	movl   $0x8,0x98(%eax)
   11cc0:	00 00 00 

    task->tss.eflags = EFLAGES_DEFAULT | EFLAGS_IF;
   11cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc6:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    task->tss_sel = tss_sel;
   11ccd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cd0:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd3:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
}
   11cd9:	90                   	nop
   11cda:	c9                   	leave  
   11cdb:	c3                   	ret    

00011cdc <task_init>:

// 初始化一个任务
int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   11cdc:	55                   	push   %ebp
   11cdd:	89 e5                	mov    %esp,%ebp
   11cdf:	83 ec 18             	sub    $0x18,%esp
    // tss_init(task, entry, esp);  // 使用 tss 机制

    // 使用直接跳转机制
    uint32_t* pesp = (uint32_t*)esp;
   11ce2:	8b 45 14             	mov    0x14(%ebp),%eax
   11ce5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pesp) {
   11ce8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11cec:	74 48                	je     11d36 <task_init+0x5a>
        *(--pesp) = entry;
   11cee:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   11cf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11cf5:	8b 55 10             	mov    0x10(%ebp),%edx
   11cf8:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;
   11cfa:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   11cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d01:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   11d07:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   11d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   11d14:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   11d18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d1b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   11d21:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   11d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d28:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        task->stack = pesp;
   11d2e:	8b 45 08             	mov    0x8(%ebp),%eax
   11d31:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11d34:	89 10                	mov    %edx,(%eax)
    }

    k_strncpy(task->name, name, TASK_NAME_SIZE);        // 进程名
   11d36:	8b 45 08             	mov    0x8(%ebp),%eax
   11d39:	83 c0 08             	add    $0x8,%eax
   11d3c:	83 ec 04             	sub    $0x4,%esp
   11d3f:	6a 20                	push   $0x20
   11d41:	ff 75 0c             	pushl  0xc(%ebp)
   11d44:	50                   	push   %eax
   11d45:	e8 a1 f3 ff ff       	call   110eb <k_strncpy>
   11d4a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;                         // 状态  created
   11d4d:	8b 45 08             	mov    0x8(%ebp),%eax
   11d50:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;         //  最大时间片
   11d57:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5a:	c7 40 2c 0a 00 00 00 	movl   $0xa,0x2c(%eax)
    task->slice_ticks = TASK_TIME_SLICE_DEFAULT;        //  当前时间片
   11d61:	8b 45 08             	mov    0x8(%ebp),%eax
   11d64:	c7 40 28 0a 00 00 00 	movl   $0xa,0x28(%eax)
    task->sleep_ticks = 0;
   11d6b:	8b 45 08             	mov    0x8(%ebp),%eax
   11d6e:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node); 
   11d75:	8b 45 08             	mov    0x8(%ebp),%eax
   11d78:	83 c0 3c             	add    $0x3c,%eax
   11d7b:	83 ec 0c             	sub    $0xc,%esp
   11d7e:	50                   	push   %eax
   11d7f:	e8 22 fe ff ff       	call   11ba6 <list_node_init>
   11d84:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   11d87:	8b 45 08             	mov    0x8(%ebp),%eax
   11d8a:	83 c0 34             	add    $0x34,%eax
   11d8d:	83 ec 0c             	sub    $0xc,%esp
   11d90:	50                   	push   %eax
   11d91:	e8 10 fe ff ff       	call   11ba6 <list_node_init>
   11d96:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   11d99:	8b 45 08             	mov    0x8(%ebp),%eax
   11d9c:	83 c0 44             	add    $0x44,%eax
   11d9f:	83 ec 0c             	sub    $0xc,%esp
   11da2:	50                   	push   %eax
   11da3:	e8 fe fd ff ff       	call   11ba6 <list_node_init>
   11da8:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   11dab:	e8 86 f0 ff ff       	call   10e36 <irq_enter_proection>
   11db0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_ready(task);                                        // 加入到就绪队列
   11db3:	83 ec 0c             	sub    $0xc,%esp
   11db6:	ff 75 08             	pushl  0x8(%ebp)
   11db9:	e8 7d 01 00 00       	call   11f3b <task_set_ready>
   11dbe:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&task_manager.task_list, &task->all_node);  // 加入到所有队列
   11dc1:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc4:	83 c0 3c             	add    $0x3c,%eax
   11dc7:	83 ec 08             	sub    $0x8,%esp
   11dca:	50                   	push   %eax
   11dcb:	68 7c 0c 20 00       	push   $0x200c7c
   11dd0:	e8 ea f7 ff ff       	call   115bf <list_insert_last>
   11dd5:	83 c4 10             	add    $0x10,%esp
    irq_leave_proection(state);  //--leave protection
   11dd8:	83 ec 0c             	sub    $0xc,%esp
   11ddb:	ff 75 f0             	pushl  -0x10(%ebp)
   11dde:	e8 6b f0 ff ff       	call   10e4e <irq_leave_proection>
   11de3:	83 c4 10             	add    $0x10,%esp

    return 0;
   11de6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11deb:	c9                   	leave  
   11dec:	c3                   	ret    

00011ded <task_manager_init>:

// 初始化任务管理
void task_manager_init() {
   11ded:	55                   	push   %ebp
   11dee:	89 e5                	mov    %esp,%ebp
   11df0:	83 ec 08             	sub    $0x8,%esp
    sem_init(&sem_test, 0);
   11df3:	83 ec 08             	sub    $0x8,%esp
   11df6:	6a 00                	push   $0x0
   11df8:	68 c0 8e 20 00       	push   $0x208ec0
   11dfd:	e8 6b fc ff ff       	call   11a6d <sem_init>
   11e02:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.ready_list);
   11e05:	83 ec 0c             	sub    $0xc,%esp
   11e08:	68 64 0c 20 00       	push   $0x200c64
   11e0d:	e8 29 f7 ff ff       	call   1153b <list_init>
   11e12:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   11e15:	83 ec 0c             	sub    $0xc,%esp
   11e18:	68 7c 0c 20 00       	push   $0x200c7c
   11e1d:	e8 19 f7 ff ff       	call   1153b <list_init>
   11e22:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   11e25:	83 ec 0c             	sub    $0xc,%esp
   11e28:	68 70 0c 20 00       	push   $0x200c70
   11e2d:	e8 09 f7 ff ff       	call   1153b <list_init>
   11e32:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = get_first_task();
   11e35:	e8 ed 00 00 00       	call   11f27 <get_first_task>
   11e3a:	a3 60 0c 20 00       	mov    %eax,0x200c60
}
   11e3f:	90                   	nop
   11e40:	c9                   	leave  
   11e41:	c3                   	ret    

00011e42 <task1_func>:


void task1_func() {
   11e42:	55                   	push   %ebp
   11e43:	89 e5                	mov    %esp,%ebp
   11e45:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11e48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("-------------------------11111-----------------: %d", count--);
   11e4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e52:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e55:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11e58:	83 ec 08             	sub    $0x8,%esp
   11e5b:	50                   	push   %eax
   11e5c:	68 bc 24 01 00       	push   $0x124bc
   11e61:	e8 94 f9 ff ff       	call   117fa <klog>
   11e66:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11e69:	83 ec 0c             	sub    $0xc,%esp
   11e6c:	68 e8 03 00 00       	push   $0x3e8
   11e71:	e8 03 03 00 00       	call   12179 <sys_sleep>
   11e76:	83 c4 10             	add    $0x10,%esp
        sem_notify(&sem_test);
   11e79:	83 ec 0c             	sub    $0xc,%esp
   11e7c:	68 c0 8e 20 00       	push   $0x208ec0
   11e81:	e8 75 fc ff ff       	call   11afb <sem_notify>
   11e86:	83 c4 10             	add    $0x10,%esp
        klog("-------------------------11111-----------------: %d", count--);
   11e89:	eb c4                	jmp    11e4f <task1_func+0xd>

00011e8b <task3_func>:
    }
}


void task3_func() {
   11e8b:	55                   	push   %ebp
   11e8c:	89 e5                	mov    %esp,%ebp
   11e8e:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11e91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        sem_wait(&sem_test);
   11e98:	83 ec 0c             	sub    $0xc,%esp
   11e9b:	68 c0 8e 20 00       	push   $0x208ec0
   11ea0:	e8 eb fb ff ff       	call   11a90 <sem_wait>
   11ea5:	83 c4 10             	add    $0x10,%esp
        klog("-------------------------33333-----------------: %d", count++);
   11ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11eab:	8d 50 01             	lea    0x1(%eax),%edx
   11eae:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11eb1:	83 ec 08             	sub    $0x8,%esp
   11eb4:	50                   	push   %eax
   11eb5:	68 f0 24 01 00       	push   $0x124f0
   11eba:	e8 3b f9 ff ff       	call   117fa <klog>
   11ebf:	83 c4 10             	add    $0x10,%esp
        sem_wait(&sem_test);
   11ec2:	eb d4                	jmp    11e98 <task3_func+0xd>

00011ec4 <task1_func_init>:
    }
}


void task1_func_init() {
   11ec4:	55                   	push   %ebp
   11ec5:	89 e5                	mov    %esp,%ebp
   11ec7:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 
   11eca:	ba 00 2e 20 00       	mov    $0x202e00,%edx
   11ecf:	b8 42 1e 01 00       	mov    $0x11e42,%eax
   11ed4:	52                   	push   %edx
   11ed5:	50                   	push   %eax
   11ed6:	68 24 25 01 00       	push   $0x12524
   11edb:	68 88 0c 20 00       	push   $0x200c88
   11ee0:	e8 f7 fd ff ff       	call   11cdc <task_init>
   11ee5:	83 c4 10             	add    $0x10,%esp
        (uint32_t)task1_func, (uint32_t)&task1_stack[2048]);
    task_init(&task_manager.idle_task,  "idle  task", 
   11ee8:	ba 00 4e 20 00       	mov    $0x204e00,%edx
   11eed:	b8 e8 1b 01 00       	mov    $0x11be8,%eax
   11ef2:	52                   	push   %edx
   11ef3:	50                   	push   %eax
   11ef4:	68 2f 25 01 00       	push   $0x1252f
   11ef9:	68 40 0d 20 00       	push   $0x200d40
   11efe:	e8 d9 fd ff ff       	call   11cdc <task_init>
   11f03:	83 c4 10             	add    $0x10,%esp
        (uint32_t)idle_task_func, (uint32_t)&idle_task_stack[2048]);
    task_init(&task3,                   "test  task", 
   11f06:	ba 00 6e 20 00       	mov    $0x206e00,%edx
   11f0b:	b8 8b 1e 01 00       	mov    $0x11e8b,%eax
   11f10:	52                   	push   %edx
   11f11:	50                   	push   %eax
   11f12:	68 3a 25 01 00       	push   $0x1253a
   11f17:	68 00 6e 20 00       	push   $0x206e00
   11f1c:	e8 bb fd ff ff       	call   11cdc <task_init>
   11f21:	83 c4 10             	add    $0x10,%esp
        (uint32_t)task3_func, (uint32_t)&task3_stack[2048]);

}
   11f24:	90                   	nop
   11f25:	c9                   	leave  
   11f26:	c3                   	ret    

00011f27 <get_first_task>:


task_t* get_first_task() {
   11f27:	55                   	push   %ebp
   11f28:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11f2a:	b8 88 0c 20 00       	mov    $0x200c88,%eax
}
   11f2f:	5d                   	pop    %ebp
   11f30:	c3                   	ret    

00011f31 <task_current>:

task_t* task_current() {
   11f31:	55                   	push   %ebp
   11f32:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11f34:	a1 60 0c 20 00       	mov    0x200c60,%eax
}
   11f39:	5d                   	pop    %ebp
   11f3a:	c3                   	ret    

00011f3b <task_set_ready>:


// 将任务添加到就绪队列 尾部 设置状态为 ready
void task_set_ready(task_t* task) {
   11f3b:	55                   	push   %ebp
   11f3c:	89 e5                	mov    %esp,%ebp
   11f3e:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {  // 空进程不应该加入就绪队列
   11f41:	81 7d 08 40 0d 20 00 	cmpl   $0x200d40,0x8(%ebp)
   11f48:	74 23                	je     11f6d <task_set_ready+0x32>
        return;
    }

    list_insert_last(&task_manager.ready_list, &task->run_node);
   11f4a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f4d:	83 c0 34             	add    $0x34,%eax
   11f50:	83 ec 08             	sub    $0x8,%esp
   11f53:	50                   	push   %eax
   11f54:	68 64 0c 20 00       	push   $0x200c64
   11f59:	e8 61 f6 ff ff       	call   115bf <list_insert_last>
   11f5e:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11f61:	8b 45 08             	mov    0x8(%ebp),%eax
   11f64:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
   11f6b:	eb 01                	jmp    11f6e <task_set_ready+0x33>
        return;
   11f6d:	90                   	nop
}
   11f6e:	c9                   	leave  
   11f6f:	c3                   	ret    

00011f70 <task_set_block>:

// 将 特定 任务从就绪队列删除
void task_set_block(task_t* task) {
   11f70:	55                   	push   %ebp
   11f71:	89 e5                	mov    %esp,%ebp
   11f73:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {  // 空进程不应该删除
   11f76:	81 7d 08 40 0d 20 00 	cmpl   $0x200d40,0x8(%ebp)
   11f7d:	74 19                	je     11f98 <task_set_block+0x28>
        return;
    }
    list_delete(&task_manager.ready_list, &task->run_node);
   11f7f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f82:	83 c0 34             	add    $0x34,%eax
   11f85:	83 ec 08             	sub    $0x8,%esp
   11f88:	50                   	push   %eax
   11f89:	68 64 0c 20 00       	push   $0x200c64
   11f8e:	e8 09 f7 ff ff       	call   1169c <list_delete>
   11f93:	83 c4 10             	add    $0x10,%esp
   11f96:	eb 01                	jmp    11f99 <task_set_block+0x29>
        return;
   11f98:	90                   	nop
    // list_delete_first(&task_manager.ready_list);
}
   11f99:	c9                   	leave  
   11f9a:	c3                   	ret    

00011f9b <sys_sched_yield>:

// 主动放弃cpu执行
int  sys_sched_yield() {
   11f9b:	55                   	push   %ebp
   11f9c:	89 e5                	mov    %esp,%ebp
   11f9e:	83 ec 18             	sub    $0x18,%esp

irq_state_t state = irq_enter_proection();   //--enter protection
   11fa1:	e8 90 ee ff ff       	call   10e36 <irq_enter_proection>
   11fa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&task_manager.ready_list) > 1) {
   11fa9:	83 ec 0c             	sub    $0xc,%esp
   11fac:	68 64 0c 20 00       	push   $0x200c64
   11fb1:	e8 16 fc ff ff       	call   11bcc <list_count>
   11fb6:	83 c4 10             	add    $0x10,%esp
   11fb9:	83 f8 01             	cmp    $0x1,%eax
   11fbc:	7e 29                	jle    11fe7 <sys_sched_yield+0x4c>
        task_t* curr = task_current();
   11fbe:	e8 6e ff ff ff       	call   11f31 <task_current>
   11fc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   11fc6:	83 ec 0c             	sub    $0xc,%esp
   11fc9:	ff 75 f0             	pushl  -0x10(%ebp)
   11fcc:	e8 9f ff ff ff       	call   11f70 <task_set_block>
   11fd1:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   11fd4:	83 ec 0c             	sub    $0xc,%esp
   11fd7:	ff 75 f0             	pushl  -0x10(%ebp)
   11fda:	e8 5c ff ff ff       	call   11f3b <task_set_ready>
   11fdf:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11fe2:	e8 58 00 00 00       	call   1203f <task_dispatch>
    }
irq_leave_proection(state);  //--leave protection
   11fe7:	83 ec 0c             	sub    $0xc,%esp
   11fea:	ff 75 f4             	pushl  -0xc(%ebp)
   11fed:	e8 5c ee ff ff       	call   10e4e <irq_leave_proection>
   11ff2:	83 c4 10             	add    $0x10,%esp

    return 0;
   11ff5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11ffa:	c9                   	leave  
   11ffb:	c3                   	ret    

00011ffc <task_next_run>:

// 从就绪队列中找到一第一个任务
task_t * task_next_run() {
   11ffc:	55                   	push   %ebp
   11ffd:	89 e5                	mov    %esp,%ebp
   11fff:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0) {
   12002:	68 64 0c 20 00       	push   $0x200c64
   12007:	e8 c0 fb ff ff       	call   11bcc <list_count>
   1200c:	83 c4 04             	add    $0x4,%esp
   1200f:	85 c0                	test   %eax,%eax
   12011:	75 07                	jne    1201a <task_next_run+0x1e>
        return &task_manager.idle_task;
   12013:	b8 40 0d 20 00       	mov    $0x200d40,%eax
   12018:	eb 23                	jmp    1203d <task_next_run+0x41>
    }

    list_node_t * task_node = list_first(&task_manager.ready_list);
   1201a:	68 64 0c 20 00       	push   $0x200c64
   1201f:	e8 b3 fb ff ff       	call   11bd7 <list_first>
   12024:	83 c4 04             	add    $0x4,%esp
   12027:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   1202a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1202e:	74 08                	je     12038 <task_next_run+0x3c>
   12030:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12033:	83 e8 34             	sub    $0x34,%eax
   12036:	eb 05                	jmp    1203d <task_next_run+0x41>
   12038:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1203d:	c9                   	leave  
   1203e:	c3                   	ret    

0001203f <task_dispatch>:

// 分配一个任务并从当前任务切换过去
void task_dispatch() {
   1203f:	55                   	push   %ebp
   12040:	89 e5                	mov    %esp,%ebp
   12042:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12045:	e8 ec ed ff ff       	call   10e36 <irq_enter_proection>
   1204a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * to = task_next_run();
   1204d:	e8 aa ff ff ff       	call   11ffc <task_next_run>
   12052:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task) {
   12055:	a1 60 0c 20 00       	mov    0x200c60,%eax
   1205a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1205d:	74 2b                	je     1208a <task_dispatch+0x4b>
        task_t * from = task_current();
   1205f:	e8 cd fe ff ff       	call   11f31 <task_current>
   12064:	89 45 ec             	mov    %eax,-0x14(%ebp)

        task_manager.curr_task = to;   // 设置将要切换的任务为“当前任务”
   12067:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1206a:	a3 60 0c 20 00       	mov    %eax,0x200c60
        to->state = TASK_RUNNING;      // 设置 task running
   1206f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12072:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

        task_switch_from_to(from, to);
   12079:	83 ec 08             	sub    $0x8,%esp
   1207c:	ff 75 f0             	pushl  -0x10(%ebp)
   1207f:	ff 75 ec             	pushl  -0x14(%ebp)
   12082:	e8 6b fb ff ff       	call   11bf2 <task_switch_from_to>
   12087:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_proection(state);  //--leave protection
   1208a:	83 ec 0c             	sub    $0xc,%esp
   1208d:	ff 75 f4             	pushl  -0xc(%ebp)
   12090:	e8 b9 ed ff ff       	call   10e4e <irq_leave_proection>
   12095:	83 c4 10             	add    $0x10,%esp
   
}
   12098:	90                   	nop
   12099:	c9                   	leave  
   1209a:	c3                   	ret    

0001209b <task_time_tick>:

// 检查当前任务的时间片是否用完，若用完强制切换到下一任务
void task_time_tick() {
   1209b:	55                   	push   %ebp
   1209c:	89 e5                	mov    %esp,%ebp
   1209e:	83 ec 28             	sub    $0x28,%esp
    task_t* curr = task_current();
   120a1:	e8 8b fe ff ff       	call   11f31 <task_current>
   120a6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int slice = --curr->slice_ticks;
   120a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120ac:	8b 40 28             	mov    0x28(%eax),%eax
   120af:	8d 50 ff             	lea    -0x1(%eax),%edx
   120b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120b5:	89 50 28             	mov    %edx,0x28(%eax)
   120b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120bb:	8b 40 28             	mov    0x28(%eax),%eax
   120be:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if( slice == 0 && &task_manager.ready_list.count > 0) {
   120c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120c5:	75 2d                	jne    120f4 <task_time_tick+0x59>
        curr->slice_ticks = curr->time_ticks;
   120c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120ca:	8b 50 2c             	mov    0x2c(%eax),%edx
   120cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   120d0:	89 50 28             	mov    %edx,0x28(%eax)

        task_set_block(curr);
   120d3:	83 ec 0c             	sub    $0xc,%esp
   120d6:	ff 75 f0             	pushl  -0x10(%ebp)
   120d9:	e8 92 fe ff ff       	call   11f70 <task_set_block>
   120de:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   120e1:	83 ec 0c             	sub    $0xc,%esp
   120e4:	ff 75 f0             	pushl  -0x10(%ebp)
   120e7:	e8 4f fe ff ff       	call   11f3b <task_set_ready>
   120ec:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   120ef:	e8 4b ff ff ff       	call   1203f <task_dispatch>
    }

    list_node_t* sleep_lists_curr = list_first(&task_manager.sleep_list);
   120f4:	83 ec 0c             	sub    $0xc,%esp
   120f7:	68 70 0c 20 00       	push   $0x200c70
   120fc:	e8 d6 fa ff ff       	call   11bd7 <list_first>
   12101:	83 c4 10             	add    $0x10,%esp
   12104:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   12107:	eb 62                	jmp    1216b <task_time_tick+0xd0>
        list_node_t * next = list_node_next(sleep_lists_curr);
   12109:	83 ec 0c             	sub    $0xc,%esp
   1210c:	ff 75 f4             	pushl  -0xc(%ebp)
   1210f:	e8 ad fa ff ff       	call   11bc1 <list_node_next>
   12114:	83 c4 10             	add    $0x10,%esp
   12117:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_t* task = list_node_parent(sleep_lists_curr, task_t, run_node);
   1211a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1211e:	74 08                	je     12128 <task_time_tick+0x8d>
   12120:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12123:	83 e8 34             	sub    $0x34,%eax
   12126:	eb 05                	jmp    1212d <task_time_tick+0x92>
   12128:	b8 00 00 00 00       	mov    $0x0,%eax
   1212d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        
        if(--task->sleep_ticks == 0) {
   12130:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12133:	8b 40 30             	mov    0x30(%eax),%eax
   12136:	8d 50 ff             	lea    -0x1(%eax),%edx
   12139:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1213c:	89 50 30             	mov    %edx,0x30(%eax)
   1213f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12142:	8b 40 30             	mov    0x30(%eax),%eax
   12145:	85 c0                	test   %eax,%eax
   12147:	75 1c                	jne    12165 <task_time_tick+0xca>
            task_set_wakeup(task);
   12149:	83 ec 0c             	sub    $0xc,%esp
   1214c:	ff 75 e4             	pushl  -0x1c(%ebp)
   1214f:	e8 b8 00 00 00       	call   1220c <task_set_wakeup>
   12154:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   12157:	83 ec 0c             	sub    $0xc,%esp
   1215a:	ff 75 e4             	pushl  -0x1c(%ebp)
   1215d:	e8 d9 fd ff ff       	call   11f3b <task_set_ready>
   12162:	83 c4 10             	add    $0x10,%esp
        }
        sleep_lists_curr = next;
   12165:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12168:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   1216b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1216f:	75 98                	jne    12109 <task_time_tick+0x6e>
    }

    task_dispatch();
   12171:	e8 c9 fe ff ff       	call   1203f <task_dispatch>
}
   12176:	90                   	nop
   12177:	c9                   	leave  
   12178:	c3                   	ret    

00012179 <sys_sleep>:



void sys_sleep(uint32_t ms) {
   12179:	55                   	push   %ebp
   1217a:	89 e5                	mov    %esp,%ebp
   1217c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   1217f:	e8 b2 ec ff ff       	call   10e36 <irq_enter_proection>
   12184:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12187:	e8 a5 fd ff ff       	call   11f31 <task_current>
   1218c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_block(curr);
   1218f:	83 ec 0c             	sub    $0xc,%esp
   12192:	ff 75 f0             	pushl  -0x10(%ebp)
   12195:	e8 d6 fd ff ff       	call   11f70 <task_set_block>
   1219a:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(curr, ms / OS_TICK_MS);
   1219d:	8b 45 08             	mov    0x8(%ebp),%eax
   121a0:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   121a5:	f7 e2                	mul    %edx
   121a7:	89 d0                	mov    %edx,%eax
   121a9:	c1 e8 03             	shr    $0x3,%eax
   121ac:	83 ec 08             	sub    $0x8,%esp
   121af:	50                   	push   %eax
   121b0:	ff 75 f0             	pushl  -0x10(%ebp)
   121b3:	e8 19 00 00 00       	call   121d1 <task_set_sleep>
   121b8:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   121bb:	e8 7f fe ff ff       	call   1203f <task_dispatch>

    irq_leave_proection(state);
   121c0:	83 ec 0c             	sub    $0xc,%esp
   121c3:	ff 75 f4             	pushl  -0xc(%ebp)
   121c6:	e8 83 ec ff ff       	call   10e4e <irq_leave_proection>
   121cb:	83 c4 10             	add    $0x10,%esp
}
   121ce:	90                   	nop
   121cf:	c9                   	leave  
   121d0:	c3                   	ret    

000121d1 <task_set_sleep>:

void task_set_sleep(task_t* task, uint32_t ticks) {
   121d1:	55                   	push   %ebp
   121d2:	89 e5                	mov    %esp,%ebp
   121d4:	83 ec 08             	sub    $0x8,%esp
    if(ticks <= 0) return;
   121d7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   121db:	74 2c                	je     12209 <task_set_sleep+0x38>
    task->sleep_ticks = ticks;
   121dd:	8b 55 0c             	mov    0xc(%ebp),%edx
   121e0:	8b 45 08             	mov    0x8(%ebp),%eax
   121e3:	89 50 30             	mov    %edx,0x30(%eax)
    task->state = TASK_SLEEP;
   121e6:	8b 45 08             	mov    0x8(%ebp),%eax
   121e9:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
    list_insert_last(&task_manager.sleep_list, 
   121f0:	8b 45 08             	mov    0x8(%ebp),%eax
   121f3:	83 c0 34             	add    $0x34,%eax
   121f6:	83 ec 08             	sub    $0x8,%esp
   121f9:	50                   	push   %eax
   121fa:	68 70 0c 20 00       	push   $0x200c70
   121ff:	e8 bb f3 ff ff       	call   115bf <list_insert_last>
   12204:	83 c4 10             	add    $0x10,%esp
   12207:	eb 01                	jmp    1220a <task_set_sleep+0x39>
    if(ticks <= 0) return;
   12209:	90                   	nop
        &task->run_node);
}
   1220a:	c9                   	leave  
   1220b:	c3                   	ret    

0001220c <task_set_wakeup>:

void task_set_wakeup(task_t* task) {
   1220c:	55                   	push   %ebp
   1220d:	89 e5                	mov    %esp,%ebp
   1220f:	83 ec 08             	sub    $0x8,%esp
    list_delete(&task_manager.sleep_list, 
   12212:	8b 45 08             	mov    0x8(%ebp),%eax
   12215:	83 c0 34             	add    $0x34,%eax
   12218:	83 ec 08             	sub    $0x8,%esp
   1221b:	50                   	push   %eax
   1221c:	68 70 0c 20 00       	push   $0x200c70
   12221:	e8 76 f4 ff ff       	call   1169c <list_delete>
   12226:	83 c4 10             	add    $0x10,%esp
        &task->run_node);
   12229:	90                   	nop
   1222a:	c9                   	leave  
   1222b:	c3                   	ret    
