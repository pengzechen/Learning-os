
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002141 memsz 0x00002141 flags r-x
    LOAD off    0x00004000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000004 memsz 0x00008eb0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e26  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000319  00011e28  00011e28  00002e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00200000  00200000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00008e90  00200020  00200020  00004004  2**5
                  ALLOC
  4 .debug_line   00000cd3  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002482  00000000  00000000  00004cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bc1  00000000  00000000  00007159  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000140  00000000  00000000  00007d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000abf  00000000  00000000  00007e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000891f  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000da4  00000000  00000000  00008930  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00011e28 l    d  .rodata	00000000 .rodata
00200000 l    d  .data	00000000 .data
00200020 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
000102bb l     F .text	00000028 lgdt
00200020 l     O .bss	00000800 gdt_table2
00000000 l    df *ABS*	00000000 mtime.c
0001041b l     F .text	0000001f outb
00200820 l     O .bss	00000004 sys_tick
00010462 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 init.c
000104db l     F .text	0000000b list_count
000104e6 l     F .text	0000000a list_first
000104f0 l     F .text	0000000b list_last
00000000 l    df *ABS*	00000000 irq.c
0001075b l     F .text	00000007 hlt
00010762 l     F .text	00000007 cli
00010769 l     F .text	00000007 sti
00010770 l     F .text	00000028 lidt
00010798 l     F .text	0000001d inb
000107b5 l     F .text	0000001f outb
000107d4 l     F .text	00000010 read_eflags
000107e4 l     F .text	0000000b write_eflags
00200840 l     O .bss	00000400 idt_table
000107ef l     F .text	00000030 default_handler
00010ac6 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 klib.c
00200000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 list.c
000112de l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000114d7 l     F .text	0000001d inb
000114f4 l     F .text	0000001f outb
00000000 l    df *ABS*	00000000 sem.c
0001165c l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 task.c
000117a0 l     F .text	00000007 hlt
000117a7 l     F .text	0000001b list_node_init
000117c2 l     F .text	0000000b list_node_next
000117cd l     F .text	0000000b list_count
000117d8 l     F .text	0000000a list_first
000117e2 l     F .text	0000000a idle_task_func
00200c40 l     O .bss	00000198 task_manager
00200de0 l     O .bss	00002000 task1_stack
00202de0 l     O .bss	00002000 idle_task_stack
00204de0 l     O .bss	00002000 task3_stack
00206de0 l     O .bss	000000b8 task3
00011b2b g     F .text	0000000a task_current
00010e31 g     F .text	00000018 irq_enter_proection
00011452 g     F .text	00000085 list_delete
00010dfb g     F .text	0000000b irq_enable_global
00011375 g     F .text	00000064 list_insert_last
00011b35 g     F .text	00000035 task_set_ready
000108ab g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
00011a85 g     F .text	00000039 task3_func
00010a33 g     F .text	0000001c handle_virtual_exception
00011513 g     F .text	00000075 log_init
00208ea0 g     O .bss	00000010 sem_test
0001071b g     F .text	00000040 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00010f11 g     F .text	0000007a k_strncmp
00010953 g     F .text	0000001c handle_segment_not_present
00010cde g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
00010857 g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
0001180a g     F .text	000000cc tss_init
000101b3 g       .text	00000000 exception_handler_general_protection
00011777 g     F .text	00000029 sem_count
000109a7 g     F .text	0000001c handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010e06 g     F .text	0000002b pic_send_eoi
00011a3c g     F .text	00000049 task1_func
0001168a g     F .text	0000006b sem_wait
00010e5a g     F .text	00000047 k_strcpy
00010ea1 g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010369 g     F .text	0000006d gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
00206ea0 g     O .bss	00002000 stack
00011d73 g     F .text	00000058 sys_sleep
00010558 g     F .text	00000163 list_test
000108e3 g     F .text	0000001c handle_invalid_opcode
00010f8b g     F .text	0000003b k_strlen
00011056 g     F .text	00000064 k_memcmp
000100e2 g       .text	00000000 exception_handler_bound_range
000116f5 g     F .text	00000082 sem_notify
00011b21 g     F .text	0000000a get_first_task
0001015c g       .text	00000000 exception_handler_invalid_tss
00011191 g     F .text	0000014d k_vsprint
00011316 g     F .text	0000005f list_insert_first
00011e06 g     F .text	00000020 task_set_wakeup
00010047 g       .text	00000000 exception_handler_divider
000109c3 g     F .text	0000001c handle_fpu_error
00010df0 g     F .text	0000000b irq_disable_global
00011b95 g     F .text	00000061 sys_sched_yield
0001081f g     F .text	0000001c handle_unknown
000104fb g     F .text	00000018 kernel_init
00011015 g     F .text	00000041 k_memset
00011667 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00010513 g     F .text	00000045 show_list
00010229 g       .text	00000000 exception_handler_machine_check
00011dcb g     F .text	0000003b task_set_sleep
00010a96 g     F .text	00000030 irq_install
00010a17 g     F .text	0000001c handle_smd_exception
00011abe g     F .text	00000063 task1_func_init
00010d69 g     F .text	00000087 irq_disable
0001098b g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
00010e49 g     F .text	00000011 irq_leave_proection
000109df g     F .text	0000001c handle_alignment_check
00011c39 g     F .text	0000005c task_dispatch
000109fb g     F .text	0000001c handle_machine_check
00011bf6 g     F .text	00000043 task_next_run
000112f1 g     F .text	00000025 list_init
0001096f g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
00011b6a g     F .text	0000002b task_set_block
000108c7 g     F .text	0000001c handle_bound_range
000101ed g       .text	00000000 exception_handler_fpu_error
000117ec g     F .text	0000001e task_switch_from_to
00010b59 g     F .text	00000185 irq_init
000110ba g     F .text	000000d7 k_itoa
0001091b g     F .text	0000001c handle_double_fault
0001043a g     F .text	00000028 handle_time
000102e3 g     F .text	00000086 segment_desc_set
000106bb g     F .text	00000060 offset_test
0001088f g     F .text	0000001c handle_breakpoint
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
000119e7 g     F .text	00000055 task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
00011c95 g     F .text	000000de task_time_tick
000108ff g     F .text	0000001c handle_device_unavailable
0001083b g     F .text	0000001c handle_divider
00010fc6 g     F .text	0000004f k_memcpy
000118d6 g     F .text	00000111 task_init
000103d6 g     F .text	00000045 gdt_alloc_desc
000113d9 g     F .text	00000079 list_delete_first
00010a4f g     F .text	00000047 gate_desc_set
00011588 g     F .text	000000d4 klog
00010873 g     F .text	0000001c handle_NMI
00010937 g     F .text	0000001c handle_invalid_tss
000104c3 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 f2 04 00 00       	call   104fb <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc a0 8e 20 00       	mov    $0x208ea0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 f3 06 00 00       	jmp    1071b <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 e6 07 00 00       	call   1081f <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 e3 07 00 00       	call   1083b <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 e0 07 00 00       	call   10857 <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 dd 07 00 00       	call   10873 <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 da 07 00 00       	call   1088f <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 d7 07 00 00       	call   108ab <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 d4 07 00 00       	call   108c7 <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 d1 07 00 00       	call   108e3 <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 ce 07 00 00       	call   108ff <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 cd 07 00 00       	call   1091b <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 cc 07 00 00       	call   10937 <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 cb 07 00 00       	call   10953 <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 ca 07 00 00       	call   1096f <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 c9 07 00 00       	call   1098b <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 c8 07 00 00       	call   109a7 <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 c5 07 00 00       	call   109c3 <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 c4 07 00 00       	call   109df <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 c1 07 00 00       	call   109fb <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 be 07 00 00       	call   10a17 <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 bb 07 00 00       	call   10a33 <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 a3 01 00 00       	call   1043a <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch
    
simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp
    sti
   102b9:	fb                   	sti    

   102ba:	c3                   	ret    

000102bb <lgdt>:

static inline void sti() {
	__asm__ __volatile__("sti");
}

static inline void lgdt(uint32_t start, uint32_t size) {
   102bb:	55                   	push   %ebp
   102bc:	89 e5                	mov    %esp,%ebp
   102be:	83 ec 10             	sub    $0x10,%esp
		uint16_t limit;
		uint16_t start15_0;
		uint16_t start31_16;
	} gdt;

	gdt.start31_16 = start >> 16;
   102c1:	8b 45 08             	mov    0x8(%ebp),%eax
   102c4:	c1 e8 10             	shr    $0x10,%eax
   102c7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   102cb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ce:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   102d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102d5:	83 e8 01             	sub    $0x1,%eax
   102d8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   102dc:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   102e0:	90                   	nop
   102e1:	c9                   	leave  
   102e2:	c3                   	ret    

000102e3 <segment_desc_set>:
#include <cpu.h>

static segment_desc_t gdt_table2[GDT_TABLE_SIZE];

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   102e3:	55                   	push   %ebp
   102e4:	89 e5                	mov    %esp,%ebp
   102e6:	83 ec 14             	sub    $0x14,%esp
   102e9:	8b 45 14             	mov    0x14(%ebp),%eax
   102ec:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table2 + (selector >> 3);
   102f0:	8b 45 08             	mov    0x8(%ebp),%eax
   102f3:	c1 f8 03             	sar    $0x3,%eax
   102f6:	c1 e0 03             	shl    $0x3,%eax
   102f9:	05 20 00 20 00       	add    $0x200020,%eax
   102fe:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   10301:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10308:	76 0f                	jbe    10319 <segment_desc_set+0x36>
		attr |= 0x8000;
   1030a:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   10310:	8b 45 10             	mov    0x10(%ebp),%eax
   10313:	c1 e8 0c             	shr    $0xc,%eax
   10316:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   10319:	8b 45 10             	mov    0x10(%ebp),%eax
   1031c:	89 c2                	mov    %eax,%edx
   1031e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10321:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   10324:	8b 45 0c             	mov    0xc(%ebp),%eax
   10327:	89 c2                	mov    %eax,%edx
   10329:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1032c:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   10330:	8b 45 0c             	mov    0xc(%ebp),%eax
   10333:	c1 e8 10             	shr    $0x10,%eax
   10336:	89 c2                	mov    %eax,%edx
   10338:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1033b:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1033e:	8b 45 10             	mov    0x10(%ebp),%eax
   10341:	c1 e8 10             	shr    $0x10,%eax
   10344:	c1 e0 08             	shl    $0x8,%eax
   10347:	66 25 00 0f          	and    $0xf00,%ax
   1034b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1034f:	89 c2                	mov    %eax,%edx
   10351:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10354:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10358:	8b 45 0c             	mov    0xc(%ebp),%eax
   1035b:	c1 e8 18             	shr    $0x18,%eax
   1035e:	89 c2                	mov    %eax,%edx
   10360:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10363:	88 50 07             	mov    %dl,0x7(%eax)
}
   10366:	90                   	nop
   10367:	c9                   	leave  
   10368:	c3                   	ret    

00010369 <gdt_init>:

void gdt_init() {
   10369:	55                   	push   %ebp
   1036a:	89 e5                	mov    %esp,%ebp
   1036c:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1036f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10376:	eb 19                	jmp    10391 <gdt_init+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10378:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1037b:	c1 e0 03             	shl    $0x3,%eax
   1037e:	6a 00                	push   $0x0
   10380:	6a 00                	push   $0x0
   10382:	6a 00                	push   $0x0
   10384:	50                   	push   %eax
   10385:	e8 59 ff ff ff       	call   102e3 <segment_desc_set>
   1038a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1038d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10391:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10398:	7e de                	jle    10378 <gdt_init+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1039a:	68 92 c0 00 00       	push   $0xc092
   1039f:	6a ff                	push   $0xffffffff
   103a1:	6a 00                	push   $0x0
   103a3:	6a 10                	push   $0x10
   103a5:	e8 39 ff ff ff       	call   102e3 <segment_desc_set>
   103aa:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   103ad:	68 9a c0 00 00       	push   $0xc09a
   103b2:	6a ff                	push   $0xffffffff
   103b4:	6a 00                	push   $0x0
   103b6:	6a 08                	push   $0x8
   103b8:	e8 26 ff ff ff       	call   102e3 <segment_desc_set>
   103bd:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)gdt_table2, sizeof(gdt_table2));
   103c0:	b8 20 00 20 00       	mov    $0x200020,%eax
   103c5:	68 00 08 00 00       	push   $0x800
   103ca:	50                   	push   %eax
   103cb:	e8 eb fe ff ff       	call   102bb <lgdt>
   103d0:	83 c4 08             	add    $0x8,%esp

}
   103d3:	90                   	nop
   103d4:	c9                   	leave  
   103d5:	c3                   	ret    

000103d6 <gdt_alloc_desc>:

int  gdt_alloc_desc() {
   103d6:	55                   	push   %ebp
   103d7:	89 e5                	mov    %esp,%ebp
   103d9:	83 ec 10             	sub    $0x10,%esp
    int i = 1;
   103dc:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    for(; i < GDT_TABLE_SIZE; i++) {
   103e3:	eb 26                	jmp    1040b <gdt_alloc_desc+0x35>
        segment_desc_t* desc = gdt_table2 + i;
   103e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103e8:	c1 e0 03             	shl    $0x3,%eax
   103eb:	05 20 00 20 00       	add    $0x200020,%eax
   103f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   103f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   103f6:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   103fa:	66 85 c0             	test   %ax,%ax
   103fd:	75 08                	jne    10407 <gdt_alloc_desc+0x31>
            return ( i * sizeof(segment_desc_t) );
   103ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10402:	c1 e0 03             	shl    $0x3,%eax
   10405:	eb 12                	jmp    10419 <gdt_alloc_desc+0x43>
    for(; i < GDT_TABLE_SIZE; i++) {
   10407:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1040b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10412:	7e d1                	jle    103e5 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   10414:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10419:	c9                   	leave  
   1041a:	c3                   	ret    

0001041b <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   1041b:	55                   	push   %ebp
   1041c:	89 e5                	mov    %esp,%ebp
   1041e:	83 ec 08             	sub    $0x8,%esp
   10421:	8b 55 08             	mov    0x8(%ebp),%edx
   10424:	8b 45 0c             	mov    0xc(%ebp),%eax
   10427:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1042b:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1042e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10432:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10436:	ee                   	out    %al,(%dx)
}
   10437:	90                   	nop
   10438:	c9                   	leave  
   10439:	c3                   	ret    

0001043a <handle_time>:


static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   1043a:	55                   	push   %ebp
   1043b:	89 e5                	mov    %esp,%ebp
   1043d:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10440:	a1 20 08 20 00       	mov    0x200820,%eax
   10445:	83 c0 01             	add    $0x1,%eax
   10448:	a3 20 08 20 00       	mov    %eax,0x200820
    pic_send_eoi(IRQ0_TIMER);
   1044d:	83 ec 0c             	sub    $0xc,%esp
   10450:	6a 20                	push   $0x20
   10452:	e8 af 09 00 00       	call   10e06 <pic_send_eoi>
   10457:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   1045a:	e8 36 18 00 00       	call   11c95 <task_time_tick>
} 
   1045f:	90                   	nop
   10460:	c9                   	leave  
   10461:	c3                   	ret    

00010462 <pit_init>:

static void pit_init (void) {
   10462:	55                   	push   %ebp
   10463:	89 e5                	mov    %esp,%ebp
   10465:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10468:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1046f:	6a 36                	push   $0x36
   10471:	6a 43                	push   $0x43
   10473:	e8 a3 ff ff ff       	call   1041b <outb>
   10478:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   1047b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1047e:	0f b6 c0             	movzbl %al,%eax
   10481:	50                   	push   %eax
   10482:	6a 40                	push   $0x40
   10484:	e8 92 ff ff ff       	call   1041b <outb>
   10489:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   1048c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1048f:	c1 e8 08             	shr    $0x8,%eax
   10492:	0f b6 c0             	movzbl %al,%eax
   10495:	50                   	push   %eax
   10496:	6a 40                	push   $0x40
   10498:	e8 7e ff ff ff       	call   1041b <outb>
   1049d:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   104a0:	b8 86 02 01 00       	mov    $0x10286,%eax
   104a5:	83 ec 08             	sub    $0x8,%esp
   104a8:	50                   	push   %eax
   104a9:	6a 20                	push   $0x20
   104ab:	e8 e6 05 00 00       	call   10a96 <irq_install>
   104b0:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   104b3:	83 ec 0c             	sub    $0xc,%esp
   104b6:	6a 20                	push   $0x20
   104b8:	e8 21 08 00 00       	call   10cde <irq_enable>
   104bd:	83 c4 10             	add    $0x10,%esp
}
   104c0:	90                   	nop
   104c1:	c9                   	leave  
   104c2:	c3                   	ret    

000104c3 <time_init>:

void time_init() {
   104c3:	55                   	push   %ebp
   104c4:	89 e5                	mov    %esp,%ebp
   104c6:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   104c9:	c7 05 20 08 20 00 00 	movl   $0x0,0x200820
   104d0:	00 00 00 

    pit_init();
   104d3:	e8 8a ff ff ff       	call   10462 <pit_init>
   104d8:	90                   	nop
   104d9:	c9                   	leave  
   104da:	c3                   	ret    

000104db <list_count>:

static inline int list_is_empty (list_t* list) {
    return list->count == 0;
}

static inline int list_count (list_t* list) {
   104db:	55                   	push   %ebp
   104dc:	89 e5                	mov    %esp,%ebp
    return list->count;
   104de:	8b 45 08             	mov    0x8(%ebp),%eax
   104e1:	8b 40 08             	mov    0x8(%eax),%eax
}
   104e4:	5d                   	pop    %ebp
   104e5:	c3                   	ret    

000104e6 <list_first>:

static inline list_node_t* list_first (list_t* list) {
   104e6:	55                   	push   %ebp
   104e7:	89 e5                	mov    %esp,%ebp
    return list->first;
   104e9:	8b 45 08             	mov    0x8(%ebp),%eax
   104ec:	8b 00                	mov    (%eax),%eax
}
   104ee:	5d                   	pop    %ebp
   104ef:	c3                   	ret    

000104f0 <list_last>:

static inline list_node_t* list_last (list_t* list) {
   104f0:	55                   	push   %ebp
   104f1:	89 e5                	mov    %esp,%ebp
    return list->last;
   104f3:	8b 45 08             	mov    0x8(%ebp),%eax
   104f6:	8b 40 04             	mov    0x4(%eax),%eax
}
   104f9:	5d                   	pop    %ebp
   104fa:	c3                   	ret    

000104fb <kernel_init>:
#include <log.h>
#include <task.h>
#include <comm/cpu_ins.h>
#include <list.h>

void kernel_init (boot_info_t * boot_info) {
   104fb:	55                   	push   %ebp
   104fc:	89 e5                	mov    %esp,%ebp
   104fe:	83 ec 08             	sub    $0x8,%esp
    log_init();
   10501:	e8 0d 10 00 00       	call   11513 <log_init>
    // gdt_init();
    irq_init();
   10506:	e8 4e 06 00 00       	call   10b59 <irq_init>
    time_init();
   1050b:	e8 b3 ff ff ff       	call   104c3 <time_init>

}
   10510:	90                   	nop
   10511:	c9                   	leave  
   10512:	c3                   	ret    

00010513 <show_list>:


void show_list(list_t list) {
   10513:	55                   	push   %ebp
   10514:	89 e5                	mov    %esp,%ebp
   10516:	56                   	push   %esi
   10517:	53                   	push   %ebx
    klog("list: first=0x%x, last=0x%x, count=%d",
   10518:	8d 45 08             	lea    0x8(%ebp),%eax
   1051b:	50                   	push   %eax
   1051c:	e8 ba ff ff ff       	call   104db <list_count>
   10521:	83 c4 04             	add    $0x4,%esp
   10524:	89 c6                	mov    %eax,%esi
   10526:	8d 45 08             	lea    0x8(%ebp),%eax
   10529:	50                   	push   %eax
   1052a:	e8 c1 ff ff ff       	call   104f0 <list_last>
   1052f:	83 c4 04             	add    $0x4,%esp
   10532:	89 c3                	mov    %eax,%ebx
   10534:	8d 45 08             	lea    0x8(%ebp),%eax
   10537:	50                   	push   %eax
   10538:	e8 a9 ff ff ff       	call   104e6 <list_first>
   1053d:	83 c4 04             	add    $0x4,%esp
   10540:	56                   	push   %esi
   10541:	53                   	push   %ebx
   10542:	50                   	push   %eax
   10543:	68 28 1e 01 00       	push   $0x11e28
   10548:	e8 3b 10 00 00       	call   11588 <klog>
   1054d:	83 c4 10             	add    $0x10,%esp
         list_first(&list), list_last(&list), list_count(&list) );
}
   10550:	90                   	nop
   10551:	8d 65 f8             	lea    -0x8(%ebp),%esp
   10554:	5b                   	pop    %ebx
   10555:	5e                   	pop    %esi
   10556:	5d                   	pop    %ebp
   10557:	c3                   	ret    

00010558 <list_test>:

void list_test() {
   10558:	55                   	push   %ebp
   10559:	89 e5                	mov    %esp,%ebp
   1055b:	83 ec 58             	sub    $0x58,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   1055e:	83 ec 0c             	sub    $0xc,%esp
   10561:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10564:	50                   	push   %eax
   10565:	e8 87 0d 00 00       	call   112f1 <list_init>
   1056a:	83 c4 10             	add    $0x10,%esp

    show_list(list);
   1056d:	83 ec 04             	sub    $0x4,%esp
   10570:	ff 75 dc             	pushl  -0x24(%ebp)
   10573:	ff 75 d8             	pushl  -0x28(%ebp)
   10576:	ff 75 d4             	pushl  -0x2c(%ebp)
   10579:	e8 95 ff ff ff       	call   10513 <show_list>
   1057e:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10581:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10588:	eb 3f                	jmp    105c9 <list_test+0x71>
        list_node_t * node = nodes + i;
   1058a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1058d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   10594:	8d 45 ac             	lea    -0x54(%ebp),%eax
   10597:	01 d0                	add    %edx,%eax
   10599:	89 45 e0             	mov    %eax,-0x20(%ebp)
        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   1059c:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1059f:	83 ec 04             	sub    $0x4,%esp
   105a2:	50                   	push   %eax
   105a3:	ff 75 f4             	pushl  -0xc(%ebp)
   105a6:	68 50 1e 01 00       	push   $0x11e50
   105ab:	e8 d8 0f 00 00       	call   11588 <klog>
   105b0:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   105b3:	83 ec 08             	sub    $0x8,%esp
   105b6:	ff 75 e0             	pushl  -0x20(%ebp)
   105b9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105bc:	50                   	push   %eax
   105bd:	e8 54 0d 00 00       	call   11316 <list_insert_first>
   105c2:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   105c5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   105c9:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   105cd:	7e bb                	jle    1058a <list_test+0x32>
    }
    show_list(list);
   105cf:	83 ec 04             	sub    $0x4,%esp
   105d2:	ff 75 dc             	pushl  -0x24(%ebp)
   105d5:	ff 75 d8             	pushl  -0x28(%ebp)
   105d8:	ff 75 d4             	pushl  -0x2c(%ebp)
   105db:	e8 33 ff ff ff       	call   10513 <show_list>
   105e0:	83 c4 10             	add    $0x10,%esp

    list_init(&list);
   105e3:	83 ec 0c             	sub    $0xc,%esp
   105e6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105e9:	50                   	push   %eax
   105ea:	e8 02 0d 00 00       	call   112f1 <list_init>
   105ef:	83 c4 10             	add    $0x10,%esp
    show_list(list);
   105f2:	83 ec 04             	sub    $0x4,%esp
   105f5:	ff 75 dc             	pushl  -0x24(%ebp)
   105f8:	ff 75 d8             	pushl  -0x28(%ebp)
   105fb:	ff 75 d4             	pushl  -0x2c(%ebp)
   105fe:	e8 10 ff ff ff       	call   10513 <show_list>
   10603:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10606:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1060d:	eb 3f                	jmp    1064e <list_test+0xf6>
        list_node_t * node = nodes + i;
   1060f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10612:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   10619:	8d 45 ac             	lea    -0x54(%ebp),%eax
   1061c:	01 d0                	add    %edx,%eax
   1061e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   10621:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10624:	83 ec 04             	sub    $0x4,%esp
   10627:	50                   	push   %eax
   10628:	ff 75 f0             	pushl  -0x10(%ebp)
   1062b:	68 50 1e 01 00       	push   $0x11e50
   10630:	e8 53 0f 00 00       	call   11588 <klog>
   10635:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   10638:	83 ec 08             	sub    $0x8,%esp
   1063b:	ff 75 e4             	pushl  -0x1c(%ebp)
   1063e:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10641:	50                   	push   %eax
   10642:	e8 2e 0d 00 00       	call   11375 <list_insert_last>
   10647:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   1064a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1064e:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   10652:	7e bb                	jle    1060f <list_test+0xb7>
    }
    show_list(list);
   10654:	83 ec 04             	sub    $0x4,%esp
   10657:	ff 75 dc             	pushl  -0x24(%ebp)
   1065a:	ff 75 d8             	pushl  -0x28(%ebp)
   1065d:	ff 75 d4             	pushl  -0x2c(%ebp)
   10660:	e8 ae fe ff ff       	call   10513 <show_list>
   10665:	83 c4 10             	add    $0x10,%esp
// ------------------
    
    for(int i=0; i<5; i++) {
   10668:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1066f:	eb 2d                	jmp    1069e <list_test+0x146>
        list_node_t* node = list_delete_first(&list);
   10671:	83 ec 0c             	sub    $0xc,%esp
   10674:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10677:	50                   	push   %eax
   10678:	e8 5c 0d 00 00       	call   113d9 <list_delete_first>
   1067d:	83 c4 10             	add    $0x10,%esp
   10680:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("delete first from list: %d, 0x%x", i, (uint32_t)node);
   10683:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10686:	83 ec 04             	sub    $0x4,%esp
   10689:	50                   	push   %eax
   1068a:	ff 75 ec             	pushl  -0x14(%ebp)
   1068d:	68 70 1e 01 00       	push   $0x11e70
   10692:	e8 f1 0e 00 00       	call   11588 <klog>
   10697:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   1069a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1069e:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   106a2:	7e cd                	jle    10671 <list_test+0x119>
    }

    show_list(list);
   106a4:	83 ec 04             	sub    $0x4,%esp
   106a7:	ff 75 dc             	pushl  -0x24(%ebp)
   106aa:	ff 75 d8             	pushl  -0x28(%ebp)
   106ad:	ff 75 d4             	pushl  -0x2c(%ebp)
   106b0:	e8 5e fe ff ff       	call   10513 <show_list>
   106b5:	83 c4 10             	add    $0x10,%esp

}
   106b8:	90                   	nop
   106b9:	c9                   	leave  
   106ba:	c3                   	ret    

000106bb <offset_test>:

void offset_test() {
   106bb:	55                   	push   %ebp
   106bc:	89 e5                	mov    %esp,%ebp
   106be:	83 ec 28             	sub    $0x28,%esp
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   106c1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   106c8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   106cf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   106d6:	c7 45 e4 56 34 12 00 	movl   $0x123456,-0x1c(%ebp)

    list_node_t * v_node = &v.node;
   106dd:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   106e0:	83 c0 04             	add    $0x4,%eax
   106e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   106e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   106ea:	74 08                	je     106f4 <offset_test+0x39>
   106ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106ef:	83 e8 04             	sub    $0x4,%eax
   106f2:	eb 05                	jmp    106f9 <offset_test+0x3e>
   106f4:	b8 00 00 00 00       	mov    $0x0,%eax
   106f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    if(p->i != 0x123456) {
   106fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106ff:	8b 00                	mov    (%eax),%eax
   10701:	3d 56 34 12 00       	cmp    $0x123456,%eax
   10706:	74 10                	je     10718 <offset_test+0x5d>
        klog("error");
   10708:	83 ec 0c             	sub    $0xc,%esp
   1070b:	68 91 1e 01 00       	push   $0x11e91
   10710:	e8 73 0e 00 00       	call   11588 <klog>
   10715:	83 c4 10             	add    $0x10,%esp
    }
}
   10718:	90                   	nop
   10719:	c9                   	leave  
   1071a:	c3                   	ret    

0001071b <init_main>:


void init_main() {
   1071b:	55                   	push   %ebp
   1071c:	89 e5                	mov    %esp,%ebp
   1071e:	83 ec 08             	sub    $0x8,%esp
    klog("Kernal %s is running ... ", "1.0.0");
   10721:	83 ec 08             	sub    $0x8,%esp
   10724:	68 97 1e 01 00       	push   $0x11e97
   10729:	68 9d 1e 01 00       	push   $0x11e9d
   1072e:	e8 55 0e 00 00       	call   11588 <klog>
   10733:	83 c4 10             	add    $0x10,%esp

    task_manager_init();
   10736:	e8 ac 12 00 00       	call   119e7 <task_manager_init>
    task1_func_init();
   1073b:	e8 7e 13 00 00       	call   11abe <task1_func_init>
    irq_enable_global();
   10740:	e8 b6 06 00 00       	call   10dfb <irq_enable_global>
    
    task_switch_from_to(0, get_first_task());
   10745:	e8 d7 13 00 00       	call   11b21 <get_first_task>
   1074a:	83 ec 08             	sub    $0x8,%esp
   1074d:	50                   	push   %eax
   1074e:	6a 00                	push   $0x0
   10750:	e8 97 10 00 00       	call   117ec <task_switch_from_to>
   10755:	83 c4 10             	add    $0x10,%esp
   10758:	90                   	nop
   10759:	c9                   	leave  
   1075a:	c3                   	ret    

0001075b <hlt>:
static inline void hlt() {
   1075b:	55                   	push   %ebp
   1075c:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   1075e:	f4                   	hlt    
}
   1075f:	90                   	nop
   10760:	5d                   	pop    %ebp
   10761:	c3                   	ret    

00010762 <cli>:
static inline void cli() {
   10762:	55                   	push   %ebp
   10763:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   10765:	fa                   	cli    
}
   10766:	90                   	nop
   10767:	5d                   	pop    %ebp
   10768:	c3                   	ret    

00010769 <sti>:
static inline void sti() {
   10769:	55                   	push   %ebp
   1076a:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   1076c:	fb                   	sti    
}
   1076d:	90                   	nop
   1076e:	5d                   	pop    %ebp
   1076f:	c3                   	ret    

00010770 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10770:	55                   	push   %ebp
   10771:	89 e5                	mov    %esp,%ebp
   10773:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   10776:	8b 45 08             	mov    0x8(%ebp),%eax
   10779:	c1 e8 10             	shr    $0x10,%eax
   1077c:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   10780:	8b 45 08             	mov    0x8(%ebp),%eax
   10783:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   10787:	8b 45 0c             	mov    0xc(%ebp),%eax
   1078a:	83 e8 01             	sub    $0x1,%eax
   1078d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   10791:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10795:	90                   	nop
   10796:	c9                   	leave  
   10797:	c3                   	ret    

00010798 <inb>:
static inline uint8_t inb(uint16_t  port) {
   10798:	55                   	push   %ebp
   10799:	89 e5                	mov    %esp,%ebp
   1079b:	83 ec 14             	sub    $0x14,%esp
   1079e:	8b 45 08             	mov    0x8(%ebp),%eax
   107a1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   107a5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   107a9:	89 c2                	mov    %eax,%edx
   107ab:	ec                   	in     (%dx),%al
   107ac:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   107af:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   107b3:	c9                   	leave  
   107b4:	c3                   	ret    

000107b5 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   107b5:	55                   	push   %ebp
   107b6:	89 e5                	mov    %esp,%ebp
   107b8:	83 ec 08             	sub    $0x8,%esp
   107bb:	8b 55 08             	mov    0x8(%ebp),%edx
   107be:	8b 45 0c             	mov    0xc(%ebp),%eax
   107c1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   107c5:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   107c8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   107cc:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   107d0:	ee                   	out    %al,(%dx)
}
   107d1:	90                   	nop
   107d2:	c9                   	leave  
   107d3:	c3                   	ret    

000107d4 <read_eflags>:

static inline void write_tr (uint16_t tss_selector) {
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
}

static inline uint32_t read_eflags() {
   107d4:	55                   	push   %ebp
   107d5:	89 e5                	mov    %esp,%ebp
   107d7:	83 ec 10             	sub    $0x10,%esp
	uint32_t eflags;

	__asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   107da:	9c                   	pushf  
   107db:	58                   	pop    %eax
   107dc:	89 45 fc             	mov    %eax,-0x4(%ebp)

	return eflags;
   107df:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   107e2:	c9                   	leave  
   107e3:	c3                   	ret    

000107e4 <write_eflags>:

static inline void write_eflags(uint32_t eflags) {
   107e4:	55                   	push   %ebp
   107e5:	89 e5                	mov    %esp,%ebp

	__asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   107e7:	8b 45 08             	mov    0x8(%ebp),%eax
   107ea:	50                   	push   %eax
   107eb:	9d                   	popf   


}
   107ec:	90                   	nop
   107ed:	5d                   	pop    %ebp
   107ee:	c3                   	ret    

000107ef <default_handler>:

//  -----------------------------------------   中断相关    -------------------------------------------
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void default_handler (exception_frame_t * frame, const char * message) {
   107ef:	55                   	push   %ebp
   107f0:	89 e5                	mov    %esp,%ebp
   107f2:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   107f5:	83 ec 0c             	sub    $0xc,%esp
   107f8:	68 b8 1e 01 00       	push   $0x11eb8
   107fd:	e8 86 0d 00 00       	call   11588 <klog>
   10802:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   10805:	83 ec 08             	sub    $0x8,%esp
   10808:	ff 75 0c             	pushl  0xc(%ebp)
   1080b:	68 d9 1e 01 00       	push   $0x11ed9
   10810:	e8 73 0d 00 00       	call   11588 <klog>
   10815:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   10818:	e8 3e ff ff ff       	call   1075b <hlt>
   1081d:	eb f9                	jmp    10818 <default_handler+0x29>

0001081f <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   1081f:	55                   	push   %ebp
   10820:	89 e5                	mov    %esp,%ebp
   10822:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   10825:	83 ec 08             	sub    $0x8,%esp
   10828:	68 f4 1e 01 00       	push   $0x11ef4
   1082d:	ff 75 08             	pushl  0x8(%ebp)
   10830:	e8 ba ff ff ff       	call   107ef <default_handler>
   10835:	83 c4 10             	add    $0x10,%esp
}
   10838:	90                   	nop
   10839:	c9                   	leave  
   1083a:	c3                   	ret    

0001083b <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   1083b:	55                   	push   %ebp
   1083c:	89 e5                	mov    %esp,%ebp
   1083e:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   10841:	83 ec 08             	sub    $0x8,%esp
   10844:	68 07 1f 01 00       	push   $0x11f07
   10849:	ff 75 08             	pushl  0x8(%ebp)
   1084c:	e8 9e ff ff ff       	call   107ef <default_handler>
   10851:	83 c4 10             	add    $0x10,%esp
}
   10854:	90                   	nop
   10855:	c9                   	leave  
   10856:	c3                   	ret    

00010857 <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   10857:	55                   	push   %ebp
   10858:	89 e5                	mov    %esp,%ebp
   1085a:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   1085d:	83 ec 08             	sub    $0x8,%esp
   10860:	68 16 1f 01 00       	push   $0x11f16
   10865:	ff 75 08             	pushl  0x8(%ebp)
   10868:	e8 82 ff ff ff       	call   107ef <default_handler>
   1086d:	83 c4 10             	add    $0x10,%esp
}
   10870:	90                   	nop
   10871:	c9                   	leave  
   10872:	c3                   	ret    

00010873 <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   10873:	55                   	push   %ebp
   10874:	89 e5                	mov    %esp,%ebp
   10876:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   10879:	83 ec 08             	sub    $0x8,%esp
   1087c:	68 26 1f 01 00       	push   $0x11f26
   10881:	ff 75 08             	pushl  0x8(%ebp)
   10884:	e8 66 ff ff ff       	call   107ef <default_handler>
   10889:	83 c4 10             	add    $0x10,%esp
}
   1088c:	90                   	nop
   1088d:	c9                   	leave  
   1088e:	c3                   	ret    

0001088f <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   1088f:	55                   	push   %ebp
   10890:	89 e5                	mov    %esp,%ebp
   10892:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   10895:	83 ec 08             	sub    $0x8,%esp
   10898:	68 35 1f 01 00       	push   $0x11f35
   1089d:	ff 75 08             	pushl  0x8(%ebp)
   108a0:	e8 4a ff ff ff       	call   107ef <default_handler>
   108a5:	83 c4 10             	add    $0x10,%esp
}
   108a8:	90                   	nop
   108a9:	c9                   	leave  
   108aa:	c3                   	ret    

000108ab <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   108ab:	55                   	push   %ebp
   108ac:	89 e5                	mov    %esp,%ebp
   108ae:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   108b1:	83 ec 08             	sub    $0x8,%esp
   108b4:	68 41 1f 01 00       	push   $0x11f41
   108b9:	ff 75 08             	pushl  0x8(%ebp)
   108bc:	e8 2e ff ff ff       	call   107ef <default_handler>
   108c1:	83 c4 10             	add    $0x10,%esp
}
   108c4:	90                   	nop
   108c5:	c9                   	leave  
   108c6:	c3                   	ret    

000108c7 <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   108c7:	55                   	push   %ebp
   108c8:	89 e5                	mov    %esp,%ebp
   108ca:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   108cd:	83 ec 08             	sub    $0x8,%esp
   108d0:	68 4b 1f 01 00       	push   $0x11f4b
   108d5:	ff 75 08             	pushl  0x8(%ebp)
   108d8:	e8 12 ff ff ff       	call   107ef <default_handler>
   108dd:	83 c4 10             	add    $0x10,%esp
}
   108e0:	90                   	nop
   108e1:	c9                   	leave  
   108e2:	c3                   	ret    

000108e3 <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   108e3:	55                   	push   %ebp
   108e4:	89 e5                	mov    %esp,%ebp
   108e6:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   108e9:	83 ec 08             	sub    $0x8,%esp
   108ec:	68 61 1f 01 00       	push   $0x11f61
   108f1:	ff 75 08             	pushl  0x8(%ebp)
   108f4:	e8 f6 fe ff ff       	call   107ef <default_handler>
   108f9:	83 c4 10             	add    $0x10,%esp
}
   108fc:	90                   	nop
   108fd:	c9                   	leave  
   108fe:	c3                   	ret    

000108ff <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   108ff:	55                   	push   %ebp
   10900:	89 e5                	mov    %esp,%ebp
   10902:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   10905:	83 ec 08             	sub    $0x8,%esp
   10908:	68 71 1f 01 00       	push   $0x11f71
   1090d:	ff 75 08             	pushl  0x8(%ebp)
   10910:	e8 da fe ff ff       	call   107ef <default_handler>
   10915:	83 c4 10             	add    $0x10,%esp
}
   10918:	90                   	nop
   10919:	c9                   	leave  
   1091a:	c3                   	ret    

0001091b <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   1091b:	55                   	push   %ebp
   1091c:	89 e5                	mov    %esp,%ebp
   1091e:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   10921:	83 ec 08             	sub    $0x8,%esp
   10924:	68 87 1f 01 00       	push   $0x11f87
   10929:	ff 75 08             	pushl  0x8(%ebp)
   1092c:	e8 be fe ff ff       	call   107ef <default_handler>
   10931:	83 c4 10             	add    $0x10,%esp
}
   10934:	90                   	nop
   10935:	c9                   	leave  
   10936:	c3                   	ret    

00010937 <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   10937:	55                   	push   %ebp
   10938:	89 e5                	mov    %esp,%ebp
   1093a:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   1093d:	83 ec 08             	sub    $0x8,%esp
   10940:	68 95 1f 01 00       	push   $0x11f95
   10945:	ff 75 08             	pushl  0x8(%ebp)
   10948:	e8 a2 fe ff ff       	call   107ef <default_handler>
   1094d:	83 c4 10             	add    $0x10,%esp
}
   10950:	90                   	nop
   10951:	c9                   	leave  
   10952:	c3                   	ret    

00010953 <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   10953:	55                   	push   %ebp
   10954:	89 e5                	mov    %esp,%ebp
   10956:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   10959:	83 ec 08             	sub    $0x8,%esp
   1095c:	68 a1 1f 01 00       	push   $0x11fa1
   10961:	ff 75 08             	pushl  0x8(%ebp)
   10964:	e8 86 fe ff ff       	call   107ef <default_handler>
   10969:	83 c4 10             	add    $0x10,%esp
}
   1096c:	90                   	nop
   1096d:	c9                   	leave  
   1096e:	c3                   	ret    

0001096f <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   1096f:	55                   	push   %ebp
   10970:	89 e5                	mov    %esp,%ebp
   10972:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   10975:	83 ec 08             	sub    $0x8,%esp
   10978:	68 b6 1f 01 00       	push   $0x11fb6
   1097d:	ff 75 08             	pushl  0x8(%ebp)
   10980:	e8 6a fe ff ff       	call   107ef <default_handler>
   10985:	83 c4 10             	add    $0x10,%esp
}
   10988:	90                   	nop
   10989:	c9                   	leave  
   1098a:	c3                   	ret    

0001098b <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   1098b:	55                   	push   %ebp
   1098c:	89 e5                	mov    %esp,%ebp
   1098e:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   10991:	83 ec 08             	sub    $0x8,%esp
   10994:	68 cc 1f 01 00       	push   $0x11fcc
   10999:	ff 75 08             	pushl  0x8(%ebp)
   1099c:	e8 4e fe ff ff       	call   107ef <default_handler>
   109a1:	83 c4 10             	add    $0x10,%esp
}
   109a4:	90                   	nop
   109a5:	c9                   	leave  
   109a6:	c3                   	ret    

000109a7 <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   109a7:	55                   	push   %ebp
   109a8:	89 e5                	mov    %esp,%ebp
   109aa:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: Page fault.");
   109ad:	83 ec 08             	sub    $0x8,%esp
   109b0:	68 f8 1f 01 00       	push   $0x11ff8
   109b5:	ff 75 08             	pushl  0x8(%ebp)
   109b8:	e8 32 fe ff ff       	call   107ef <default_handler>
   109bd:	83 c4 10             	add    $0x10,%esp
}
   109c0:	90                   	nop
   109c1:	c9                   	leave  
   109c2:	c3                   	ret    

000109c3 <handle_fpu_error>:
void handle_fpu_error(exception_frame_t * frame) {
   109c3:	55                   	push   %ebp
   109c4:	89 e5                	mov    %esp,%ebp
   109c6:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   109c9:	83 ec 08             	sub    $0x8,%esp
   109cc:	68 1b 20 01 00       	push   $0x1201b
   109d1:	ff 75 08             	pushl  0x8(%ebp)
   109d4:	e8 16 fe ff ff       	call   107ef <default_handler>
   109d9:	83 c4 10             	add    $0x10,%esp
}
   109dc:	90                   	nop
   109dd:	c9                   	leave  
   109de:	c3                   	ret    

000109df <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   109df:	55                   	push   %ebp
   109e0:	89 e5                	mov    %esp,%ebp
   109e2:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   109e5:	83 ec 08             	sub    $0x8,%esp
   109e8:	68 39 20 01 00       	push   $0x12039
   109ed:	ff 75 08             	pushl  0x8(%ebp)
   109f0:	e8 fa fd ff ff       	call   107ef <default_handler>
   109f5:	83 c4 10             	add    $0x10,%esp
}
   109f8:	90                   	nop
   109f9:	c9                   	leave  
   109fa:	c3                   	ret    

000109fb <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   109fb:	55                   	push   %ebp
   109fc:	89 e5                	mov    %esp,%ebp
   109fe:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   10a01:	83 ec 08             	sub    $0x8,%esp
   10a04:	68 4a 20 01 00       	push   $0x1204a
   10a09:	ff 75 08             	pushl  0x8(%ebp)
   10a0c:	e8 de fd ff ff       	call   107ef <default_handler>
   10a11:	83 c4 10             	add    $0x10,%esp
}
   10a14:	90                   	nop
   10a15:	c9                   	leave  
   10a16:	c3                   	ret    

00010a17 <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   10a17:	55                   	push   %ebp
   10a18:	89 e5                	mov    %esp,%ebp
   10a1a:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10a1d:	83 ec 08             	sub    $0x8,%esp
   10a20:	68 5c 20 01 00       	push   $0x1205c
   10a25:	ff 75 08             	pushl  0x8(%ebp)
   10a28:	e8 c2 fd ff ff       	call   107ef <default_handler>
   10a2d:	83 c4 10             	add    $0x10,%esp
}
   10a30:	90                   	nop
   10a31:	c9                   	leave  
   10a32:	c3                   	ret    

00010a33 <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10a33:	55                   	push   %ebp
   10a34:	89 e5                	mov    %esp,%ebp
   10a36:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   10a39:	83 ec 08             	sub    $0x8,%esp
   10a3c:	68 7b 20 01 00       	push   $0x1207b
   10a41:	ff 75 08             	pushl  0x8(%ebp)
   10a44:	e8 a6 fd ff ff       	call   107ef <default_handler>
   10a49:	83 c4 10             	add    $0x10,%esp
}
   10a4c:	90                   	nop
   10a4d:	c9                   	leave  
   10a4e:	c3                   	ret    

00010a4f <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10a4f:	55                   	push   %ebp
   10a50:	89 e5                	mov    %esp,%ebp
   10a52:	83 ec 08             	sub    $0x8,%esp
   10a55:	8b 55 0c             	mov    0xc(%ebp),%edx
   10a58:	8b 45 14             	mov    0x14(%ebp),%eax
   10a5b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10a5f:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10a63:	8b 45 10             	mov    0x10(%ebp),%eax
   10a66:	89 c2                	mov    %eax,%edx
   10a68:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6b:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10a6e:	8b 45 08             	mov    0x8(%ebp),%eax
   10a71:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a75:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10a79:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7c:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a80:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10a84:	8b 45 10             	mov    0x10(%ebp),%eax
   10a87:	c1 e8 10             	shr    $0x10,%eax
   10a8a:	89 c2                	mov    %eax,%edx
   10a8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8f:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10a93:	90                   	nop
   10a94:	c9                   	leave  
   10a95:	c3                   	ret    

00010a96 <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   10a96:	55                   	push   %ebp
   10a97:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   10a99:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10a9d:	7e 07                	jle    10aa6 <irq_install+0x10>
        return -1;
   10a9f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10aa4:	eb 1e                	jmp    10ac4 <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   10aa6:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa9:	c1 e0 03             	shl    $0x3,%eax
   10aac:	05 40 08 20 00       	add    $0x200840,%eax
   10ab1:	68 00 8e 00 00       	push   $0x8e00
   10ab6:	ff 75 0c             	pushl  0xc(%ebp)
   10ab9:	6a 08                	push   $0x8
   10abb:	50                   	push   %eax
   10abc:	e8 8e ff ff ff       	call   10a4f <gate_desc_set>
   10ac1:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   10ac4:	c9                   	leave  
   10ac5:	c3                   	ret    

00010ac6 <init_pic>:

static void init_pic() {
   10ac6:	55                   	push   %ebp
   10ac7:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10ac9:	6a 11                	push   $0x11
   10acb:	6a 20                	push   $0x20
   10acd:	e8 e3 fc ff ff       	call   107b5 <outb>
   10ad2:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10ad5:	6a 20                	push   $0x20
   10ad7:	6a 21                	push   $0x21
   10ad9:	e8 d7 fc ff ff       	call   107b5 <outb>
   10ade:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10ae1:	6a 04                	push   $0x4
   10ae3:	6a 21                	push   $0x21
   10ae5:	e8 cb fc ff ff       	call   107b5 <outb>
   10aea:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10aed:	6a 01                	push   $0x1
   10aef:	6a 21                	push   $0x21
   10af1:	e8 bf fc ff ff       	call   107b5 <outb>
   10af6:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10af9:	6a 11                	push   $0x11
   10afb:	68 a0 00 00 00       	push   $0xa0
   10b00:	e8 b0 fc ff ff       	call   107b5 <outb>
   10b05:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10b08:	6a 28                	push   $0x28
   10b0a:	68 a1 00 00 00       	push   $0xa1
   10b0f:	e8 a1 fc ff ff       	call   107b5 <outb>
   10b14:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10b17:	6a 02                	push   $0x2
   10b19:	68 a1 00 00 00       	push   $0xa1
   10b1e:	e8 92 fc ff ff       	call   107b5 <outb>
   10b23:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10b26:	6a 01                	push   $0x1
   10b28:	68 a1 00 00 00       	push   $0xa1
   10b2d:	e8 83 fc ff ff       	call   107b5 <outb>
   10b32:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10b35:	68 fb 00 00 00       	push   $0xfb
   10b3a:	6a 21                	push   $0x21
   10b3c:	e8 74 fc ff ff       	call   107b5 <outb>
   10b41:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10b44:	68 ff 00 00 00       	push   $0xff
   10b49:	68 a1 00 00 00       	push   $0xa1
   10b4e:	e8 62 fc ff ff       	call   107b5 <outb>
   10b53:	83 c4 08             	add    $0x8,%esp
}
   10b56:	90                   	nop
   10b57:	c9                   	leave  
   10b58:	c3                   	ret    

00010b59 <irq_init>:

void irq_init () {
   10b59:	55                   	push   %ebp
   10b5a:	89 e5                	mov    %esp,%ebp
   10b5c:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10b5f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10b66:	eb 25                	jmp    10b8d <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10b68:	ba 28 00 01 00       	mov    $0x10028,%edx
   10b6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b70:	c1 e0 03             	shl    $0x3,%eax
   10b73:	05 40 08 20 00       	add    $0x200840,%eax
   10b78:	68 00 8e 00 00       	push   $0x8e00
   10b7d:	52                   	push   %edx
   10b7e:	6a 08                	push   $0x8
   10b80:	50                   	push   %eax
   10b81:	e8 c9 fe ff ff       	call   10a4f <gate_desc_set>
   10b86:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10b89:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10b8d:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   10b91:	76 d5                	jbe    10b68 <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10b93:	b8 40 08 20 00       	mov    $0x200840,%eax
   10b98:	68 00 04 00 00       	push   $0x400
   10b9d:	50                   	push   %eax
   10b9e:	e8 cd fb ff ff       	call   10770 <lidt>
   10ba3:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   10ba6:	b8 47 00 01 00       	mov    $0x10047,%eax
   10bab:	50                   	push   %eax
   10bac:	6a 00                	push   $0x0
   10bae:	e8 e3 fe ff ff       	call   10a96 <irq_install>
   10bb3:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   10bb6:	b8 66 00 01 00       	mov    $0x10066,%eax
   10bbb:	50                   	push   %eax
   10bbc:	6a 01                	push   $0x1
   10bbe:	e8 d3 fe ff ff       	call   10a96 <irq_install>
   10bc3:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   10bc6:	b8 85 00 01 00       	mov    $0x10085,%eax
   10bcb:	50                   	push   %eax
   10bcc:	6a 02                	push   $0x2
   10bce:	e8 c3 fe ff ff       	call   10a96 <irq_install>
   10bd3:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   10bd6:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   10bdb:	50                   	push   %eax
   10bdc:	6a 03                	push   $0x3
   10bde:	e8 b3 fe ff ff       	call   10a96 <irq_install>
   10be3:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10be6:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   10beb:	50                   	push   %eax
   10bec:	6a 04                	push   $0x4
   10bee:	e8 a3 fe ff ff       	call   10a96 <irq_install>
   10bf3:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10bf6:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   10bfb:	50                   	push   %eax
   10bfc:	6a 05                	push   $0x5
   10bfe:	e8 93 fe ff ff       	call   10a96 <irq_install>
   10c03:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10c06:	b8 01 01 01 00       	mov    $0x10101,%eax
   10c0b:	50                   	push   %eax
   10c0c:	6a 06                	push   $0x6
   10c0e:	e8 83 fe ff ff       	call   10a96 <irq_install>
   10c13:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10c16:	b8 20 01 01 00       	mov    $0x10120,%eax
   10c1b:	50                   	push   %eax
   10c1c:	6a 07                	push   $0x7
   10c1e:	e8 73 fe ff ff       	call   10a96 <irq_install>
   10c23:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10c26:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   10c2b:	50                   	push   %eax
   10c2c:	6a 08                	push   $0x8
   10c2e:	e8 63 fe ff ff       	call   10a96 <irq_install>
   10c33:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10c36:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   10c3b:	50                   	push   %eax
   10c3c:	6a 0a                	push   $0xa
   10c3e:	e8 53 fe ff ff       	call   10a96 <irq_install>
   10c43:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10c46:	b8 79 01 01 00       	mov    $0x10179,%eax
   10c4b:	50                   	push   %eax
   10c4c:	6a 0b                	push   $0xb
   10c4e:	e8 43 fe ff ff       	call   10a96 <irq_install>
   10c53:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10c56:	b8 96 01 01 00       	mov    $0x10196,%eax
   10c5b:	50                   	push   %eax
   10c5c:	6a 0c                	push   $0xc
   10c5e:	e8 33 fe ff ff       	call   10a96 <irq_install>
   10c63:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10c66:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   10c6b:	50                   	push   %eax
   10c6c:	6a 0d                	push   $0xd
   10c6e:	e8 23 fe ff ff       	call   10a96 <irq_install>
   10c73:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10c76:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   10c7b:	50                   	push   %eax
   10c7c:	6a 0e                	push   $0xe
   10c7e:	e8 13 fe ff ff       	call   10a96 <irq_install>
   10c83:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   10c86:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   10c8b:	50                   	push   %eax
   10c8c:	6a 10                	push   $0x10
   10c8e:	e8 03 fe ff ff       	call   10a96 <irq_install>
   10c93:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   10c96:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   10c9b:	50                   	push   %eax
   10c9c:	6a 11                	push   $0x11
   10c9e:	e8 f3 fd ff ff       	call   10a96 <irq_install>
   10ca3:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   10ca6:	b8 29 02 01 00       	mov    $0x10229,%eax
   10cab:	50                   	push   %eax
   10cac:	6a 12                	push   $0x12
   10cae:	e8 e3 fd ff ff       	call   10a96 <irq_install>
   10cb3:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   10cb6:	b8 48 02 01 00       	mov    $0x10248,%eax
   10cbb:	50                   	push   %eax
   10cbc:	6a 13                	push   $0x13
   10cbe:	e8 d3 fd ff ff       	call   10a96 <irq_install>
   10cc3:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   10cc6:	b8 67 02 01 00       	mov    $0x10267,%eax
   10ccb:	50                   	push   %eax
   10ccc:	6a 14                	push   $0x14
   10cce:	e8 c3 fd ff ff       	call   10a96 <irq_install>
   10cd3:	83 c4 08             	add    $0x8,%esp

    init_pic();
   10cd6:	e8 eb fd ff ff       	call   10ac6 <init_pic>
}
   10cdb:	90                   	nop
   10cdc:	c9                   	leave  
   10cdd:	c3                   	ret    

00010cde <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10cde:	55                   	push   %ebp
   10cdf:	89 e5                	mov    %esp,%ebp
   10ce1:	53                   	push   %ebx
   10ce2:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10ce5:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ce9:	7e 78                	jle    10d63 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10ceb:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10cef:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10cf3:	7f 32                	jg     10d27 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10cf5:	6a 21                	push   $0x21
   10cf7:	e8 9c fa ff ff       	call   10798 <inb>
   10cfc:	83 c4 04             	add    $0x4,%esp
   10cff:	89 c2                	mov    %eax,%edx
   10d01:	8b 45 08             	mov    0x8(%ebp),%eax
   10d04:	bb 01 00 00 00       	mov    $0x1,%ebx
   10d09:	89 c1                	mov    %eax,%ecx
   10d0b:	d3 e3                	shl    %cl,%ebx
   10d0d:	89 d8                	mov    %ebx,%eax
   10d0f:	f7 d0                	not    %eax
   10d11:	21 d0                	and    %edx,%eax
   10d13:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10d16:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10d1a:	50                   	push   %eax
   10d1b:	6a 21                	push   $0x21
   10d1d:	e8 93 fa ff ff       	call   107b5 <outb>
   10d22:	83 c4 08             	add    $0x8,%esp
   10d25:	eb 3d                	jmp    10d64 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10d27:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10d2b:	68 a1 00 00 00       	push   $0xa1
   10d30:	e8 63 fa ff ff       	call   10798 <inb>
   10d35:	83 c4 04             	add    $0x4,%esp
   10d38:	89 c2                	mov    %eax,%edx
   10d3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d3d:	bb 01 00 00 00       	mov    $0x1,%ebx
   10d42:	89 c1                	mov    %eax,%ecx
   10d44:	d3 e3                	shl    %cl,%ebx
   10d46:	89 d8                	mov    %ebx,%eax
   10d48:	f7 d0                	not    %eax
   10d4a:	21 d0                	and    %edx,%eax
   10d4c:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10d4f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d53:	50                   	push   %eax
   10d54:	68 a1 00 00 00       	push   $0xa1
   10d59:	e8 57 fa ff ff       	call   107b5 <outb>
   10d5e:	83 c4 08             	add    $0x8,%esp
   10d61:	eb 01                	jmp    10d64 <irq_enable+0x86>
        return;
   10d63:	90                   	nop
    }
}
   10d64:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d67:	c9                   	leave  
   10d68:	c3                   	ret    

00010d69 <irq_disable>:

void irq_disable(int irq_num) {
   10d69:	55                   	push   %ebp
   10d6a:	89 e5                	mov    %esp,%ebp
   10d6c:	53                   	push   %ebx
   10d6d:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10d70:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10d74:	7e 74                	jle    10dea <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10d76:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10d7a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d7e:	7f 30                	jg     10db0 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10d80:	6a 21                	push   $0x21
   10d82:	e8 11 fa ff ff       	call   10798 <inb>
   10d87:	83 c4 04             	add    $0x4,%esp
   10d8a:	89 c3                	mov    %eax,%ebx
   10d8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d8f:	ba 01 00 00 00       	mov    $0x1,%edx
   10d94:	89 c1                	mov    %eax,%ecx
   10d96:	d3 e2                	shl    %cl,%edx
   10d98:	89 d0                	mov    %edx,%eax
   10d9a:	09 d8                	or     %ebx,%eax
   10d9c:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10d9f:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10da3:	50                   	push   %eax
   10da4:	6a 21                	push   $0x21
   10da6:	e8 0a fa ff ff       	call   107b5 <outb>
   10dab:	83 c4 08             	add    $0x8,%esp
   10dae:	eb 3b                	jmp    10deb <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10db0:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10db4:	68 a1 00 00 00       	push   $0xa1
   10db9:	e8 da f9 ff ff       	call   10798 <inb>
   10dbe:	83 c4 04             	add    $0x4,%esp
   10dc1:	89 c3                	mov    %eax,%ebx
   10dc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc6:	ba 01 00 00 00       	mov    $0x1,%edx
   10dcb:	89 c1                	mov    %eax,%ecx
   10dcd:	d3 e2                	shl    %cl,%edx
   10dcf:	89 d0                	mov    %edx,%eax
   10dd1:	09 d8                	or     %ebx,%eax
   10dd3:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10dd6:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10dda:	50                   	push   %eax
   10ddb:	68 a1 00 00 00       	push   $0xa1
   10de0:	e8 d0 f9 ff ff       	call   107b5 <outb>
   10de5:	83 c4 08             	add    $0x8,%esp
   10de8:	eb 01                	jmp    10deb <irq_disable+0x82>
        return;
   10dea:	90                   	nop
    }
}
   10deb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10dee:	c9                   	leave  
   10def:	c3                   	ret    

00010df0 <irq_disable_global>:

void irq_disable_global(void) {
   10df0:	55                   	push   %ebp
   10df1:	89 e5                	mov    %esp,%ebp
    cli();
   10df3:	e8 6a f9 ff ff       	call   10762 <cli>
}
   10df8:	90                   	nop
   10df9:	5d                   	pop    %ebp
   10dfa:	c3                   	ret    

00010dfb <irq_enable_global>:

void irq_enable_global(void) {
   10dfb:	55                   	push   %ebp
   10dfc:	89 e5                	mov    %esp,%ebp
    sti();
   10dfe:	e8 66 f9 ff ff       	call   10769 <sti>
}
   10e03:	90                   	nop
   10e04:	5d                   	pop    %ebp
   10e05:	c3                   	ret    

00010e06 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10e06:	55                   	push   %ebp
   10e07:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10e09:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10e0d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e11:	7e 0f                	jle    10e22 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10e13:	6a 20                	push   $0x20
   10e15:	68 a0 00 00 00       	push   $0xa0
   10e1a:	e8 96 f9 ff ff       	call   107b5 <outb>
   10e1f:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10e22:	6a 20                	push   $0x20
   10e24:	6a 20                	push   $0x20
   10e26:	e8 8a f9 ff ff       	call   107b5 <outb>
   10e2b:	83 c4 08             	add    $0x8,%esp
}
   10e2e:	90                   	nop
   10e2f:	c9                   	leave  
   10e30:	c3                   	ret    

00010e31 <irq_enter_proection>:


irq_state_t irq_enter_proection() {
   10e31:	55                   	push   %ebp
   10e32:	89 e5                	mov    %esp,%ebp
   10e34:	83 ec 10             	sub    $0x10,%esp
    irq_state_t  state = read_eflags();
   10e37:	e8 98 f9 ff ff       	call   107d4 <read_eflags>
   10e3c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   10e3f:	e8 ac ff ff ff       	call   10df0 <irq_disable_global>

    return state;
   10e44:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10e47:	c9                   	leave  
   10e48:	c3                   	ret    

00010e49 <irq_leave_proection>:


void irq_leave_proection(irq_state_t state) {
   10e49:	55                   	push   %ebp
   10e4a:	89 e5                	mov    %esp,%ebp

    write_eflags(state);
   10e4c:	ff 75 08             	pushl  0x8(%ebp)
   10e4f:	e8 90 f9 ff ff       	call   107e4 <write_eflags>
   10e54:	83 c4 04             	add    $0x4,%esp
}
   10e57:	90                   	nop
   10e58:	c9                   	leave  
   10e59:	c3                   	ret    

00010e5a <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   10e5a:	55                   	push   %ebp
   10e5b:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   10e5d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e61:	74 3b                	je     10e9e <k_strcpy+0x44>
   10e63:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e67:	74 35                	je     10e9e <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   10e69:	eb 17                	jmp    10e82 <k_strcpy+0x28>
        *dest++ = *src++;
   10e6b:	8b 55 0c             	mov    0xc(%ebp),%edx
   10e6e:	8d 42 01             	lea    0x1(%edx),%eax
   10e71:	89 45 0c             	mov    %eax,0xc(%ebp)
   10e74:	8b 45 08             	mov    0x8(%ebp),%eax
   10e77:	8d 48 01             	lea    0x1(%eax),%ecx
   10e7a:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10e7d:	0f b6 12             	movzbl (%edx),%edx
   10e80:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   10e82:	8b 45 08             	mov    0x8(%ebp),%eax
   10e85:	0f b6 00             	movzbl (%eax),%eax
   10e88:	84 c0                	test   %al,%al
   10e8a:	74 0a                	je     10e96 <k_strcpy+0x3c>
   10e8c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e8f:	0f b6 00             	movzbl (%eax),%eax
   10e92:	84 c0                	test   %al,%al
   10e94:	75 d5                	jne    10e6b <k_strcpy+0x11>
    }
    *dest = '\0'; 
   10e96:	8b 45 08             	mov    0x8(%ebp),%eax
   10e99:	c6 00 00             	movb   $0x0,(%eax)
   10e9c:	eb 01                	jmp    10e9f <k_strcpy+0x45>
        return;
   10e9e:	90                   	nop
}
   10e9f:	5d                   	pop    %ebp
   10ea0:	c3                   	ret    

00010ea1 <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   10ea1:	55                   	push   %ebp
   10ea2:	89 e5                	mov    %esp,%ebp
   10ea4:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   10ea7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10eab:	74 61                	je     10f0e <k_strncpy+0x6d>
   10ead:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10eb1:	74 5b                	je     10f0e <k_strncpy+0x6d>
   10eb3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10eb7:	74 55                	je     10f0e <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   10eb9:	8b 45 08             	mov    0x8(%ebp),%eax
   10ebc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   10ebf:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ec2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   10ec5:	eb 17                	jmp    10ede <k_strncpy+0x3d>
        *d++ = *s++;
   10ec7:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10eca:	8d 42 01             	lea    0x1(%edx),%eax
   10ecd:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10ed0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ed3:	8d 48 01             	lea    0x1(%eax),%ecx
   10ed6:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10ed9:	0f b6 12             	movzbl (%edx),%edx
   10edc:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   10ede:	8b 45 10             	mov    0x10(%ebp),%eax
   10ee1:	8d 50 ff             	lea    -0x1(%eax),%edx
   10ee4:	89 55 10             	mov    %edx,0x10(%ebp)
   10ee7:	85 c0                	test   %eax,%eax
   10ee9:	7e 0a                	jle    10ef5 <k_strncpy+0x54>
   10eeb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10eee:	0f b6 00             	movzbl (%eax),%eax
   10ef1:	84 c0                	test   %al,%al
   10ef3:	75 d2                	jne    10ec7 <k_strncpy+0x26>
    } 
    if (size == 0) {
   10ef5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10ef9:	75 0b                	jne    10f06 <k_strncpy+0x65>
        *(d - 1) = '\0';
   10efb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10efe:	83 e8 01             	sub    $0x1,%eax
   10f01:	c6 00 00             	movb   $0x0,(%eax)
   10f04:	eb 09                	jmp    10f0f <k_strncpy+0x6e>
    } else {
        *d = '\0';
   10f06:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f09:	c6 00 00             	movb   $0x0,(%eax)
   10f0c:	eb 01                	jmp    10f0f <k_strncpy+0x6e>
        return;
   10f0e:	90                   	nop
    }
}
   10f0f:	c9                   	leave  
   10f10:	c3                   	ret    

00010f11 <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   10f11:	55                   	push   %ebp
   10f12:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   10f14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f18:	74 06                	je     10f20 <k_strncmp+0xf>
   10f1a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f1e:	75 0f                	jne    10f2f <k_strncmp+0x1e>
   10f20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f25:	eb 62                	jmp    10f89 <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   10f27:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   10f2b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   10f2f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f32:	0f b6 00             	movzbl (%eax),%eax
   10f35:	84 c0                	test   %al,%al
   10f37:	74 20                	je     10f59 <k_strncmp+0x48>
   10f39:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f3c:	0f b6 00             	movzbl (%eax),%eax
   10f3f:	84 c0                	test   %al,%al
   10f41:	74 16                	je     10f59 <k_strncmp+0x48>
   10f43:	8b 45 08             	mov    0x8(%ebp),%eax
   10f46:	0f b6 10             	movzbl (%eax),%edx
   10f49:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f4c:	0f b6 00             	movzbl (%eax),%eax
   10f4f:	38 c2                	cmp    %al,%dl
   10f51:	75 06                	jne    10f59 <k_strncmp+0x48>
   10f53:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f57:	75 ce                	jne    10f27 <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   10f59:	8b 45 08             	mov    0x8(%ebp),%eax
   10f5c:	0f b6 00             	movzbl (%eax),%eax
   10f5f:	84 c0                	test   %al,%al
   10f61:	74 21                	je     10f84 <k_strncmp+0x73>
   10f63:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f66:	0f b6 00             	movzbl (%eax),%eax
   10f69:	84 c0                	test   %al,%al
   10f6b:	74 17                	je     10f84 <k_strncmp+0x73>
   10f6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f70:	0f b6 10             	movzbl (%eax),%edx
   10f73:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f76:	0f b6 00             	movzbl (%eax),%eax
   10f79:	38 c2                	cmp    %al,%dl
   10f7b:	74 07                	je     10f84 <k_strncmp+0x73>
   10f7d:	b8 01 00 00 00       	mov    $0x1,%eax
   10f82:	eb 05                	jmp    10f89 <k_strncmp+0x78>
   10f84:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f89:	5d                   	pop    %ebp
   10f8a:	c3                   	ret    

00010f8b <k_strlen>:
int k_strlen(const char *str) {
   10f8b:	55                   	push   %ebp
   10f8c:	89 e5                	mov    %esp,%ebp
   10f8e:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   10f91:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f95:	75 07                	jne    10f9e <k_strlen+0x13>
        return 0;
   10f97:	b8 00 00 00 00       	mov    $0x0,%eax
   10f9c:	eb 26                	jmp    10fc4 <k_strlen+0x39>
    }

    int len = 0;
   10f9e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   10fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   10fab:	eb 04                	jmp    10fb1 <k_strlen+0x26>
        len++;
   10fad:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   10fb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10fb4:	8d 50 01             	lea    0x1(%eax),%edx
   10fb7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   10fba:	0f b6 00             	movzbl (%eax),%eax
   10fbd:	84 c0                	test   %al,%al
   10fbf:	75 ec                	jne    10fad <k_strlen+0x22>
    }

    return len;
   10fc1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10fc4:	c9                   	leave  
   10fc5:	c3                   	ret    

00010fc6 <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   10fc6:	55                   	push   %ebp
   10fc7:	89 e5                	mov    %esp,%ebp
   10fc9:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || size) {
   10fcc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fd0:	74 40                	je     11012 <k_memcpy+0x4c>
   10fd2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fd6:	74 3a                	je     11012 <k_memcpy+0x4c>
   10fd8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10fdc:	75 34                	jne    11012 <k_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   10fde:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fe1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   10fe4:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   10fea:	eb 17                	jmp    11003 <k_memcpy+0x3d>
        *d++ = *s++;
   10fec:	8b 55 fc             	mov    -0x4(%ebp),%edx
   10fef:	8d 42 01             	lea    0x1(%edx),%eax
   10ff2:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10ff5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10ff8:	8d 48 01             	lea    0x1(%eax),%ecx
   10ffb:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   10ffe:	0f b6 12             	movzbl (%edx),%edx
   11001:	88 10                	mov    %dl,(%eax)
    while(size--) {
   11003:	8b 45 10             	mov    0x10(%ebp),%eax
   11006:	8d 50 ff             	lea    -0x1(%eax),%edx
   11009:	89 55 10             	mov    %edx,0x10(%ebp)
   1100c:	85 c0                	test   %eax,%eax
   1100e:	75 dc                	jne    10fec <k_memcpy+0x26>
   11010:	eb 01                	jmp    11013 <k_memcpy+0x4d>
        return;
   11012:	90                   	nop
    }
}
   11013:	c9                   	leave  
   11014:	c3                   	ret    

00011015 <k_memset>:
void k_memset(void* dest, uint8_t v, int size) {
   11015:	55                   	push   %ebp
   11016:	89 e5                	mov    %esp,%ebp
   11018:	83 ec 14             	sub    $0x14,%esp
   1101b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1101e:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   11021:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11025:	74 2c                	je     11053 <k_memset+0x3e>
   11027:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1102b:	74 26                	je     11053 <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   1102d:	8b 45 08             	mov    0x8(%ebp),%eax
   11030:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   11033:	eb 0f                	jmp    11044 <k_memset+0x2f>
        *d++ = v;
   11035:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11038:	8d 50 01             	lea    0x1(%eax),%edx
   1103b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1103e:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11042:	88 10                	mov    %dl,(%eax)
    while(size--) {
   11044:	8b 45 10             	mov    0x10(%ebp),%eax
   11047:	8d 50 ff             	lea    -0x1(%eax),%edx
   1104a:	89 55 10             	mov    %edx,0x10(%ebp)
   1104d:	85 c0                	test   %eax,%eax
   1104f:	75 e4                	jne    11035 <k_memset+0x20>
   11051:	eb 01                	jmp    11054 <k_memset+0x3f>
    if(!dest || !size) return;
   11053:	90                   	nop
    }
}
   11054:	c9                   	leave  
   11055:	c3                   	ret    

00011056 <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   11056:	55                   	push   %ebp
   11057:	89 e5                	mov    %esp,%ebp
   11059:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   1105c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11060:	74 0c                	je     1106e <k_memcmp+0x18>
   11062:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11066:	74 06                	je     1106e <k_memcmp+0x18>
   11068:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1106c:	74 07                	je     11075 <k_memcmp+0x1f>
        return 1;
   1106e:	b8 01 00 00 00       	mov    $0x1,%eax
   11073:	eb 43                	jmp    110b8 <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11075:	8b 45 08             	mov    0x8(%ebp),%eax
   11078:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   1107b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1107e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   11081:	eb 23                	jmp    110a6 <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   11083:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11086:	8d 50 01             	lea    0x1(%eax),%edx
   11089:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1108c:	0f b6 08             	movzbl (%eax),%ecx
   1108f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11092:	8d 50 01             	lea    0x1(%eax),%edx
   11095:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11098:	0f b6 00             	movzbl (%eax),%eax
   1109b:	38 c1                	cmp    %al,%cl
   1109d:	74 07                	je     110a6 <k_memcmp+0x50>
        return 1;
   1109f:	b8 01 00 00 00       	mov    $0x1,%eax
   110a4:	eb 12                	jmp    110b8 <k_memcmp+0x62>
    while(size--) {
   110a6:	8b 45 10             	mov    0x10(%ebp),%eax
   110a9:	8d 50 ff             	lea    -0x1(%eax),%edx
   110ac:	89 55 10             	mov    %edx,0x10(%ebp)
   110af:	85 c0                	test   %eax,%eax
   110b1:	75 d0                	jne    11083 <k_memcmp+0x2d>
    }

    return 0;
   110b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110b8:	c9                   	leave  
   110b9:	c3                   	ret    

000110ba <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   110ba:	55                   	push   %ebp
   110bb:	89 e5                	mov    %esp,%ebp
   110bd:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   110c0:	8b 45 08             	mov    0x8(%ebp),%eax
   110c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   110c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   110c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   110cc:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   110d0:	74 1d                	je     110ef <k_itoa+0x35>
   110d2:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   110d6:	74 17                	je     110ef <k_itoa+0x35>
   110d8:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   110dc:	74 11                	je     110ef <k_itoa+0x35>
   110de:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   110e2:	74 0b                	je     110ef <k_itoa+0x35>
        *p = '\0';
   110e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110e7:	c6 00 00             	movb   $0x0,(%eax)
        return;
   110ea:	e9 a0 00 00 00       	jmp    1118f <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   110ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110f3:	79 12                	jns    11107 <k_itoa+0x4d>
   110f5:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   110f9:	75 0c                	jne    11107 <k_itoa+0x4d>
        *p++ = '-';
   110fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110fe:	8d 50 01             	lea    0x1(%eax),%edx
   11101:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11104:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   11107:	8b 0d 00 00 20 00    	mov    0x200000,%ecx
   1110d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11110:	99                   	cltd   
   11111:	f7 7d 10             	idivl  0x10(%ebp)
   11114:	89 d0                	mov    %edx,%eax
   11116:	83 c0 0f             	add    $0xf,%eax
   11119:	01 c8                	add    %ecx,%eax
   1111b:	0f b6 00             	movzbl (%eax),%eax
   1111e:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11121:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11124:	8d 50 01             	lea    0x1(%eax),%edx
   11127:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1112a:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1112e:	88 10                	mov    %dl,(%eax)
        num /= base;
   11130:	8b 45 0c             	mov    0xc(%ebp),%eax
   11133:	99                   	cltd   
   11134:	f7 7d 10             	idivl  0x10(%ebp)
   11137:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   1113a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1113e:	75 c7                	jne    11107 <k_itoa+0x4d>

    *p-- = '\0';
   11140:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11143:	8d 50 ff             	lea    -0x1(%eax),%edx
   11146:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11149:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   1114c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11150:	7f 08                	jg     1115a <k_itoa+0xa0>
   11152:	8b 45 08             	mov    0x8(%ebp),%eax
   11155:	83 c0 01             	add    $0x1,%eax
   11158:	eb 03                	jmp    1115d <k_itoa+0xa3>
   1115a:	8b 45 08             	mov    0x8(%ebp),%eax
   1115d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   11160:	eb 25                	jmp    11187 <k_itoa+0xcd>
        char ch = *start;
   11162:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11165:	0f b6 00             	movzbl (%eax),%eax
   11168:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1116b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1116e:	0f b6 10             	movzbl (%eax),%edx
   11171:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11174:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11176:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11179:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1117d:	88 10                	mov    %dl,(%eax)

        p--;
   1117f:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11183:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   11187:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1118a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1118d:	72 d3                	jb     11162 <k_itoa+0xa8>
    }
}
   1118f:	c9                   	leave  
   11190:	c3                   	ret    

00011191 <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   11191:	55                   	push   %ebp
   11192:	89 e5                	mov    %esp,%ebp
   11194:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   11197:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   1119e:	8b 45 08             	mov    0x8(%ebp),%eax
   111a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   111a4:	e9 19 01 00 00       	jmp    112c2 <k_vsprint+0x131>
        switch (state) {
   111a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111ac:	85 c0                	test   %eax,%eax
   111ae:	74 0a                	je     111ba <k_vsprint+0x29>
   111b0:	83 f8 01             	cmp    $0x1,%eax
   111b3:	74 2b                	je     111e0 <k_vsprint+0x4f>
   111b5:	e9 07 01 00 00       	jmp    112c1 <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   111ba:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   111be:	75 0c                	jne    111cc <k_vsprint+0x3b>
                state = READ_FMT;
   111c0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   111c7:	e9 f6 00 00 00       	jmp    112c2 <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   111cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111cf:	8d 50 01             	lea    0x1(%eax),%edx
   111d2:	89 55 f8             	mov    %edx,-0x8(%ebp)
   111d5:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   111d9:	88 10                	mov    %dl,(%eax)
            }
            break;
   111db:	e9 e2 00 00 00       	jmp    112c2 <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   111e0:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   111e4:	75 31                	jne    11217 <k_vsprint+0x86>
                int num  = va_arg(args, int);
   111e6:	8b 45 10             	mov    0x10(%ebp),%eax
   111e9:	8d 50 04             	lea    0x4(%eax),%edx
   111ec:	89 55 10             	mov    %edx,0x10(%ebp)
   111ef:	8b 00                	mov    (%eax),%eax
   111f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   111f4:	6a 0a                	push   $0xa
   111f6:	ff 75 e4             	pushl  -0x1c(%ebp)
   111f9:	ff 75 f8             	pushl  -0x8(%ebp)
   111fc:	e8 b9 fe ff ff       	call   110ba <k_itoa>
   11201:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   11204:	ff 75 f8             	pushl  -0x8(%ebp)
   11207:	e8 7f fd ff ff       	call   10f8b <k_strlen>
   1120c:	83 c4 04             	add    $0x4,%esp
   1120f:	01 45 f8             	add    %eax,-0x8(%ebp)
   11212:	e9 a1 00 00 00       	jmp    112b8 <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   11217:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1121b:	75 2e                	jne    1124b <k_vsprint+0xba>
                int num  = va_arg(args, int);
   1121d:	8b 45 10             	mov    0x10(%ebp),%eax
   11220:	8d 50 04             	lea    0x4(%eax),%edx
   11223:	89 55 10             	mov    %edx,0x10(%ebp)
   11226:	8b 00                	mov    (%eax),%eax
   11228:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   1122b:	6a 10                	push   $0x10
   1122d:	ff 75 e8             	pushl  -0x18(%ebp)
   11230:	ff 75 f8             	pushl  -0x8(%ebp)
   11233:	e8 82 fe ff ff       	call   110ba <k_itoa>
   11238:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   1123b:	ff 75 f8             	pushl  -0x8(%ebp)
   1123e:	e8 48 fd ff ff       	call   10f8b <k_strlen>
   11243:	83 c4 04             	add    $0x4,%esp
   11246:	01 45 f8             	add    %eax,-0x8(%ebp)
   11249:	eb 6d                	jmp    112b8 <k_vsprint+0x127>

            }else if (ch == 'c') {
   1124b:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1124f:	75 1f                	jne    11270 <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   11251:	8b 45 10             	mov    0x10(%ebp),%eax
   11254:	8d 50 04             	lea    0x4(%eax),%edx
   11257:	89 55 10             	mov    %edx,0x10(%ebp)
   1125a:	8b 00                	mov    (%eax),%eax
   1125c:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   1125f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11262:	8d 50 01             	lea    0x1(%eax),%edx
   11265:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11268:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1126c:	88 10                	mov    %dl,(%eax)
   1126e:	eb 48                	jmp    112b8 <k_vsprint+0x127>

            }else if (ch == 's') {
   11270:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11274:	75 42                	jne    112b8 <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   11276:	8b 45 10             	mov    0x10(%ebp),%eax
   11279:	8d 50 04             	lea    0x4(%eax),%edx
   1127c:	89 55 10             	mov    %edx,0x10(%ebp)
   1127f:	8b 00                	mov    (%eax),%eax
   11281:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   11284:	ff 75 f4             	pushl  -0xc(%ebp)
   11287:	e8 ff fc ff ff       	call   10f8b <k_strlen>
   1128c:	83 c4 04             	add    $0x4,%esp
   1128f:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   11292:	eb 17                	jmp    112ab <k_vsprint+0x11a>
                    *curr++ = *str++;
   11294:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11297:	8d 42 01             	lea    0x1(%edx),%eax
   1129a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1129d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112a0:	8d 48 01             	lea    0x1(%eax),%ecx
   112a3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   112a6:	0f b6 12             	movzbl (%edx),%edx
   112a9:	88 10                	mov    %dl,(%eax)
                while(len--) {
   112ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112ae:	8d 50 ff             	lea    -0x1(%eax),%edx
   112b1:	89 55 f0             	mov    %edx,-0x10(%ebp)
   112b4:	85 c0                	test   %eax,%eax
   112b6:	75 dc                	jne    11294 <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   112b8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   112bf:	eb 01                	jmp    112c2 <k_vsprint+0x131>
        
        default:
            break;
   112c1:	90                   	nop
    while((ch = *fmt++)) {
   112c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c5:	8d 50 01             	lea    0x1(%eax),%edx
   112c8:	89 55 0c             	mov    %edx,0xc(%ebp)
   112cb:	0f b6 00             	movzbl (%eax),%eax
   112ce:	88 45 ef             	mov    %al,-0x11(%ebp)
   112d1:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   112d5:	0f 85 ce fe ff ff    	jne    111a9 <k_vsprint+0x18>
        }
    }
   112db:	90                   	nop
   112dc:	c9                   	leave  
   112dd:	c3                   	ret    

000112de <list_is_empty>:
static inline int list_is_empty (list_t* list) {
   112de:	55                   	push   %ebp
   112df:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   112e1:	8b 45 08             	mov    0x8(%ebp),%eax
   112e4:	8b 40 08             	mov    0x8(%eax),%eax
   112e7:	85 c0                	test   %eax,%eax
   112e9:	0f 94 c0             	sete   %al
   112ec:	0f b6 c0             	movzbl %al,%eax
}
   112ef:	5d                   	pop    %ebp
   112f0:	c3                   	ret    

000112f1 <list_init>:
#include <list.h>

void list_init(list_t* list) {
   112f1:	55                   	push   %ebp
   112f2:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t*)0;
   112f4:	8b 45 08             	mov    0x8(%ebp),%eax
   112f7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   112fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11301:	8b 50 04             	mov    0x4(%eax),%edx
   11304:	8b 45 08             	mov    0x8(%ebp),%eax
   11307:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11309:	8b 45 08             	mov    0x8(%ebp),%eax
   1130c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11313:	90                   	nop
   11314:	5d                   	pop    %ebp
   11315:	c3                   	ret    

00011316 <list_insert_first>:

void list_insert_first (list_t* list, list_node_t* node) {
   11316:	55                   	push   %ebp
   11317:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   11319:	8b 45 08             	mov    0x8(%ebp),%eax
   1131c:	8b 10                	mov    (%eax),%edx
   1131e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11321:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   11324:	8b 45 0c             	mov    0xc(%ebp),%eax
   11327:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if(list_is_empty(list)) {
   1132d:	ff 75 08             	pushl  0x8(%ebp)
   11330:	e8 a9 ff ff ff       	call   112de <list_is_empty>
   11335:	83 c4 04             	add    $0x4,%esp
   11338:	85 c0                	test   %eax,%eax
   1133a:	74 15                	je     11351 <list_insert_first+0x3b>
        list->last = list->first = node;
   1133c:	8b 45 08             	mov    0x8(%ebp),%eax
   1133f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11342:	89 10                	mov    %edx,(%eax)
   11344:	8b 45 08             	mov    0x8(%ebp),%eax
   11347:	8b 10                	mov    (%eax),%edx
   11349:	8b 45 08             	mov    0x8(%ebp),%eax
   1134c:	89 50 04             	mov    %edx,0x4(%eax)
   1134f:	eb 12                	jmp    11363 <list_insert_first+0x4d>
    } else {
        list->first->pre = node;
   11351:	8b 45 08             	mov    0x8(%ebp),%eax
   11354:	8b 00                	mov    (%eax),%eax
   11356:	8b 55 0c             	mov    0xc(%ebp),%edx
   11359:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1135b:	8b 45 08             	mov    0x8(%ebp),%eax
   1135e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11361:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11363:	8b 45 08             	mov    0x8(%ebp),%eax
   11366:	8b 40 08             	mov    0x8(%eax),%eax
   11369:	8d 50 01             	lea    0x1(%eax),%edx
   1136c:	8b 45 08             	mov    0x8(%ebp),%eax
   1136f:	89 50 08             	mov    %edx,0x8(%eax)
}
   11372:	90                   	nop
   11373:	c9                   	leave  
   11374:	c3                   	ret    

00011375 <list_insert_last>:

void list_insert_last (list_t* list, list_node_t* node) {
   11375:	55                   	push   %ebp
   11376:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11378:	8b 45 08             	mov    0x8(%ebp),%eax
   1137b:	8b 50 04             	mov    0x4(%eax),%edx
   1137e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11381:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11383:	8b 45 0c             	mov    0xc(%ebp),%eax
   11386:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   1138d:	ff 75 08             	pushl  0x8(%ebp)
   11390:	e8 49 ff ff ff       	call   112de <list_is_empty>
   11395:	83 c4 04             	add    $0x4,%esp
   11398:	85 c0                	test   %eax,%eax
   1139a:	74 16                	je     113b2 <list_insert_last+0x3d>
        list->first = list->last = node;
   1139c:	8b 45 08             	mov    0x8(%ebp),%eax
   1139f:	8b 55 0c             	mov    0xc(%ebp),%edx
   113a2:	89 50 04             	mov    %edx,0x4(%eax)
   113a5:	8b 45 08             	mov    0x8(%ebp),%eax
   113a8:	8b 50 04             	mov    0x4(%eax),%edx
   113ab:	8b 45 08             	mov    0x8(%ebp),%eax
   113ae:	89 10                	mov    %edx,(%eax)
   113b0:	eb 15                	jmp    113c7 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   113b2:	8b 45 08             	mov    0x8(%ebp),%eax
   113b5:	8b 40 04             	mov    0x4(%eax),%eax
   113b8:	8b 55 0c             	mov    0xc(%ebp),%edx
   113bb:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   113be:	8b 45 08             	mov    0x8(%ebp),%eax
   113c1:	8b 55 0c             	mov    0xc(%ebp),%edx
   113c4:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   113c7:	8b 45 08             	mov    0x8(%ebp),%eax
   113ca:	8b 40 08             	mov    0x8(%eax),%eax
   113cd:	8d 50 01             	lea    0x1(%eax),%edx
   113d0:	8b 45 08             	mov    0x8(%ebp),%eax
   113d3:	89 50 08             	mov    %edx,0x8(%eax)
}
   113d6:	90                   	nop
   113d7:	c9                   	leave  
   113d8:	c3                   	ret    

000113d9 <list_delete_first>:


list_node_t* list_delete_first (list_t* list) {
   113d9:	55                   	push   %ebp
   113da:	89 e5                	mov    %esp,%ebp
   113dc:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list)) {
   113df:	ff 75 08             	pushl  0x8(%ebp)
   113e2:	e8 f7 fe ff ff       	call   112de <list_is_empty>
   113e7:	83 c4 04             	add    $0x4,%esp
   113ea:	85 c0                	test   %eax,%eax
   113ec:	74 07                	je     113f5 <list_delete_first+0x1c>
        return (list_node_t*)0;
   113ee:	b8 00 00 00 00       	mov    $0x0,%eax
   113f3:	eb 5b                	jmp    11450 <list_delete_first+0x77>
    }

    list_node_t* remove_node = list->first;
   113f5:	8b 45 08             	mov    0x8(%ebp),%eax
   113f8:	8b 00                	mov    (%eax),%eax
   113fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   113fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11400:	8b 50 04             	mov    0x4(%eax),%edx
   11403:	8b 45 08             	mov    0x8(%ebp),%eax
   11406:	89 10                	mov    %edx,(%eax)

    if( list->first == (list_node_t*)0 ) {
   11408:	8b 45 08             	mov    0x8(%ebp),%eax
   1140b:	8b 00                	mov    (%eax),%eax
   1140d:	85 c0                	test   %eax,%eax
   1140f:	75 0c                	jne    1141d <list_delete_first+0x44>
        list->last = (list_node_t*)0;
   11411:	8b 45 08             	mov    0x8(%ebp),%eax
   11414:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1141b:	eb 0c                	jmp    11429 <list_delete_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t*)0;
   1141d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11420:	8b 40 04             	mov    0x4(%eax),%eax
   11423:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        //list->first->pre = (list_node_t*)0;
    }

    remove_node->pre = remove_node->next = (list_node_t*)0;
   11429:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1142c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11433:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11436:	8b 50 04             	mov    0x4(%eax),%edx
   11439:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1143c:	89 10                	mov    %edx,(%eax)
    list->count--;
   1143e:	8b 45 08             	mov    0x8(%ebp),%eax
   11441:	8b 40 08             	mov    0x8(%eax),%eax
   11444:	8d 50 ff             	lea    -0x1(%eax),%edx
   11447:	8b 45 08             	mov    0x8(%ebp),%eax
   1144a:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   1144d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11450:	c9                   	leave  
   11451:	c3                   	ret    

00011452 <list_delete>:

list_node_t* list_delete (list_t* list, list_node_t* node) {
   11452:	55                   	push   %ebp
   11453:	89 e5                	mov    %esp,%ebp
    if(node == list->first) {
   11455:	8b 45 08             	mov    0x8(%ebp),%eax
   11458:	8b 00                	mov    (%eax),%eax
   1145a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1145d:	75 0b                	jne    1146a <list_delete+0x18>
        list->first = node->next;
   1145f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11462:	8b 50 04             	mov    0x4(%eax),%edx
   11465:	8b 45 08             	mov    0x8(%ebp),%eax
   11468:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last) {
   1146a:	8b 45 08             	mov    0x8(%ebp),%eax
   1146d:	8b 40 04             	mov    0x4(%eax),%eax
   11470:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11473:	75 0b                	jne    11480 <list_delete+0x2e>
        list->last = node->pre;
   11475:	8b 45 0c             	mov    0xc(%ebp),%eax
   11478:	8b 10                	mov    (%eax),%edx
   1147a:	8b 45 08             	mov    0x8(%ebp),%eax
   1147d:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if(node->pre) {
   11480:	8b 45 0c             	mov    0xc(%ebp),%eax
   11483:	8b 00                	mov    (%eax),%eax
   11485:	85 c0                	test   %eax,%eax
   11487:	74 0e                	je     11497 <list_delete+0x45>
        node->pre->next = node->next;
   11489:	8b 45 0c             	mov    0xc(%ebp),%eax
   1148c:	8b 00                	mov    (%eax),%eax
   1148e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11491:	8b 52 04             	mov    0x4(%edx),%edx
   11494:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) {
   11497:	8b 45 0c             	mov    0xc(%ebp),%eax
   1149a:	8b 40 04             	mov    0x4(%eax),%eax
   1149d:	85 c0                	test   %eax,%eax
   1149f:	74 0d                	je     114ae <list_delete+0x5c>
        node->next->pre = node->pre;
   114a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   114a4:	8b 40 04             	mov    0x4(%eax),%eax
   114a7:	8b 55 0c             	mov    0xc(%ebp),%edx
   114aa:	8b 12                	mov    (%edx),%edx
   114ac:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   114ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   114b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   114b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   114bb:	8b 50 04             	mov    0x4(%eax),%edx
   114be:	8b 45 0c             	mov    0xc(%ebp),%eax
   114c1:	89 10                	mov    %edx,(%eax)

    list->count--;
   114c3:	8b 45 08             	mov    0x8(%ebp),%eax
   114c6:	8b 40 08             	mov    0x8(%eax),%eax
   114c9:	8d 50 ff             	lea    -0x1(%eax),%edx
   114cc:	8b 45 08             	mov    0x8(%ebp),%eax
   114cf:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   114d2:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   114d5:	5d                   	pop    %ebp
   114d6:	c3                   	ret    

000114d7 <inb>:
static inline uint8_t inb(uint16_t  port) {
   114d7:	55                   	push   %ebp
   114d8:	89 e5                	mov    %esp,%ebp
   114da:	83 ec 14             	sub    $0x14,%esp
   114dd:	8b 45 08             	mov    0x8(%ebp),%eax
   114e0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   114e4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   114e8:	89 c2                	mov    %eax,%edx
   114ea:	ec                   	in     (%dx),%al
   114eb:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   114ee:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   114f2:	c9                   	leave  
   114f3:	c3                   	ret    

000114f4 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   114f4:	55                   	push   %ebp
   114f5:	89 e5                	mov    %esp,%ebp
   114f7:	83 ec 08             	sub    $0x8,%esp
   114fa:	8b 55 08             	mov    0x8(%ebp),%edx
   114fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   11500:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11504:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   11507:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1150b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1150f:	ee                   	out    %al,(%dx)
}
   11510:	90                   	nop
   11511:	c9                   	leave  
   11512:	c3                   	ret    

00011513 <log_init>:
#include <log.h>

#define COM1_PORT       0x3f8

void log_init() {
   11513:	55                   	push   %ebp
   11514:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11516:	6a 00                	push   $0x0
   11518:	68 f9 03 00 00       	push   $0x3f9
   1151d:	e8 d2 ff ff ff       	call   114f4 <outb>
   11522:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11525:	68 80 00 00 00       	push   $0x80
   1152a:	68 fb 03 00 00       	push   $0x3fb
   1152f:	e8 c0 ff ff ff       	call   114f4 <outb>
   11534:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11537:	6a 03                	push   $0x3
   11539:	68 f8 03 00 00       	push   $0x3f8
   1153e:	e8 b1 ff ff ff       	call   114f4 <outb>
   11543:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11546:	6a 00                	push   $0x0
   11548:	68 f9 03 00 00       	push   $0x3f9
   1154d:	e8 a2 ff ff ff       	call   114f4 <outb>
   11552:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11555:	6a 03                	push   $0x3
   11557:	68 fb 03 00 00       	push   $0x3fb
   1155c:	e8 93 ff ff ff       	call   114f4 <outb>
   11561:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   11564:	68 c7 00 00 00       	push   $0xc7
   11569:	68 fa 03 00 00       	push   $0x3fa
   1156e:	e8 81 ff ff ff       	call   114f4 <outb>
   11573:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11576:	6a 0f                	push   $0xf
   11578:	68 fc 03 00 00       	push   $0x3fc
   1157d:	e8 72 ff ff ff       	call   114f4 <outb>
   11582:	83 c4 08             	add    $0x8,%esp
}
   11585:	90                   	nop
   11586:	c9                   	leave  
   11587:	c3                   	ret    

00011588 <klog>:


void klog(const char* fmt, ...) {
   11588:	55                   	push   %ebp
   11589:	89 e5                	mov    %esp,%ebp
   1158b:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   11591:	83 ec 04             	sub    $0x4,%esp
   11594:	68 80 00 00 00       	push   $0x80
   11599:	6a 00                	push   $0x0
   1159b:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   115a1:	50                   	push   %eax
   115a2:	e8 6e fa ff ff       	call   11015 <k_memset>
   115a7:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   115aa:	8d 45 0c             	lea    0xc(%ebp),%eax
   115ad:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    k_vsprint(buf, fmt, args);
   115b3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   115b9:	83 ec 04             	sub    $0x4,%esp
   115bc:	50                   	push   %eax
   115bd:	ff 75 08             	pushl  0x8(%ebp)
   115c0:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   115c6:	50                   	push   %eax
   115c7:	e8 c5 fb ff ff       	call   11191 <k_vsprint>
   115cc:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    irq_state_t state = irq_enter_proection();
   115cf:	e8 5d f8 ff ff       	call   10e31 <irq_enter_proection>
   115d4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    const char *p = buf;
   115d7:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   115dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   115e0:	eb 3b                	jmp    1161d <klog+0x95>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   115e2:	90                   	nop
   115e3:	83 ec 0c             	sub    $0xc,%esp
   115e6:	68 fd 03 00 00       	push   $0x3fd
   115eb:	e8 e7 fe ff ff       	call   114d7 <inb>
   115f0:	83 c4 10             	add    $0x10,%esp
   115f3:	0f b6 c0             	movzbl %al,%eax
   115f6:	83 e0 40             	and    $0x40,%eax
   115f9:	85 c0                	test   %eax,%eax
   115fb:	74 e6                	je     115e3 <klog+0x5b>
        outb(COM1_PORT, *p++);
   115fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11600:	8d 50 01             	lea    0x1(%eax),%edx
   11603:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11606:	0f b6 00             	movzbl (%eax),%eax
   11609:	0f b6 c0             	movzbl %al,%eax
   1160c:	83 ec 08             	sub    $0x8,%esp
   1160f:	50                   	push   %eax
   11610:	68 f8 03 00 00       	push   $0x3f8
   11615:	e8 da fe ff ff       	call   114f4 <outb>
   1161a:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   1161d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11620:	0f b6 00             	movzbl (%eax),%eax
   11623:	84 c0                	test   %al,%al
   11625:	75 bb                	jne    115e2 <klog+0x5a>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   11627:	83 ec 08             	sub    $0x8,%esp
   1162a:	6a 0d                	push   $0xd
   1162c:	68 f8 03 00 00       	push   $0x3f8
   11631:	e8 be fe ff ff       	call   114f4 <outb>
   11636:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   11639:	83 ec 08             	sub    $0x8,%esp
   1163c:	6a 0a                	push   $0xa
   1163e:	68 f8 03 00 00       	push   $0x3f8
   11643:	e8 ac fe ff ff       	call   114f4 <outb>
   11648:	83 c4 10             	add    $0x10,%esp

    irq_leave_proection(state);
   1164b:	83 ec 0c             	sub    $0xc,%esp
   1164e:	ff 75 f0             	pushl  -0x10(%ebp)
   11651:	e8 f3 f7 ff ff       	call   10e49 <irq_leave_proection>
   11656:	83 c4 10             	add    $0x10,%esp
}
   11659:	90                   	nop
   1165a:	c9                   	leave  
   1165b:	c3                   	ret    

0001165c <list_count>:
static inline int list_count (list_t* list) {
   1165c:	55                   	push   %ebp
   1165d:	89 e5                	mov    %esp,%ebp
    return list->count;
   1165f:	8b 45 08             	mov    0x8(%ebp),%eax
   11662:	8b 40 08             	mov    0x8(%eax),%eax
}
   11665:	5d                   	pop    %ebp
   11666:	c3                   	ret    

00011667 <sem_init>:
#include <sem.h>


void sem_init(sem_t* sem, int init_count) {
   11667:	55                   	push   %ebp
   11668:	89 e5                	mov    %esp,%ebp
   1166a:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   1166d:	8b 45 08             	mov    0x8(%ebp),%eax
   11670:	8b 55 0c             	mov    0xc(%ebp),%edx
   11673:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11675:	8b 45 08             	mov    0x8(%ebp),%eax
   11678:	83 c0 04             	add    $0x4,%eax
   1167b:	83 ec 0c             	sub    $0xc,%esp
   1167e:	50                   	push   %eax
   1167f:	e8 6d fc ff ff       	call   112f1 <list_init>
   11684:	83 c4 10             	add    $0x10,%esp
}
   11687:	90                   	nop
   11688:	c9                   	leave  
   11689:	c3                   	ret    

0001168a <sem_wait>:

void sem_wait(sem_t* sem) {
   1168a:	55                   	push   %ebp
   1168b:	89 e5                	mov    %esp,%ebp
   1168d:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   11690:	e8 9c f7 ff ff       	call   10e31 <irq_enter_proection>
   11695:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0) {
   11698:	8b 45 08             	mov    0x8(%ebp),%eax
   1169b:	8b 00                	mov    (%eax),%eax
   1169d:	85 c0                	test   %eax,%eax
   1169f:	7e 0f                	jle    116b0 <sem_wait+0x26>
        sem->count--;
   116a1:	8b 45 08             	mov    0x8(%ebp),%eax
   116a4:	8b 00                	mov    (%eax),%eax
   116a6:	8d 50 ff             	lea    -0x1(%eax),%edx
   116a9:	8b 45 08             	mov    0x8(%ebp),%eax
   116ac:	89 10                	mov    %edx,(%eax)
   116ae:	eb 34                	jmp    116e4 <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   116b0:	e8 76 04 00 00       	call   11b2b <task_current>
   116b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   116b8:	83 ec 0c             	sub    $0xc,%esp
   116bb:	ff 75 f0             	pushl  -0x10(%ebp)
   116be:	e8 a7 04 00 00       	call   11b6a <task_set_block>
   116c3:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   116c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116c9:	8d 50 44             	lea    0x44(%eax),%edx
   116cc:	8b 45 08             	mov    0x8(%ebp),%eax
   116cf:	83 c0 04             	add    $0x4,%eax
   116d2:	83 ec 08             	sub    $0x8,%esp
   116d5:	52                   	push   %edx
   116d6:	50                   	push   %eax
   116d7:	e8 99 fc ff ff       	call   11375 <list_insert_last>
   116dc:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   116df:	e8 55 05 00 00       	call   11c39 <task_dispatch>
    }
    irq_leave_proection(state);
   116e4:	83 ec 0c             	sub    $0xc,%esp
   116e7:	ff 75 f4             	pushl  -0xc(%ebp)
   116ea:	e8 5a f7 ff ff       	call   10e49 <irq_leave_proection>
   116ef:	83 c4 10             	add    $0x10,%esp
}
   116f2:	90                   	nop
   116f3:	c9                   	leave  
   116f4:	c3                   	ret    

000116f5 <sem_notify>:

void sem_notify(sem_t* sem) {
   116f5:	55                   	push   %ebp
   116f6:	89 e5                	mov    %esp,%ebp
   116f8:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();
   116fb:	e8 31 f7 ff ff       	call   10e31 <irq_enter_proection>
   11700:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list)) {
   11703:	8b 45 08             	mov    0x8(%ebp),%eax
   11706:	83 c0 04             	add    $0x4,%eax
   11709:	83 ec 0c             	sub    $0xc,%esp
   1170c:	50                   	push   %eax
   1170d:	e8 4a ff ff ff       	call   1165c <list_count>
   11712:	83 c4 10             	add    $0x10,%esp
   11715:	85 c0                	test   %eax,%eax
   11717:	74 40                	je     11759 <sem_notify+0x64>
        list_node_t* node = list_delete_first(&sem->wait_list);
   11719:	8b 45 08             	mov    0x8(%ebp),%eax
   1171c:	83 c0 04             	add    $0x4,%eax
   1171f:	83 ec 0c             	sub    $0xc,%esp
   11722:	50                   	push   %eax
   11723:	e8 b1 fc ff ff       	call   113d9 <list_delete_first>
   11728:	83 c4 10             	add    $0x10,%esp
   1172b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_t* task = list_node_parent(node, task_t, wait_node);
   1172e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11732:	74 08                	je     1173c <sem_notify+0x47>
   11734:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11737:	83 e8 44             	sub    $0x44,%eax
   1173a:	eb 05                	jmp    11741 <sem_notify+0x4c>
   1173c:	b8 00 00 00 00       	mov    $0x0,%eax
   11741:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   11744:	83 ec 0c             	sub    $0xc,%esp
   11747:	ff 75 ec             	pushl  -0x14(%ebp)
   1174a:	e8 e6 03 00 00       	call   11b35 <task_set_ready>
   1174f:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11752:	e8 e2 04 00 00       	call   11c39 <task_dispatch>
   11757:	eb 0d                	jmp    11766 <sem_notify+0x71>
    } else {
        sem->count++;
   11759:	8b 45 08             	mov    0x8(%ebp),%eax
   1175c:	8b 00                	mov    (%eax),%eax
   1175e:	8d 50 01             	lea    0x1(%eax),%edx
   11761:	8b 45 08             	mov    0x8(%ebp),%eax
   11764:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_proection(state);
   11766:	83 ec 0c             	sub    $0xc,%esp
   11769:	ff 75 f4             	pushl  -0xc(%ebp)
   1176c:	e8 d8 f6 ff ff       	call   10e49 <irq_leave_proection>
   11771:	83 c4 10             	add    $0x10,%esp

}
   11774:	90                   	nop
   11775:	c9                   	leave  
   11776:	c3                   	ret    

00011777 <sem_count>:

int  sem_count(sem_t* sem) {
   11777:	55                   	push   %ebp
   11778:	89 e5                	mov    %esp,%ebp
   1177a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   1177d:	e8 af f6 ff ff       	call   10e31 <irq_enter_proection>
   11782:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11785:	8b 45 08             	mov    0x8(%ebp),%eax
   11788:	8b 00                	mov    (%eax),%eax
   1178a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_proection(state);
   1178d:	83 ec 0c             	sub    $0xc,%esp
   11790:	ff 75 f4             	pushl  -0xc(%ebp)
   11793:	e8 b1 f6 ff ff       	call   10e49 <irq_leave_proection>
   11798:	83 c4 10             	add    $0x10,%esp
    return count;
   1179b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1179e:	c9                   	leave  
   1179f:	c3                   	ret    

000117a0 <hlt>:
static inline void hlt() {
   117a0:	55                   	push   %ebp
   117a1:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   117a3:	f4                   	hlt    
}
   117a4:	90                   	nop
   117a5:	5d                   	pop    %ebp
   117a6:	c3                   	ret    

000117a7 <list_node_init>:
static inline void list_node_init(list_node_t* node) {
   117a7:	55                   	push   %ebp
   117a8:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t*)0;
   117aa:	8b 45 08             	mov    0x8(%ebp),%eax
   117ad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   117b4:	8b 45 08             	mov    0x8(%ebp),%eax
   117b7:	8b 50 04             	mov    0x4(%eax),%edx
   117ba:	8b 45 08             	mov    0x8(%ebp),%eax
   117bd:	89 10                	mov    %edx,(%eax)
}
   117bf:	90                   	nop
   117c0:	5d                   	pop    %ebp
   117c1:	c3                   	ret    

000117c2 <list_node_next>:
static inline list_node_t* list_node_next(list_node_t* node) {
   117c2:	55                   	push   %ebp
   117c3:	89 e5                	mov    %esp,%ebp
    return node->next;
   117c5:	8b 45 08             	mov    0x8(%ebp),%eax
   117c8:	8b 40 04             	mov    0x4(%eax),%eax
}
   117cb:	5d                   	pop    %ebp
   117cc:	c3                   	ret    

000117cd <list_count>:
static inline int list_count (list_t* list) {
   117cd:	55                   	push   %ebp
   117ce:	89 e5                	mov    %esp,%ebp
    return list->count;
   117d0:	8b 45 08             	mov    0x8(%ebp),%eax
   117d3:	8b 40 08             	mov    0x8(%eax),%eax
}
   117d6:	5d                   	pop    %ebp
   117d7:	c3                   	ret    

000117d8 <list_first>:
static inline list_node_t* list_first (list_t* list) {
   117d8:	55                   	push   %ebp
   117d9:	89 e5                	mov    %esp,%ebp
    return list->first;
   117db:	8b 45 08             	mov    0x8(%ebp),%eax
   117de:	8b 00                	mov    (%eax),%eax
}
   117e0:	5d                   	pop    %ebp
   117e1:	c3                   	ret    

000117e2 <idle_task_func>:
#include <task.h>

void simple_switch(uint32_t **from, uint32_t* to);

static void idle_task_func() { for(;;) hlt(); }
   117e2:	55                   	push   %ebp
   117e3:	89 e5                	mov    %esp,%ebp
   117e5:	e8 b6 ff ff ff       	call   117a0 <hlt>
   117ea:	eb f9                	jmp    117e5 <idle_task_func+0x3>

000117ec <task_switch_from_to>:

void task_switch_from_to(task_t* from, task_t* to) {
   117ec:	55                   	push   %ebp
   117ed:	89 e5                	mov    %esp,%ebp
   117ef:	83 ec 08             	sub    $0x8,%esp
    // far_jump(to->tss_sel, 0);  // 使用 tss 机制

    simple_switch(&from->stack, to->stack);  // 使用直接跳转机制
   117f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   117f5:	8b 10                	mov    (%eax),%edx
   117f7:	8b 45 08             	mov    0x8(%ebp),%eax
   117fa:	83 ec 08             	sub    $0x8,%esp
   117fd:	52                   	push   %edx
   117fe:	50                   	push   %eax
   117ff:	e8 a1 ea ff ff       	call   102a5 <simple_switch>
   11804:	83 c4 10             	add    $0x10,%esp
}
   11807:	90                   	nop
   11808:	c9                   	leave  
   11809:	c3                   	ret    

0001180a <tss_init>:
static uint32_t task3_stack[2048];
static task_t task3;
sem_t  sem_test;


int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   1180a:	55                   	push   %ebp
   1180b:	89 e5                	mov    %esp,%ebp
   1180d:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   11810:	e8 c1 eb ff ff       	call   103d6 <gdt_alloc_desc>
   11815:	89 45 f4             	mov    %eax,-0xc(%ebp)


    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), 
   11818:	8b 45 08             	mov    0x8(%ebp),%eax
   1181b:	83 c0 4c             	add    $0x4c,%eax
   1181e:	68 89 00 00 00       	push   $0x89
   11823:	6a 68                	push   $0x68
   11825:	50                   	push   %eax
   11826:	ff 75 f4             	pushl  -0xc(%ebp)
   11829:	e8 b5 ea ff ff       	call   102e3 <segment_desc_set>
   1182e:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS
    );

    k_memset(&task->tss, 0, sizeof(tss_t));
   11831:	8b 45 08             	mov    0x8(%ebp),%eax
   11834:	83 c0 4c             	add    $0x4c,%eax
   11837:	83 ec 04             	sub    $0x4,%esp
   1183a:	6a 68                	push   $0x68
   1183c:	6a 00                	push   $0x0
   1183e:	50                   	push   %eax
   1183f:	e8 d1 f7 ff ff       	call   11015 <k_memset>
   11844:	83 c4 10             	add    $0x10,%esp

    task->tss.eip  = entry;
   11847:	8b 45 08             	mov    0x8(%ebp),%eax
   1184a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1184d:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp  = esp;
   11850:	8b 45 08             	mov    0x8(%ebp),%eax
   11853:	8b 55 10             	mov    0x10(%ebp),%edx
   11856:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.esp0 = esp;
   1185c:	8b 45 08             	mov    0x8(%ebp),%eax
   1185f:	8b 55 10             	mov    0x10(%ebp),%edx
   11862:	89 50 50             	mov    %edx,0x50(%eax)

    task->tss.ss  = KERNEL_SELECTOR_DS;
   11865:	8b 45 08             	mov    0x8(%ebp),%eax
   11868:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   1186f:	00 00 00 
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   11872:	8b 45 08             	mov    0x8(%ebp),%eax
   11875:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es  = KERNEL_SELECTOR_DS;
   1187c:	8b 45 08             	mov    0x8(%ebp),%eax
   1187f:	c7 80 94 00 00 00 10 	movl   $0x10,0x94(%eax)
   11886:	00 00 00 
    task->tss.ds  = KERNEL_SELECTOR_DS;
   11889:	8b 45 08             	mov    0x8(%ebp),%eax
   1188c:	c7 80 a0 00 00 00 10 	movl   $0x10,0xa0(%eax)
   11893:	00 00 00 
    task->tss.fs  = KERNEL_SELECTOR_DS;
   11896:	8b 45 08             	mov    0x8(%ebp),%eax
   11899:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   118a0:	00 00 00 
    task->tss.gs  = KERNEL_SELECTOR_DS;
   118a3:	8b 45 08             	mov    0x8(%ebp),%eax
   118a6:	c7 80 a8 00 00 00 10 	movl   $0x10,0xa8(%eax)
   118ad:	00 00 00 

    task->tss.cs  = KERNEL_SELECTOR_CS;
   118b0:	8b 45 08             	mov    0x8(%ebp),%eax
   118b3:	c7 80 98 00 00 00 08 	movl   $0x8,0x98(%eax)
   118ba:	00 00 00 

    task->tss.eflags = EFLAGES_DEFAULT | EFLAGS_IF;
   118bd:	8b 45 08             	mov    0x8(%ebp),%eax
   118c0:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    task->tss_sel = tss_sel;
   118c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   118ca:	8b 45 08             	mov    0x8(%ebp),%eax
   118cd:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
}
   118d3:	90                   	nop
   118d4:	c9                   	leave  
   118d5:	c3                   	ret    

000118d6 <task_init>:

// 初始化一个任务
int task_init(task_t* task, const char* name, uint32_t entry, uint32_t esp) {
   118d6:	55                   	push   %ebp
   118d7:	89 e5                	mov    %esp,%ebp
   118d9:	83 ec 18             	sub    $0x18,%esp
    // tss_init(task, entry, esp);  // 使用 tss 机制

    // 使用直接跳转机制
    uint32_t* pesp = (uint32_t*)esp;
   118dc:	8b 45 14             	mov    0x14(%ebp),%eax
   118df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pesp) {
   118e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118e6:	74 48                	je     11930 <task_init+0x5a>
        *(--pesp) = entry;
   118e8:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   118ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118ef:	8b 55 10             	mov    0x10(%ebp),%edx
   118f2:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;
   118f4:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   118f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118fb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   11901:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   11905:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11908:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   1190e:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   11912:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11915:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   1191b:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   1191f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11922:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        task->stack = pesp;
   11928:	8b 45 08             	mov    0x8(%ebp),%eax
   1192b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1192e:	89 10                	mov    %edx,(%eax)
    }

    k_strncpy(task->name, name, TASK_NAME_SIZE);        // 进程名
   11930:	8b 45 08             	mov    0x8(%ebp),%eax
   11933:	83 c0 08             	add    $0x8,%eax
   11936:	83 ec 04             	sub    $0x4,%esp
   11939:	6a 20                	push   $0x20
   1193b:	ff 75 0c             	pushl  0xc(%ebp)
   1193e:	50                   	push   %eax
   1193f:	e8 5d f5 ff ff       	call   10ea1 <k_strncpy>
   11944:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;                         // 状态  created
   11947:	8b 45 08             	mov    0x8(%ebp),%eax
   1194a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;         //  最大时间片
   11951:	8b 45 08             	mov    0x8(%ebp),%eax
   11954:	c7 40 2c 05 00 00 00 	movl   $0x5,0x2c(%eax)
    task->slice_ticks = TASK_TIME_SLICE_DEFAULT;        //  当前时间片
   1195b:	8b 45 08             	mov    0x8(%ebp),%eax
   1195e:	c7 40 28 05 00 00 00 	movl   $0x5,0x28(%eax)
    task->sleep_ticks = 0;
   11965:	8b 45 08             	mov    0x8(%ebp),%eax
   11968:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node); 
   1196f:	8b 45 08             	mov    0x8(%ebp),%eax
   11972:	83 c0 3c             	add    $0x3c,%eax
   11975:	83 ec 0c             	sub    $0xc,%esp
   11978:	50                   	push   %eax
   11979:	e8 29 fe ff ff       	call   117a7 <list_node_init>
   1197e:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   11981:	8b 45 08             	mov    0x8(%ebp),%eax
   11984:	83 c0 34             	add    $0x34,%eax
   11987:	83 ec 0c             	sub    $0xc,%esp
   1198a:	50                   	push   %eax
   1198b:	e8 17 fe ff ff       	call   117a7 <list_node_init>
   11990:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   11993:	8b 45 08             	mov    0x8(%ebp),%eax
   11996:	83 c0 44             	add    $0x44,%eax
   11999:	83 ec 0c             	sub    $0xc,%esp
   1199c:	50                   	push   %eax
   1199d:	e8 05 fe ff ff       	call   117a7 <list_node_init>
   119a2:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   119a5:	e8 87 f4 ff ff       	call   10e31 <irq_enter_proection>
   119aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_ready(task);                                        // 加入到就绪队列
   119ad:	83 ec 0c             	sub    $0xc,%esp
   119b0:	ff 75 08             	pushl  0x8(%ebp)
   119b3:	e8 7d 01 00 00       	call   11b35 <task_set_ready>
   119b8:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&task_manager.task_list, &task->all_node);  // 加入到所有队列
   119bb:	8b 45 08             	mov    0x8(%ebp),%eax
   119be:	83 c0 3c             	add    $0x3c,%eax
   119c1:	83 ec 08             	sub    $0x8,%esp
   119c4:	50                   	push   %eax
   119c5:	68 5c 0c 20 00       	push   $0x200c5c
   119ca:	e8 a6 f9 ff ff       	call   11375 <list_insert_last>
   119cf:	83 c4 10             	add    $0x10,%esp
    irq_leave_proection(state);  //--leave protection
   119d2:	83 ec 0c             	sub    $0xc,%esp
   119d5:	ff 75 f0             	pushl  -0x10(%ebp)
   119d8:	e8 6c f4 ff ff       	call   10e49 <irq_leave_proection>
   119dd:	83 c4 10             	add    $0x10,%esp

    return 0;
   119e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   119e5:	c9                   	leave  
   119e6:	c3                   	ret    

000119e7 <task_manager_init>:

// 初始化任务管理
void task_manager_init() {
   119e7:	55                   	push   %ebp
   119e8:	89 e5                	mov    %esp,%ebp
   119ea:	83 ec 08             	sub    $0x8,%esp
    sem_init(&sem_test, 0);
   119ed:	83 ec 08             	sub    $0x8,%esp
   119f0:	6a 00                	push   $0x0
   119f2:	68 a0 8e 20 00       	push   $0x208ea0
   119f7:	e8 6b fc ff ff       	call   11667 <sem_init>
   119fc:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.ready_list);
   119ff:	83 ec 0c             	sub    $0xc,%esp
   11a02:	68 44 0c 20 00       	push   $0x200c44
   11a07:	e8 e5 f8 ff ff       	call   112f1 <list_init>
   11a0c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   11a0f:	83 ec 0c             	sub    $0xc,%esp
   11a12:	68 5c 0c 20 00       	push   $0x200c5c
   11a17:	e8 d5 f8 ff ff       	call   112f1 <list_init>
   11a1c:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   11a1f:	83 ec 0c             	sub    $0xc,%esp
   11a22:	68 50 0c 20 00       	push   $0x200c50
   11a27:	e8 c5 f8 ff ff       	call   112f1 <list_init>
   11a2c:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = get_first_task();
   11a2f:	e8 ed 00 00 00       	call   11b21 <get_first_task>
   11a34:	a3 40 0c 20 00       	mov    %eax,0x200c40
}
   11a39:	90                   	nop
   11a3a:	c9                   	leave  
   11a3b:	c3                   	ret    

00011a3c <task1_func>:


void task1_func() {
   11a3c:	55                   	push   %ebp
   11a3d:	89 e5                	mov    %esp,%ebp
   11a3f:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11a42:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("-------------------------11111-----------------: %d", count--);
   11a49:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a4c:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a4f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11a52:	83 ec 08             	sub    $0x8,%esp
   11a55:	50                   	push   %eax
   11a56:	68 b8 20 01 00       	push   $0x120b8
   11a5b:	e8 28 fb ff ff       	call   11588 <klog>
   11a60:	83 c4 10             	add    $0x10,%esp
        sem_notify(&sem_test);
   11a63:	83 ec 0c             	sub    $0xc,%esp
   11a66:	68 a0 8e 20 00       	push   $0x208ea0
   11a6b:	e8 85 fc ff ff       	call   116f5 <sem_notify>
   11a70:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   11a73:	83 ec 0c             	sub    $0xc,%esp
   11a76:	68 e8 03 00 00       	push   $0x3e8
   11a7b:	e8 f3 02 00 00       	call   11d73 <sys_sleep>
   11a80:	83 c4 10             	add    $0x10,%esp
        klog("-------------------------11111-----------------: %d", count--);
   11a83:	eb c4                	jmp    11a49 <task1_func+0xd>

00011a85 <task3_func>:
    }
}


void task3_func() {
   11a85:	55                   	push   %ebp
   11a86:	89 e5                	mov    %esp,%ebp
   11a88:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11a8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        sem_wait(&sem_test);
   11a92:	83 ec 0c             	sub    $0xc,%esp
   11a95:	68 a0 8e 20 00       	push   $0x208ea0
   11a9a:	e8 eb fb ff ff       	call   1168a <sem_wait>
   11a9f:	83 c4 10             	add    $0x10,%esp
        klog("-------------------------33333-----------------: %d", count++);
   11aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11aa5:	8d 50 01             	lea    0x1(%eax),%edx
   11aa8:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11aab:	83 ec 08             	sub    $0x8,%esp
   11aae:	50                   	push   %eax
   11aaf:	68 ec 20 01 00       	push   $0x120ec
   11ab4:	e8 cf fa ff ff       	call   11588 <klog>
   11ab9:	83 c4 10             	add    $0x10,%esp
        sem_wait(&sem_test);
   11abc:	eb d4                	jmp    11a92 <task3_func+0xd>

00011abe <task1_func_init>:
    }
}


void task1_func_init() {
   11abe:	55                   	push   %ebp
   11abf:	89 e5                	mov    %esp,%ebp
   11ac1:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 
   11ac4:	ba e0 2d 20 00       	mov    $0x202de0,%edx
   11ac9:	b8 3c 1a 01 00       	mov    $0x11a3c,%eax
   11ace:	52                   	push   %edx
   11acf:	50                   	push   %eax
   11ad0:	68 20 21 01 00       	push   $0x12120
   11ad5:	68 68 0c 20 00       	push   $0x200c68
   11ada:	e8 f7 fd ff ff       	call   118d6 <task_init>
   11adf:	83 c4 10             	add    $0x10,%esp
        (uint32_t)task1_func, (uint32_t)&task1_stack[2048]);
    task_init(&task_manager.idle_task,  "idle  task", 
   11ae2:	ba e0 4d 20 00       	mov    $0x204de0,%edx
   11ae7:	b8 e2 17 01 00       	mov    $0x117e2,%eax
   11aec:	52                   	push   %edx
   11aed:	50                   	push   %eax
   11aee:	68 2b 21 01 00       	push   $0x1212b
   11af3:	68 20 0d 20 00       	push   $0x200d20
   11af8:	e8 d9 fd ff ff       	call   118d6 <task_init>
   11afd:	83 c4 10             	add    $0x10,%esp
        (uint32_t)idle_task_func, (uint32_t)&idle_task_stack[2048]);
    task_init(&task3,                   "test  task", 
   11b00:	ba e0 6d 20 00       	mov    $0x206de0,%edx
   11b05:	b8 85 1a 01 00       	mov    $0x11a85,%eax
   11b0a:	52                   	push   %edx
   11b0b:	50                   	push   %eax
   11b0c:	68 36 21 01 00       	push   $0x12136
   11b11:	68 e0 6d 20 00       	push   $0x206de0
   11b16:	e8 bb fd ff ff       	call   118d6 <task_init>
   11b1b:	83 c4 10             	add    $0x10,%esp
        (uint32_t)task3_func, (uint32_t)&task3_stack[2048]);

}
   11b1e:	90                   	nop
   11b1f:	c9                   	leave  
   11b20:	c3                   	ret    

00011b21 <get_first_task>:


task_t* get_first_task() {
   11b21:	55                   	push   %ebp
   11b22:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11b24:	b8 68 0c 20 00       	mov    $0x200c68,%eax
}
   11b29:	5d                   	pop    %ebp
   11b2a:	c3                   	ret    

00011b2b <task_current>:

task_t* task_current() {
   11b2b:	55                   	push   %ebp
   11b2c:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11b2e:	a1 40 0c 20 00       	mov    0x200c40,%eax
}
   11b33:	5d                   	pop    %ebp
   11b34:	c3                   	ret    

00011b35 <task_set_ready>:


// 将任务添加到就绪队列 尾部 设置状态为 ready
void task_set_ready(task_t* task) {
   11b35:	55                   	push   %ebp
   11b36:	89 e5                	mov    %esp,%ebp
   11b38:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {  // 空进程不应该加入就绪队列
   11b3b:	81 7d 08 20 0d 20 00 	cmpl   $0x200d20,0x8(%ebp)
   11b42:	74 23                	je     11b67 <task_set_ready+0x32>
        return;
    }

    list_insert_last(&task_manager.ready_list, &task->run_node);
   11b44:	8b 45 08             	mov    0x8(%ebp),%eax
   11b47:	83 c0 34             	add    $0x34,%eax
   11b4a:	83 ec 08             	sub    $0x8,%esp
   11b4d:	50                   	push   %eax
   11b4e:	68 44 0c 20 00       	push   $0x200c44
   11b53:	e8 1d f8 ff ff       	call   11375 <list_insert_last>
   11b58:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11b5b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b5e:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
   11b65:	eb 01                	jmp    11b68 <task_set_ready+0x33>
        return;
   11b67:	90                   	nop
}
   11b68:	c9                   	leave  
   11b69:	c3                   	ret    

00011b6a <task_set_block>:

// 将 特定 任务从就绪队列删除
void task_set_block(task_t* task) {
   11b6a:	55                   	push   %ebp
   11b6b:	89 e5                	mov    %esp,%ebp
   11b6d:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) {  // 空进程不应该删除
   11b70:	81 7d 08 20 0d 20 00 	cmpl   $0x200d20,0x8(%ebp)
   11b77:	74 19                	je     11b92 <task_set_block+0x28>
        return;
    }
    list_delete(&task_manager.ready_list, &task->run_node);
   11b79:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7c:	83 c0 34             	add    $0x34,%eax
   11b7f:	83 ec 08             	sub    $0x8,%esp
   11b82:	50                   	push   %eax
   11b83:	68 44 0c 20 00       	push   $0x200c44
   11b88:	e8 c5 f8 ff ff       	call   11452 <list_delete>
   11b8d:	83 c4 10             	add    $0x10,%esp
   11b90:	eb 01                	jmp    11b93 <task_set_block+0x29>
        return;
   11b92:	90                   	nop
    // list_delete_first(&task_manager.ready_list);
}
   11b93:	c9                   	leave  
   11b94:	c3                   	ret    

00011b95 <sys_sched_yield>:

// 主动放弃cpu执行
int  sys_sched_yield() {
   11b95:	55                   	push   %ebp
   11b96:	89 e5                	mov    %esp,%ebp
   11b98:	83 ec 18             	sub    $0x18,%esp

irq_state_t state = irq_enter_proection();   //--enter protection
   11b9b:	e8 91 f2 ff ff       	call   10e31 <irq_enter_proection>
   11ba0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(list_count(&task_manager.ready_list) > 1) {
   11ba3:	83 ec 0c             	sub    $0xc,%esp
   11ba6:	68 44 0c 20 00       	push   $0x200c44
   11bab:	e8 1d fc ff ff       	call   117cd <list_count>
   11bb0:	83 c4 10             	add    $0x10,%esp
   11bb3:	83 f8 01             	cmp    $0x1,%eax
   11bb6:	7e 29                	jle    11be1 <sys_sched_yield+0x4c>
        task_t* curr = task_current();
   11bb8:	e8 6e ff ff ff       	call   11b2b <task_current>
   11bbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   11bc0:	83 ec 0c             	sub    $0xc,%esp
   11bc3:	ff 75 f0             	pushl  -0x10(%ebp)
   11bc6:	e8 9f ff ff ff       	call   11b6a <task_set_block>
   11bcb:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   11bce:	83 ec 0c             	sub    $0xc,%esp
   11bd1:	ff 75 f0             	pushl  -0x10(%ebp)
   11bd4:	e8 5c ff ff ff       	call   11b35 <task_set_ready>
   11bd9:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11bdc:	e8 58 00 00 00       	call   11c39 <task_dispatch>
    }
irq_leave_proection(state);  //--leave protection
   11be1:	83 ec 0c             	sub    $0xc,%esp
   11be4:	ff 75 f4             	pushl  -0xc(%ebp)
   11be7:	e8 5d f2 ff ff       	call   10e49 <irq_leave_proection>
   11bec:	83 c4 10             	add    $0x10,%esp

    return 0;
   11bef:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11bf4:	c9                   	leave  
   11bf5:	c3                   	ret    

00011bf6 <task_next_run>:

// 从就绪队列中找到一第一个任务
task_t * task_next_run() {
   11bf6:	55                   	push   %ebp
   11bf7:	89 e5                	mov    %esp,%ebp
   11bf9:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0) {
   11bfc:	68 44 0c 20 00       	push   $0x200c44
   11c01:	e8 c7 fb ff ff       	call   117cd <list_count>
   11c06:	83 c4 04             	add    $0x4,%esp
   11c09:	85 c0                	test   %eax,%eax
   11c0b:	75 07                	jne    11c14 <task_next_run+0x1e>
        return &task_manager.idle_task;
   11c0d:	b8 20 0d 20 00       	mov    $0x200d20,%eax
   11c12:	eb 23                	jmp    11c37 <task_next_run+0x41>
    }

    list_node_t * task_node = list_first(&task_manager.ready_list);
   11c14:	68 44 0c 20 00       	push   $0x200c44
   11c19:	e8 ba fb ff ff       	call   117d8 <list_first>
   11c1e:	83 c4 04             	add    $0x4,%esp
   11c21:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11c24:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11c28:	74 08                	je     11c32 <task_next_run+0x3c>
   11c2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c2d:	83 e8 34             	sub    $0x34,%eax
   11c30:	eb 05                	jmp    11c37 <task_next_run+0x41>
   11c32:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c37:	c9                   	leave  
   11c38:	c3                   	ret    

00011c39 <task_dispatch>:

// 分配一个任务并从当前任务切换过去
void task_dispatch() {
   11c39:	55                   	push   %ebp
   11c3a:	89 e5                	mov    %esp,%ebp
   11c3c:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   11c3f:	e8 ed f1 ff ff       	call   10e31 <irq_enter_proection>
   11c44:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * to = task_next_run();
   11c47:	e8 aa ff ff ff       	call   11bf6 <task_next_run>
   11c4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task) {
   11c4f:	a1 40 0c 20 00       	mov    0x200c40,%eax
   11c54:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11c57:	74 2b                	je     11c84 <task_dispatch+0x4b>
        task_t * from = task_current();
   11c59:	e8 cd fe ff ff       	call   11b2b <task_current>
   11c5e:	89 45 ec             	mov    %eax,-0x14(%ebp)

        task_manager.curr_task = to;   // 设置将要切换的任务为“当前任务”
   11c61:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c64:	a3 40 0c 20 00       	mov    %eax,0x200c40
        to->state = TASK_RUNNING;      // 设置 task running
   11c69:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c6c:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

        task_switch_from_to(from, to);
   11c73:	83 ec 08             	sub    $0x8,%esp
   11c76:	ff 75 f0             	pushl  -0x10(%ebp)
   11c79:	ff 75 ec             	pushl  -0x14(%ebp)
   11c7c:	e8 6b fb ff ff       	call   117ec <task_switch_from_to>
   11c81:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_proection(state);  //--leave protection
   11c84:	83 ec 0c             	sub    $0xc,%esp
   11c87:	ff 75 f4             	pushl  -0xc(%ebp)
   11c8a:	e8 ba f1 ff ff       	call   10e49 <irq_leave_proection>
   11c8f:	83 c4 10             	add    $0x10,%esp
   
}
   11c92:	90                   	nop
   11c93:	c9                   	leave  
   11c94:	c3                   	ret    

00011c95 <task_time_tick>:

// 检查当前任务的时间片是否用完，若用完强制切换到下一任务
void task_time_tick() {
   11c95:	55                   	push   %ebp
   11c96:	89 e5                	mov    %esp,%ebp
   11c98:	83 ec 28             	sub    $0x28,%esp
    task_t* curr = task_current();
   11c9b:	e8 8b fe ff ff       	call   11b2b <task_current>
   11ca0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int slice = --curr->slice_ticks;
   11ca3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ca6:	8b 40 28             	mov    0x28(%eax),%eax
   11ca9:	8d 50 ff             	lea    -0x1(%eax),%edx
   11cac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11caf:	89 50 28             	mov    %edx,0x28(%eax)
   11cb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cb5:	8b 40 28             	mov    0x28(%eax),%eax
   11cb8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if( slice == 0 && &task_manager.ready_list.count > 0) {
   11cbb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11cbf:	75 2d                	jne    11cee <task_time_tick+0x59>
        curr->slice_ticks = curr->time_ticks;
   11cc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cc4:	8b 50 2c             	mov    0x2c(%eax),%edx
   11cc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cca:	89 50 28             	mov    %edx,0x28(%eax)

        task_set_block(curr);
   11ccd:	83 ec 0c             	sub    $0xc,%esp
   11cd0:	ff 75 f0             	pushl  -0x10(%ebp)
   11cd3:	e8 92 fe ff ff       	call   11b6a <task_set_block>
   11cd8:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   11cdb:	83 ec 0c             	sub    $0xc,%esp
   11cde:	ff 75 f0             	pushl  -0x10(%ebp)
   11ce1:	e8 4f fe ff ff       	call   11b35 <task_set_ready>
   11ce6:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11ce9:	e8 4b ff ff ff       	call   11c39 <task_dispatch>
    }

    list_node_t* sleep_lists_curr = list_first(&task_manager.sleep_list);
   11cee:	83 ec 0c             	sub    $0xc,%esp
   11cf1:	68 50 0c 20 00       	push   $0x200c50
   11cf6:	e8 dd fa ff ff       	call   117d8 <list_first>
   11cfb:	83 c4 10             	add    $0x10,%esp
   11cfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   11d01:	eb 62                	jmp    11d65 <task_time_tick+0xd0>
        list_node_t * next = list_node_next(sleep_lists_curr);
   11d03:	83 ec 0c             	sub    $0xc,%esp
   11d06:	ff 75 f4             	pushl  -0xc(%ebp)
   11d09:	e8 b4 fa ff ff       	call   117c2 <list_node_next>
   11d0e:	83 c4 10             	add    $0x10,%esp
   11d11:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_t* task = list_node_parent(sleep_lists_curr, task_t, run_node);
   11d14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11d18:	74 08                	je     11d22 <task_time_tick+0x8d>
   11d1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d1d:	83 e8 34             	sub    $0x34,%eax
   11d20:	eb 05                	jmp    11d27 <task_time_tick+0x92>
   11d22:	b8 00 00 00 00       	mov    $0x0,%eax
   11d27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        
        if(--task->sleep_ticks == 0) {
   11d2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d2d:	8b 40 30             	mov    0x30(%eax),%eax
   11d30:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d36:	89 50 30             	mov    %edx,0x30(%eax)
   11d39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d3c:	8b 40 30             	mov    0x30(%eax),%eax
   11d3f:	85 c0                	test   %eax,%eax
   11d41:	75 1c                	jne    11d5f <task_time_tick+0xca>
            task_set_wakeup(task);
   11d43:	83 ec 0c             	sub    $0xc,%esp
   11d46:	ff 75 e4             	pushl  -0x1c(%ebp)
   11d49:	e8 b8 00 00 00       	call   11e06 <task_set_wakeup>
   11d4e:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11d51:	83 ec 0c             	sub    $0xc,%esp
   11d54:	ff 75 e4             	pushl  -0x1c(%ebp)
   11d57:	e8 d9 fd ff ff       	call   11b35 <task_set_ready>
   11d5c:	83 c4 10             	add    $0x10,%esp
        }
        sleep_lists_curr = next;
   11d5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   11d65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11d69:	75 98                	jne    11d03 <task_time_tick+0x6e>
    }

    task_dispatch();
   11d6b:	e8 c9 fe ff ff       	call   11c39 <task_dispatch>
}
   11d70:	90                   	nop
   11d71:	c9                   	leave  
   11d72:	c3                   	ret    

00011d73 <sys_sleep>:



void sys_sleep(uint32_t ms) {
   11d73:	55                   	push   %ebp
   11d74:	89 e5                	mov    %esp,%ebp
   11d76:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   11d79:	e8 b3 f0 ff ff       	call   10e31 <irq_enter_proection>
   11d7e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   11d81:	e8 a5 fd ff ff       	call   11b2b <task_current>
   11d86:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_block(curr);
   11d89:	83 ec 0c             	sub    $0xc,%esp
   11d8c:	ff 75 f0             	pushl  -0x10(%ebp)
   11d8f:	e8 d6 fd ff ff       	call   11b6a <task_set_block>
   11d94:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(curr, ms / OS_TICK_MS);
   11d97:	8b 45 08             	mov    0x8(%ebp),%eax
   11d9a:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11d9f:	f7 e2                	mul    %edx
   11da1:	89 d0                	mov    %edx,%eax
   11da3:	c1 e8 03             	shr    $0x3,%eax
   11da6:	83 ec 08             	sub    $0x8,%esp
   11da9:	50                   	push   %eax
   11daa:	ff 75 f0             	pushl  -0x10(%ebp)
   11dad:	e8 19 00 00 00       	call   11dcb <task_set_sleep>
   11db2:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   11db5:	e8 7f fe ff ff       	call   11c39 <task_dispatch>

    irq_leave_proection(state);
   11dba:	83 ec 0c             	sub    $0xc,%esp
   11dbd:	ff 75 f4             	pushl  -0xc(%ebp)
   11dc0:	e8 84 f0 ff ff       	call   10e49 <irq_leave_proection>
   11dc5:	83 c4 10             	add    $0x10,%esp
}
   11dc8:	90                   	nop
   11dc9:	c9                   	leave  
   11dca:	c3                   	ret    

00011dcb <task_set_sleep>:

void task_set_sleep(task_t* task, uint32_t ticks) {
   11dcb:	55                   	push   %ebp
   11dcc:	89 e5                	mov    %esp,%ebp
   11dce:	83 ec 08             	sub    $0x8,%esp
    if(ticks <= 0) return;
   11dd1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11dd5:	74 2c                	je     11e03 <task_set_sleep+0x38>
    task->sleep_ticks = ticks;
   11dd7:	8b 55 0c             	mov    0xc(%ebp),%edx
   11dda:	8b 45 08             	mov    0x8(%ebp),%eax
   11ddd:	89 50 30             	mov    %edx,0x30(%eax)
    task->state = TASK_SLEEP;
   11de0:	8b 45 08             	mov    0x8(%ebp),%eax
   11de3:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
    list_insert_last(&task_manager.sleep_list, 
   11dea:	8b 45 08             	mov    0x8(%ebp),%eax
   11ded:	83 c0 34             	add    $0x34,%eax
   11df0:	83 ec 08             	sub    $0x8,%esp
   11df3:	50                   	push   %eax
   11df4:	68 50 0c 20 00       	push   $0x200c50
   11df9:	e8 77 f5 ff ff       	call   11375 <list_insert_last>
   11dfe:	83 c4 10             	add    $0x10,%esp
   11e01:	eb 01                	jmp    11e04 <task_set_sleep+0x39>
    if(ticks <= 0) return;
   11e03:	90                   	nop
        &task->run_node);
}
   11e04:	c9                   	leave  
   11e05:	c3                   	ret    

00011e06 <task_set_wakeup>:

void task_set_wakeup(task_t* task) {
   11e06:	55                   	push   %ebp
   11e07:	89 e5                	mov    %esp,%ebp
   11e09:	83 ec 08             	sub    $0x8,%esp
    list_delete(&task_manager.sleep_list, 
   11e0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e0f:	83 c0 34             	add    $0x34,%eax
   11e12:	83 ec 08             	sub    $0x8,%esp
   11e15:	50                   	push   %eax
   11e16:	68 50 0c 20 00       	push   $0x200c50
   11e1b:	e8 32 f6 ff ff       	call   11452 <list_delete>
   11e20:	83 c4 10             	add    $0x10,%esp
        &task->run_node);
   11e23:	90                   	nop
   11e24:	c9                   	leave  
   11e25:	c3                   	ret    
