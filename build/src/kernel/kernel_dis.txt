
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002f99 memsz 0x00002f99 flags r-x
    LOAD off    0x00004000 vaddr 0x00013000 paddr 0x00013000 align 2**12
         filesz 0x00000060 memsz 0x0000a1a0 flags rw-
    LOAD off    0x00005000 vaddr 0x80000000 paddr 0x0001d1a0 align 2**12
         filesz 0x00000043 memsz 0x00000043 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b48  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000451  00012b48  00012b48  00003b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000060  00013000  00013000  00004000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000091a0  00014000  00014000  00004060  2**12
                  ALLOC
  4 .first_task   00000043  80000000  0001d1a0  00005000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001356  00000000  00000000  00005043  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004315  00000000  00000000  00006399  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120c  00000000  00000000  0000a6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000001e0  00000000  00000000  0000b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f54  00000000  00000000  0000baa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000c9f4  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001284  00000000  00000000  0000ca08  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012b48 l    d  .rodata	00000000 .rodata
00013000 l    d  .data	00000000 .data
00014000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 mtime.c
000102bb l     F .text	0000001f outb
00014000 l     O .bss	00000004 sys_tick
00010302 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 gdt.c
0001037b l     F .text	00000028 lgdt
00014020 l     O .bss	00000800 g_gdt_table
00014820 l     O .bss	00000014 g_mutex
00000000 l    df *ABS*	00000000 init.c
00010557 l     F .text	0000000b list_count
00010562 l     F .text	0000000a list_first
0001056c l     F .text	0000000b list_last
00000000 l    df *ABS*	00000000 irq.c
000107fe l     F .text	00000007 hlt
00010805 l     F .text	00000007 cli
0001080c l     F .text	00000007 sti
00010813 l     F .text	00000028 lidt
0001083b l     F .text	0000001d inb
00010858 l     F .text	0000001f outb
00010877 l     F .text	00000011 read_cr2
00010888 l     F .text	00000010 read_eflags
00010898 l     F .text	0000000b write_eflags
00014840 l     O .bss	00000400 idt_table
000108a3 l     F .text	00000030 default_handler
00010c24 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00013000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 list.c
00011681 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0001187a l     F .text	0000001d inb
00011897 l     F .text	0000001f outb
00014c40 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 mem.c
00011a31 l     F .text	0000000d down2
00011a3e l     F .text	00000017 up2
00011a55 l     F .text	0000000c write_cr3
00011a61 l     F .text	00000011 mmu_set_page_dir
00011a72 l     F .text	00000014 pde_index
00011a86 l     F .text	00000027 pde_paddr
00011aad l     F .text	00000010 pte_index
00015000 l     O .bss	00000028 g_paddr_alloc
00016000 l     O .bss	00001000 g_kernel_page_dir
00011abd l     F .text	00000058 addr_alloc_init
00011b15 l     F .text	00000067 addr_alloc_page
00011b7c l     F .text	00000062 addr_free_page
00011c8b l     F .text	00000066 show_mem_info
00011cf1 l     F .text	00000037 total_mem_size
00013020 l     O .data	00000040 kernel_map.2274
00000000 l    df *ABS*	00000000 mutex.c
00012177 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00012301 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 task.c
00012445 l     F .text	00000007 hlt
0001244c l     F .text	0000000c write_cr3
00012458 l     F .text	0000001a far_jump
00012472 l     F .text	00000017 write_tr
00012489 l     F .text	0000001b list_node_init
000124a4 l     F .text	0000000b list_node_next
000124af l     F .text	0000000b list_count
000124ba l     F .text	0000000a list_first
000124c4 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	000001a0 g_task_manager
000171a0 l     O .bss	00002000 idle_task_stack
000191a0 l     O .bss	00002000 first_task_stack
000124d5 l     F .text	0000000a idle_task_func
000124f9 l     F .text	00000121 tss_init
00000000 l    df *ABS*	00000000 first_task.c
00011021 g     F .text	0000003a bitmap_get_bit
0001284d g     F .text	0000000a task_current
00010f8f g     F .text	00000018 irq_enter_proection
000117f5 g     F .text	00000085 list_delete
00010f59 g     F .text	0000000b irq_enable_global
00011718 g     F .text	00000064 list_insert_last
00012857 g     F .text	00000035 task_set_ready
0001105b g     F .text	0000001b bitmap_is_set
0001095f g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
00010b91 g     F .text	0000001c handle_virtual_exception
000118b6 g     F .text	0000009d log_init
000107cc g     F .text	00000032 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
0001051e g     F .text	00000039 gdt_free_sel
00013000 g       .data	00000000 s_data
000112b4 g     F .text	0000007a k_strncmp
00010a07 g     F .text	0000001c handle_segment_not_present
00010e3c g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
0001090b g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
00011dd8 g     F .text	00000080 memory_create_map
000101b3 g       .text	00000000 exception_handler_general_protection
0001241c g     F .text	00000029 sem_count
80000010 g     F .first_task	00000028 first_task_main
00011076 g     F .text	000000d4 bitmap_set_bit
00010a5b g     F .text	000000c6 handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010f64 g     F .text	0000002b pic_send_eoi
00010000 g       .text	00000000 s_text
00011fe2 g     F .text	00000085 memory_create_uvm
0001232f g     F .text	0000006b sem_wait
00012150 g     F .text	00000027 memory_alloc_page_for
000111fd g     F .text	00000047 k_strcpy
00011244 g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00010429 g     F .text	00000080 gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
0001b1a0 g     O .bss	00002000 stack
00012a95 g     F .text	00000058 sys_sleep
000105e7 g     F .text	00000163 list_test
0001d1a0 g       *ABS*	00000000 s_first_task
00010997 g     F .text	0000001c handle_invalid_opcode
0001132e g     F .text	0000003b k_strlen
000113f9 g     F .text	00000064 k_memcmp
00012067 g     F .text	000000e9 memory_alloc_for_page_dir
000100e2 g       .text	00000000 exception_handler_bound_range
0001239a g     F .text	00000082 sem_notify
00012843 g     F .text	0000000a get_first_task
0001015c g       .text	00000000 exception_handler_invalid_tss
00011534 g     F .text	0000014d k_vsprint
000116b9 g     F .text	0000005f list_insert_first
00012b28 g     F .text	00000020 task_set_wakeup
000127a8 g     F .text	0000009b first_task_init
00010047 g       .text	00000000 exception_handler_divider
00011bde g     F .text	000000ad some_test
00010b21 g     F .text	0000001c handle_fpu_error
00010f4e g     F .text	0000000b irq_disable_global
000128b7 g     F .text	00000061 sys_sched_yield
0001d1e3 g       *ABS*	00000000 mem_free_start
000108d3 g     F .text	0000001c handle_unknown
00010577 g     F .text	0000002b kernel_init
000113b8 g     F .text	00000041 k_memset
0001230c g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
000105a2 g     F .text	00000045 show_list
0001d1a0 g       .bss	00000000 e_data
000121b0 g     F .text	00000094 mutex_lock
00010229 g       .text	00000000 exception_handler_machine_check
00000000 g       *ABS*	00000000 kernel_base
0001d1e3 g       *ABS*	00000000 e_first_task
00012aed g     F .text	0000003b task_set_sleep
00010bf4 g     F .text	00000030 irq_install
00010b75 g     F .text	0000001c handle_smd_exception
00012182 g     F .text	0000002e mutex_init
00010ec7 g     F .text	00000087 irq_disable
00010a3f g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
00010fa7 g     F .text	00000011 irq_leave_proection
00010fb8 g     F .text	00000016 bitmap_byte_count
00010b3d g     F .text	0000001c handle_alignment_check
0001295b g     F .text	0000005c task_dispatch
000107aa g     F .text	00000022 move_to_first_task
00010b59 g     F .text	0000001c handle_machine_check
00012918 g     F .text	00000043 task_next_run
00011e58 g     F .text	0000009b create_kernel_table
00011694 g     F .text	00000025 list_init
00010a23 g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
0001288c g     F .text	0000002b task_set_block
0001097b g     F .text	0000001c handle_bound_range
000101ed g       .text	00000000 exception_handler_fpu_error
000124df g     F .text	0000001a task_switch_from_to
00010cb7 g     F .text	00000185 irq_init
0001145d g     F .text	000000d7 k_itoa
00012244 g     F .text	000000bd mutex_unlock
000109cf g     F .text	0000001c handle_double_fault
000102da g     F .text	00000028 handle_time
000103a3 g     F .text	00000086 segment_desc_set
0001074a g     F .text	00000060 offset_test
00012f99 g       .rodata	00000000 e_text
00010943 g     F .text	0000001c handle_breakpoint
00010fce g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
0001114a g     F .text	000000b3 bitmap_alloc_nbits
000126fa g     F .text	000000ae task_manager_init
00010066 g       .text	00000000 exception_handler_Debug
000129b7 g     F .text	000000de task_time_tick
00011ef3 g     F .text	000000ef memory_init
000109b3 g     F .text	0000001c handle_device_unavailable
000108ef g     F .text	0000001c handle_divider
00011369 g     F .text	0000004f k_memcpy
0001261a g     F .text	000000e0 task_init
000104a9 g     F .text	00000075 gdt_alloc_desc
0001177c g     F .text	00000079 list_delete_first
00010bad g     F .text	00000047 gate_desc_set
00011953 g     F .text	000000de klog
00010927 g     F .text	0000001c handle_NMI
000109eb g     F .text	0000001c handle_invalid_tss
00011d28 g     F .text	000000b0 find_pte
00010363 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 6e 05 00 00       	call   10577 <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc a0 d1 01 00       	mov    $0x1d1a0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 a4 07 00 00       	jmp    107cc <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 9a 08 00 00       	call   108d3 <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 97 08 00 00       	call   108ef <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 94 08 00 00       	call   1090b <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 91 08 00 00       	call   10927 <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 8e 08 00 00       	call   10943 <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 8b 08 00 00       	call   1095f <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 88 08 00 00       	call   1097b <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 85 08 00 00       	call   10997 <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 82 08 00 00       	call   109b3 <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 81 08 00 00       	call   109cf <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 80 08 00 00       	call   109eb <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 7f 08 00 00       	call   10a07 <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 7e 08 00 00       	call   10a23 <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 7d 08 00 00       	call   10a3f <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 7c 08 00 00       	call   10a5b <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 23 09 00 00       	call   10b21 <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 22 09 00 00       	call   10b3d <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 1f 09 00 00       	call   10b59 <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 1c 09 00 00       	call   10b75 <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 19 09 00 00       	call   10b91 <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 43 00 00 00       	call   102da <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch

simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp
    
    sti
   102b9:	fb                   	sti    
   102ba:	c3                   	ret    

000102bb <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   102bb:	55                   	push   %ebp
   102bc:	89 e5                	mov    %esp,%ebp
   102be:	83 ec 08             	sub    $0x8,%esp
   102c1:	8b 55 08             	mov    0x8(%ebp),%edx
   102c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   102cb:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   102ce:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   102d2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   102d6:	ee                   	out    %al,(%dx)
}
   102d7:	90                   	nop
   102d8:	c9                   	leave  
   102d9:	c3                   	ret    

000102da <handle_time>:


static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   102da:	55                   	push   %ebp
   102db:	89 e5                	mov    %esp,%ebp
   102dd:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   102e0:	a1 00 40 01 00       	mov    0x14000,%eax
   102e5:	83 c0 01             	add    $0x1,%eax
   102e8:	a3 00 40 01 00       	mov    %eax,0x14000
    pic_send_eoi(IRQ0_TIMER);
   102ed:	83 ec 0c             	sub    $0xc,%esp
   102f0:	6a 20                	push   $0x20
   102f2:	e8 6d 0c 00 00       	call   10f64 <pic_send_eoi>
   102f7:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   102fa:	e8 b8 26 00 00       	call   129b7 <task_time_tick>
} 
   102ff:	90                   	nop
   10300:	c9                   	leave  
   10301:	c3                   	ret    

00010302 <pit_init>:

static void pit_init (void) {
   10302:	55                   	push   %ebp
   10303:	89 e5                	mov    %esp,%ebp
   10305:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10308:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1030f:	6a 36                	push   $0x36
   10311:	6a 43                	push   $0x43
   10313:	e8 a3 ff ff ff       	call   102bb <outb>
   10318:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   1031b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1031e:	0f b6 c0             	movzbl %al,%eax
   10321:	50                   	push   %eax
   10322:	6a 40                	push   $0x40
   10324:	e8 92 ff ff ff       	call   102bb <outb>
   10329:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   1032c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1032f:	c1 e8 08             	shr    $0x8,%eax
   10332:	0f b6 c0             	movzbl %al,%eax
   10335:	50                   	push   %eax
   10336:	6a 40                	push   $0x40
   10338:	e8 7e ff ff ff       	call   102bb <outb>
   1033d:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   10340:	b8 86 02 01 00       	mov    $0x10286,%eax
   10345:	83 ec 08             	sub    $0x8,%esp
   10348:	50                   	push   %eax
   10349:	6a 20                	push   $0x20
   1034b:	e8 a4 08 00 00       	call   10bf4 <irq_install>
   10350:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10353:	83 ec 0c             	sub    $0xc,%esp
   10356:	6a 20                	push   $0x20
   10358:	e8 df 0a 00 00       	call   10e3c <irq_enable>
   1035d:	83 c4 10             	add    $0x10,%esp
}
   10360:	90                   	nop
   10361:	c9                   	leave  
   10362:	c3                   	ret    

00010363 <time_init>:

void time_init() {
   10363:	55                   	push   %ebp
   10364:	89 e5                	mov    %esp,%ebp
   10366:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10369:	c7 05 00 40 01 00 00 	movl   $0x0,0x14000
   10370:	00 00 00 

    pit_init();
   10373:	e8 8a ff ff ff       	call   10302 <pit_init>
   10378:	90                   	nop
   10379:	c9                   	leave  
   1037a:	c3                   	ret    

0001037b <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   1037b:	55                   	push   %ebp
   1037c:	89 e5                	mov    %esp,%ebp
   1037e:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   10381:	8b 45 08             	mov    0x8(%ebp),%eax
   10384:	c1 e8 10             	shr    $0x10,%eax
   10387:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   1038b:	8b 45 08             	mov    0x8(%ebp),%eax
   1038e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   10392:	8b 45 0c             	mov    0xc(%ebp),%eax
   10395:	83 e8 01             	sub    $0x1,%eax
   10398:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1039c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   103a0:	90                   	nop
   103a1:	c9                   	leave  
   103a2:	c3                   	ret    

000103a3 <segment_desc_set>:


static segment_desc_t g_gdt_table[GDT_TABLE_SIZE];
static mutex_t g_mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   103a3:	55                   	push   %ebp
   103a4:	89 e5                	mov    %esp,%ebp
   103a6:	83 ec 14             	sub    $0x14,%esp
   103a9:	8b 45 14             	mov    0x14(%ebp),%eax
   103ac:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = g_gdt_table + (selector >> 3);
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	c1 f8 03             	sar    $0x3,%eax
   103b6:	c1 e0 03             	shl    $0x3,%eax
   103b9:	05 20 40 01 00       	add    $0x14020,%eax
   103be:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   103c1:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   103c8:	76 0f                	jbe    103d9 <segment_desc_set+0x36>
		attr |= 0x8000;
   103ca:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   103d0:	8b 45 10             	mov    0x10(%ebp),%eax
   103d3:	c1 e8 0c             	shr    $0xc,%eax
   103d6:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   103d9:	8b 45 10             	mov    0x10(%ebp),%eax
   103dc:	89 c2                	mov    %eax,%edx
   103de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103e1:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   103e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   103e7:	89 c2                	mov    %eax,%edx
   103e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103ec:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   103f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   103f3:	c1 e8 10             	shr    $0x10,%eax
   103f6:	89 c2                	mov    %eax,%edx
   103f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103fb:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   103fe:	8b 45 10             	mov    0x10(%ebp),%eax
   10401:	c1 e8 10             	shr    $0x10,%eax
   10404:	c1 e0 08             	shl    $0x8,%eax
   10407:	66 25 00 0f          	and    $0xf00,%ax
   1040b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1040f:	89 c2                	mov    %eax,%edx
   10411:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10414:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10418:	8b 45 0c             	mov    0xc(%ebp),%eax
   1041b:	c1 e8 18             	shr    $0x18,%eax
   1041e:	89 c2                	mov    %eax,%edx
   10420:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10423:	88 50 07             	mov    %dl,0x7(%eax)
}
   10426:	90                   	nop
   10427:	c9                   	leave  
   10428:	c3                   	ret    

00010429 <gdt_init>:

void gdt_init() {
   10429:	55                   	push   %ebp
   1042a:	89 e5                	mov    %esp,%ebp
   1042c:	83 ec 18             	sub    $0x18,%esp
    mutex_init(&g_mutex);
   1042f:	83 ec 0c             	sub    $0xc,%esp
   10432:	68 20 48 01 00       	push   $0x14820
   10437:	e8 46 1d 00 00       	call   12182 <mutex_init>
   1043c:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1043f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10446:	eb 19                	jmp    10461 <gdt_init+0x38>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10448:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1044b:	c1 e0 03             	shl    $0x3,%eax
   1044e:	6a 00                	push   $0x0
   10450:	6a 00                	push   $0x0
   10452:	6a 00                	push   $0x0
   10454:	50                   	push   %eax
   10455:	e8 49 ff ff ff       	call   103a3 <segment_desc_set>
   1045a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1045d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10461:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10468:	7e de                	jle    10448 <gdt_init+0x1f>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1046a:	68 92 c0 00 00       	push   $0xc092
   1046f:	6a ff                	push   $0xffffffff
   10471:	6a 00                	push   $0x0
   10473:	6a 10                	push   $0x10
   10475:	e8 29 ff ff ff       	call   103a3 <segment_desc_set>
   1047a:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1047d:	68 9a c0 00 00       	push   $0xc09a
   10482:	6a ff                	push   $0xffffffff
   10484:	6a 00                	push   $0x0
   10486:	6a 08                	push   $0x8
   10488:	e8 16 ff ff ff       	call   103a3 <segment_desc_set>
   1048d:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)g_gdt_table, sizeof(g_gdt_table));
   10490:	b8 20 40 01 00       	mov    $0x14020,%eax
   10495:	83 ec 08             	sub    $0x8,%esp
   10498:	68 00 08 00 00       	push   $0x800
   1049d:	50                   	push   %eax
   1049e:	e8 d8 fe ff ff       	call   1037b <lgdt>
   104a3:	83 c4 10             	add    $0x10,%esp

}
   104a6:	90                   	nop
   104a7:	c9                   	leave  
   104a8:	c3                   	ret    

000104a9 <gdt_alloc_desc>:

int  gdt_alloc_desc() {
   104a9:	55                   	push   %ebp
   104aa:	89 e5                	mov    %esp,%ebp
   104ac:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&g_mutex);
   104af:	83 ec 0c             	sub    $0xc,%esp
   104b2:	68 20 48 01 00       	push   $0x14820
   104b7:	e8 f4 1c 00 00       	call   121b0 <mutex_lock>
   104bc:	83 c4 10             	add    $0x10,%esp
    int i = 1;
   104bf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    for(; i < GDT_TABLE_SIZE; i++) {
   104c6:	eb 36                	jmp    104fe <gdt_alloc_desc+0x55>
        segment_desc_t* desc = g_gdt_table + i;
   104c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104cb:	c1 e0 03             	shl    $0x3,%eax
   104ce:	05 20 40 01 00       	add    $0x14020,%eax
   104d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(desc->attr == 0) {
   104d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   104d9:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104dd:	66 85 c0             	test   %ax,%ax
   104e0:	75 18                	jne    104fa <gdt_alloc_desc+0x51>
            mutex_unlock(&g_mutex);
   104e2:	83 ec 0c             	sub    $0xc,%esp
   104e5:	68 20 48 01 00       	push   $0x14820
   104ea:	e8 55 1d 00 00       	call   12244 <mutex_unlock>
   104ef:	83 c4 10             	add    $0x10,%esp
            return ( i * sizeof(segment_desc_t) );
   104f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104f5:	c1 e0 03             	shl    $0x3,%eax
   104f8:	eb 22                	jmp    1051c <gdt_alloc_desc+0x73>
    for(; i < GDT_TABLE_SIZE; i++) {
   104fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104fe:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10505:	7e c1                	jle    104c8 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&g_mutex);
   10507:	83 ec 0c             	sub    $0xc,%esp
   1050a:	68 20 48 01 00       	push   $0x14820
   1050f:	e8 30 1d 00 00       	call   12244 <mutex_unlock>
   10514:	83 c4 10             	add    $0x10,%esp
    return -1;
   10517:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1051c:	c9                   	leave  
   1051d:	c3                   	ret    

0001051e <gdt_free_sel>:

void gdt_free_sel(int sel) {
   1051e:	55                   	push   %ebp
   1051f:	89 e5                	mov    %esp,%ebp
   10521:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&g_mutex);
   10524:	83 ec 0c             	sub    $0xc,%esp
   10527:	68 20 48 01 00       	push   $0x14820
   1052c:	e8 7f 1c 00 00       	call   121b0 <mutex_lock>
   10531:	83 c4 10             	add    $0x10,%esp
    g_gdt_table[sel/sizeof(segment_desc_t)].attr = 0;
   10534:	8b 45 08             	mov    0x8(%ebp),%eax
   10537:	c1 e8 03             	shr    $0x3,%eax
   1053a:	66 c7 04 c5 25 40 01 	movw   $0x0,0x14025(,%eax,8)
   10541:	00 00 00 
    mutex_unlock(&g_mutex);
   10544:	83 ec 0c             	sub    $0xc,%esp
   10547:	68 20 48 01 00       	push   $0x14820
   1054c:	e8 f3 1c 00 00       	call   12244 <mutex_unlock>
   10551:	83 c4 10             	add    $0x10,%esp
}
   10554:	90                   	nop
   10555:	c9                   	leave  
   10556:	c3                   	ret    

00010557 <list_count>:

static inline int list_is_empty (list_t* list) {
    return list->count == 0;
}

static inline int list_count (list_t* list) {
   10557:	55                   	push   %ebp
   10558:	89 e5                	mov    %esp,%ebp
    return list->count;
   1055a:	8b 45 08             	mov    0x8(%ebp),%eax
   1055d:	8b 40 08             	mov    0x8(%eax),%eax
}
   10560:	5d                   	pop    %ebp
   10561:	c3                   	ret    

00010562 <list_first>:

static inline list_node_t* list_first (list_t* list) {
   10562:	55                   	push   %ebp
   10563:	89 e5                	mov    %esp,%ebp
    return list->first;
   10565:	8b 45 08             	mov    0x8(%ebp),%eax
   10568:	8b 00                	mov    (%eax),%eax
}
   1056a:	5d                   	pop    %ebp
   1056b:	c3                   	ret    

0001056c <list_last>:

static inline list_node_t* list_last (list_t* list) {
   1056c:	55                   	push   %ebp
   1056d:	89 e5                	mov    %esp,%ebp
    return list->last;
   1056f:	8b 45 08             	mov    0x8(%ebp),%eax
   10572:	8b 40 04             	mov    0x4(%eax),%eax
}
   10575:	5d                   	pop    %ebp
   10576:	c3                   	ret    

00010577 <kernel_init>:

// void test_mem_page() {}
// *(uint8_t*)test_mem_page = 0x12;
// *(uint8_t*)test_mem_page = 0x34;

void kernel_init (boot_info_t * boot_info) {
   10577:	55                   	push   %ebp
   10578:	89 e5                	mov    %esp,%ebp
   1057a:	83 ec 08             	sub    $0x8,%esp
    log_init();
   1057d:	e8 34 13 00 00       	call   118b6 <log_init>
    gdt_init();
   10582:	e8 a2 fe ff ff       	call   10429 <gdt_init>
    memory_init(boot_info);
   10587:	83 ec 0c             	sub    $0xc,%esp
   1058a:	ff 75 08             	pushl  0x8(%ebp)
   1058d:	e8 61 19 00 00       	call   11ef3 <memory_init>
   10592:	83 c4 10             	add    $0x10,%esp
    irq_init();
   10595:	e8 1d 07 00 00       	call   10cb7 <irq_init>
    time_init();
   1059a:	e8 c4 fd ff ff       	call   10363 <time_init>
}
   1059f:	90                   	nop
   105a0:	c9                   	leave  
   105a1:	c3                   	ret    

000105a2 <show_list>:


void show_list(list_t list) {
   105a2:	55                   	push   %ebp
   105a3:	89 e5                	mov    %esp,%ebp
   105a5:	56                   	push   %esi
   105a6:	53                   	push   %ebx
    klog("list: first=0x%x, last=0x%x, count=%d",
   105a7:	8d 45 08             	lea    0x8(%ebp),%eax
   105aa:	50                   	push   %eax
   105ab:	e8 a7 ff ff ff       	call   10557 <list_count>
   105b0:	83 c4 04             	add    $0x4,%esp
   105b3:	89 c6                	mov    %eax,%esi
   105b5:	8d 45 08             	lea    0x8(%ebp),%eax
   105b8:	50                   	push   %eax
   105b9:	e8 ae ff ff ff       	call   1056c <list_last>
   105be:	83 c4 04             	add    $0x4,%esp
   105c1:	89 c3                	mov    %eax,%ebx
   105c3:	8d 45 08             	lea    0x8(%ebp),%eax
   105c6:	50                   	push   %eax
   105c7:	e8 96 ff ff ff       	call   10562 <list_first>
   105cc:	83 c4 04             	add    $0x4,%esp
   105cf:	56                   	push   %esi
   105d0:	53                   	push   %ebx
   105d1:	50                   	push   %eax
   105d2:	68 48 2b 01 00       	push   $0x12b48
   105d7:	e8 77 13 00 00       	call   11953 <klog>
   105dc:	83 c4 10             	add    $0x10,%esp
         list_first(&list), list_last(&list), list_count(&list) );
}
   105df:	90                   	nop
   105e0:	8d 65 f8             	lea    -0x8(%ebp),%esp
   105e3:	5b                   	pop    %ebx
   105e4:	5e                   	pop    %esi
   105e5:	5d                   	pop    %ebp
   105e6:	c3                   	ret    

000105e7 <list_test>:

void list_test() {
   105e7:	55                   	push   %ebp
   105e8:	89 e5                	mov    %esp,%ebp
   105ea:	83 ec 58             	sub    $0x58,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   105ed:	83 ec 0c             	sub    $0xc,%esp
   105f0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   105f3:	50                   	push   %eax
   105f4:	e8 9b 10 00 00       	call   11694 <list_init>
   105f9:	83 c4 10             	add    $0x10,%esp

    show_list(list);
   105fc:	83 ec 04             	sub    $0x4,%esp
   105ff:	ff 75 dc             	pushl  -0x24(%ebp)
   10602:	ff 75 d8             	pushl  -0x28(%ebp)
   10605:	ff 75 d4             	pushl  -0x2c(%ebp)
   10608:	e8 95 ff ff ff       	call   105a2 <show_list>
   1060d:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10610:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10617:	eb 3f                	jmp    10658 <list_test+0x71>
        list_node_t * node = nodes + i;
   10619:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1061c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   10623:	8d 45 ac             	lea    -0x54(%ebp),%eax
   10626:	01 d0                	add    %edx,%eax
   10628:	89 45 e0             	mov    %eax,-0x20(%ebp)
        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   1062b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1062e:	83 ec 04             	sub    $0x4,%esp
   10631:	50                   	push   %eax
   10632:	ff 75 f4             	pushl  -0xc(%ebp)
   10635:	68 70 2b 01 00       	push   $0x12b70
   1063a:	e8 14 13 00 00       	call   11953 <klog>
   1063f:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   10642:	83 ec 08             	sub    $0x8,%esp
   10645:	ff 75 e0             	pushl  -0x20(%ebp)
   10648:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   1064b:	50                   	push   %eax
   1064c:	e8 68 10 00 00       	call   116b9 <list_insert_first>
   10651:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10654:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10658:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   1065c:	7e bb                	jle    10619 <list_test+0x32>
    }
    show_list(list);
   1065e:	83 ec 04             	sub    $0x4,%esp
   10661:	ff 75 dc             	pushl  -0x24(%ebp)
   10664:	ff 75 d8             	pushl  -0x28(%ebp)
   10667:	ff 75 d4             	pushl  -0x2c(%ebp)
   1066a:	e8 33 ff ff ff       	call   105a2 <show_list>
   1066f:	83 c4 10             	add    $0x10,%esp

    list_init(&list);
   10672:	83 ec 0c             	sub    $0xc,%esp
   10675:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10678:	50                   	push   %eax
   10679:	e8 16 10 00 00       	call   11694 <list_init>
   1067e:	83 c4 10             	add    $0x10,%esp
    show_list(list);
   10681:	83 ec 04             	sub    $0x4,%esp
   10684:	ff 75 dc             	pushl  -0x24(%ebp)
   10687:	ff 75 d8             	pushl  -0x28(%ebp)
   1068a:	ff 75 d4             	pushl  -0x2c(%ebp)
   1068d:	e8 10 ff ff ff       	call   105a2 <show_list>
   10692:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10695:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1069c:	eb 3f                	jmp    106dd <list_test+0xf6>
        list_node_t * node = nodes + i;
   1069e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   106a8:	8d 45 ac             	lea    -0x54(%ebp),%eax
   106ab:	01 d0                	add    %edx,%eax
   106ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   106b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106b3:	83 ec 04             	sub    $0x4,%esp
   106b6:	50                   	push   %eax
   106b7:	ff 75 f0             	pushl  -0x10(%ebp)
   106ba:	68 70 2b 01 00       	push   $0x12b70
   106bf:	e8 8f 12 00 00       	call   11953 <klog>
   106c4:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   106c7:	83 ec 08             	sub    $0x8,%esp
   106ca:	ff 75 e4             	pushl  -0x1c(%ebp)
   106cd:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   106d0:	50                   	push   %eax
   106d1:	e8 42 10 00 00       	call   11718 <list_insert_last>
   106d6:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   106d9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   106dd:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   106e1:	7e bb                	jle    1069e <list_test+0xb7>
    }
    show_list(list);
   106e3:	83 ec 04             	sub    $0x4,%esp
   106e6:	ff 75 dc             	pushl  -0x24(%ebp)
   106e9:	ff 75 d8             	pushl  -0x28(%ebp)
   106ec:	ff 75 d4             	pushl  -0x2c(%ebp)
   106ef:	e8 ae fe ff ff       	call   105a2 <show_list>
   106f4:	83 c4 10             	add    $0x10,%esp
    
    for(int i=0; i<5; i++) {
   106f7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   106fe:	eb 2d                	jmp    1072d <list_test+0x146>
        list_node_t* node = list_delete_first(&list);
   10700:	83 ec 0c             	sub    $0xc,%esp
   10703:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10706:	50                   	push   %eax
   10707:	e8 70 10 00 00       	call   1177c <list_delete_first>
   1070c:	83 c4 10             	add    $0x10,%esp
   1070f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("delete first from list: %d, 0x%x", i, (uint32_t)node);
   10712:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10715:	83 ec 04             	sub    $0x4,%esp
   10718:	50                   	push   %eax
   10719:	ff 75 ec             	pushl  -0x14(%ebp)
   1071c:	68 90 2b 01 00       	push   $0x12b90
   10721:	e8 2d 12 00 00       	call   11953 <klog>
   10726:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10729:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1072d:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   10731:	7e cd                	jle    10700 <list_test+0x119>
    }

    show_list(list);
   10733:	83 ec 04             	sub    $0x4,%esp
   10736:	ff 75 dc             	pushl  -0x24(%ebp)
   10739:	ff 75 d8             	pushl  -0x28(%ebp)
   1073c:	ff 75 d4             	pushl  -0x2c(%ebp)
   1073f:	e8 5e fe ff ff       	call   105a2 <show_list>
   10744:	83 c4 10             	add    $0x10,%esp

}
   10747:	90                   	nop
   10748:	c9                   	leave  
   10749:	c3                   	ret    

0001074a <offset_test>:

void offset_test() {
   1074a:	55                   	push   %ebp
   1074b:	89 e5                	mov    %esp,%ebp
   1074d:	83 ec 28             	sub    $0x28,%esp
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   10750:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   10757:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1075e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10765:	c7 45 e4 56 34 12 00 	movl   $0x123456,-0x1c(%ebp)

    list_node_t * v_node = &v.node;
   1076c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   1076f:	83 c0 04             	add    $0x4,%eax
   10772:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   10775:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10779:	74 08                	je     10783 <offset_test+0x39>
   1077b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1077e:	83 e8 04             	sub    $0x4,%eax
   10781:	eb 05                	jmp    10788 <offset_test+0x3e>
   10783:	b8 00 00 00 00       	mov    $0x0,%eax
   10788:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    if(p->i != 0x123456) {
   1078b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1078e:	8b 00                	mov    (%eax),%eax
   10790:	3d 56 34 12 00       	cmp    $0x123456,%eax
   10795:	74 10                	je     107a7 <offset_test+0x5d>
        klog("error");
   10797:	83 ec 0c             	sub    $0xc,%esp
   1079a:	68 b1 2b 01 00       	push   $0x12bb1
   1079f:	e8 af 11 00 00       	call   11953 <klog>
   107a4:	83 c4 10             	add    $0x10,%esp
    }
}
   107a7:	90                   	nop
   107a8:	c9                   	leave  
   107a9:	c3                   	ret    

000107aa <move_to_first_task>:


void move_to_first_task(void) {
   107aa:	55                   	push   %ebp
   107ab:	89 e5                	mov    %esp,%ebp
   107ad:	83 ec 18             	sub    $0x18,%esp
    task_t * curr = task_current();
   107b0:	e8 98 20 00 00       	call   1284d <task_current>
   107b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    tss_t * tss = &(curr->tss);
   107b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107bb:	83 c0 4c             	add    $0x4c,%eax
   107be:	89 45 f0             	mov    %eax,-0x10(%ebp)

    __asm__ __volatile__( "jmp *%[ip]"::[ip]"r"(tss->eip) );
   107c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107c4:	8b 40 20             	mov    0x20(%eax),%eax
   107c7:	ff e0                	jmp    *%eax
}
   107c9:	90                   	nop
   107ca:	c9                   	leave  
   107cb:	c3                   	ret    

000107cc <init_main>:


void init_main() {
   107cc:	55                   	push   %ebp
   107cd:	89 e5                	mov    %esp,%ebp
   107cf:	83 ec 08             	sub    $0x8,%esp
    klog("Kernal %s is running ... ", "1.0.0");
   107d2:	83 ec 08             	sub    $0x8,%esp
   107d5:	68 b7 2b 01 00       	push   $0x12bb7
   107da:	68 bd 2b 01 00       	push   $0x12bbd
   107df:	e8 6f 11 00 00       	call   11953 <klog>
   107e4:	83 c4 10             	add    $0x10,%esp

    task_manager_init();
   107e7:	e8 0e 1f 00 00       	call   126fa <task_manager_init>
    first_task_init();
   107ec:	e8 b7 1f 00 00       	call   127a8 <first_task_init>
    irq_enable_global();
   107f1:	e8 63 07 00 00       	call   10f59 <irq_enable_global>
    
    move_to_first_task();
   107f6:	e8 af ff ff ff       	call   107aa <move_to_first_task>
   107fb:	90                   	nop
   107fc:	c9                   	leave  
   107fd:	c3                   	ret    

000107fe <hlt>:
static inline void hlt() {
   107fe:	55                   	push   %ebp
   107ff:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   10801:	f4                   	hlt    
}
   10802:	90                   	nop
   10803:	5d                   	pop    %ebp
   10804:	c3                   	ret    

00010805 <cli>:
static inline void cli() {
   10805:	55                   	push   %ebp
   10806:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   10808:	fa                   	cli    
}
   10809:	90                   	nop
   1080a:	5d                   	pop    %ebp
   1080b:	c3                   	ret    

0001080c <sti>:
static inline void sti() {
   1080c:	55                   	push   %ebp
   1080d:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   1080f:	fb                   	sti    
}
   10810:	90                   	nop
   10811:	5d                   	pop    %ebp
   10812:	c3                   	ret    

00010813 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10813:	55                   	push   %ebp
   10814:	89 e5                	mov    %esp,%ebp
   10816:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   10819:	8b 45 08             	mov    0x8(%ebp),%eax
   1081c:	c1 e8 10             	shr    $0x10,%eax
   1081f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   10823:	8b 45 08             	mov    0x8(%ebp),%eax
   10826:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   1082a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1082d:	83 e8 01             	sub    $0x1,%eax
   10830:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   10834:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10838:	90                   	nop
   10839:	c9                   	leave  
   1083a:	c3                   	ret    

0001083b <inb>:
static inline uint8_t inb(uint16_t  port) {
   1083b:	55                   	push   %ebp
   1083c:	89 e5                	mov    %esp,%ebp
   1083e:	83 ec 14             	sub    $0x14,%esp
   10841:	8b 45 08             	mov    0x8(%ebp),%eax
   10844:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   10848:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1084c:	89 c2                	mov    %eax,%edx
   1084e:	ec                   	in     (%dx),%al
   1084f:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   10852:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10856:	c9                   	leave  
   10857:	c3                   	ret    

00010858 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10858:	55                   	push   %ebp
   10859:	89 e5                	mov    %esp,%ebp
   1085b:	83 ec 08             	sub    $0x8,%esp
   1085e:	8b 55 08             	mov    0x8(%ebp),%edx
   10861:	8b 45 0c             	mov    0xc(%ebp),%eax
   10864:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10868:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1086b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1086f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10873:	ee                   	out    %al,(%dx)
}
   10874:	90                   	nop
   10875:	c9                   	leave  
   10876:	c3                   	ret    

00010877 <read_cr2>:

static inline void write_cr0(uint32_t v) {
	__asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
}

static inline uint32_t read_cr2() {
   10877:	55                   	push   %ebp
   10878:	89 e5                	mov    %esp,%ebp
   1087a:	83 ec 10             	sub    $0x10,%esp
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   1087d:	0f 20 d0             	mov    %cr2,%eax
   10880:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   10883:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10886:	c9                   	leave  
   10887:	c3                   	ret    

00010888 <read_eflags>:

static inline void write_tr (uint16_t tss_selector) {
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
}

static inline uint32_t read_eflags() {
   10888:	55                   	push   %ebp
   10889:	89 e5                	mov    %esp,%ebp
   1088b:	83 ec 10             	sub    $0x10,%esp
	uint32_t eflags;

	__asm__ __volatile__("pushf\n\tpop %%eax":"=a"(eflags));
   1088e:	9c                   	pushf  
   1088f:	58                   	pop    %eax
   10890:	89 45 fc             	mov    %eax,-0x4(%ebp)

	return eflags;
   10893:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10896:	c9                   	leave  
   10897:	c3                   	ret    

00010898 <write_eflags>:

static inline void write_eflags(uint32_t eflags) {
   10898:	55                   	push   %ebp
   10899:	89 e5                	mov    %esp,%ebp

	__asm__ __volatile__("push %%eax\n\tpopf"::"a"(eflags));
   1089b:	8b 45 08             	mov    0x8(%ebp),%eax
   1089e:	50                   	push   %eax
   1089f:	9d                   	popf   


}
   108a0:	90                   	nop
   108a1:	5d                   	pop    %ebp
   108a2:	c3                   	ret    

000108a3 <default_handler>:

//  -----------------------------------------   中断相关    -------------------------------------------
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void default_handler (exception_frame_t * frame, const char * message) {
   108a3:	55                   	push   %ebp
   108a4:	89 e5                	mov    %esp,%ebp
   108a6:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   108a9:	83 ec 0c             	sub    $0xc,%esp
   108ac:	68 d8 2b 01 00       	push   $0x12bd8
   108b1:	e8 9d 10 00 00       	call   11953 <klog>
   108b6:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   108b9:	83 ec 08             	sub    $0x8,%esp
   108bc:	ff 75 0c             	pushl  0xc(%ebp)
   108bf:	68 f9 2b 01 00       	push   $0x12bf9
   108c4:	e8 8a 10 00 00       	call   11953 <klog>
   108c9:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   108cc:	e8 2d ff ff ff       	call   107fe <hlt>
   108d1:	eb f9                	jmp    108cc <default_handler+0x29>

000108d3 <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   108d3:	55                   	push   %ebp
   108d4:	89 e5                	mov    %esp,%ebp
   108d6:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   108d9:	83 ec 08             	sub    $0x8,%esp
   108dc:	68 14 2c 01 00       	push   $0x12c14
   108e1:	ff 75 08             	pushl  0x8(%ebp)
   108e4:	e8 ba ff ff ff       	call   108a3 <default_handler>
   108e9:	83 c4 10             	add    $0x10,%esp
}
   108ec:	90                   	nop
   108ed:	c9                   	leave  
   108ee:	c3                   	ret    

000108ef <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   108ef:	55                   	push   %ebp
   108f0:	89 e5                	mov    %esp,%ebp
   108f2:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   108f5:	83 ec 08             	sub    $0x8,%esp
   108f8:	68 27 2c 01 00       	push   $0x12c27
   108fd:	ff 75 08             	pushl  0x8(%ebp)
   10900:	e8 9e ff ff ff       	call   108a3 <default_handler>
   10905:	83 c4 10             	add    $0x10,%esp
}
   10908:	90                   	nop
   10909:	c9                   	leave  
   1090a:	c3                   	ret    

0001090b <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   1090b:	55                   	push   %ebp
   1090c:	89 e5                	mov    %esp,%ebp
   1090e:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   10911:	83 ec 08             	sub    $0x8,%esp
   10914:	68 36 2c 01 00       	push   $0x12c36
   10919:	ff 75 08             	pushl  0x8(%ebp)
   1091c:	e8 82 ff ff ff       	call   108a3 <default_handler>
   10921:	83 c4 10             	add    $0x10,%esp
}
   10924:	90                   	nop
   10925:	c9                   	leave  
   10926:	c3                   	ret    

00010927 <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   10927:	55                   	push   %ebp
   10928:	89 e5                	mov    %esp,%ebp
   1092a:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   1092d:	83 ec 08             	sub    $0x8,%esp
   10930:	68 46 2c 01 00       	push   $0x12c46
   10935:	ff 75 08             	pushl  0x8(%ebp)
   10938:	e8 66 ff ff ff       	call   108a3 <default_handler>
   1093d:	83 c4 10             	add    $0x10,%esp
}
   10940:	90                   	nop
   10941:	c9                   	leave  
   10942:	c3                   	ret    

00010943 <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   10943:	55                   	push   %ebp
   10944:	89 e5                	mov    %esp,%ebp
   10946:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   10949:	83 ec 08             	sub    $0x8,%esp
   1094c:	68 55 2c 01 00       	push   $0x12c55
   10951:	ff 75 08             	pushl  0x8(%ebp)
   10954:	e8 4a ff ff ff       	call   108a3 <default_handler>
   10959:	83 c4 10             	add    $0x10,%esp
}
   1095c:	90                   	nop
   1095d:	c9                   	leave  
   1095e:	c3                   	ret    

0001095f <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   1095f:	55                   	push   %ebp
   10960:	89 e5                	mov    %esp,%ebp
   10962:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   10965:	83 ec 08             	sub    $0x8,%esp
   10968:	68 61 2c 01 00       	push   $0x12c61
   1096d:	ff 75 08             	pushl  0x8(%ebp)
   10970:	e8 2e ff ff ff       	call   108a3 <default_handler>
   10975:	83 c4 10             	add    $0x10,%esp
}
   10978:	90                   	nop
   10979:	c9                   	leave  
   1097a:	c3                   	ret    

0001097b <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   1097b:	55                   	push   %ebp
   1097c:	89 e5                	mov    %esp,%ebp
   1097e:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   10981:	83 ec 08             	sub    $0x8,%esp
   10984:	68 6b 2c 01 00       	push   $0x12c6b
   10989:	ff 75 08             	pushl  0x8(%ebp)
   1098c:	e8 12 ff ff ff       	call   108a3 <default_handler>
   10991:	83 c4 10             	add    $0x10,%esp
}
   10994:	90                   	nop
   10995:	c9                   	leave  
   10996:	c3                   	ret    

00010997 <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   10997:	55                   	push   %ebp
   10998:	89 e5                	mov    %esp,%ebp
   1099a:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   1099d:	83 ec 08             	sub    $0x8,%esp
   109a0:	68 81 2c 01 00       	push   $0x12c81
   109a5:	ff 75 08             	pushl  0x8(%ebp)
   109a8:	e8 f6 fe ff ff       	call   108a3 <default_handler>
   109ad:	83 c4 10             	add    $0x10,%esp
}
   109b0:	90                   	nop
   109b1:	c9                   	leave  
   109b2:	c3                   	ret    

000109b3 <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   109b3:	55                   	push   %ebp
   109b4:	89 e5                	mov    %esp,%ebp
   109b6:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   109b9:	83 ec 08             	sub    $0x8,%esp
   109bc:	68 91 2c 01 00       	push   $0x12c91
   109c1:	ff 75 08             	pushl  0x8(%ebp)
   109c4:	e8 da fe ff ff       	call   108a3 <default_handler>
   109c9:	83 c4 10             	add    $0x10,%esp
}
   109cc:	90                   	nop
   109cd:	c9                   	leave  
   109ce:	c3                   	ret    

000109cf <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   109cf:	55                   	push   %ebp
   109d0:	89 e5                	mov    %esp,%ebp
   109d2:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   109d5:	83 ec 08             	sub    $0x8,%esp
   109d8:	68 a7 2c 01 00       	push   $0x12ca7
   109dd:	ff 75 08             	pushl  0x8(%ebp)
   109e0:	e8 be fe ff ff       	call   108a3 <default_handler>
   109e5:	83 c4 10             	add    $0x10,%esp
}
   109e8:	90                   	nop
   109e9:	c9                   	leave  
   109ea:	c3                   	ret    

000109eb <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   109eb:	55                   	push   %ebp
   109ec:	89 e5                	mov    %esp,%ebp
   109ee:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   109f1:	83 ec 08             	sub    $0x8,%esp
   109f4:	68 b5 2c 01 00       	push   $0x12cb5
   109f9:	ff 75 08             	pushl  0x8(%ebp)
   109fc:	e8 a2 fe ff ff       	call   108a3 <default_handler>
   10a01:	83 c4 10             	add    $0x10,%esp
}
   10a04:	90                   	nop
   10a05:	c9                   	leave  
   10a06:	c3                   	ret    

00010a07 <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   10a07:	55                   	push   %ebp
   10a08:	89 e5                	mov    %esp,%ebp
   10a0a:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   10a0d:	83 ec 08             	sub    $0x8,%esp
   10a10:	68 c1 2c 01 00       	push   $0x12cc1
   10a15:	ff 75 08             	pushl  0x8(%ebp)
   10a18:	e8 86 fe ff ff       	call   108a3 <default_handler>
   10a1d:	83 c4 10             	add    $0x10,%esp
}
   10a20:	90                   	nop
   10a21:	c9                   	leave  
   10a22:	c3                   	ret    

00010a23 <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   10a23:	55                   	push   %ebp
   10a24:	89 e5                	mov    %esp,%ebp
   10a26:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   10a29:	83 ec 08             	sub    $0x8,%esp
   10a2c:	68 d6 2c 01 00       	push   $0x12cd6
   10a31:	ff 75 08             	pushl  0x8(%ebp)
   10a34:	e8 6a fe ff ff       	call   108a3 <default_handler>
   10a39:	83 c4 10             	add    $0x10,%esp
}
   10a3c:	90                   	nop
   10a3d:	c9                   	leave  
   10a3e:	c3                   	ret    

00010a3f <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   10a3f:	55                   	push   %ebp
   10a40:	89 e5                	mov    %esp,%ebp
   10a42:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   10a45:	83 ec 08             	sub    $0x8,%esp
   10a48:	68 ec 2c 01 00       	push   $0x12cec
   10a4d:	ff 75 08             	pushl  0x8(%ebp)
   10a50:	e8 4e fe ff ff       	call   108a3 <default_handler>
   10a55:	83 c4 10             	add    $0x10,%esp
}
   10a58:	90                   	nop
   10a59:	c9                   	leave  
   10a5a:	c3                   	ret    

00010a5b <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   10a5b:	55                   	push   %ebp
   10a5c:	89 e5                	mov    %esp,%ebp
   10a5e:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   10a61:	83 ec 0c             	sub    $0xc,%esp
   10a64:	68 d8 2b 01 00       	push   $0x12bd8
   10a69:	e8 e5 0e 00 00       	call   11953 <klog>
   10a6e:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: Page fault.");
   10a71:	83 ec 0c             	sub    $0xc,%esp
   10a74:	68 18 2d 01 00       	push   $0x12d18
   10a79:	e8 d5 0e 00 00       	call   11953 <klog>
   10a7e:	83 c4 10             	add    $0x10,%esp
    if (frame->err_code & ERR_PAGE_P) {
   10a81:	8b 45 08             	mov    0x8(%ebp),%eax
   10a84:	8b 40 34             	mov    0x34(%eax),%eax
   10a87:	83 e0 01             	and    $0x1,%eax
   10a8a:	85 c0                	test   %eax,%eax
   10a8c:	74 18                	je     10aa6 <handle_page_fault+0x4b>
        klog("\tpage-level protection violation: 0x%x.", read_cr2());
   10a8e:	e8 e4 fd ff ff       	call   10877 <read_cr2>
   10a93:	83 ec 08             	sub    $0x8,%esp
   10a96:	50                   	push   %eax
   10a97:	68 3c 2d 01 00       	push   $0x12d3c
   10a9c:	e8 b2 0e 00 00       	call   11953 <klog>
   10aa1:	83 c4 10             	add    $0x10,%esp
   10aa4:	eb 16                	jmp    10abc <handle_page_fault+0x61>
    } else {
         klog("\tPage doesn't present 0x%x", read_cr2());
   10aa6:	e8 cc fd ff ff       	call   10877 <read_cr2>
   10aab:	83 ec 08             	sub    $0x8,%esp
   10aae:	50                   	push   %eax
   10aaf:	68 64 2d 01 00       	push   $0x12d64
   10ab4:	e8 9a 0e 00 00       	call   11953 <klog>
   10ab9:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->err_code & ERR_PAGE_WR) {
   10abc:	8b 45 08             	mov    0x8(%ebp),%eax
   10abf:	8b 40 34             	mov    0x34(%eax),%eax
   10ac2:	83 e0 02             	and    $0x2,%eax
   10ac5:	85 c0                	test   %eax,%eax
   10ac7:	74 12                	je     10adb <handle_page_fault+0x80>
        klog("\tThe access causing the fault was a read.");
   10ac9:	83 ec 0c             	sub    $0xc,%esp
   10acc:	68 80 2d 01 00       	push   $0x12d80
   10ad1:	e8 7d 0e 00 00       	call   11953 <klog>
   10ad6:	83 c4 10             	add    $0x10,%esp
   10ad9:	eb 10                	jmp    10aeb <handle_page_fault+0x90>
    } else {
        klog("\tThe access causing the fault was a write.");
   10adb:	83 ec 0c             	sub    $0xc,%esp
   10ade:	68 ac 2d 01 00       	push   $0x12dac
   10ae3:	e8 6b 0e 00 00       	call   11953 <klog>
   10ae8:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->err_code & ERR_PAGE_US) {
   10aeb:	8b 45 08             	mov    0x8(%ebp),%eax
   10aee:	8b 40 34             	mov    0x34(%eax),%eax
   10af1:	83 e0 02             	and    $0x2,%eax
   10af4:	85 c0                	test   %eax,%eax
   10af6:	74 12                	je     10b0a <handle_page_fault+0xaf>
        klog("\tA supervisor-mode access caused the fault.");
   10af8:	83 ec 0c             	sub    $0xc,%esp
   10afb:	68 d8 2d 01 00       	push   $0x12dd8
   10b00:	e8 4e 0e 00 00       	call   11953 <klog>
   10b05:	83 c4 10             	add    $0x10,%esp
   10b08:	eb 10                	jmp    10b1a <handle_page_fault+0xbf>
    } else {
        klog("\tA user-mode access caused the fault.");
   10b0a:	83 ec 0c             	sub    $0xc,%esp
   10b0d:	68 04 2e 01 00       	push   $0x12e04
   10b12:	e8 3c 0e 00 00       	call   11953 <klog>
   10b17:	83 c4 10             	add    $0x10,%esp
    }

    while(1){hlt();}
   10b1a:	e8 df fc ff ff       	call   107fe <hlt>
   10b1f:	eb f9                	jmp    10b1a <handle_page_fault+0xbf>

00010b21 <handle_fpu_error>:

	//default_handler(frame, "IRQ/Exception happend: Page fault.");
}
void handle_fpu_error(exception_frame_t * frame) {
   10b21:	55                   	push   %ebp
   10b22:	89 e5                	mov    %esp,%ebp
   10b24:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   10b27:	83 ec 08             	sub    $0x8,%esp
   10b2a:	68 2a 2e 01 00       	push   $0x12e2a
   10b2f:	ff 75 08             	pushl  0x8(%ebp)
   10b32:	e8 6c fd ff ff       	call   108a3 <default_handler>
   10b37:	83 c4 10             	add    $0x10,%esp
}
   10b3a:	90                   	nop
   10b3b:	c9                   	leave  
   10b3c:	c3                   	ret    

00010b3d <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   10b3d:	55                   	push   %ebp
   10b3e:	89 e5                	mov    %esp,%ebp
   10b40:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   10b43:	83 ec 08             	sub    $0x8,%esp
   10b46:	68 48 2e 01 00       	push   $0x12e48
   10b4b:	ff 75 08             	pushl  0x8(%ebp)
   10b4e:	e8 50 fd ff ff       	call   108a3 <default_handler>
   10b53:	83 c4 10             	add    $0x10,%esp
}
   10b56:	90                   	nop
   10b57:	c9                   	leave  
   10b58:	c3                   	ret    

00010b59 <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   10b59:	55                   	push   %ebp
   10b5a:	89 e5                	mov    %esp,%ebp
   10b5c:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   10b5f:	83 ec 08             	sub    $0x8,%esp
   10b62:	68 59 2e 01 00       	push   $0x12e59
   10b67:	ff 75 08             	pushl  0x8(%ebp)
   10b6a:	e8 34 fd ff ff       	call   108a3 <default_handler>
   10b6f:	83 c4 10             	add    $0x10,%esp
}
   10b72:	90                   	nop
   10b73:	c9                   	leave  
   10b74:	c3                   	ret    

00010b75 <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   10b75:	55                   	push   %ebp
   10b76:	89 e5                	mov    %esp,%ebp
   10b78:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10b7b:	83 ec 08             	sub    $0x8,%esp
   10b7e:	68 68 2e 01 00       	push   $0x12e68
   10b83:	ff 75 08             	pushl  0x8(%ebp)
   10b86:	e8 18 fd ff ff       	call   108a3 <default_handler>
   10b8b:	83 c4 10             	add    $0x10,%esp
}
   10b8e:	90                   	nop
   10b8f:	c9                   	leave  
   10b90:	c3                   	ret    

00010b91 <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10b91:	55                   	push   %ebp
   10b92:	89 e5                	mov    %esp,%ebp
   10b94:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   10b97:	83 ec 08             	sub    $0x8,%esp
   10b9a:	68 87 2e 01 00       	push   $0x12e87
   10b9f:	ff 75 08             	pushl  0x8(%ebp)
   10ba2:	e8 fc fc ff ff       	call   108a3 <default_handler>
   10ba7:	83 c4 10             	add    $0x10,%esp
}
   10baa:	90                   	nop
   10bab:	c9                   	leave  
   10bac:	c3                   	ret    

00010bad <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10bad:	55                   	push   %ebp
   10bae:	89 e5                	mov    %esp,%ebp
   10bb0:	83 ec 08             	sub    $0x8,%esp
   10bb3:	8b 55 0c             	mov    0xc(%ebp),%edx
   10bb6:	8b 45 14             	mov    0x14(%ebp),%eax
   10bb9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10bbd:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10bc1:	8b 45 10             	mov    0x10(%ebp),%eax
   10bc4:	89 c2                	mov    %eax,%edx
   10bc6:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc9:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10bcc:	8b 45 08             	mov    0x8(%ebp),%eax
   10bcf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10bd3:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10bd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bda:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10bde:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10be2:	8b 45 10             	mov    0x10(%ebp),%eax
   10be5:	c1 e8 10             	shr    $0x10,%eax
   10be8:	89 c2                	mov    %eax,%edx
   10bea:	8b 45 08             	mov    0x8(%ebp),%eax
   10bed:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10bf1:	90                   	nop
   10bf2:	c9                   	leave  
   10bf3:	c3                   	ret    

00010bf4 <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   10bf4:	55                   	push   %ebp
   10bf5:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   10bf7:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10bfb:	7e 07                	jle    10c04 <irq_install+0x10>
        return -1;
   10bfd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c02:	eb 1e                	jmp    10c22 <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   10c04:	8b 45 08             	mov    0x8(%ebp),%eax
   10c07:	c1 e0 03             	shl    $0x3,%eax
   10c0a:	05 40 48 01 00       	add    $0x14840,%eax
   10c0f:	68 00 8e 00 00       	push   $0x8e00
   10c14:	ff 75 0c             	pushl  0xc(%ebp)
   10c17:	6a 08                	push   $0x8
   10c19:	50                   	push   %eax
   10c1a:	e8 8e ff ff ff       	call   10bad <gate_desc_set>
   10c1f:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   10c22:	c9                   	leave  
   10c23:	c3                   	ret    

00010c24 <init_pic>:

static void init_pic() {
   10c24:	55                   	push   %ebp
   10c25:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10c27:	6a 11                	push   $0x11
   10c29:	6a 20                	push   $0x20
   10c2b:	e8 28 fc ff ff       	call   10858 <outb>
   10c30:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10c33:	6a 20                	push   $0x20
   10c35:	6a 21                	push   $0x21
   10c37:	e8 1c fc ff ff       	call   10858 <outb>
   10c3c:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10c3f:	6a 04                	push   $0x4
   10c41:	6a 21                	push   $0x21
   10c43:	e8 10 fc ff ff       	call   10858 <outb>
   10c48:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10c4b:	6a 01                	push   $0x1
   10c4d:	6a 21                	push   $0x21
   10c4f:	e8 04 fc ff ff       	call   10858 <outb>
   10c54:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10c57:	6a 11                	push   $0x11
   10c59:	68 a0 00 00 00       	push   $0xa0
   10c5e:	e8 f5 fb ff ff       	call   10858 <outb>
   10c63:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10c66:	6a 28                	push   $0x28
   10c68:	68 a1 00 00 00       	push   $0xa1
   10c6d:	e8 e6 fb ff ff       	call   10858 <outb>
   10c72:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10c75:	6a 02                	push   $0x2
   10c77:	68 a1 00 00 00       	push   $0xa1
   10c7c:	e8 d7 fb ff ff       	call   10858 <outb>
   10c81:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10c84:	6a 01                	push   $0x1
   10c86:	68 a1 00 00 00       	push   $0xa1
   10c8b:	e8 c8 fb ff ff       	call   10858 <outb>
   10c90:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10c93:	68 fb 00 00 00       	push   $0xfb
   10c98:	6a 21                	push   $0x21
   10c9a:	e8 b9 fb ff ff       	call   10858 <outb>
   10c9f:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10ca2:	68 ff 00 00 00       	push   $0xff
   10ca7:	68 a1 00 00 00       	push   $0xa1
   10cac:	e8 a7 fb ff ff       	call   10858 <outb>
   10cb1:	83 c4 08             	add    $0x8,%esp
}
   10cb4:	90                   	nop
   10cb5:	c9                   	leave  
   10cb6:	c3                   	ret    

00010cb7 <irq_init>:

void irq_init () {
   10cb7:	55                   	push   %ebp
   10cb8:	89 e5                	mov    %esp,%ebp
   10cba:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10cbd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10cc4:	eb 25                	jmp    10ceb <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10cc6:	ba 28 00 01 00       	mov    $0x10028,%edx
   10ccb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10cce:	c1 e0 03             	shl    $0x3,%eax
   10cd1:	05 40 48 01 00       	add    $0x14840,%eax
   10cd6:	68 00 8e 00 00       	push   $0x8e00
   10cdb:	52                   	push   %edx
   10cdc:	6a 08                	push   $0x8
   10cde:	50                   	push   %eax
   10cdf:	e8 c9 fe ff ff       	call   10bad <gate_desc_set>
   10ce4:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10ce7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10ceb:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   10cef:	76 d5                	jbe    10cc6 <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10cf1:	b8 40 48 01 00       	mov    $0x14840,%eax
   10cf6:	68 00 04 00 00       	push   $0x400
   10cfb:	50                   	push   %eax
   10cfc:	e8 12 fb ff ff       	call   10813 <lidt>
   10d01:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   10d04:	b8 47 00 01 00       	mov    $0x10047,%eax
   10d09:	50                   	push   %eax
   10d0a:	6a 00                	push   $0x0
   10d0c:	e8 e3 fe ff ff       	call   10bf4 <irq_install>
   10d11:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   10d14:	b8 66 00 01 00       	mov    $0x10066,%eax
   10d19:	50                   	push   %eax
   10d1a:	6a 01                	push   $0x1
   10d1c:	e8 d3 fe ff ff       	call   10bf4 <irq_install>
   10d21:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   10d24:	b8 85 00 01 00       	mov    $0x10085,%eax
   10d29:	50                   	push   %eax
   10d2a:	6a 02                	push   $0x2
   10d2c:	e8 c3 fe ff ff       	call   10bf4 <irq_install>
   10d31:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   10d34:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   10d39:	50                   	push   %eax
   10d3a:	6a 03                	push   $0x3
   10d3c:	e8 b3 fe ff ff       	call   10bf4 <irq_install>
   10d41:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10d44:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   10d49:	50                   	push   %eax
   10d4a:	6a 04                	push   $0x4
   10d4c:	e8 a3 fe ff ff       	call   10bf4 <irq_install>
   10d51:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10d54:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   10d59:	50                   	push   %eax
   10d5a:	6a 05                	push   $0x5
   10d5c:	e8 93 fe ff ff       	call   10bf4 <irq_install>
   10d61:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10d64:	b8 01 01 01 00       	mov    $0x10101,%eax
   10d69:	50                   	push   %eax
   10d6a:	6a 06                	push   $0x6
   10d6c:	e8 83 fe ff ff       	call   10bf4 <irq_install>
   10d71:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10d74:	b8 20 01 01 00       	mov    $0x10120,%eax
   10d79:	50                   	push   %eax
   10d7a:	6a 07                	push   $0x7
   10d7c:	e8 73 fe ff ff       	call   10bf4 <irq_install>
   10d81:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10d84:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   10d89:	50                   	push   %eax
   10d8a:	6a 08                	push   $0x8
   10d8c:	e8 63 fe ff ff       	call   10bf4 <irq_install>
   10d91:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10d94:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   10d99:	50                   	push   %eax
   10d9a:	6a 0a                	push   $0xa
   10d9c:	e8 53 fe ff ff       	call   10bf4 <irq_install>
   10da1:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10da4:	b8 79 01 01 00       	mov    $0x10179,%eax
   10da9:	50                   	push   %eax
   10daa:	6a 0b                	push   $0xb
   10dac:	e8 43 fe ff ff       	call   10bf4 <irq_install>
   10db1:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10db4:	b8 96 01 01 00       	mov    $0x10196,%eax
   10db9:	50                   	push   %eax
   10dba:	6a 0c                	push   $0xc
   10dbc:	e8 33 fe ff ff       	call   10bf4 <irq_install>
   10dc1:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10dc4:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   10dc9:	50                   	push   %eax
   10dca:	6a 0d                	push   $0xd
   10dcc:	e8 23 fe ff ff       	call   10bf4 <irq_install>
   10dd1:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10dd4:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   10dd9:	50                   	push   %eax
   10dda:	6a 0e                	push   $0xe
   10ddc:	e8 13 fe ff ff       	call   10bf4 <irq_install>
   10de1:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   10de4:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   10de9:	50                   	push   %eax
   10dea:	6a 10                	push   $0x10
   10dec:	e8 03 fe ff ff       	call   10bf4 <irq_install>
   10df1:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   10df4:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   10df9:	50                   	push   %eax
   10dfa:	6a 11                	push   $0x11
   10dfc:	e8 f3 fd ff ff       	call   10bf4 <irq_install>
   10e01:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   10e04:	b8 29 02 01 00       	mov    $0x10229,%eax
   10e09:	50                   	push   %eax
   10e0a:	6a 12                	push   $0x12
   10e0c:	e8 e3 fd ff ff       	call   10bf4 <irq_install>
   10e11:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   10e14:	b8 48 02 01 00       	mov    $0x10248,%eax
   10e19:	50                   	push   %eax
   10e1a:	6a 13                	push   $0x13
   10e1c:	e8 d3 fd ff ff       	call   10bf4 <irq_install>
   10e21:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   10e24:	b8 67 02 01 00       	mov    $0x10267,%eax
   10e29:	50                   	push   %eax
   10e2a:	6a 14                	push   $0x14
   10e2c:	e8 c3 fd ff ff       	call   10bf4 <irq_install>
   10e31:	83 c4 08             	add    $0x8,%esp

    init_pic();
   10e34:	e8 eb fd ff ff       	call   10c24 <init_pic>
}
   10e39:	90                   	nop
   10e3a:	c9                   	leave  
   10e3b:	c3                   	ret    

00010e3c <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10e3c:	55                   	push   %ebp
   10e3d:	89 e5                	mov    %esp,%ebp
   10e3f:	53                   	push   %ebx
   10e40:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10e43:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10e47:	7e 78                	jle    10ec1 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10e49:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10e4d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e51:	7f 32                	jg     10e85 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10e53:	6a 21                	push   $0x21
   10e55:	e8 e1 f9 ff ff       	call   1083b <inb>
   10e5a:	83 c4 04             	add    $0x4,%esp
   10e5d:	89 c2                	mov    %eax,%edx
   10e5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e62:	bb 01 00 00 00       	mov    $0x1,%ebx
   10e67:	89 c1                	mov    %eax,%ecx
   10e69:	d3 e3                	shl    %cl,%ebx
   10e6b:	89 d8                	mov    %ebx,%eax
   10e6d:	f7 d0                	not    %eax
   10e6f:	21 d0                	and    %edx,%eax
   10e71:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10e74:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10e78:	50                   	push   %eax
   10e79:	6a 21                	push   $0x21
   10e7b:	e8 d8 f9 ff ff       	call   10858 <outb>
   10e80:	83 c4 08             	add    $0x8,%esp
   10e83:	eb 3d                	jmp    10ec2 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10e85:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10e89:	68 a1 00 00 00       	push   $0xa1
   10e8e:	e8 a8 f9 ff ff       	call   1083b <inb>
   10e93:	83 c4 04             	add    $0x4,%esp
   10e96:	89 c2                	mov    %eax,%edx
   10e98:	8b 45 08             	mov    0x8(%ebp),%eax
   10e9b:	bb 01 00 00 00       	mov    $0x1,%ebx
   10ea0:	89 c1                	mov    %eax,%ecx
   10ea2:	d3 e3                	shl    %cl,%ebx
   10ea4:	89 d8                	mov    %ebx,%eax
   10ea6:	f7 d0                	not    %eax
   10ea8:	21 d0                	and    %edx,%eax
   10eaa:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10ead:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10eb1:	50                   	push   %eax
   10eb2:	68 a1 00 00 00       	push   $0xa1
   10eb7:	e8 9c f9 ff ff       	call   10858 <outb>
   10ebc:	83 c4 08             	add    $0x8,%esp
   10ebf:	eb 01                	jmp    10ec2 <irq_enable+0x86>
        return;
   10ec1:	90                   	nop
    }
}
   10ec2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ec5:	c9                   	leave  
   10ec6:	c3                   	ret    

00010ec7 <irq_disable>:

void irq_disable(int irq_num) {
   10ec7:	55                   	push   %ebp
   10ec8:	89 e5                	mov    %esp,%ebp
   10eca:	53                   	push   %ebx
   10ecb:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10ece:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ed2:	7e 74                	jle    10f48 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10ed4:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10ed8:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10edc:	7f 30                	jg     10f0e <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10ede:	6a 21                	push   $0x21
   10ee0:	e8 56 f9 ff ff       	call   1083b <inb>
   10ee5:	83 c4 04             	add    $0x4,%esp
   10ee8:	89 c3                	mov    %eax,%ebx
   10eea:	8b 45 08             	mov    0x8(%ebp),%eax
   10eed:	ba 01 00 00 00       	mov    $0x1,%edx
   10ef2:	89 c1                	mov    %eax,%ecx
   10ef4:	d3 e2                	shl    %cl,%edx
   10ef6:	89 d0                	mov    %edx,%eax
   10ef8:	09 d8                	or     %ebx,%eax
   10efa:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10efd:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10f01:	50                   	push   %eax
   10f02:	6a 21                	push   $0x21
   10f04:	e8 4f f9 ff ff       	call   10858 <outb>
   10f09:	83 c4 08             	add    $0x8,%esp
   10f0c:	eb 3b                	jmp    10f49 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10f0e:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10f12:	68 a1 00 00 00       	push   $0xa1
   10f17:	e8 1f f9 ff ff       	call   1083b <inb>
   10f1c:	83 c4 04             	add    $0x4,%esp
   10f1f:	89 c3                	mov    %eax,%ebx
   10f21:	8b 45 08             	mov    0x8(%ebp),%eax
   10f24:	ba 01 00 00 00       	mov    $0x1,%edx
   10f29:	89 c1                	mov    %eax,%ecx
   10f2b:	d3 e2                	shl    %cl,%edx
   10f2d:	89 d0                	mov    %edx,%eax
   10f2f:	09 d8                	or     %ebx,%eax
   10f31:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10f34:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10f38:	50                   	push   %eax
   10f39:	68 a1 00 00 00       	push   $0xa1
   10f3e:	e8 15 f9 ff ff       	call   10858 <outb>
   10f43:	83 c4 08             	add    $0x8,%esp
   10f46:	eb 01                	jmp    10f49 <irq_disable+0x82>
        return;
   10f48:	90                   	nop
    }
}
   10f49:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f4c:	c9                   	leave  
   10f4d:	c3                   	ret    

00010f4e <irq_disable_global>:

void irq_disable_global(void) {
   10f4e:	55                   	push   %ebp
   10f4f:	89 e5                	mov    %esp,%ebp
    cli();
   10f51:	e8 af f8 ff ff       	call   10805 <cli>
}
   10f56:	90                   	nop
   10f57:	5d                   	pop    %ebp
   10f58:	c3                   	ret    

00010f59 <irq_enable_global>:

void irq_enable_global(void) {
   10f59:	55                   	push   %ebp
   10f5a:	89 e5                	mov    %esp,%ebp
    sti();
   10f5c:	e8 ab f8 ff ff       	call   1080c <sti>
}
   10f61:	90                   	nop
   10f62:	5d                   	pop    %ebp
   10f63:	c3                   	ret    

00010f64 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10f64:	55                   	push   %ebp
   10f65:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10f67:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10f6b:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f6f:	7e 0f                	jle    10f80 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10f71:	6a 20                	push   $0x20
   10f73:	68 a0 00 00 00       	push   $0xa0
   10f78:	e8 db f8 ff ff       	call   10858 <outb>
   10f7d:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10f80:	6a 20                	push   $0x20
   10f82:	6a 20                	push   $0x20
   10f84:	e8 cf f8 ff ff       	call   10858 <outb>
   10f89:	83 c4 08             	add    $0x8,%esp
}
   10f8c:	90                   	nop
   10f8d:	c9                   	leave  
   10f8e:	c3                   	ret    

00010f8f <irq_enter_proection>:


irq_state_t irq_enter_proection() {
   10f8f:	55                   	push   %ebp
   10f90:	89 e5                	mov    %esp,%ebp
   10f92:	83 ec 10             	sub    $0x10,%esp
    irq_state_t  state = read_eflags();
   10f95:	e8 ee f8 ff ff       	call   10888 <read_eflags>
   10f9a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   10f9d:	e8 ac ff ff ff       	call   10f4e <irq_disable_global>

    return state;
   10fa2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10fa5:	c9                   	leave  
   10fa6:	c3                   	ret    

00010fa7 <irq_leave_proection>:


void irq_leave_proection(irq_state_t state) {
   10fa7:	55                   	push   %ebp
   10fa8:	89 e5                	mov    %esp,%ebp

    write_eflags(state);
   10faa:	ff 75 08             	pushl  0x8(%ebp)
   10fad:	e8 e6 f8 ff ff       	call   10898 <write_eflags>
   10fb2:	83 c4 04             	add    $0x4,%esp
}
   10fb5:	90                   	nop
   10fb6:	c9                   	leave  
   10fb7:	c3                   	ret    

00010fb8 <bitmap_byte_count>:
#include <bitmap.h>
#include <klib.h>

int bitmap_byte_count (int bit_count) {
   10fb8:	55                   	push   %ebp
   10fb9:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         
   10fbb:	8b 45 08             	mov    0x8(%ebp),%eax
   10fbe:	83 c0 07             	add    $0x7,%eax
   10fc1:	8d 50 07             	lea    0x7(%eax),%edx
   10fc4:	85 c0                	test   %eax,%eax
   10fc6:	0f 48 c2             	cmovs  %edx,%eax
   10fc9:	c1 f8 03             	sar    $0x3,%eax
}
   10fcc:	5d                   	pop    %ebp
   10fcd:	c3                   	ret    

00010fce <bitmap_init>:

void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   10fce:	55                   	push   %ebp
   10fcf:	89 e5                	mov    %esp,%ebp
   10fd1:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   10fd4:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd7:	8b 55 10             	mov    0x10(%ebp),%edx
   10fda:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   10fdc:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdf:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fe2:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   10fe5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe8:	8b 00                	mov    (%eax),%eax
   10fea:	50                   	push   %eax
   10feb:	e8 c8 ff ff ff       	call   10fb8 <bitmap_byte_count>
   10ff0:	83 c4 04             	add    $0x4,%esp
   10ff3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    k_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   10ff6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10ffa:	74 07                	je     11003 <bitmap_init+0x35>
   10ffc:	ba ff 00 00 00       	mov    $0xff,%edx
   11001:	eb 05                	jmp    11008 <bitmap_init+0x3a>
   11003:	ba 00 00 00 00       	mov    $0x0,%edx
   11008:	8b 45 08             	mov    0x8(%ebp),%eax
   1100b:	8b 40 04             	mov    0x4(%eax),%eax
   1100e:	83 ec 04             	sub    $0x4,%esp
   11011:	ff 75 f4             	pushl  -0xc(%ebp)
   11014:	52                   	push   %edx
   11015:	50                   	push   %eax
   11016:	e8 9d 03 00 00       	call   113b8 <k_memset>
   1101b:	83 c4 10             	add    $0x10,%esp
}
   1101e:	90                   	nop
   1101f:	c9                   	leave  
   11020:	c3                   	ret    

00011021 <bitmap_get_bit>:


int bitmap_get_bit (bitmap_t * bitmap, int index) {
   11021:	55                   	push   %ebp
   11022:	89 e5                	mov    %esp,%ebp
   11024:	53                   	push   %ebx

    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   11025:	8b 45 08             	mov    0x8(%ebp),%eax
   11028:	8b 50 04             	mov    0x4(%eax),%edx
   1102b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1102e:	8d 48 07             	lea    0x7(%eax),%ecx
   11031:	85 c0                	test   %eax,%eax
   11033:	0f 48 c1             	cmovs  %ecx,%eax
   11036:	c1 f8 03             	sar    $0x3,%eax
   11039:	01 d0                	add    %edx,%eax
   1103b:	0f b6 00             	movzbl (%eax),%eax
   1103e:	0f b6 d8             	movzbl %al,%ebx
   11041:	8b 45 0c             	mov    0xc(%ebp),%eax
   11044:	99                   	cltd   
   11045:	c1 ea 1d             	shr    $0x1d,%edx
   11048:	01 d0                	add    %edx,%eax
   1104a:	83 e0 07             	and    $0x7,%eax
   1104d:	29 d0                	sub    %edx,%eax
   1104f:	89 c1                	mov    %eax,%ecx
   11051:	d3 fb                	sar    %cl,%ebx
   11053:	89 d8                	mov    %ebx,%eax
   11055:	83 e0 01             	and    $0x1,%eax
}
   11058:	5b                   	pop    %ebx
   11059:	5d                   	pop    %ebp
   1105a:	c3                   	ret    

0001105b <bitmap_is_set>:

int bitmap_is_set (bitmap_t * bitmap, int index) {
   1105b:	55                   	push   %ebp
   1105c:	89 e5                	mov    %esp,%ebp
    
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   1105e:	ff 75 0c             	pushl  0xc(%ebp)
   11061:	ff 75 08             	pushl  0x8(%ebp)
   11064:	e8 b8 ff ff ff       	call   11021 <bitmap_get_bit>
   11069:	83 c4 08             	add    $0x8,%esp
   1106c:	85 c0                	test   %eax,%eax
   1106e:	0f 95 c0             	setne  %al
   11071:	0f b6 c0             	movzbl %al,%eax
}
   11074:	c9                   	leave  
   11075:	c3                   	ret    

00011076 <bitmap_set_bit>:



void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   11076:	55                   	push   %ebp
   11077:	89 e5                	mov    %esp,%ebp
   11079:	56                   	push   %esi
   1107a:	53                   	push   %ebx
   1107b:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   1107e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11085:	e9 a2 00 00 00       	jmp    1112c <bitmap_set_bit+0xb6>
        if (bit) {
   1108a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1108e:	74 4a                	je     110da <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   11090:	8b 45 08             	mov    0x8(%ebp),%eax
   11093:	8b 50 04             	mov    0x4(%eax),%edx
   11096:	8b 45 0c             	mov    0xc(%ebp),%eax
   11099:	8d 48 07             	lea    0x7(%eax),%ecx
   1109c:	85 c0                	test   %eax,%eax
   1109e:	0f 48 c1             	cmovs  %ecx,%eax
   110a1:	c1 f8 03             	sar    $0x3,%eax
   110a4:	89 c3                	mov    %eax,%ebx
   110a6:	89 d8                	mov    %ebx,%eax
   110a8:	01 d0                	add    %edx,%eax
   110aa:	0f b6 00             	movzbl (%eax),%eax
   110ad:	89 c6                	mov    %eax,%esi
   110af:	8b 45 0c             	mov    0xc(%ebp),%eax
   110b2:	99                   	cltd   
   110b3:	c1 ea 1d             	shr    $0x1d,%edx
   110b6:	01 d0                	add    %edx,%eax
   110b8:	83 e0 07             	and    $0x7,%eax
   110bb:	29 d0                	sub    %edx,%eax
   110bd:	ba 01 00 00 00       	mov    $0x1,%edx
   110c2:	89 c1                	mov    %eax,%ecx
   110c4:	d3 e2                	shl    %cl,%edx
   110c6:	89 d0                	mov    %edx,%eax
   110c8:	89 f2                	mov    %esi,%edx
   110ca:	09 c2                	or     %eax,%edx
   110cc:	8b 45 08             	mov    0x8(%ebp),%eax
   110cf:	8b 40 04             	mov    0x4(%eax),%eax
   110d2:	89 d9                	mov    %ebx,%ecx
   110d4:	01 c8                	add    %ecx,%eax
   110d6:	88 10                	mov    %dl,(%eax)
   110d8:	eb 4a                	jmp    11124 <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   110da:	8b 45 08             	mov    0x8(%ebp),%eax
   110dd:	8b 50 04             	mov    0x4(%eax),%edx
   110e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   110e3:	8d 48 07             	lea    0x7(%eax),%ecx
   110e6:	85 c0                	test   %eax,%eax
   110e8:	0f 48 c1             	cmovs  %ecx,%eax
   110eb:	c1 f8 03             	sar    $0x3,%eax
   110ee:	89 c3                	mov    %eax,%ebx
   110f0:	89 d8                	mov    %ebx,%eax
   110f2:	01 d0                	add    %edx,%eax
   110f4:	0f b6 00             	movzbl (%eax),%eax
   110f7:	89 c6                	mov    %eax,%esi
   110f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   110fc:	99                   	cltd   
   110fd:	c1 ea 1d             	shr    $0x1d,%edx
   11100:	01 d0                	add    %edx,%eax
   11102:	83 e0 07             	and    $0x7,%eax
   11105:	29 d0                	sub    %edx,%eax
   11107:	ba 01 00 00 00       	mov    $0x1,%edx
   1110c:	89 c1                	mov    %eax,%ecx
   1110e:	d3 e2                	shl    %cl,%edx
   11110:	89 d0                	mov    %edx,%eax
   11112:	f7 d0                	not    %eax
   11114:	89 f2                	mov    %esi,%edx
   11116:	21 c2                	and    %eax,%edx
   11118:	8b 45 08             	mov    0x8(%ebp),%eax
   1111b:	8b 40 04             	mov    0x4(%eax),%eax
   1111e:	89 d9                	mov    %ebx,%ecx
   11120:	01 c8                	add    %ecx,%eax
   11122:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   11124:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11128:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1112c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1112f:	3b 45 10             	cmp    0x10(%ebp),%eax
   11132:	7d 0e                	jge    11142 <bitmap_set_bit+0xcc>
   11134:	8b 45 08             	mov    0x8(%ebp),%eax
   11137:	8b 00                	mov    (%eax),%eax
   11139:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1113c:	0f 8c 48 ff ff ff    	jl     1108a <bitmap_set_bit+0x14>
        }
    }
} 
   11142:	90                   	nop
   11143:	83 c4 10             	add    $0x10,%esp
   11146:	5b                   	pop    %ebx
   11147:	5e                   	pop    %esi
   11148:	5d                   	pop    %ebp
   11149:	c3                   	ret    

0001114a <bitmap_alloc_nbits>:



int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   1114a:	55                   	push   %ebp
   1114b:	89 e5                	mov    %esp,%ebp
   1114d:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   11150:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   11157:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   1115e:	e9 85 00 00 00       	jmp    111e8 <bitmap_alloc_nbits+0x9e>
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   11163:	ff 75 fc             	pushl  -0x4(%ebp)
   11166:	ff 75 08             	pushl  0x8(%ebp)
   11169:	e8 b3 fe ff ff       	call   11021 <bitmap_get_bit>
   1116e:	83 c4 08             	add    $0x8,%esp
   11171:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11174:	74 06                	je     1117c <bitmap_alloc_nbits+0x32>
            search_idx++;
   11176:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   1117a:	eb 6c                	jmp    111e8 <bitmap_alloc_nbits+0x9e>
        }

        ok_idx = search_idx;
   1117c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1117f:	89 45 f8             	mov    %eax,-0x8(%ebp)

        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   11182:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11189:	eb 27                	jmp    111b2 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   1118b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1118e:	8d 50 01             	lea    0x1(%eax),%edx
   11191:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11194:	50                   	push   %eax
   11195:	ff 75 08             	pushl  0x8(%ebp)
   11198:	e8 84 fe ff ff       	call   11021 <bitmap_get_bit>
   1119d:	83 c4 08             	add    $0x8,%esp
   111a0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   111a3:	74 09                	je     111ae <bitmap_alloc_nbits+0x64>
                ok_idx = -1;
   111a5:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   111ac:	eb 16                	jmp    111c4 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   111ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   111b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111b5:	3b 45 10             	cmp    0x10(%ebp),%eax
   111b8:	7d 0a                	jge    111c4 <bitmap_alloc_nbits+0x7a>
   111ba:	8b 45 08             	mov    0x8(%ebp),%eax
   111bd:	8b 00                	mov    (%eax),%eax
   111bf:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   111c2:	7c c7                	jl     1118b <bitmap_alloc_nbits+0x41>
            }
        }

        if (i >= count) {
   111c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111c7:	3b 45 10             	cmp    0x10(%ebp),%eax
   111ca:	7c 1c                	jl     111e8 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   111cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   111cf:	f7 d0                	not    %eax
   111d1:	50                   	push   %eax
   111d2:	ff 75 10             	pushl  0x10(%ebp)
   111d5:	ff 75 f8             	pushl  -0x8(%ebp)
   111d8:	ff 75 08             	pushl  0x8(%ebp)
   111db:	e8 96 fe ff ff       	call   11076 <bitmap_set_bit>
   111e0:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   111e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111e6:	eb 13                	jmp    111fb <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   111e8:	8b 45 08             	mov    0x8(%ebp),%eax
   111eb:	8b 00                	mov    (%eax),%eax
   111ed:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   111f0:	0f 8c 6d ff ff ff    	jl     11163 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   111f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111fb:	c9                   	leave  
   111fc:	c3                   	ret    

000111fd <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   111fd:	55                   	push   %ebp
   111fe:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   11200:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11204:	74 3b                	je     11241 <k_strcpy+0x44>
   11206:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1120a:	74 35                	je     11241 <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   1120c:	eb 17                	jmp    11225 <k_strcpy+0x28>
        *dest++ = *src++;
   1120e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11211:	8d 42 01             	lea    0x1(%edx),%eax
   11214:	89 45 0c             	mov    %eax,0xc(%ebp)
   11217:	8b 45 08             	mov    0x8(%ebp),%eax
   1121a:	8d 48 01             	lea    0x1(%eax),%ecx
   1121d:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11220:	0f b6 12             	movzbl (%edx),%edx
   11223:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   11225:	8b 45 08             	mov    0x8(%ebp),%eax
   11228:	0f b6 00             	movzbl (%eax),%eax
   1122b:	84 c0                	test   %al,%al
   1122d:	74 0a                	je     11239 <k_strcpy+0x3c>
   1122f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11232:	0f b6 00             	movzbl (%eax),%eax
   11235:	84 c0                	test   %al,%al
   11237:	75 d5                	jne    1120e <k_strcpy+0x11>
    }
    *dest = '\0'; 
   11239:	8b 45 08             	mov    0x8(%ebp),%eax
   1123c:	c6 00 00             	movb   $0x0,(%eax)
   1123f:	eb 01                	jmp    11242 <k_strcpy+0x45>
        return;
   11241:	90                   	nop
}
   11242:	5d                   	pop    %ebp
   11243:	c3                   	ret    

00011244 <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   11244:	55                   	push   %ebp
   11245:	89 e5                	mov    %esp,%ebp
   11247:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1124a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1124e:	74 61                	je     112b1 <k_strncpy+0x6d>
   11250:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11254:	74 5b                	je     112b1 <k_strncpy+0x6d>
   11256:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1125a:	74 55                	je     112b1 <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   1125c:	8b 45 08             	mov    0x8(%ebp),%eax
   1125f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   11262:	8b 45 0c             	mov    0xc(%ebp),%eax
   11265:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   11268:	eb 17                	jmp    11281 <k_strncpy+0x3d>
        *d++ = *s++;
   1126a:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1126d:	8d 42 01             	lea    0x1(%edx),%eax
   11270:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11273:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11276:	8d 48 01             	lea    0x1(%eax),%ecx
   11279:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1127c:	0f b6 12             	movzbl (%edx),%edx
   1127f:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   11281:	8b 45 10             	mov    0x10(%ebp),%eax
   11284:	8d 50 ff             	lea    -0x1(%eax),%edx
   11287:	89 55 10             	mov    %edx,0x10(%ebp)
   1128a:	85 c0                	test   %eax,%eax
   1128c:	7e 0a                	jle    11298 <k_strncpy+0x54>
   1128e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11291:	0f b6 00             	movzbl (%eax),%eax
   11294:	84 c0                	test   %al,%al
   11296:	75 d2                	jne    1126a <k_strncpy+0x26>
    } 
    if (size == 0) {
   11298:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1129c:	75 0b                	jne    112a9 <k_strncpy+0x65>
        *(d - 1) = '\0';
   1129e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112a1:	83 e8 01             	sub    $0x1,%eax
   112a4:	c6 00 00             	movb   $0x0,(%eax)
   112a7:	eb 09                	jmp    112b2 <k_strncpy+0x6e>
    } else {
        *d = '\0';
   112a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112ac:	c6 00 00             	movb   $0x0,(%eax)
   112af:	eb 01                	jmp    112b2 <k_strncpy+0x6e>
        return;
   112b1:	90                   	nop
    }
}
   112b2:	c9                   	leave  
   112b3:	c3                   	ret    

000112b4 <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   112b4:	55                   	push   %ebp
   112b5:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   112b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112bb:	74 06                	je     112c3 <k_strncmp+0xf>
   112bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112c1:	75 0f                	jne    112d2 <k_strncmp+0x1e>
   112c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   112c8:	eb 62                	jmp    1132c <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   112ca:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   112ce:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   112d2:	8b 45 08             	mov    0x8(%ebp),%eax
   112d5:	0f b6 00             	movzbl (%eax),%eax
   112d8:	84 c0                	test   %al,%al
   112da:	74 20                	je     112fc <k_strncmp+0x48>
   112dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   112df:	0f b6 00             	movzbl (%eax),%eax
   112e2:	84 c0                	test   %al,%al
   112e4:	74 16                	je     112fc <k_strncmp+0x48>
   112e6:	8b 45 08             	mov    0x8(%ebp),%eax
   112e9:	0f b6 10             	movzbl (%eax),%edx
   112ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   112ef:	0f b6 00             	movzbl (%eax),%eax
   112f2:	38 c2                	cmp    %al,%dl
   112f4:	75 06                	jne    112fc <k_strncmp+0x48>
   112f6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112fa:	75 ce                	jne    112ca <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   112fc:	8b 45 08             	mov    0x8(%ebp),%eax
   112ff:	0f b6 00             	movzbl (%eax),%eax
   11302:	84 c0                	test   %al,%al
   11304:	74 21                	je     11327 <k_strncmp+0x73>
   11306:	8b 45 0c             	mov    0xc(%ebp),%eax
   11309:	0f b6 00             	movzbl (%eax),%eax
   1130c:	84 c0                	test   %al,%al
   1130e:	74 17                	je     11327 <k_strncmp+0x73>
   11310:	8b 45 08             	mov    0x8(%ebp),%eax
   11313:	0f b6 10             	movzbl (%eax),%edx
   11316:	8b 45 0c             	mov    0xc(%ebp),%eax
   11319:	0f b6 00             	movzbl (%eax),%eax
   1131c:	38 c2                	cmp    %al,%dl
   1131e:	74 07                	je     11327 <k_strncmp+0x73>
   11320:	b8 01 00 00 00       	mov    $0x1,%eax
   11325:	eb 05                	jmp    1132c <k_strncmp+0x78>
   11327:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1132c:	5d                   	pop    %ebp
   1132d:	c3                   	ret    

0001132e <k_strlen>:
int k_strlen(const char *str) {
   1132e:	55                   	push   %ebp
   1132f:	89 e5                	mov    %esp,%ebp
   11331:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   11334:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11338:	75 07                	jne    11341 <k_strlen+0x13>
        return 0;
   1133a:	b8 00 00 00 00       	mov    $0x0,%eax
   1133f:	eb 26                	jmp    11367 <k_strlen+0x39>
    }

    int len = 0;
   11341:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   11348:	8b 45 08             	mov    0x8(%ebp),%eax
   1134b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   1134e:	eb 04                	jmp    11354 <k_strlen+0x26>
        len++;
   11350:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   11354:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11357:	8d 50 01             	lea    0x1(%eax),%edx
   1135a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1135d:	0f b6 00             	movzbl (%eax),%eax
   11360:	84 c0                	test   %al,%al
   11362:	75 ec                	jne    11350 <k_strlen+0x22>
    }

    return len;
   11364:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11367:	c9                   	leave  
   11368:	c3                   	ret    

00011369 <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   11369:	55                   	push   %ebp
   1136a:	89 e5                	mov    %esp,%ebp
   1136c:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1136f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11373:	74 40                	je     113b5 <k_memcpy+0x4c>
   11375:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11379:	74 3a                	je     113b5 <k_memcpy+0x4c>
   1137b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1137f:	74 34                	je     113b5 <k_memcpy+0x4c>
        return;
    }
    uint8_t * s = (uint8_t *)src;
   11381:	8b 45 0c             	mov    0xc(%ebp),%eax
   11384:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   11387:	8b 45 08             	mov    0x8(%ebp),%eax
   1138a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   1138d:	eb 17                	jmp    113a6 <k_memcpy+0x3d>
        *d++ = *s++;
   1138f:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11392:	8d 42 01             	lea    0x1(%edx),%eax
   11395:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11398:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1139b:	8d 48 01             	lea    0x1(%eax),%ecx
   1139e:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113a1:	0f b6 12             	movzbl (%edx),%edx
   113a4:	88 10                	mov    %dl,(%eax)
    while (size--) {
   113a6:	8b 45 10             	mov    0x10(%ebp),%eax
   113a9:	8d 50 ff             	lea    -0x1(%eax),%edx
   113ac:	89 55 10             	mov    %edx,0x10(%ebp)
   113af:	85 c0                	test   %eax,%eax
   113b1:	75 dc                	jne    1138f <k_memcpy+0x26>
   113b3:	eb 01                	jmp    113b6 <k_memcpy+0x4d>
        return;
   113b5:	90                   	nop
    }
}
   113b6:	c9                   	leave  
   113b7:	c3                   	ret    

000113b8 <k_memset>:


void k_memset(void* dest, uint8_t v, int size) {
   113b8:	55                   	push   %ebp
   113b9:	89 e5                	mov    %esp,%ebp
   113bb:	83 ec 14             	sub    $0x14,%esp
   113be:	8b 45 0c             	mov    0xc(%ebp),%eax
   113c1:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   113c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113c8:	74 2c                	je     113f6 <k_memset+0x3e>
   113ca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   113ce:	74 26                	je     113f6 <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   113d0:	8b 45 08             	mov    0x8(%ebp),%eax
   113d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   113d6:	eb 0f                	jmp    113e7 <k_memset+0x2f>
        *d++ = v;
   113d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113db:	8d 50 01             	lea    0x1(%eax),%edx
   113de:	89 55 fc             	mov    %edx,-0x4(%ebp)
   113e1:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   113e5:	88 10                	mov    %dl,(%eax)
    while(size--) {
   113e7:	8b 45 10             	mov    0x10(%ebp),%eax
   113ea:	8d 50 ff             	lea    -0x1(%eax),%edx
   113ed:	89 55 10             	mov    %edx,0x10(%ebp)
   113f0:	85 c0                	test   %eax,%eax
   113f2:	75 e4                	jne    113d8 <k_memset+0x20>
   113f4:	eb 01                	jmp    113f7 <k_memset+0x3f>
    if(!dest || !size) return;
   113f6:	90                   	nop
    }
}
   113f7:	c9                   	leave  
   113f8:	c3                   	ret    

000113f9 <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   113f9:	55                   	push   %ebp
   113fa:	89 e5                	mov    %esp,%ebp
   113fc:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   113ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11403:	74 0c                	je     11411 <k_memcmp+0x18>
   11405:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11409:	74 06                	je     11411 <k_memcmp+0x18>
   1140b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1140f:	74 07                	je     11418 <k_memcmp+0x1f>
        return 1;
   11411:	b8 01 00 00 00       	mov    $0x1,%eax
   11416:	eb 43                	jmp    1145b <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11418:	8b 45 08             	mov    0x8(%ebp),%eax
   1141b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   1141e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11421:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   11424:	eb 23                	jmp    11449 <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   11426:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11429:	8d 50 01             	lea    0x1(%eax),%edx
   1142c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1142f:	0f b6 08             	movzbl (%eax),%ecx
   11432:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11435:	8d 50 01             	lea    0x1(%eax),%edx
   11438:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1143b:	0f b6 00             	movzbl (%eax),%eax
   1143e:	38 c1                	cmp    %al,%cl
   11440:	74 07                	je     11449 <k_memcmp+0x50>
        return 1;
   11442:	b8 01 00 00 00       	mov    $0x1,%eax
   11447:	eb 12                	jmp    1145b <k_memcmp+0x62>
    while(size--) {
   11449:	8b 45 10             	mov    0x10(%ebp),%eax
   1144c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1144f:	89 55 10             	mov    %edx,0x10(%ebp)
   11452:	85 c0                	test   %eax,%eax
   11454:	75 d0                	jne    11426 <k_memcmp+0x2d>
    }

    return 0;
   11456:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1145b:	c9                   	leave  
   1145c:	c3                   	ret    

0001145d <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   1145d:	55                   	push   %ebp
   1145e:	89 e5                	mov    %esp,%ebp
   11460:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11463:	8b 45 08             	mov    0x8(%ebp),%eax
   11466:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   11469:	8b 45 0c             	mov    0xc(%ebp),%eax
   1146c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   1146f:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11473:	74 1d                	je     11492 <k_itoa+0x35>
   11475:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11479:	74 17                	je     11492 <k_itoa+0x35>
   1147b:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1147f:	74 11                	je     11492 <k_itoa+0x35>
   11481:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11485:	74 0b                	je     11492 <k_itoa+0x35>
        *p = '\0';
   11487:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1148a:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1148d:	e9 a0 00 00 00       	jmp    11532 <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   11492:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11496:	79 12                	jns    114aa <k_itoa+0x4d>
   11498:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1149c:	75 0c                	jne    114aa <k_itoa+0x4d>
        *p++ = '-';
   1149e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114a1:	8d 50 01             	lea    0x1(%eax),%edx
   114a4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114a7:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   114aa:	8b 0d 00 30 01 00    	mov    0x13000,%ecx
   114b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   114b3:	99                   	cltd   
   114b4:	f7 7d 10             	idivl  0x10(%ebp)
   114b7:	89 d0                	mov    %edx,%eax
   114b9:	83 c0 0f             	add    $0xf,%eax
   114bc:	01 c8                	add    %ecx,%eax
   114be:	0f b6 00             	movzbl (%eax),%eax
   114c1:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   114c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114c7:	8d 50 01             	lea    0x1(%eax),%edx
   114ca:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114cd:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   114d1:	88 10                	mov    %dl,(%eax)
        num /= base;
   114d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   114d6:	99                   	cltd   
   114d7:	f7 7d 10             	idivl  0x10(%ebp)
   114da:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   114dd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114e1:	75 c7                	jne    114aa <k_itoa+0x4d>

    *p-- = '\0';
   114e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114e6:	8d 50 ff             	lea    -0x1(%eax),%edx
   114e9:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114ec:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   114ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   114f3:	7f 08                	jg     114fd <k_itoa+0xa0>
   114f5:	8b 45 08             	mov    0x8(%ebp),%eax
   114f8:	83 c0 01             	add    $0x1,%eax
   114fb:	eb 03                	jmp    11500 <k_itoa+0xa3>
   114fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11500:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   11503:	eb 25                	jmp    1152a <k_itoa+0xcd>
        char ch = *start;
   11505:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11508:	0f b6 00             	movzbl (%eax),%eax
   1150b:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1150e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11511:	0f b6 10             	movzbl (%eax),%edx
   11514:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11517:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11519:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1151c:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   11520:	88 10                	mov    %dl,(%eax)

        p--;
   11522:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11526:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   1152a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1152d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   11530:	72 d3                	jb     11505 <k_itoa+0xa8>
    }
}
   11532:	c9                   	leave  
   11533:	c3                   	ret    

00011534 <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   11534:	55                   	push   %ebp
   11535:	89 e5                	mov    %esp,%ebp
   11537:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   1153a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   11541:	8b 45 08             	mov    0x8(%ebp),%eax
   11544:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   11547:	e9 19 01 00 00       	jmp    11665 <k_vsprint+0x131>
        switch (state) {
   1154c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1154f:	85 c0                	test   %eax,%eax
   11551:	74 0a                	je     1155d <k_vsprint+0x29>
   11553:	83 f8 01             	cmp    $0x1,%eax
   11556:	74 2b                	je     11583 <k_vsprint+0x4f>
   11558:	e9 07 01 00 00       	jmp    11664 <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   1155d:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11561:	75 0c                	jne    1156f <k_vsprint+0x3b>
                state = READ_FMT;
   11563:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1156a:	e9 f6 00 00 00       	jmp    11665 <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   1156f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11572:	8d 50 01             	lea    0x1(%eax),%edx
   11575:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11578:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1157c:	88 10                	mov    %dl,(%eax)
            }
            break;
   1157e:	e9 e2 00 00 00       	jmp    11665 <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   11583:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11587:	75 31                	jne    115ba <k_vsprint+0x86>
                int num  = va_arg(args, int);
   11589:	8b 45 10             	mov    0x10(%ebp),%eax
   1158c:	8d 50 04             	lea    0x4(%eax),%edx
   1158f:	89 55 10             	mov    %edx,0x10(%ebp)
   11592:	8b 00                	mov    (%eax),%eax
   11594:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   11597:	6a 0a                	push   $0xa
   11599:	ff 75 e4             	pushl  -0x1c(%ebp)
   1159c:	ff 75 f8             	pushl  -0x8(%ebp)
   1159f:	e8 b9 fe ff ff       	call   1145d <k_itoa>
   115a4:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   115a7:	ff 75 f8             	pushl  -0x8(%ebp)
   115aa:	e8 7f fd ff ff       	call   1132e <k_strlen>
   115af:	83 c4 04             	add    $0x4,%esp
   115b2:	01 45 f8             	add    %eax,-0x8(%ebp)
   115b5:	e9 a1 00 00 00       	jmp    1165b <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   115ba:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   115be:	75 2e                	jne    115ee <k_vsprint+0xba>
                int num  = va_arg(args, int);
   115c0:	8b 45 10             	mov    0x10(%ebp),%eax
   115c3:	8d 50 04             	lea    0x4(%eax),%edx
   115c6:	89 55 10             	mov    %edx,0x10(%ebp)
   115c9:	8b 00                	mov    (%eax),%eax
   115cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   115ce:	6a 10                	push   $0x10
   115d0:	ff 75 e8             	pushl  -0x18(%ebp)
   115d3:	ff 75 f8             	pushl  -0x8(%ebp)
   115d6:	e8 82 fe ff ff       	call   1145d <k_itoa>
   115db:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   115de:	ff 75 f8             	pushl  -0x8(%ebp)
   115e1:	e8 48 fd ff ff       	call   1132e <k_strlen>
   115e6:	83 c4 04             	add    $0x4,%esp
   115e9:	01 45 f8             	add    %eax,-0x8(%ebp)
   115ec:	eb 6d                	jmp    1165b <k_vsprint+0x127>

            }else if (ch == 'c') {
   115ee:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   115f2:	75 1f                	jne    11613 <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   115f4:	8b 45 10             	mov    0x10(%ebp),%eax
   115f7:	8d 50 04             	lea    0x4(%eax),%edx
   115fa:	89 55 10             	mov    %edx,0x10(%ebp)
   115fd:	8b 00                	mov    (%eax),%eax
   115ff:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   11602:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11605:	8d 50 01             	lea    0x1(%eax),%edx
   11608:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1160b:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1160f:	88 10                	mov    %dl,(%eax)
   11611:	eb 48                	jmp    1165b <k_vsprint+0x127>

            }else if (ch == 's') {
   11613:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11617:	75 42                	jne    1165b <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   11619:	8b 45 10             	mov    0x10(%ebp),%eax
   1161c:	8d 50 04             	lea    0x4(%eax),%edx
   1161f:	89 55 10             	mov    %edx,0x10(%ebp)
   11622:	8b 00                	mov    (%eax),%eax
   11624:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   11627:	ff 75 f4             	pushl  -0xc(%ebp)
   1162a:	e8 ff fc ff ff       	call   1132e <k_strlen>
   1162f:	83 c4 04             	add    $0x4,%esp
   11632:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   11635:	eb 17                	jmp    1164e <k_vsprint+0x11a>
                    *curr++ = *str++;
   11637:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1163a:	8d 42 01             	lea    0x1(%edx),%eax
   1163d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11640:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11643:	8d 48 01             	lea    0x1(%eax),%ecx
   11646:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11649:	0f b6 12             	movzbl (%edx),%edx
   1164c:	88 10                	mov    %dl,(%eax)
                while(len--) {
   1164e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11651:	8d 50 ff             	lea    -0x1(%eax),%edx
   11654:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11657:	85 c0                	test   %eax,%eax
   11659:	75 dc                	jne    11637 <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   1165b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11662:	eb 01                	jmp    11665 <k_vsprint+0x131>
        
        default:
            break;
   11664:	90                   	nop
    while((ch = *fmt++)) {
   11665:	8b 45 0c             	mov    0xc(%ebp),%eax
   11668:	8d 50 01             	lea    0x1(%eax),%edx
   1166b:	89 55 0c             	mov    %edx,0xc(%ebp)
   1166e:	0f b6 00             	movzbl (%eax),%eax
   11671:	88 45 ef             	mov    %al,-0x11(%ebp)
   11674:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11678:	0f 85 ce fe ff ff    	jne    1154c <k_vsprint+0x18>
        }
    }
   1167e:	90                   	nop
   1167f:	c9                   	leave  
   11680:	c3                   	ret    

00011681 <list_is_empty>:
static inline int list_is_empty (list_t* list) {
   11681:	55                   	push   %ebp
   11682:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   11684:	8b 45 08             	mov    0x8(%ebp),%eax
   11687:	8b 40 08             	mov    0x8(%eax),%eax
   1168a:	85 c0                	test   %eax,%eax
   1168c:	0f 94 c0             	sete   %al
   1168f:	0f b6 c0             	movzbl %al,%eax
}
   11692:	5d                   	pop    %ebp
   11693:	c3                   	ret    

00011694 <list_init>:
#include <list.h>

void list_init(list_t* list) {
   11694:	55                   	push   %ebp
   11695:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t*)0;
   11697:	8b 45 08             	mov    0x8(%ebp),%eax
   1169a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116a1:	8b 45 08             	mov    0x8(%ebp),%eax
   116a4:	8b 50 04             	mov    0x4(%eax),%edx
   116a7:	8b 45 08             	mov    0x8(%ebp),%eax
   116aa:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   116ac:	8b 45 08             	mov    0x8(%ebp),%eax
   116af:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   116b6:	90                   	nop
   116b7:	5d                   	pop    %ebp
   116b8:	c3                   	ret    

000116b9 <list_insert_first>:

void list_insert_first (list_t* list, list_node_t* node) {
   116b9:	55                   	push   %ebp
   116ba:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   116bc:	8b 45 08             	mov    0x8(%ebp),%eax
   116bf:	8b 10                	mov    (%eax),%edx
   116c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   116c4:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   116c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   116ca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if(list_is_empty(list)) {
   116d0:	ff 75 08             	pushl  0x8(%ebp)
   116d3:	e8 a9 ff ff ff       	call   11681 <list_is_empty>
   116d8:	83 c4 04             	add    $0x4,%esp
   116db:	85 c0                	test   %eax,%eax
   116dd:	74 15                	je     116f4 <list_insert_first+0x3b>
        list->last = list->first = node;
   116df:	8b 45 08             	mov    0x8(%ebp),%eax
   116e2:	8b 55 0c             	mov    0xc(%ebp),%edx
   116e5:	89 10                	mov    %edx,(%eax)
   116e7:	8b 45 08             	mov    0x8(%ebp),%eax
   116ea:	8b 10                	mov    (%eax),%edx
   116ec:	8b 45 08             	mov    0x8(%ebp),%eax
   116ef:	89 50 04             	mov    %edx,0x4(%eax)
   116f2:	eb 12                	jmp    11706 <list_insert_first+0x4d>
    } else {
        list->first->pre = node;
   116f4:	8b 45 08             	mov    0x8(%ebp),%eax
   116f7:	8b 00                	mov    (%eax),%eax
   116f9:	8b 55 0c             	mov    0xc(%ebp),%edx
   116fc:	89 10                	mov    %edx,(%eax)
        list->first = node;
   116fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11701:	8b 55 0c             	mov    0xc(%ebp),%edx
   11704:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   11706:	8b 45 08             	mov    0x8(%ebp),%eax
   11709:	8b 40 08             	mov    0x8(%eax),%eax
   1170c:	8d 50 01             	lea    0x1(%eax),%edx
   1170f:	8b 45 08             	mov    0x8(%ebp),%eax
   11712:	89 50 08             	mov    %edx,0x8(%eax)
}
   11715:	90                   	nop
   11716:	c9                   	leave  
   11717:	c3                   	ret    

00011718 <list_insert_last>:

void list_insert_last (list_t* list, list_node_t* node) {
   11718:	55                   	push   %ebp
   11719:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1171b:	8b 45 08             	mov    0x8(%ebp),%eax
   1171e:	8b 50 04             	mov    0x4(%eax),%edx
   11721:	8b 45 0c             	mov    0xc(%ebp),%eax
   11724:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11726:	8b 45 0c             	mov    0xc(%ebp),%eax
   11729:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   11730:	ff 75 08             	pushl  0x8(%ebp)
   11733:	e8 49 ff ff ff       	call   11681 <list_is_empty>
   11738:	83 c4 04             	add    $0x4,%esp
   1173b:	85 c0                	test   %eax,%eax
   1173d:	74 16                	je     11755 <list_insert_last+0x3d>
        list->first = list->last = node;
   1173f:	8b 45 08             	mov    0x8(%ebp),%eax
   11742:	8b 55 0c             	mov    0xc(%ebp),%edx
   11745:	89 50 04             	mov    %edx,0x4(%eax)
   11748:	8b 45 08             	mov    0x8(%ebp),%eax
   1174b:	8b 50 04             	mov    0x4(%eax),%edx
   1174e:	8b 45 08             	mov    0x8(%ebp),%eax
   11751:	89 10                	mov    %edx,(%eax)
   11753:	eb 15                	jmp    1176a <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11755:	8b 45 08             	mov    0x8(%ebp),%eax
   11758:	8b 40 04             	mov    0x4(%eax),%eax
   1175b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1175e:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11761:	8b 45 08             	mov    0x8(%ebp),%eax
   11764:	8b 55 0c             	mov    0xc(%ebp),%edx
   11767:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   1176a:	8b 45 08             	mov    0x8(%ebp),%eax
   1176d:	8b 40 08             	mov    0x8(%eax),%eax
   11770:	8d 50 01             	lea    0x1(%eax),%edx
   11773:	8b 45 08             	mov    0x8(%ebp),%eax
   11776:	89 50 08             	mov    %edx,0x8(%eax)
}
   11779:	90                   	nop
   1177a:	c9                   	leave  
   1177b:	c3                   	ret    

0001177c <list_delete_first>:


list_node_t* list_delete_first (list_t* list) {
   1177c:	55                   	push   %ebp
   1177d:	89 e5                	mov    %esp,%ebp
   1177f:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list)) {
   11782:	ff 75 08             	pushl  0x8(%ebp)
   11785:	e8 f7 fe ff ff       	call   11681 <list_is_empty>
   1178a:	83 c4 04             	add    $0x4,%esp
   1178d:	85 c0                	test   %eax,%eax
   1178f:	74 07                	je     11798 <list_delete_first+0x1c>
        return (list_node_t*)0;
   11791:	b8 00 00 00 00       	mov    $0x0,%eax
   11796:	eb 5b                	jmp    117f3 <list_delete_first+0x77>
    }

    list_node_t* remove_node = list->first;
   11798:	8b 45 08             	mov    0x8(%ebp),%eax
   1179b:	8b 00                	mov    (%eax),%eax
   1179d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   117a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117a3:	8b 50 04             	mov    0x4(%eax),%edx
   117a6:	8b 45 08             	mov    0x8(%ebp),%eax
   117a9:	89 10                	mov    %edx,(%eax)

    if( list->first == (list_node_t*)0 ) {
   117ab:	8b 45 08             	mov    0x8(%ebp),%eax
   117ae:	8b 00                	mov    (%eax),%eax
   117b0:	85 c0                	test   %eax,%eax
   117b2:	75 0c                	jne    117c0 <list_delete_first+0x44>
        list->last = (list_node_t*)0;
   117b4:	8b 45 08             	mov    0x8(%ebp),%eax
   117b7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   117be:	eb 0c                	jmp    117cc <list_delete_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t*)0;
   117c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117c3:	8b 40 04             	mov    0x4(%eax),%eax
   117c6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        //list->first->pre = (list_node_t*)0;
    }

    remove_node->pre = remove_node->next = (list_node_t*)0;
   117cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117cf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   117d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117d9:	8b 50 04             	mov    0x4(%eax),%edx
   117dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117df:	89 10                	mov    %edx,(%eax)
    list->count--;
   117e1:	8b 45 08             	mov    0x8(%ebp),%eax
   117e4:	8b 40 08             	mov    0x8(%eax),%eax
   117e7:	8d 50 ff             	lea    -0x1(%eax),%edx
   117ea:	8b 45 08             	mov    0x8(%ebp),%eax
   117ed:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   117f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   117f3:	c9                   	leave  
   117f4:	c3                   	ret    

000117f5 <list_delete>:

list_node_t* list_delete (list_t* list, list_node_t* node) {
   117f5:	55                   	push   %ebp
   117f6:	89 e5                	mov    %esp,%ebp
    if(node == list->first) {
   117f8:	8b 45 08             	mov    0x8(%ebp),%eax
   117fb:	8b 00                	mov    (%eax),%eax
   117fd:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11800:	75 0b                	jne    1180d <list_delete+0x18>
        list->first = node->next;
   11802:	8b 45 0c             	mov    0xc(%ebp),%eax
   11805:	8b 50 04             	mov    0x4(%eax),%edx
   11808:	8b 45 08             	mov    0x8(%ebp),%eax
   1180b:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last) {
   1180d:	8b 45 08             	mov    0x8(%ebp),%eax
   11810:	8b 40 04             	mov    0x4(%eax),%eax
   11813:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11816:	75 0b                	jne    11823 <list_delete+0x2e>
        list->last = node->pre;
   11818:	8b 45 0c             	mov    0xc(%ebp),%eax
   1181b:	8b 10                	mov    (%eax),%edx
   1181d:	8b 45 08             	mov    0x8(%ebp),%eax
   11820:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if(node->pre) {
   11823:	8b 45 0c             	mov    0xc(%ebp),%eax
   11826:	8b 00                	mov    (%eax),%eax
   11828:	85 c0                	test   %eax,%eax
   1182a:	74 0e                	je     1183a <list_delete+0x45>
        node->pre->next = node->next;
   1182c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1182f:	8b 00                	mov    (%eax),%eax
   11831:	8b 55 0c             	mov    0xc(%ebp),%edx
   11834:	8b 52 04             	mov    0x4(%edx),%edx
   11837:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) {
   1183a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1183d:	8b 40 04             	mov    0x4(%eax),%eax
   11840:	85 c0                	test   %eax,%eax
   11842:	74 0d                	je     11851 <list_delete+0x5c>
        node->next->pre = node->pre;
   11844:	8b 45 0c             	mov    0xc(%ebp),%eax
   11847:	8b 40 04             	mov    0x4(%eax),%eax
   1184a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1184d:	8b 12                	mov    (%edx),%edx
   1184f:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   11851:	8b 45 0c             	mov    0xc(%ebp),%eax
   11854:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1185b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1185e:	8b 50 04             	mov    0x4(%eax),%edx
   11861:	8b 45 0c             	mov    0xc(%ebp),%eax
   11864:	89 10                	mov    %edx,(%eax)

    list->count--;
   11866:	8b 45 08             	mov    0x8(%ebp),%eax
   11869:	8b 40 08             	mov    0x8(%eax),%eax
   1186c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1186f:	8b 45 08             	mov    0x8(%ebp),%eax
   11872:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11875:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11878:	5d                   	pop    %ebp
   11879:	c3                   	ret    

0001187a <inb>:
static inline uint8_t inb(uint16_t  port) {
   1187a:	55                   	push   %ebp
   1187b:	89 e5                	mov    %esp,%ebp
   1187d:	83 ec 14             	sub    $0x14,%esp
   11880:	8b 45 08             	mov    0x8(%ebp),%eax
   11883:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   11887:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1188b:	89 c2                	mov    %eax,%edx
   1188d:	ec                   	in     (%dx),%al
   1188e:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   11891:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11895:	c9                   	leave  
   11896:	c3                   	ret    

00011897 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11897:	55                   	push   %ebp
   11898:	89 e5                	mov    %esp,%ebp
   1189a:	83 ec 08             	sub    $0x8,%esp
   1189d:	8b 55 08             	mov    0x8(%ebp),%edx
   118a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   118a3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   118a7:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   118aa:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   118ae:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   118b2:	ee                   	out    %al,(%dx)
}
   118b3:	90                   	nop
   118b4:	c9                   	leave  
   118b5:	c3                   	ret    

000118b6 <log_init>:

#define COM1_PORT       0x3f8

static mutex_t mutex;

void log_init() {
   118b6:	55                   	push   %ebp
   118b7:	89 e5                	mov    %esp,%ebp
   118b9:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   118bc:	83 ec 0c             	sub    $0xc,%esp
   118bf:	68 40 4c 01 00       	push   $0x14c40
   118c4:	e8 b9 08 00 00       	call   12182 <mutex_init>
   118c9:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   118cc:	83 ec 08             	sub    $0x8,%esp
   118cf:	6a 00                	push   $0x0
   118d1:	68 f9 03 00 00       	push   $0x3f9
   118d6:	e8 bc ff ff ff       	call   11897 <outb>
   118db:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   118de:	83 ec 08             	sub    $0x8,%esp
   118e1:	68 80 00 00 00       	push   $0x80
   118e6:	68 fb 03 00 00       	push   $0x3fb
   118eb:	e8 a7 ff ff ff       	call   11897 <outb>
   118f0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   118f3:	83 ec 08             	sub    $0x8,%esp
   118f6:	6a 03                	push   $0x3
   118f8:	68 f8 03 00 00       	push   $0x3f8
   118fd:	e8 95 ff ff ff       	call   11897 <outb>
   11902:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   11905:	83 ec 08             	sub    $0x8,%esp
   11908:	6a 00                	push   $0x0
   1190a:	68 f9 03 00 00       	push   $0x3f9
   1190f:	e8 83 ff ff ff       	call   11897 <outb>
   11914:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   11917:	83 ec 08             	sub    $0x8,%esp
   1191a:	6a 03                	push   $0x3
   1191c:	68 fb 03 00 00       	push   $0x3fb
   11921:	e8 71 ff ff ff       	call   11897 <outb>
   11926:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xc7);
   11929:	83 ec 08             	sub    $0x8,%esp
   1192c:	68 c7 00 00 00       	push   $0xc7
   11931:	68 fa 03 00 00       	push   $0x3fa
   11936:	e8 5c ff ff ff       	call   11897 <outb>
   1193b:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0f);
   1193e:	83 ec 08             	sub    $0x8,%esp
   11941:	6a 0f                	push   $0xf
   11943:	68 fc 03 00 00       	push   $0x3fc
   11948:	e8 4a ff ff ff       	call   11897 <outb>
   1194d:	83 c4 10             	add    $0x10,%esp
}
   11950:	90                   	nop
   11951:	c9                   	leave  
   11952:	c3                   	ret    

00011953 <klog>:


void klog(const char* fmt, ...) {
   11953:	55                   	push   %ebp
   11954:	89 e5                	mov    %esp,%ebp
   11956:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   1195c:	83 ec 04             	sub    $0x4,%esp
   1195f:	68 80 00 00 00       	push   $0x80
   11964:	6a 00                	push   $0x0
   11966:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1196c:	50                   	push   %eax
   1196d:	e8 46 fa ff ff       	call   113b8 <k_memset>
   11972:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   11975:	8d 45 0c             	lea    0xc(%ebp),%eax
   11978:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    k_vsprint(buf, fmt, args);
   1197e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11984:	83 ec 04             	sub    $0x4,%esp
   11987:	50                   	push   %eax
   11988:	ff 75 08             	pushl  0x8(%ebp)
   1198b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11991:	50                   	push   %eax
   11992:	e8 9d fb ff ff       	call   11534 <k_vsprint>
   11997:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   1199a:	83 ec 0c             	sub    $0xc,%esp
   1199d:	68 40 4c 01 00       	push   $0x14c40
   119a2:	e8 09 08 00 00       	call   121b0 <mutex_lock>
   119a7:	83 c4 10             	add    $0x10,%esp
    // irq_state_t state = irq_enter_proection();

    const char *p = buf;
   119aa:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   119b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   119b3:	eb 3b                	jmp    119f0 <klog+0x9d>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   119b5:	90                   	nop
   119b6:	83 ec 0c             	sub    $0xc,%esp
   119b9:	68 fd 03 00 00       	push   $0x3fd
   119be:	e8 b7 fe ff ff       	call   1187a <inb>
   119c3:	83 c4 10             	add    $0x10,%esp
   119c6:	0f b6 c0             	movzbl %al,%eax
   119c9:	83 e0 40             	and    $0x40,%eax
   119cc:	85 c0                	test   %eax,%eax
   119ce:	74 e6                	je     119b6 <klog+0x63>
        outb(COM1_PORT, *p++);
   119d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119d3:	8d 50 01             	lea    0x1(%eax),%edx
   119d6:	89 55 f4             	mov    %edx,-0xc(%ebp)
   119d9:	0f b6 00             	movzbl (%eax),%eax
   119dc:	0f b6 c0             	movzbl %al,%eax
   119df:	83 ec 08             	sub    $0x8,%esp
   119e2:	50                   	push   %eax
   119e3:	68 f8 03 00 00       	push   $0x3f8
   119e8:	e8 aa fe ff ff       	call   11897 <outb>
   119ed:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   119f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119f3:	0f b6 00             	movzbl (%eax),%eax
   119f6:	84 c0                	test   %al,%al
   119f8:	75 bb                	jne    119b5 <klog+0x62>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   119fa:	83 ec 08             	sub    $0x8,%esp
   119fd:	6a 0d                	push   $0xd
   119ff:	68 f8 03 00 00       	push   $0x3f8
   11a04:	e8 8e fe ff ff       	call   11897 <outb>
   11a09:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   11a0c:	83 ec 08             	sub    $0x8,%esp
   11a0f:	6a 0a                	push   $0xa
   11a11:	68 f8 03 00 00       	push   $0x3f8
   11a16:	e8 7c fe ff ff       	call   11897 <outb>
   11a1b:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&mutex);
   11a1e:	83 ec 0c             	sub    $0xc,%esp
   11a21:	68 40 4c 01 00       	push   $0x14c40
   11a26:	e8 19 08 00 00       	call   12244 <mutex_unlock>
   11a2b:	83 c4 10             	add    $0x10,%esp
    // irq_leave_proection(state);

}
   11a2e:	90                   	nop
   11a2f:	c9                   	leave  
   11a30:	c3                   	ret    

00011a31 <down2>:

uint32_t memory_create_uvm();

void memory_init (boot_info_t* boot_info);

static inline uint32_t down2(uint32_t size, uint32_t bound) {
   11a31:	55                   	push   %ebp
   11a32:	89 e5                	mov    %esp,%ebp
    return size & ~ (bound - 1);
   11a34:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a37:	f7 d8                	neg    %eax
   11a39:	23 45 08             	and    0x8(%ebp),%eax
}
   11a3c:	5d                   	pop    %ebp
   11a3d:	c3                   	ret    

00011a3e <up2>:
static inline uint32_t up2(uint32_t size, uint32_t bound) {
   11a3e:	55                   	push   %ebp
   11a3f:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~ (bound - 1);
   11a41:	8b 55 08             	mov    0x8(%ebp),%edx
   11a44:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a47:	01 d0                	add    %edx,%eax
   11a49:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a4c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a4f:	f7 d8                	neg    %eax
   11a51:	21 d0                	and    %edx,%eax
}
   11a53:	5d                   	pop    %ebp
   11a54:	c3                   	ret    

00011a55 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   11a55:	55                   	push   %ebp
   11a56:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   11a58:	8b 45 08             	mov    0x8(%ebp),%eax
   11a5b:	0f 22 d8             	mov    %eax,%cr3
}
   11a5e:	90                   	nop
   11a5f:	5d                   	pop    %ebp
   11a60:	c3                   	ret    

00011a61 <mmu_set_page_dir>:
    };
}pte_t;
#pragma pack()


static inline void mmu_set_page_dir(uint32_t paddr) {
   11a61:	55                   	push   %ebp
   11a62:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11a64:	ff 75 08             	pushl  0x8(%ebp)
   11a67:	e8 e9 ff ff ff       	call   11a55 <write_cr3>
   11a6c:	83 c4 04             	add    $0x4,%esp
}
   11a6f:	90                   	nop
   11a70:	c9                   	leave  
   11a71:	c3                   	ret    

00011a72 <pde_index>:

static inline uint32_t pde_index (uint32_t vaddr) {
   11a72:	55                   	push   %ebp
   11a73:	89 e5                	mov    %esp,%ebp
   11a75:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22);      // 只取高10位
   11a78:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7b:	c1 e8 16             	shr    $0x16,%eax
   11a7e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   11a81:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11a84:	c9                   	leave  
   11a85:	c3                   	ret    

00011a86 <pde_paddr>:


static inline uint32_t pde_paddr (pde_t * pde) {
   11a86:	55                   	push   %ebp
   11a87:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   11a89:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   11a90:	c0 ea 04             	shr    $0x4,%dl
   11a93:	0f b6 d2             	movzbl %dl,%edx
   11a96:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   11a9a:	c1 e1 04             	shl    $0x4,%ecx
   11a9d:	09 ca                	or     %ecx,%edx
   11a9f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   11aa3:	c1 e0 0c             	shl    $0xc,%eax
   11aa6:	09 d0                	or     %edx,%eax
   11aa8:	c1 e0 0c             	shl    $0xc,%eax
}
   11aab:	5d                   	pop    %ebp
   11aac:	c3                   	ret    

00011aad <pte_index>:


static inline int pte_index (uint32_t vaddr) {
   11aad:	55                   	push   %ebp
   11aae:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   11ab0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab3:	c1 e8 0c             	shr    $0xc,%eax
   11ab6:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   11abb:	5d                   	pop    %ebp
   11abc:	c3                   	ret    

00011abd <addr_alloc_init>:
static pde_t g_kernel_page_dir[PDE_CNT] __attribute__( (aligned(MEM_PAGE_SIZE)) );


static void 
addr_alloc_init(addr_alloc_t * alloc, uint8_t* bits, uint32_t start, 
uint32_t size, uint32_t page_size) {
   11abd:	55                   	push   %ebp
   11abe:	89 e5                	mov    %esp,%ebp
   11ac0:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   11ac3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac6:	83 ec 0c             	sub    $0xc,%esp
   11ac9:	50                   	push   %eax
   11aca:	e8 b3 06 00 00       	call   12182 <mutex_init>
   11acf:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   11ad2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ad5:	8b 55 10             	mov    0x10(%ebp),%edx
   11ad8:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   11adb:	8b 45 08             	mov    0x8(%ebp),%eax
   11ade:	8b 55 14             	mov    0x14(%ebp),%edx
   11ae1:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   11ae4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae7:	8b 55 18             	mov    0x18(%ebp),%edx
   11aea:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   11aed:	8b 45 08             	mov    0x8(%ebp),%eax
   11af0:	8b 40 20             	mov    0x20(%eax),%eax
   11af3:	ba 00 00 00 00       	mov    $0x0,%edx
   11af8:	f7 75 18             	divl   0x18(%ebp)
   11afb:	89 c2                	mov    %eax,%edx
   11afd:	8b 45 08             	mov    0x8(%ebp),%eax
   11b00:	83 c0 14             	add    $0x14,%eax
   11b03:	6a 00                	push   $0x0
   11b05:	52                   	push   %edx
   11b06:	ff 75 0c             	pushl  0xc(%ebp)
   11b09:	50                   	push   %eax
   11b0a:	e8 bf f4 ff ff       	call   10fce <bitmap_init>
   11b0f:	83 c4 10             	add    $0x10,%esp
}
   11b12:	90                   	nop
   11b13:	c9                   	leave  
   11b14:	c3                   	ret    

00011b15 <addr_alloc_page>:


static uint32_t 
addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   11b15:	55                   	push   %ebp
   11b16:	89 e5                	mov    %esp,%ebp
   11b18:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   11b1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   11b22:	8b 45 08             	mov    0x8(%ebp),%eax
   11b25:	83 ec 0c             	sub    $0xc,%esp
   11b28:	50                   	push   %eax
   11b29:	e8 82 06 00 00       	call   121b0 <mutex_lock>
   11b2e:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   11b31:	8b 45 08             	mov    0x8(%ebp),%eax
   11b34:	83 c0 14             	add    $0x14,%eax
   11b37:	83 ec 04             	sub    $0x4,%esp
   11b3a:	ff 75 0c             	pushl  0xc(%ebp)
   11b3d:	6a 00                	push   $0x0
   11b3f:	50                   	push   %eax
   11b40:	e8 05 f6 ff ff       	call   1114a <bitmap_alloc_nbits>
   11b45:	83 c4 10             	add    $0x10,%esp
   11b48:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   11b4b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11b4f:	78 17                	js     11b68 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   11b51:	8b 45 08             	mov    0x8(%ebp),%eax
   11b54:	8b 50 1c             	mov    0x1c(%eax),%edx
   11b57:	8b 45 08             	mov    0x8(%ebp),%eax
   11b5a:	8b 48 24             	mov    0x24(%eax),%ecx
   11b5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b60:	0f af c1             	imul   %ecx,%eax
   11b63:	01 d0                	add    %edx,%eax
   11b65:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   11b68:	8b 45 08             	mov    0x8(%ebp),%eax
   11b6b:	83 ec 0c             	sub    $0xc,%esp
   11b6e:	50                   	push   %eax
   11b6f:	e8 d0 06 00 00       	call   12244 <mutex_unlock>
   11b74:	83 c4 10             	add    $0x10,%esp
    return addr;
   11b77:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11b7a:	c9                   	leave  
   11b7b:	c3                   	ret    

00011b7c <addr_free_page>:


static uint32_t
addr_free_page(addr_alloc_t * alloc, uint32_t addr, int page_count) {
   11b7c:	55                   	push   %ebp
   11b7d:	89 e5                	mov    %esp,%ebp
   11b7f:	53                   	push   %ebx
   11b80:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   11b83:	8b 45 08             	mov    0x8(%ebp),%eax
   11b86:	83 ec 0c             	sub    $0xc,%esp
   11b89:	50                   	push   %eax
   11b8a:	e8 21 06 00 00       	call   121b0 <mutex_lock>
   11b8f:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   11b92:	8b 45 08             	mov    0x8(%ebp),%eax
   11b95:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b98:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b9b:	89 d1                	mov    %edx,%ecx
   11b9d:	29 c1                	sub    %eax,%ecx
   11b9f:	8b 45 08             	mov    0x8(%ebp),%eax
   11ba2:	8b 58 24             	mov    0x24(%eax),%ebx
   11ba5:	89 c8                	mov    %ecx,%eax
   11ba7:	ba 00 00 00 00       	mov    $0x0,%edx
   11bac:	f7 f3                	div    %ebx
   11bae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   11bb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bb4:	8b 55 08             	mov    0x8(%ebp),%edx
   11bb7:	83 c2 14             	add    $0x14,%edx
   11bba:	6a 00                	push   $0x0
   11bbc:	ff 75 10             	pushl  0x10(%ebp)
   11bbf:	50                   	push   %eax
   11bc0:	52                   	push   %edx
   11bc1:	e8 b0 f4 ff ff       	call   11076 <bitmap_set_bit>
   11bc6:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   11bc9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bcc:	83 ec 0c             	sub    $0xc,%esp
   11bcf:	50                   	push   %eax
   11bd0:	e8 6f 06 00 00       	call   12244 <mutex_unlock>
   11bd5:	83 c4 10             	add    $0x10,%esp
}
   11bd8:	90                   	nop
   11bd9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11bdc:	c9                   	leave  
   11bdd:	c3                   	ret    

00011bde <some_test>:


void some_test() {
   11bde:	55                   	push   %ebp
   11bdf:	89 e5                	mov    %esp,%ebp
   11be1:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t addr_alloc;
    uint8_t bits[8];
    addr_alloc_init(&addr_alloc, bits, 0x1000, 64*4096, 4096);
   11be4:	83 ec 0c             	sub    $0xc,%esp
   11be7:	68 00 10 00 00       	push   $0x1000
   11bec:	68 00 00 04 00       	push   $0x40000
   11bf1:	68 00 10 00 00       	push   $0x1000
   11bf6:	8d 45 b8             	lea    -0x48(%ebp),%eax
   11bf9:	50                   	push   %eax
   11bfa:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11bfd:	50                   	push   %eax
   11bfe:	e8 ba fe ff ff       	call   11abd <addr_alloc_init>
   11c03:	83 c4 20             	add    $0x20,%esp
    for(int i=0; i<32; i++) {
   11c06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11c0d:	eb 2b                	jmp    11c3a <some_test+0x5c>
        uint32_t addr = addr_alloc_page(&addr_alloc, 2);
   11c0f:	83 ec 08             	sub    $0x8,%esp
   11c12:	6a 02                	push   $0x2
   11c14:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11c17:	50                   	push   %eax
   11c18:	e8 f8 fe ff ff       	call   11b15 <addr_alloc_page>
   11c1d:	83 c4 10             	add    $0x10,%esp
   11c20:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("alloc addr: 0x%x", addr);
   11c23:	83 ec 08             	sub    $0x8,%esp
   11c26:	ff 75 e8             	pushl  -0x18(%ebp)
   11c29:	68 c4 2e 01 00       	push   $0x12ec4
   11c2e:	e8 20 fd ff ff       	call   11953 <klog>
   11c33:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11c36:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11c3a:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   11c3e:	7e cf                	jle    11c0f <some_test+0x31>
    }
    uint32_t addr = 0x1000;
   11c40:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for(int i=0; i<32; i++) {
   11c47:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11c4e:	eb 32                	jmp    11c82 <some_test+0xa4>
        addr_free_page(&addr_alloc, addr, 2);
   11c50:	83 ec 04             	sub    $0x4,%esp
   11c53:	6a 02                	push   $0x2
   11c55:	ff 75 f0             	pushl  -0x10(%ebp)
   11c58:	8d 45 c0             	lea    -0x40(%ebp),%eax
   11c5b:	50                   	push   %eax
   11c5c:	e8 1b ff ff ff       	call   11b7c <addr_free_page>
   11c61:	83 c4 10             	add    $0x10,%esp
        addr += 8192;
   11c64:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
        klog("free addr: 0x%x", addr);
   11c6b:	83 ec 08             	sub    $0x8,%esp
   11c6e:	ff 75 f0             	pushl  -0x10(%ebp)
   11c71:	68 d5 2e 01 00       	push   $0x12ed5
   11c76:	e8 d8 fc ff ff       	call   11953 <klog>
   11c7b:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<32; i++) {
   11c7e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11c82:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   11c86:	7e c8                	jle    11c50 <some_test+0x72>
    }
}
   11c88:	90                   	nop
   11c89:	c9                   	leave  
   11c8a:	c3                   	ret    

00011c8b <show_mem_info>:


static void        
show_mem_info(boot_info_t* boot_info) {
   11c8b:	55                   	push   %ebp
   11c8c:	89 e5                	mov    %esp,%ebp
   11c8e:	83 ec 18             	sub    $0x18,%esp
    klog("mem region");
   11c91:	83 ec 0c             	sub    $0xc,%esp
   11c94:	68 e5 2e 01 00       	push   $0x12ee5
   11c99:	e8 b5 fc ff ff       	call   11953 <klog>
   11c9e:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11ca1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11ca8:	eb 29                	jmp    11cd3 <show_mem_info+0x48>
        klog("[%d]: 0x%x - 0x%x", i, 
   11caa:	8b 45 08             	mov    0x8(%ebp),%eax
   11cad:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11cb0:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   11cb4:	8b 45 08             	mov    0x8(%ebp),%eax
   11cb7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11cba:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   11cbd:	52                   	push   %edx
   11cbe:	50                   	push   %eax
   11cbf:	ff 75 f4             	pushl  -0xc(%ebp)
   11cc2:	68 f0 2e 01 00       	push   $0x12ef0
   11cc7:	e8 87 fc ff ff       	call   11953 <klog>
   11ccc:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11ccf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11cd3:	8b 45 08             	mov    0x8(%ebp),%eax
   11cd6:	8b 40 50             	mov    0x50(%eax),%eax
   11cd9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11cdc:	7c cc                	jl     11caa <show_mem_info+0x1f>
            boot_info->ram_region_cfg[i].start, 
            boot_info->ram_region_cfg[i].size );
    }
    klog("");
   11cde:	83 ec 0c             	sub    $0xc,%esp
   11ce1:	68 02 2f 01 00       	push   $0x12f02
   11ce6:	e8 68 fc ff ff       	call   11953 <klog>
   11ceb:	83 c4 10             	add    $0x10,%esp
}
   11cee:	90                   	nop
   11cef:	c9                   	leave  
   11cf0:	c3                   	ret    

00011cf1 <total_mem_size>:


static uint32_t 
total_mem_size(boot_info_t* boot_info) {
   11cf1:	55                   	push   %ebp
   11cf2:	89 e5                	mov    %esp,%ebp
   11cf4:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   11cf7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11cfe:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   11d05:	eb 11                	jmp    11d18 <total_mem_size+0x27>
        mem_size += boot_info->ram_region_cfg[i].size;
   11d07:	8b 45 08             	mov    0x8(%ebp),%eax
   11d0a:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11d0d:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   11d11:	01 45 fc             	add    %eax,-0x4(%ebp)
    for(int i=0; i<boot_info->ram_region_count; i++) {
   11d14:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   11d18:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1b:	8b 40 50             	mov    0x50(%eax),%eax
   11d1e:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   11d21:	7c e4                	jl     11d07 <total_mem_size+0x16>
    }
    return mem_size;
   11d23:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11d26:	c9                   	leave  
   11d27:	c3                   	ret    

00011d28 <find_pte>:





pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   11d28:	55                   	push   %ebp
   11d29:	89 e5                	mov    %esp,%ebp
   11d2b:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   11d2e:	ff 75 0c             	pushl  0xc(%ebp)
   11d31:	e8 3c fd ff ff       	call   11a72 <pde_index>
   11d36:	83 c4 04             	add    $0x4,%esp
   11d39:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11d40:	8b 45 08             	mov    0x8(%ebp),%eax
   11d43:	01 d0                	add    %edx,%eax
   11d45:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   11d48:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d4b:	0f b6 00             	movzbl (%eax),%eax
   11d4e:	83 e0 01             	and    $0x1,%eax
   11d51:	84 c0                	test   %al,%al
   11d53:	74 10                	je     11d65 <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   11d55:	ff 75 f0             	pushl  -0x10(%ebp)
   11d58:	e8 29 fd ff ff       	call   11a86 <pde_paddr>
   11d5d:	83 c4 04             	add    $0x4,%esp
   11d60:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11d63:	eb 57                	jmp    11dbc <find_pte+0x94>
    } else {
        if (alloc == 0) {
   11d65:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11d69:	75 07                	jne    11d72 <find_pte+0x4a>
            return (pte_t *)0;
   11d6b:	b8 00 00 00 00       	mov    $0x0,%eax
   11d70:	eb 64                	jmp    11dd6 <find_pte+0xae>
        }
        uint32_t pg_paddr = addr_alloc_page(&g_paddr_alloc, 1);
   11d72:	83 ec 08             	sub    $0x8,%esp
   11d75:	6a 01                	push   $0x1
   11d77:	68 00 50 01 00       	push   $0x15000
   11d7c:	e8 94 fd ff ff       	call   11b15 <addr_alloc_page>
   11d81:	83 c4 10             	add    $0x10,%esp
   11d84:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   11d87:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d8b:	75 07                	jne    11d94 <find_pte+0x6c>
            return (pte_t *)0;
   11d8d:	b8 00 00 00 00       	mov    $0x0,%eax
   11d92:	eb 42                	jmp    11dd6 <find_pte+0xae>
        }
        pde->v = pg_paddr | PDE_P | PDE_W | PDE_U;
   11d94:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11d97:	83 c8 07             	or     $0x7,%eax
   11d9a:	89 c2                	mov    %eax,%edx
   11d9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11d9f:	89 10                	mov    %edx,(%eax)

        page_table = (pte_t *)(pg_paddr);
   11da1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11da4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        k_memset(page_table, 0, MEM_PAGE_SIZE);
   11da7:	83 ec 04             	sub    $0x4,%esp
   11daa:	68 00 10 00 00       	push   $0x1000
   11daf:	6a 00                	push   $0x0
   11db1:	ff 75 f4             	pushl  -0xc(%ebp)
   11db4:	e8 ff f5 ff ff       	call   113b8 <k_memset>
   11db9:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   11dbc:	83 ec 0c             	sub    $0xc,%esp
   11dbf:	ff 75 0c             	pushl  0xc(%ebp)
   11dc2:	e8 e6 fc ff ff       	call   11aad <pte_index>
   11dc7:	83 c4 10             	add    $0x10,%esp
   11dca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11dd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11dd4:	01 d0                	add    %edx,%eax
}
   11dd6:	c9                   	leave  
   11dd7:	c3                   	ret    

00011dd8 <memory_create_map>:

// 创建映射
int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   11dd8:	55                   	push   %ebp
   11dd9:	89 e5                	mov    %esp,%ebp
   11ddb:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   11dde:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11de5:	eb 62                	jmp    11e49 <memory_create_map+0x71>
        // klog("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   11de7:	83 ec 04             	sub    $0x4,%esp
   11dea:	6a 01                	push   $0x1
   11dec:	ff 75 0c             	pushl  0xc(%ebp)
   11def:	ff 75 08             	pushl  0x8(%ebp)
   11df2:	e8 31 ff ff ff       	call   11d28 <find_pte>
   11df7:	83 c4 10             	add    $0x10,%esp
   11dfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   11dfd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e01:	75 07                	jne    11e0a <memory_create_map+0x32>
            return -1;
   11e03:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11e08:	eb 4c                	jmp    11e56 <memory_create_map+0x7e>
        }
        if (pte->present != 0) klog("error");
   11e0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e0d:	0f b6 00             	movzbl (%eax),%eax
   11e10:	83 e0 01             	and    $0x1,%eax
   11e13:	84 c0                	test   %al,%al
   11e15:	74 10                	je     11e27 <memory_create_map+0x4f>
   11e17:	83 ec 0c             	sub    $0xc,%esp
   11e1a:	68 03 2f 01 00       	push   $0x12f03
   11e1f:	e8 2f fb ff ff       	call   11953 <klog>
   11e24:	83 c4 10             	add    $0x10,%esp

        // klog("pte addr: 0x%x", (uint32_t)pte);

        pte->v = paddr | perm | PTE_P;
   11e27:	8b 45 10             	mov    0x10(%ebp),%eax
   11e2a:	0b 45 18             	or     0x18(%ebp),%eax
   11e2d:	83 c8 01             	or     $0x1,%eax
   11e30:	89 c2                	mov    %eax,%edx
   11e32:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e35:	89 10                	mov    %edx,(%eax)
        vaddr += MEM_PAGE_SIZE;
   11e37:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   11e3e:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   11e45:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11e49:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e4c:	3b 45 14             	cmp    0x14(%ebp),%eax
   11e4f:	7c 96                	jl     11de7 <memory_create_map+0xf>
    }

    return 0;
   11e51:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11e56:	c9                   	leave  
   11e57:	c3                   	ret    

00011e58 <create_kernel_table>:


void create_kernel_table (void) {
   11e58:	55                   	push   %ebp
   11e59:	89 e5                	mov    %esp,%ebp
   11e5b:	83 ec 28             	sub    $0x28,%esp
        {s_text,                e_text,                         s_text,                 0    },      // 内核代码区
        {s_data,                (void *)(MEM_EBDA_START),       s_data,                 PTE_W},      // 内核数据区
        {(void*)MEM_EXT_START,  (void*)MEM_EXT_END,             (void*)MEM_EXT_START,   PTE_W},
    };

    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11e5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11e65:	eb 7d                	jmp    11ee4 <create_kernel_table+0x8c>
        memory_map_t * map = kernel_map + i;
   11e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e6a:	c1 e0 04             	shl    $0x4,%eax
   11e6d:	05 20 30 01 00       	add    $0x13020,%eax
   11e72:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   11e75:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e78:	8b 00                	mov    (%eax),%eax
   11e7a:	68 00 10 00 00       	push   $0x1000
   11e7f:	50                   	push   %eax
   11e80:	e8 ac fb ff ff       	call   11a31 <down2>
   11e85:	83 c4 08             	add    $0x8,%esp
   11e88:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend   = up2  ((uint32_t)map->vend, MEM_PAGE_SIZE);
   11e8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e8e:	8b 40 04             	mov    0x4(%eax),%eax
   11e91:	68 00 10 00 00       	push   $0x1000
   11e96:	50                   	push   %eax
   11e97:	e8 a2 fb ff ff       	call   11a3e <up2>
   11e9c:	83 c4 08             	add    $0x8,%esp
   11e9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   11ea2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11ea5:	2b 45 ec             	sub    -0x14(%ebp),%eax
   11ea8:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   11eae:	85 c0                	test   %eax,%eax
   11eb0:	0f 48 c2             	cmovs  %edx,%eax
   11eb3:	c1 f8 0c             	sar    $0xc,%eax
   11eb6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(g_kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   11eb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ebc:	8b 50 0c             	mov    0xc(%eax),%edx
   11ebf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ec2:	8b 40 08             	mov    0x8(%eax),%eax
   11ec5:	89 c1                	mov    %eax,%ecx
   11ec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11eca:	83 ec 0c             	sub    $0xc,%esp
   11ecd:	52                   	push   %edx
   11ece:	ff 75 e4             	pushl  -0x1c(%ebp)
   11ed1:	51                   	push   %ecx
   11ed2:	50                   	push   %eax
   11ed3:	68 00 60 01 00       	push   $0x16000
   11ed8:	e8 fb fe ff ff       	call   11dd8 <memory_create_map>
   11edd:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   11ee0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11ee4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ee7:	83 f8 03             	cmp    $0x3,%eax
   11eea:	0f 86 77 ff ff ff    	jbe    11e67 <create_kernel_table+0xf>
    }
}
   11ef0:	90                   	nop
   11ef1:	c9                   	leave  
   11ef2:	c3                   	ret    

00011ef3 <memory_init>:


void memory_init (boot_info_t* boot_info) {
   11ef3:	55                   	push   %ebp
   11ef4:	89 e5                	mov    %esp,%ebp
   11ef6:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;
    uint8_t * mem_free = (uint8_t*)&mem_free_start;
   11ef9:	c7 45 f4 e3 d1 01 00 	movl   $0x1d1e3,-0xc(%ebp)
    klog("memory init");
   11f00:	83 ec 0c             	sub    $0xc,%esp
   11f03:	68 09 2f 01 00       	push   $0x12f09
   11f08:	e8 46 fa ff ff       	call   11953 <klog>
   11f0d:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   11f10:	83 ec 0c             	sub    $0xc,%esp
   11f13:	ff 75 08             	pushl  0x8(%ebp)
   11f16:	e8 70 fd ff ff       	call   11c8b <show_mem_info>
   11f1b:	83 c4 10             	add    $0x10,%esp

    
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   11f1e:	83 ec 0c             	sub    $0xc,%esp
   11f21:	ff 75 08             	pushl  0x8(%ebp)
   11f24:	e8 c8 fd ff ff       	call   11cf1 <total_mem_size>
   11f29:	83 c4 10             	add    $0x10,%esp
   11f2c:	2d 00 00 10 00       	sub    $0x100000,%eax
   11f31:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   11f34:	83 ec 08             	sub    $0x8,%esp
   11f37:	68 00 10 00 00       	push   $0x1000
   11f3c:	ff 75 f0             	pushl  -0x10(%ebp)
   11f3f:	e8 ed fa ff ff       	call   11a31 <down2>
   11f44:	83 c4 10             	add    $0x10,%esp
   11f47:	89 45 f0             	mov    %eax,-0x10(%ebp)

    klog("free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   11f4a:	83 ec 04             	sub    $0x4,%esp
   11f4d:	ff 75 f0             	pushl  -0x10(%ebp)
   11f50:	68 00 00 10 00       	push   $0x100000
   11f55:	68 15 2f 01 00       	push   $0x12f15
   11f5a:	e8 f4 f9 ff ff       	call   11953 <klog>
   11f5f:	83 c4 10             	add    $0x10,%esp
    addr_alloc_init(&g_paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   11f62:	83 ec 0c             	sub    $0xc,%esp
   11f65:	68 00 10 00 00       	push   $0x1000
   11f6a:	ff 75 f0             	pushl  -0x10(%ebp)
   11f6d:	68 00 00 10 00       	push   $0x100000
   11f72:	ff 75 f4             	pushl  -0xc(%ebp)
   11f75:	68 00 50 01 00       	push   $0x15000
   11f7a:	e8 3e fb ff ff       	call   11abd <addr_alloc_init>
   11f7f:	83 c4 20             	add    $0x20,%esp

    mem_free += bitmap_byte_count(g_paddr_alloc.size / MEM_PAGE_SIZE);
   11f82:	a1 20 50 01 00       	mov    0x15020,%eax
   11f87:	c1 e8 0c             	shr    $0xc,%eax
   11f8a:	83 ec 0c             	sub    $0xc,%esp
   11f8d:	50                   	push   %eax
   11f8e:	e8 25 f0 ff ff       	call   10fb8 <bitmap_byte_count>
   11f93:	83 c4 10             	add    $0x10,%esp
   11f96:	01 45 f4             	add    %eax,-0xc(%ebp)
    if (mem_free < (uint8_t *)0x800000) {
   11f99:	81 7d f4 ff ff 7f 00 	cmpl   $0x7fffff,-0xc(%ebp)
   11fa0:	77 10                	ja     11fb2 <memory_init+0xbf>
        klog("simple test ok!");
   11fa2:	83 ec 0c             	sub    $0xc,%esp
   11fa5:	68 33 2f 01 00       	push   $0x12f33
   11faa:	e8 a4 f9 ff ff       	call   11953 <klog>
   11faf:	83 c4 10             	add    $0x10,%esp
    }

    k_memset(g_kernel_page_dir, 0, sizeof(g_kernel_page_dir));  // 清空内核表
   11fb2:	83 ec 04             	sub    $0x4,%esp
   11fb5:	68 00 10 00 00       	push   $0x1000
   11fba:	6a 00                	push   $0x0
   11fbc:	68 00 60 01 00       	push   $0x16000
   11fc1:	e8 f2 f3 ff ff       	call   113b8 <k_memset>
   11fc6:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   11fc9:	e8 8a fe ff ff       	call   11e58 <create_kernel_table>

    mmu_set_page_dir((uint32_t)g_kernel_page_dir);            // 重新设置页表
   11fce:	b8 00 60 01 00       	mov    $0x16000,%eax
   11fd3:	83 ec 0c             	sub    $0xc,%esp
   11fd6:	50                   	push   %eax
   11fd7:	e8 85 fa ff ff       	call   11a61 <mmu_set_page_dir>
   11fdc:	83 c4 10             	add    $0x10,%esp
    
}
   11fdf:	90                   	nop
   11fe0:	c9                   	leave  
   11fe1:	c3                   	ret    

00011fe2 <memory_create_uvm>:


uint32_t memory_create_uvm() {
   11fe2:	55                   	push   %ebp
   11fe3:	89 e5                	mov    %esp,%ebp
   11fe5:	83 ec 18             	sub    $0x18,%esp
    pde_t* page_dir = (pde_t*)addr_alloc_page(&g_paddr_alloc, 1);
   11fe8:	83 ec 08             	sub    $0x8,%esp
   11feb:	6a 01                	push   $0x1
   11fed:	68 00 50 01 00       	push   $0x15000
   11ff2:	e8 1e fb ff ff       	call   11b15 <addr_alloc_page>
   11ff7:	83 c4 10             	add    $0x10,%esp
   11ffa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == (pde_t*)0) {
   11ffd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12001:	75 07                	jne    1200a <memory_create_uvm+0x28>
        return 0;  // error
   12003:	b8 00 00 00 00       	mov    $0x0,%eax
   12008:	eb 5b                	jmp    12065 <memory_create_uvm+0x83>
    }

    k_memset((void*)page_dir, 0, MEM_PAGE_SIZE);
   1200a:	83 ec 04             	sub    $0x4,%esp
   1200d:	68 00 10 00 00       	push   $0x1000
   12012:	6a 00                	push   $0x0
   12014:	ff 75 f0             	pushl  -0x10(%ebp)
   12017:	e8 9c f3 ff ff       	call   113b8 <k_memset>
   1201c:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index( MEMORY_TASK_BASE );
   1201f:	83 ec 0c             	sub    $0xc,%esp
   12022:	68 00 00 00 80       	push   $0x80000000
   12027:	e8 46 fa ff ff       	call   11a72 <pde_index>
   1202c:	83 c4 10             	add    $0x10,%esp
   1202f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    
    for(int i=0; i<user_pde_start; i++) {
   12032:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12039:	eb 1f                	jmp    1205a <memory_create_uvm+0x78>
        page_dir[i].v = g_kernel_page_dir[i].v;
   1203b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1203e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12045:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12048:	01 c2                	add    %eax,%edx
   1204a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1204d:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   12054:	89 02                	mov    %eax,(%edx)
    for(int i=0; i<user_pde_start; i++) {
   12056:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1205a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1205d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   12060:	77 d9                	ja     1203b <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   12062:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   12065:	c9                   	leave  
   12066:	c3                   	ret    

00012067 <memory_alloc_for_page_dir>:


uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   12067:	55                   	push   %ebp
   12068:	89 e5                	mov    %esp,%ebp
   1206a:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   1206d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12070:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   12073:	68 00 10 00 00       	push   $0x1000
   12078:	ff 75 10             	pushl  0x10(%ebp)
   1207b:	e8 be f9 ff ff       	call   11a3e <up2>
   12080:	83 c4 08             	add    $0x8,%esp
   12083:	c1 e8 0c             	shr    $0xc,%eax
   12086:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   12089:	68 00 10 00 00       	push   $0x1000
   1208e:	ff 75 0c             	pushl  0xc(%ebp)
   12091:	e8 9b f9 ff ff       	call   11a31 <down2>
   12096:	83 c4 08             	add    $0x8,%esp
   12099:	89 45 0c             	mov    %eax,0xc(%ebp)

    for (int i = 0; i < page_count; i++) {
   1209c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   120a3:	e9 95 00 00 00       	jmp    1213d <memory_alloc_for_page_dir+0xd6>
        uint32_t paddr = addr_alloc_page(&g_paddr_alloc, 1);
   120a8:	83 ec 08             	sub    $0x8,%esp
   120ab:	6a 01                	push   $0x1
   120ad:	68 00 50 01 00       	push   $0x15000
   120b2:	e8 5e fa ff ff       	call   11b15 <addr_alloc_page>
   120b7:	83 c4 10             	add    $0x10,%esp
   120ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   120bd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   120c1:	75 17                	jne    120da <memory_alloc_for_page_dir+0x73>
            klog("mem alloc failed. no memory");
   120c3:	83 ec 0c             	sub    $0xc,%esp
   120c6:	68 43 2f 01 00       	push   $0x12f43
   120cb:	e8 83 f8 ff ff       	call   11953 <klog>
   120d0:	83 c4 10             	add    $0x10,%esp
            return 0;
   120d3:	b8 00 00 00 00       	mov    $0x0,%eax
   120d8:	eb 74                	jmp    1214e <memory_alloc_for_page_dir+0xe7>
        }

        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   120da:	8b 55 14             	mov    0x14(%ebp),%edx
   120dd:	8b 45 08             	mov    0x8(%ebp),%eax
   120e0:	83 ec 0c             	sub    $0xc,%esp
   120e3:	52                   	push   %edx
   120e4:	6a 01                	push   $0x1
   120e6:	ff 75 e8             	pushl  -0x18(%ebp)
   120e9:	ff 75 f4             	pushl  -0xc(%ebp)
   120ec:	50                   	push   %eax
   120ed:	e8 e6 fc ff ff       	call   11dd8 <memory_create_map>
   120f2:	83 c4 20             	add    $0x20,%esp
   120f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   120f8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   120fc:	79 34                	jns    12132 <memory_alloc_for_page_dir+0xcb>
            klog("create memory map failed. err = %d", err);
   120fe:	83 ec 08             	sub    $0x8,%esp
   12101:	ff 75 e4             	pushl  -0x1c(%ebp)
   12104:	68 60 2f 01 00       	push   $0x12f60
   12109:	e8 45 f8 ff ff       	call   11953 <klog>
   1210e:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&g_paddr_alloc, vaddr, i + 1);
   12111:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12114:	83 c0 01             	add    $0x1,%eax
   12117:	83 ec 04             	sub    $0x4,%esp
   1211a:	50                   	push   %eax
   1211b:	ff 75 0c             	pushl  0xc(%ebp)
   1211e:	68 00 50 01 00       	push   $0x15000
   12123:	e8 54 fa ff ff       	call   11b7c <addr_free_page>
   12128:	83 c4 10             	add    $0x10,%esp
            return -1;
   1212b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12130:	eb 1c                	jmp    1214e <memory_alloc_for_page_dir+0xe7>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   12132:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   12139:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1213d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12140:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   12143:	0f 8c 5f ff ff ff    	jl     120a8 <memory_alloc_for_page_dir+0x41>
    }

    return 0;
   12149:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1214e:	c9                   	leave  
   1214f:	c3                   	ret    

00012150 <memory_alloc_page_for>:


int memory_alloc_page_for(uint32_t addr, uint32_t size, int perm) {
   12150:	55                   	push   %ebp
   12151:	89 e5                	mov    %esp,%ebp
   12153:	83 ec 18             	sub    $0x18,%esp
    
    uint32_t cr3 = task_current()->tss.cr3;
   12156:	e8 f2 06 00 00       	call   1284d <task_current>
   1215b:	8b 40 68             	mov    0x68(%eax),%eax
   1215e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return memory_alloc_for_page_dir(cr3, addr, size, perm);
   12161:	ff 75 10             	pushl  0x10(%ebp)
   12164:	ff 75 0c             	pushl  0xc(%ebp)
   12167:	ff 75 08             	pushl  0x8(%ebp)
   1216a:	ff 75 f4             	pushl  -0xc(%ebp)
   1216d:	e8 f5 fe ff ff       	call   12067 <memory_alloc_for_page_dir>
   12172:	83 c4 10             	add    $0x10,%esp
}
   12175:	c9                   	leave  
   12176:	c3                   	ret    

00012177 <list_count>:
static inline int list_count (list_t* list) {
   12177:	55                   	push   %ebp
   12178:	89 e5                	mov    %esp,%ebp
    return list->count;
   1217a:	8b 45 08             	mov    0x8(%ebp),%eax
   1217d:	8b 40 08             	mov    0x8(%eax),%eax
}
   12180:	5d                   	pop    %ebp
   12181:	c3                   	ret    

00012182 <mutex_init>:
#include <mux.h>
#include <irq.h>
#include <log.h>

void mutex_init (mutex_t * mutex) {
   12182:	55                   	push   %ebp
   12183:	89 e5                	mov    %esp,%ebp
   12185:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   12188:	8b 45 08             	mov    0x8(%ebp),%eax
   1218b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   12192:	8b 45 08             	mov    0x8(%ebp),%eax
   12195:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   1219b:	8b 45 08             	mov    0x8(%ebp),%eax
   1219e:	83 c0 08             	add    $0x8,%eax
   121a1:	83 ec 0c             	sub    $0xc,%esp
   121a4:	50                   	push   %eax
   121a5:	e8 ea f4 ff ff       	call   11694 <list_init>
   121aa:	83 c4 10             	add    $0x10,%esp
}
   121ad:	90                   	nop
   121ae:	c9                   	leave  
   121af:	c3                   	ret    

000121b0 <mutex_lock>:

void mutex_lock (mutex_t * mutex) {
   121b0:	55                   	push   %ebp
   121b1:	89 e5                	mov    %esp,%ebp
   121b3:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   121b6:	e8 d4 ed ff ff       	call   10f8f <irq_enter_proection>
   121bb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   121be:	e8 8a 06 00 00       	call   1284d <task_current>
   121c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   121c6:	8b 45 08             	mov    0x8(%ebp),%eax
   121c9:	8b 40 04             	mov    0x4(%eax),%eax
   121cc:	85 c0                	test   %eax,%eax
   121ce:	75 14                	jne    121e4 <mutex_lock+0x34>
        mutex->locked_count = 1;
   121d0:	8b 45 08             	mov    0x8(%ebp),%eax
   121d3:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   121da:	8b 45 08             	mov    0x8(%ebp),%eax
   121dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   121e0:	89 10                	mov    %edx,(%eax)
   121e2:	eb 4f                	jmp    12233 <mutex_lock+0x83>
    } else if (mutex->owner == curr) {
   121e4:	8b 45 08             	mov    0x8(%ebp),%eax
   121e7:	8b 00                	mov    (%eax),%eax
   121e9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   121ec:	75 11                	jne    121ff <mutex_lock+0x4f>
        mutex->locked_count++;
   121ee:	8b 45 08             	mov    0x8(%ebp),%eax
   121f1:	8b 40 04             	mov    0x4(%eax),%eax
   121f4:	8d 50 01             	lea    0x1(%eax),%edx
   121f7:	8b 45 08             	mov    0x8(%ebp),%eax
   121fa:	89 50 04             	mov    %edx,0x4(%eax)
   121fd:	eb 34                	jmp    12233 <mutex_lock+0x83>
    } else {
        task_t * curr = task_current();
   121ff:	e8 49 06 00 00       	call   1284d <task_current>
   12204:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   12207:	83 ec 0c             	sub    $0xc,%esp
   1220a:	ff 75 ec             	pushl  -0x14(%ebp)
   1220d:	e8 7a 06 00 00       	call   1288c <task_set_block>
   12212:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   12215:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12218:	8d 50 44             	lea    0x44(%eax),%edx
   1221b:	8b 45 08             	mov    0x8(%ebp),%eax
   1221e:	83 c0 08             	add    $0x8,%eax
   12221:	83 ec 08             	sub    $0x8,%esp
   12224:	52                   	push   %edx
   12225:	50                   	push   %eax
   12226:	e8 ed f4 ff ff       	call   11718 <list_insert_last>
   1222b:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1222e:	e8 28 07 00 00       	call   1295b <task_dispatch>
    }

    irq_leave_proection(irq_state);
   12233:	83 ec 0c             	sub    $0xc,%esp
   12236:	ff 75 f4             	pushl  -0xc(%ebp)
   12239:	e8 69 ed ff ff       	call   10fa7 <irq_leave_proection>
   1223e:	83 c4 10             	add    $0x10,%esp
}
   12241:	90                   	nop
   12242:	c9                   	leave  
   12243:	c3                   	ret    

00012244 <mutex_unlock>:

void mutex_unlock (mutex_t * mutex) {
   12244:	55                   	push   %ebp
   12245:	89 e5                	mov    %esp,%ebp
   12247:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_proection();
   1224a:	e8 40 ed ff ff       	call   10f8f <irq_enter_proection>
   1224f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * curr = task_current();
   12252:	e8 f6 05 00 00       	call   1284d <task_current>
   12257:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   1225a:	8b 45 08             	mov    0x8(%ebp),%eax
   1225d:	8b 00                	mov    (%eax),%eax
   1225f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12262:	0f 85 88 00 00 00    	jne    122f0 <mutex_unlock+0xac>
        if (--mutex->locked_count == 0) {
   12268:	8b 45 08             	mov    0x8(%ebp),%eax
   1226b:	8b 40 04             	mov    0x4(%eax),%eax
   1226e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12271:	8b 45 08             	mov    0x8(%ebp),%eax
   12274:	89 50 04             	mov    %edx,0x4(%eax)
   12277:	8b 45 08             	mov    0x8(%ebp),%eax
   1227a:	8b 40 04             	mov    0x4(%eax),%eax
   1227d:	85 c0                	test   %eax,%eax
   1227f:	75 6f                	jne    122f0 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   12281:	8b 45 08             	mov    0x8(%ebp),%eax
   12284:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if (list_count(&mutex->wait_list)) {
   1228a:	8b 45 08             	mov    0x8(%ebp),%eax
   1228d:	83 c0 08             	add    $0x8,%eax
   12290:	83 ec 0c             	sub    $0xc,%esp
   12293:	50                   	push   %eax
   12294:	e8 de fe ff ff       	call   12177 <list_count>
   12299:	83 c4 10             	add    $0x10,%esp
   1229c:	85 c0                	test   %eax,%eax
   1229e:	74 50                	je     122f0 <mutex_unlock+0xac>
                list_node_t * task_node = list_delete_first(&mutex->wait_list);
   122a0:	8b 45 08             	mov    0x8(%ebp),%eax
   122a3:	83 c0 08             	add    $0x8,%eax
   122a6:	83 ec 0c             	sub    $0xc,%esp
   122a9:	50                   	push   %eax
   122aa:	e8 cd f4 ff ff       	call   1177c <list_delete_first>
   122af:	83 c4 10             	add    $0x10,%esp
   122b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   122b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   122b9:	74 08                	je     122c3 <mutex_unlock+0x7f>
   122bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   122be:	83 e8 44             	sub    $0x44,%eax
   122c1:	eb 05                	jmp    122c8 <mutex_unlock+0x84>
   122c3:	b8 00 00 00 00       	mov    $0x0,%eax
   122c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   122cb:	83 ec 0c             	sub    $0xc,%esp
   122ce:	ff 75 e8             	pushl  -0x18(%ebp)
   122d1:	e8 81 05 00 00       	call   12857 <task_set_ready>
   122d6:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1;
   122d9:	8b 45 08             	mov    0x8(%ebp),%eax
   122dc:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   122e3:	8b 45 08             	mov    0x8(%ebp),%eax
   122e6:	8b 55 e8             	mov    -0x18(%ebp),%edx
   122e9:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   122eb:	e8 6b 06 00 00       	call   1295b <task_dispatch>
            }
        }
    }

    irq_leave_proection(irq_state);
   122f0:	83 ec 0c             	sub    $0xc,%esp
   122f3:	ff 75 f4             	pushl  -0xc(%ebp)
   122f6:	e8 ac ec ff ff       	call   10fa7 <irq_leave_proection>
   122fb:	83 c4 10             	add    $0x10,%esp
   122fe:	90                   	nop
   122ff:	c9                   	leave  
   12300:	c3                   	ret    

00012301 <list_count>:
static inline int list_count (list_t* list) {
   12301:	55                   	push   %ebp
   12302:	89 e5                	mov    %esp,%ebp
    return list->count;
   12304:	8b 45 08             	mov    0x8(%ebp),%eax
   12307:	8b 40 08             	mov    0x8(%eax),%eax
}
   1230a:	5d                   	pop    %ebp
   1230b:	c3                   	ret    

0001230c <sem_init>:
#include <sem.h>
#include <irq.h>

void sem_init(sem_t* sem, int init_count) {
   1230c:	55                   	push   %ebp
   1230d:	89 e5                	mov    %esp,%ebp
   1230f:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12312:	8b 45 08             	mov    0x8(%ebp),%eax
   12315:	8b 55 0c             	mov    0xc(%ebp),%edx
   12318:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1231a:	8b 45 08             	mov    0x8(%ebp),%eax
   1231d:	83 c0 04             	add    $0x4,%eax
   12320:	83 ec 0c             	sub    $0xc,%esp
   12323:	50                   	push   %eax
   12324:	e8 6b f3 ff ff       	call   11694 <list_init>
   12329:	83 c4 10             	add    $0x10,%esp
}
   1232c:	90                   	nop
   1232d:	c9                   	leave  
   1232e:	c3                   	ret    

0001232f <sem_wait>:

void sem_wait(sem_t* sem) {
   1232f:	55                   	push   %ebp
   12330:	89 e5                	mov    %esp,%ebp
   12332:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12335:	e8 55 ec ff ff       	call   10f8f <irq_enter_proection>
   1233a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0) {
   1233d:	8b 45 08             	mov    0x8(%ebp),%eax
   12340:	8b 00                	mov    (%eax),%eax
   12342:	85 c0                	test   %eax,%eax
   12344:	7e 0f                	jle    12355 <sem_wait+0x26>
        sem->count--;
   12346:	8b 45 08             	mov    0x8(%ebp),%eax
   12349:	8b 00                	mov    (%eax),%eax
   1234b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1234e:	8b 45 08             	mov    0x8(%ebp),%eax
   12351:	89 10                	mov    %edx,(%eax)
   12353:	eb 34                	jmp    12389 <sem_wait+0x5a>
    } else {
        task_t * curr = task_current();
   12355:	e8 f3 04 00 00       	call   1284d <task_current>
   1235a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   1235d:	83 ec 0c             	sub    $0xc,%esp
   12360:	ff 75 f0             	pushl  -0x10(%ebp)
   12363:	e8 24 05 00 00       	call   1288c <task_set_block>
   12368:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   1236b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1236e:	8d 50 44             	lea    0x44(%eax),%edx
   12371:	8b 45 08             	mov    0x8(%ebp),%eax
   12374:	83 c0 04             	add    $0x4,%eax
   12377:	83 ec 08             	sub    $0x8,%esp
   1237a:	52                   	push   %edx
   1237b:	50                   	push   %eax
   1237c:	e8 97 f3 ff ff       	call   11718 <list_insert_last>
   12381:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12384:	e8 d2 05 00 00       	call   1295b <task_dispatch>
    }
    irq_leave_proection(state);
   12389:	83 ec 0c             	sub    $0xc,%esp
   1238c:	ff 75 f4             	pushl  -0xc(%ebp)
   1238f:	e8 13 ec ff ff       	call   10fa7 <irq_leave_proection>
   12394:	83 c4 10             	add    $0x10,%esp
}
   12397:	90                   	nop
   12398:	c9                   	leave  
   12399:	c3                   	ret    

0001239a <sem_notify>:

void sem_notify(sem_t* sem) {
   1239a:	55                   	push   %ebp
   1239b:	89 e5                	mov    %esp,%ebp
   1239d:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();
   123a0:	e8 ea eb ff ff       	call   10f8f <irq_enter_proection>
   123a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list)) {
   123a8:	8b 45 08             	mov    0x8(%ebp),%eax
   123ab:	83 c0 04             	add    $0x4,%eax
   123ae:	83 ec 0c             	sub    $0xc,%esp
   123b1:	50                   	push   %eax
   123b2:	e8 4a ff ff ff       	call   12301 <list_count>
   123b7:	83 c4 10             	add    $0x10,%esp
   123ba:	85 c0                	test   %eax,%eax
   123bc:	74 40                	je     123fe <sem_notify+0x64>
        list_node_t* node = list_delete_first(&sem->wait_list);
   123be:	8b 45 08             	mov    0x8(%ebp),%eax
   123c1:	83 c0 04             	add    $0x4,%eax
   123c4:	83 ec 0c             	sub    $0xc,%esp
   123c7:	50                   	push   %eax
   123c8:	e8 af f3 ff ff       	call   1177c <list_delete_first>
   123cd:	83 c4 10             	add    $0x10,%esp
   123d0:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_t* task = list_node_parent(node, task_t, wait_node);
   123d3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   123d7:	74 08                	je     123e1 <sem_notify+0x47>
   123d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   123dc:	83 e8 44             	sub    $0x44,%eax
   123df:	eb 05                	jmp    123e6 <sem_notify+0x4c>
   123e1:	b8 00 00 00 00       	mov    $0x0,%eax
   123e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   123e9:	83 ec 0c             	sub    $0xc,%esp
   123ec:	ff 75 ec             	pushl  -0x14(%ebp)
   123ef:	e8 63 04 00 00       	call   12857 <task_set_ready>
   123f4:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   123f7:	e8 5f 05 00 00       	call   1295b <task_dispatch>
   123fc:	eb 0d                	jmp    1240b <sem_notify+0x71>
    } else {
        sem->count++;
   123fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12401:	8b 00                	mov    (%eax),%eax
   12403:	8d 50 01             	lea    0x1(%eax),%edx
   12406:	8b 45 08             	mov    0x8(%ebp),%eax
   12409:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_proection(state);
   1240b:	83 ec 0c             	sub    $0xc,%esp
   1240e:	ff 75 f4             	pushl  -0xc(%ebp)
   12411:	e8 91 eb ff ff       	call   10fa7 <irq_leave_proection>
   12416:	83 c4 10             	add    $0x10,%esp

}
   12419:	90                   	nop
   1241a:	c9                   	leave  
   1241b:	c3                   	ret    

0001241c <sem_count>:

int  sem_count(sem_t* sem) {
   1241c:	55                   	push   %ebp
   1241d:	89 e5                	mov    %esp,%ebp
   1241f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12422:	e8 68 eb ff ff       	call   10f8f <irq_enter_proection>
   12427:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1242a:	8b 45 08             	mov    0x8(%ebp),%eax
   1242d:	8b 00                	mov    (%eax),%eax
   1242f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_proection(state);
   12432:	83 ec 0c             	sub    $0xc,%esp
   12435:	ff 75 f4             	pushl  -0xc(%ebp)
   12438:	e8 6a eb ff ff       	call   10fa7 <irq_leave_proection>
   1243d:	83 c4 10             	add    $0x10,%esp
    return count;
   12440:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12443:	c9                   	leave  
   12444:	c3                   	ret    

00012445 <hlt>:
static inline void hlt() {
   12445:	55                   	push   %ebp
   12446:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   12448:	f4                   	hlt    
}
   12449:	90                   	nop
   1244a:	5d                   	pop    %ebp
   1244b:	c3                   	ret    

0001244c <write_cr3>:
static inline void write_cr3(uint32_t v) {
   1244c:	55                   	push   %ebp
   1244d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1244f:	8b 45 08             	mov    0x8(%ebp),%eax
   12452:	0f 22 d8             	mov    %eax,%cr3
}
   12455:	90                   	nop
   12456:	5d                   	pop    %ebp
   12457:	c3                   	ret    

00012458 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   12458:	55                   	push   %ebp
   12459:	89 e5                	mov    %esp,%ebp
   1245b:	83 ec 10             	sub    $0x10,%esp
	volatile uint32_t addr[] = {offset, selector };
   1245e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12461:	8b 55 08             	mov    0x8(%ebp),%edx
   12464:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12467:	89 55 fc             	mov    %edx,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   1246a:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1246d:	ff 28                	ljmp   *(%eax)
}
   1246f:	90                   	nop
   12470:	c9                   	leave  
   12471:	c3                   	ret    

00012472 <write_tr>:
static inline void write_tr (uint16_t tss_selector) {
   12472:	55                   	push   %ebp
   12473:	89 e5                	mov    %esp,%ebp
   12475:	83 ec 04             	sub    $0x4,%esp
   12478:	8b 45 08             	mov    0x8(%ebp),%eax
   1247b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   1247f:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   12483:	0f 00 d8             	ltr    %ax
}
   12486:	90                   	nop
   12487:	c9                   	leave  
   12488:	c3                   	ret    

00012489 <list_node_init>:
static inline void list_node_init(list_node_t* node) {
   12489:	55                   	push   %ebp
   1248a:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t*)0;
   1248c:	8b 45 08             	mov    0x8(%ebp),%eax
   1248f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12496:	8b 45 08             	mov    0x8(%ebp),%eax
   12499:	8b 50 04             	mov    0x4(%eax),%edx
   1249c:	8b 45 08             	mov    0x8(%ebp),%eax
   1249f:	89 10                	mov    %edx,(%eax)
}
   124a1:	90                   	nop
   124a2:	5d                   	pop    %ebp
   124a3:	c3                   	ret    

000124a4 <list_node_next>:
static inline list_node_t* list_node_next(list_node_t* node) {
   124a4:	55                   	push   %ebp
   124a5:	89 e5                	mov    %esp,%ebp
    return node->next;
   124a7:	8b 45 08             	mov    0x8(%ebp),%eax
   124aa:	8b 40 04             	mov    0x4(%eax),%eax
}
   124ad:	5d                   	pop    %ebp
   124ae:	c3                   	ret    

000124af <list_count>:
static inline int list_count (list_t* list) {
   124af:	55                   	push   %ebp
   124b0:	89 e5                	mov    %esp,%ebp
    return list->count;
   124b2:	8b 45 08             	mov    0x8(%ebp),%eax
   124b5:	8b 40 08             	mov    0x8(%eax),%eax
}
   124b8:	5d                   	pop    %ebp
   124b9:	c3                   	ret    

000124ba <list_first>:
static inline list_node_t* list_first (list_t* list) {
   124ba:	55                   	push   %ebp
   124bb:	89 e5                	mov    %esp,%ebp
    return list->first;
   124bd:	8b 45 08             	mov    0x8(%ebp),%eax
   124c0:	8b 00                	mov    (%eax),%eax
}
   124c2:	5d                   	pop    %ebp
   124c3:	c3                   	ret    

000124c4 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr) {
   124c4:	55                   	push   %ebp
   124c5:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   124c7:	ff 75 08             	pushl  0x8(%ebp)
   124ca:	e8 7d ff ff ff       	call   1244c <write_cr3>
   124cf:	83 c4 04             	add    $0x4,%esp
}
   124d2:	90                   	nop
   124d3:	c9                   	leave  
   124d4:	c3                   	ret    

000124d5 <idle_task_func>:
static task_manager_t g_task_manager;
static uint32_t idle_task_stack[2048];
static uint32_t first_task_stack[2048];


static void idle_task_func() { for(;;) hlt(); }
   124d5:	55                   	push   %ebp
   124d6:	89 e5                	mov    %esp,%ebp
   124d8:	e8 68 ff ff ff       	call   12445 <hlt>
   124dd:	eb f9                	jmp    124d8 <idle_task_func+0x3>

000124df <task_switch_from_to>:

void simple_switch(uint32_t **from, uint32_t* to);

void task_switch_from_to(task_t* from, task_t* to) {
   124df:	55                   	push   %ebp
   124e0:	89 e5                	mov    %esp,%ebp

#ifndef USE_TSS
    simple_switch(&from->stack, to->stack);  // 使用直接跳转机制
#else
    far_jump(to->tss_sel, 0);             // 使用 tss 机制
   124e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   124e5:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
   124eb:	6a 00                	push   $0x0
   124ed:	50                   	push   %eax
   124ee:	e8 65 ff ff ff       	call   12458 <far_jump>
   124f3:	83 c4 08             	add    $0x8,%esp
#endif

}
   124f6:	90                   	nop
   124f7:	c9                   	leave  
   124f8:	c3                   	ret    

000124f9 <tss_init>:


#ifdef USE_TSS
static int tss_init(task_t* task, int flag, uint32_t entry, uint32_t esp) {
   124f9:	55                   	push   %ebp
   124fa:	89 e5                	mov    %esp,%ebp
   124fc:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   124ff:	e8 a5 df ff ff       	call   104a9 <gdt_alloc_desc>
   12504:	89 45 ec             	mov    %eax,-0x14(%ebp)

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), 
   12507:	8b 45 08             	mov    0x8(%ebp),%eax
   1250a:	83 c0 4c             	add    $0x4c,%eax
   1250d:	68 89 00 00 00       	push   $0x89
   12512:	6a 68                	push   $0x68
   12514:	50                   	push   %eax
   12515:	ff 75 ec             	pushl  -0x14(%ebp)
   12518:	e8 86 de ff ff       	call   103a3 <segment_desc_set>
   1251d:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS
    );

    k_memset(&task->tss, 0, sizeof(tss_t));
   12520:	8b 45 08             	mov    0x8(%ebp),%eax
   12523:	83 c0 4c             	add    $0x4c,%eax
   12526:	83 ec 04             	sub    $0x4,%esp
   12529:	6a 68                	push   $0x68
   1252b:	6a 00                	push   $0x0
   1252d:	50                   	push   %eax
   1252e:	e8 85 ee ff ff       	call   113b8 <k_memset>
   12533:	83 c4 10             	add    $0x10,%esp

    int code_sel, data_sel;
    if (flag & TASK_FLAGS_SYSTEM) {
   12536:	8b 45 0c             	mov    0xc(%ebp),%eax
   12539:	83 e0 01             	and    $0x1,%eax
   1253c:	85 c0                	test   %eax,%eax
   1253e:	74 10                	je     12550 <tss_init+0x57>
        code_sel = KERNEL_SELECTOR_CS;
   12540:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   12547:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   1254e:	eb 16                	jmp    12566 <tss_init+0x6d>
    } else {
        code_sel = g_task_manager.app_code_sel | SEG_RPL3;
   12550:	a1 98 71 01 00       	mov    0x17198,%eax
   12555:	83 c8 03             	or     $0x3,%eax
   12558:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = g_task_manager.app_data_sel | SEG_RPL3;
   1255b:	a1 9c 71 01 00       	mov    0x1719c,%eax
   12560:	83 c8 03             	or     $0x3,%eax
   12563:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }


    task->tss.eip  = entry;
   12566:	8b 45 08             	mov    0x8(%ebp),%eax
   12569:	8b 55 10             	mov    0x10(%ebp),%edx
   1256c:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp  = esp;
   1256f:	8b 45 08             	mov    0x8(%ebp),%eax
   12572:	8b 55 14             	mov    0x14(%ebp),%edx
   12575:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.esp0 = esp;
   1257b:	8b 45 08             	mov    0x8(%ebp),%eax
   1257e:	8b 55 14             	mov    0x14(%ebp),%edx
   12581:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.ss  = data_sel;
   12584:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12587:	8b 45 08             	mov    0x8(%ebp),%eax
   1258a:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   12590:	8b 45 08             	mov    0x8(%ebp),%eax
   12593:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es  = data_sel;
   1259a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1259d:	8b 45 08             	mov    0x8(%ebp),%eax
   125a0:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.ds  = data_sel;
   125a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   125a9:	8b 45 08             	mov    0x8(%ebp),%eax
   125ac:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.fs  = data_sel;
   125b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
   125b5:	8b 45 08             	mov    0x8(%ebp),%eax
   125b8:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
    task->tss.gs  = data_sel;
   125be:	8b 55 f0             	mov    -0x10(%ebp),%edx
   125c1:	8b 45 08             	mov    0x8(%ebp),%eax
   125c4:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    task->tss.cs  = code_sel;
   125ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
   125cd:	8b 45 08             	mov    0x8(%ebp),%eax
   125d0:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    
    task->tss.eflags = EFLAGES_DEFAULT | EFLAGS_IF;
   125d6:	8b 45 08             	mov    0x8(%ebp),%eax
   125d9:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    uint32_t page_dir = memory_create_uvm();
   125e0:	e8 fd f9 ff ff       	call   11fe2 <memory_create_uvm>
   125e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(page_dir == 0) {
   125e8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   125ec:	75 15                	jne    12603 <tss_init+0x10a>
        gdt_free_sel(tss_sel);
   125ee:	83 ec 0c             	sub    $0xc,%esp
   125f1:	ff 75 ec             	pushl  -0x14(%ebp)
   125f4:	e8 25 df ff ff       	call   1051e <gdt_free_sel>
   125f9:	83 c4 10             	add    $0x10,%esp
        return -1;
   125fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12601:	eb 15                	jmp    12618 <tss_init+0x11f>
    }
    task->tss.cr3 = page_dir;
   12603:	8b 45 08             	mov    0x8(%ebp),%eax
   12606:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12609:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss_sel = tss_sel;
   1260c:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1260f:	8b 45 08             	mov    0x8(%ebp),%eax
   12612:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
}
   12618:	c9                   	leave  
   12619:	c3                   	ret    

0001261a <task_init>:
#endif

// 初始化一个任务
int task_init(task_t* task, const char* name, int flag, uint32_t entry, uint32_t esp) {
   1261a:	55                   	push   %ebp
   1261b:	89 e5                	mov    %esp,%ebp
   1261d:	83 ec 18             	sub    $0x18,%esp
        *(--pesp) = 0;
        *(--pesp) = 0;
        task->stack = pesp;
    }
#else
    if (tss_init(task, flag, entry, esp) == -1) return -1;  // 使用 tss 机制
   12620:	ff 75 18             	pushl  0x18(%ebp)
   12623:	ff 75 14             	pushl  0x14(%ebp)
   12626:	ff 75 10             	pushl  0x10(%ebp)
   12629:	ff 75 08             	pushl  0x8(%ebp)
   1262c:	e8 c8 fe ff ff       	call   124f9 <tss_init>
   12631:	83 c4 10             	add    $0x10,%esp
   12634:	83 f8 ff             	cmp    $0xffffffff,%eax
   12637:	75 0a                	jne    12643 <task_init+0x29>
   12639:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1263e:	e9 b5 00 00 00       	jmp    126f8 <task_init+0xde>
#endif

    k_strncpy(task->name, name, TASK_NAME_SIZE);        // 进程名
   12643:	8b 45 08             	mov    0x8(%ebp),%eax
   12646:	83 c0 08             	add    $0x8,%eax
   12649:	83 ec 04             	sub    $0x4,%esp
   1264c:	6a 20                	push   $0x20
   1264e:	ff 75 0c             	pushl  0xc(%ebp)
   12651:	50                   	push   %eax
   12652:	e8 ed eb ff ff       	call   11244 <k_strncpy>
   12657:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;                         // 状态  created
   1265a:	8b 45 08             	mov    0x8(%ebp),%eax
   1265d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;         //  最大时间片
   12664:	8b 45 08             	mov    0x8(%ebp),%eax
   12667:	c7 40 2c 0a 00 00 00 	movl   $0xa,0x2c(%eax)
    task->slice_ticks = TASK_TIME_SLICE_DEFAULT;        //  当前时间片
   1266e:	8b 45 08             	mov    0x8(%ebp),%eax
   12671:	c7 40 28 0a 00 00 00 	movl   $0xa,0x28(%eax)
    task->sleep_ticks = 0;
   12678:	8b 45 08             	mov    0x8(%ebp),%eax
   1267b:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node); 
   12682:	8b 45 08             	mov    0x8(%ebp),%eax
   12685:	83 c0 3c             	add    $0x3c,%eax
   12688:	83 ec 0c             	sub    $0xc,%esp
   1268b:	50                   	push   %eax
   1268c:	e8 f8 fd ff ff       	call   12489 <list_node_init>
   12691:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   12694:	8b 45 08             	mov    0x8(%ebp),%eax
   12697:	83 c0 34             	add    $0x34,%eax
   1269a:	83 ec 0c             	sub    $0xc,%esp
   1269d:	50                   	push   %eax
   1269e:	e8 e6 fd ff ff       	call   12489 <list_node_init>
   126a3:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   126a6:	8b 45 08             	mov    0x8(%ebp),%eax
   126a9:	83 c0 44             	add    $0x44,%eax
   126ac:	83 ec 0c             	sub    $0xc,%esp
   126af:	50                   	push   %eax
   126b0:	e8 d4 fd ff ff       	call   12489 <list_node_init>
   126b5:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   126b8:	e8 d2 e8 ff ff       	call   10f8f <irq_enter_proection>
   126bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        task_set_ready(task);                                        // 加入到就绪队列
   126c0:	83 ec 0c             	sub    $0xc,%esp
   126c3:	ff 75 08             	pushl  0x8(%ebp)
   126c6:	e8 8c 01 00 00       	call   12857 <task_set_ready>
   126cb:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&g_task_manager.task_list, &task->all_node);  // 加入到所有队列
   126ce:	8b 45 08             	mov    0x8(%ebp),%eax
   126d1:	83 c0 3c             	add    $0x3c,%eax
   126d4:	83 ec 08             	sub    $0x8,%esp
   126d7:	50                   	push   %eax
   126d8:	68 1c 70 01 00       	push   $0x1701c
   126dd:	e8 36 f0 ff ff       	call   11718 <list_insert_last>
   126e2:	83 c4 10             	add    $0x10,%esp
    irq_leave_proection(state);  //--leave protection
   126e5:	83 ec 0c             	sub    $0xc,%esp
   126e8:	ff 75 f4             	pushl  -0xc(%ebp)
   126eb:	e8 b7 e8 ff ff       	call   10fa7 <irq_leave_proection>
   126f0:	83 c4 10             	add    $0x10,%esp

    return 0;
   126f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   126f8:	c9                   	leave  
   126f9:	c3                   	ret    

000126fa <task_manager_init>:

// 初始化任务管理
void task_manager_init() {
   126fa:	55                   	push   %ebp
   126fb:	89 e5                	mov    %esp,%ebp
   126fd:	83 ec 18             	sub    $0x18,%esp
    int sel = gdt_alloc_desc();
   12700:	e8 a4 dd ff ff       	call   104a9 <gdt_alloc_desc>
   12705:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xffffffff, 
   12708:	68 f2 40 00 00       	push   $0x40f2
   1270d:	6a ff                	push   $0xffffffff
   1270f:	6a 00                	push   $0x0
   12711:	ff 75 f4             	pushl  -0xc(%ebp)
   12714:	e8 8a dc ff ff       	call   103a3 <segment_desc_set>
   12719:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D
    );
    g_task_manager.app_data_sel = sel;
   1271c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1271f:	a3 9c 71 01 00       	mov    %eax,0x1719c

    int selc = gdt_alloc_desc();
   12724:	e8 80 dd ff ff       	call   104a9 <gdt_alloc_desc>
   12729:	89 45 f0             	mov    %eax,-0x10(%ebp)
    segment_desc_set(selc, 0x00000000, 0xffffffff, 
   1272c:	68 fa 40 00 00       	push   $0x40fa
   12731:	6a ff                	push   $0xffffffff
   12733:	6a 00                	push   $0x0
   12735:	ff 75 f0             	pushl  -0x10(%ebp)
   12738:	e8 66 dc ff ff       	call   103a3 <segment_desc_set>
   1273d:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D
    );
    g_task_manager.app_code_sel = selc;
   12740:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12743:	a3 98 71 01 00       	mov    %eax,0x17198

    list_init(&g_task_manager.ready_list);
   12748:	83 ec 0c             	sub    $0xc,%esp
   1274b:	68 04 70 01 00       	push   $0x17004
   12750:	e8 3f ef ff ff       	call   11694 <list_init>
   12755:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.task_list);
   12758:	83 ec 0c             	sub    $0xc,%esp
   1275b:	68 1c 70 01 00       	push   $0x1701c
   12760:	e8 2f ef ff ff       	call   11694 <list_init>
   12765:	83 c4 10             	add    $0x10,%esp
    list_init(&g_task_manager.sleep_list);
   12768:	83 ec 0c             	sub    $0xc,%esp
   1276b:	68 10 70 01 00       	push   $0x17010
   12770:	e8 1f ef ff ff       	call   11694 <list_init>
   12775:	83 c4 10             	add    $0x10,%esp
    g_task_manager.curr_task = get_first_task();
   12778:	e8 c6 00 00 00       	call   12843 <get_first_task>
   1277d:	a3 00 70 01 00       	mov    %eax,0x17000
    
    task_init(&g_task_manager.idle_task,  
   12782:	ba a0 91 01 00       	mov    $0x191a0,%edx
   12787:	b8 d5 24 01 00       	mov    $0x124d5,%eax
   1278c:	83 ec 0c             	sub    $0xc,%esp
   1278f:	52                   	push   %edx
   12790:	50                   	push   %eax
   12791:	6a 01                	push   $0x1
   12793:	68 83 2f 01 00       	push   $0x12f83
   12798:	68 e0 70 01 00       	push   $0x170e0
   1279d:	e8 78 fe ff ff       	call   1261a <task_init>
   127a2:	83 c4 20             	add    $0x20,%esp
            "idle  task", 
            TASK_FLAGS_SYSTEM,
            (uint32_t)idle_task_func, 
            (uint32_t)&idle_task_stack[2048]
    );
}
   127a5:	90                   	nop
   127a6:	c9                   	leave  
   127a7:	c3                   	ret    

000127a8 <first_task_init>:


void first_task_init() {
   127a8:	55                   	push   %ebp
   127a9:	89 e5                	mov    %esp,%ebp
   127ab:	83 ec 18             	sub    $0x18,%esp

    void first_task_entry();
    extern uint8_t s_first_task[], e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   127ae:	ba e3 d1 01 00       	mov    $0x1d1e3,%edx
   127b3:	b8 a0 d1 01 00       	mov    $0x1d1a0,%eax
   127b8:	29 c2                	sub    %eax,%edx
   127ba:	89 d0                	mov    %edx,%eax
   127bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   127bf:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)

    uint32_t first_start = (uint32_t)first_task_entry;
   127c6:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    // first_start + alloc_size 栈顶
    task_init(&g_task_manager.first_task, 
   127cd:	8b 55 ec             	mov    -0x14(%ebp),%edx
   127d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   127d3:	01 d0                	add    %edx,%eax
   127d5:	83 ec 0c             	sub    $0xc,%esp
   127d8:	50                   	push   %eax
   127d9:	ff 75 ec             	pushl  -0x14(%ebp)
   127dc:	6a 00                	push   $0x0
   127de:	68 8e 2f 01 00       	push   $0x12f8e
   127e3:	68 28 70 01 00       	push   $0x17028
   127e8:	e8 2d fe ff ff       	call   1261a <task_init>
   127ed:	83 c4 20             	add    $0x20,%esp
        "first task", 0, 
        first_start, first_start + alloc_size 
    );
    
    mmu_set_page_dir((&g_task_manager)->first_task.tss.cr3);
   127f0:	a1 90 70 01 00       	mov    0x17090,%eax
   127f5:	83 ec 0c             	sub    $0xc,%esp
   127f8:	50                   	push   %eax
   127f9:	e8 c6 fc ff ff       	call   124c4 <mmu_set_page_dir>
   127fe:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W);
   12801:	83 ec 04             	sub    $0x4,%esp
   12804:	6a 03                	push   $0x3
   12806:	ff 75 f0             	pushl  -0x10(%ebp)
   12809:	ff 75 ec             	pushl  -0x14(%ebp)
   1280c:	e8 3f f9 ff ff       	call   12150 <memory_alloc_page_for>
   12811:	83 c4 10             	add    $0x10,%esp
    k_memcpy( (void*)first_start, (void *)&s_first_task, copy_size );
   12814:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12817:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1281a:	83 ec 04             	sub    $0x4,%esp
   1281d:	52                   	push   %edx
   1281e:	68 a0 d1 01 00       	push   $0x1d1a0
   12823:	50                   	push   %eax
   12824:	e8 40 eb ff ff       	call   11369 <k_memcpy>
   12829:	83 c4 10             	add    $0x10,%esp


    write_tr((&g_task_manager)->first_task.tss_sel);
   1282c:	a1 dc 70 01 00       	mov    0x170dc,%eax
   12831:	0f b7 c0             	movzwl %ax,%eax
   12834:	83 ec 0c             	sub    $0xc,%esp
   12837:	50                   	push   %eax
   12838:	e8 35 fc ff ff       	call   12472 <write_tr>
   1283d:	83 c4 10             	add    $0x10,%esp
}
   12840:	90                   	nop
   12841:	c9                   	leave  
   12842:	c3                   	ret    

00012843 <get_first_task>:





task_t* get_first_task() {
   12843:	55                   	push   %ebp
   12844:	89 e5                	mov    %esp,%ebp
    return &g_task_manager.first_task;
   12846:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   1284b:	5d                   	pop    %ebp
   1284c:	c3                   	ret    

0001284d <task_current>:

task_t* task_current() {
   1284d:	55                   	push   %ebp
   1284e:	89 e5                	mov    %esp,%ebp
    return g_task_manager.curr_task;
   12850:	a1 00 70 01 00       	mov    0x17000,%eax
}
   12855:	5d                   	pop    %ebp
   12856:	c3                   	ret    

00012857 <task_set_ready>:


// 将任务添加到就绪队列 尾部 设置状态为 ready
void task_set_ready(task_t* task) {
   12857:	55                   	push   %ebp
   12858:	89 e5                	mov    %esp,%ebp
   1285a:	83 ec 08             	sub    $0x8,%esp
    if (task == &g_task_manager.idle_task) {  // 空进程不应该加入就绪队列
   1285d:	81 7d 08 e0 70 01 00 	cmpl   $0x170e0,0x8(%ebp)
   12864:	74 23                	je     12889 <task_set_ready+0x32>
        return;
    }

    list_insert_last(&g_task_manager.ready_list, &task->run_node);
   12866:	8b 45 08             	mov    0x8(%ebp),%eax
   12869:	83 c0 34             	add    $0x34,%eax
   1286c:	83 ec 08             	sub    $0x8,%esp
   1286f:	50                   	push   %eax
   12870:	68 04 70 01 00       	push   $0x17004
   12875:	e8 9e ee ff ff       	call   11718 <list_insert_last>
   1287a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1287d:	8b 45 08             	mov    0x8(%ebp),%eax
   12880:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
   12887:	eb 01                	jmp    1288a <task_set_ready+0x33>
        return;
   12889:	90                   	nop
}
   1288a:	c9                   	leave  
   1288b:	c3                   	ret    

0001288c <task_set_block>:

// 将 特定 任务从就绪队列删除
void task_set_block(task_t* task) {
   1288c:	55                   	push   %ebp
   1288d:	89 e5                	mov    %esp,%ebp
   1288f:	83 ec 08             	sub    $0x8,%esp
    if (task == &g_task_manager.idle_task) {  // 空进程不应该删除
   12892:	81 7d 08 e0 70 01 00 	cmpl   $0x170e0,0x8(%ebp)
   12899:	74 19                	je     128b4 <task_set_block+0x28>
        return;
    }
    list_delete(&g_task_manager.ready_list, &task->run_node);
   1289b:	8b 45 08             	mov    0x8(%ebp),%eax
   1289e:	83 c0 34             	add    $0x34,%eax
   128a1:	83 ec 08             	sub    $0x8,%esp
   128a4:	50                   	push   %eax
   128a5:	68 04 70 01 00       	push   $0x17004
   128aa:	e8 46 ef ff ff       	call   117f5 <list_delete>
   128af:	83 c4 10             	add    $0x10,%esp
   128b2:	eb 01                	jmp    128b5 <task_set_block+0x29>
        return;
   128b4:	90                   	nop
    // list_delete_first(&g_task_manager.ready_list);
}
   128b5:	c9                   	leave  
   128b6:	c3                   	ret    

000128b7 <sys_sched_yield>:

// 主动放弃cpu执行
int  sys_sched_yield() {
   128b7:	55                   	push   %ebp
   128b8:	89 e5                	mov    %esp,%ebp
   128ba:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   128bd:	e8 cd e6 ff ff       	call   10f8f <irq_enter_proection>
   128c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if(list_count(&g_task_manager.ready_list) > 1) {
   128c5:	83 ec 0c             	sub    $0xc,%esp
   128c8:	68 04 70 01 00       	push   $0x17004
   128cd:	e8 dd fb ff ff       	call   124af <list_count>
   128d2:	83 c4 10             	add    $0x10,%esp
   128d5:	83 f8 01             	cmp    $0x1,%eax
   128d8:	7e 29                	jle    12903 <sys_sched_yield+0x4c>
        task_t* curr = task_current();
   128da:	e8 6e ff ff ff       	call   1284d <task_current>
   128df:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   128e2:	83 ec 0c             	sub    $0xc,%esp
   128e5:	ff 75 f0             	pushl  -0x10(%ebp)
   128e8:	e8 9f ff ff ff       	call   1288c <task_set_block>
   128ed:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   128f0:	83 ec 0c             	sub    $0xc,%esp
   128f3:	ff 75 f0             	pushl  -0x10(%ebp)
   128f6:	e8 5c ff ff ff       	call   12857 <task_set_ready>
   128fb:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   128fe:	e8 58 00 00 00       	call   1295b <task_dispatch>
    }
    
    irq_leave_proection(state);  //--leave protection
   12903:	83 ec 0c             	sub    $0xc,%esp
   12906:	ff 75 f4             	pushl  -0xc(%ebp)
   12909:	e8 99 e6 ff ff       	call   10fa7 <irq_leave_proection>
   1290e:	83 c4 10             	add    $0x10,%esp

    return 0;
   12911:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12916:	c9                   	leave  
   12917:	c3                   	ret    

00012918 <task_next_run>:

// 从就绪队列中找到一第一个任务
task_t * task_next_run() {
   12918:	55                   	push   %ebp
   12919:	89 e5                	mov    %esp,%ebp
   1291b:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&g_task_manager.ready_list) == 0) {
   1291e:	68 04 70 01 00       	push   $0x17004
   12923:	e8 87 fb ff ff       	call   124af <list_count>
   12928:	83 c4 04             	add    $0x4,%esp
   1292b:	85 c0                	test   %eax,%eax
   1292d:	75 07                	jne    12936 <task_next_run+0x1e>
        return &g_task_manager.idle_task;
   1292f:	b8 e0 70 01 00       	mov    $0x170e0,%eax
   12934:	eb 23                	jmp    12959 <task_next_run+0x41>
    }

    list_node_t * task_node = list_first(&g_task_manager.ready_list);
   12936:	68 04 70 01 00       	push   $0x17004
   1293b:	e8 7a fb ff ff       	call   124ba <list_first>
   12940:	83 c4 04             	add    $0x4,%esp
   12943:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   12946:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1294a:	74 08                	je     12954 <task_next_run+0x3c>
   1294c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1294f:	83 e8 34             	sub    $0x34,%eax
   12952:	eb 05                	jmp    12959 <task_next_run+0x41>
   12954:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12959:	c9                   	leave  
   1295a:	c3                   	ret    

0001295b <task_dispatch>:

// 分配一个任务并从当前任务切换过去
void task_dispatch() {
   1295b:	55                   	push   %ebp
   1295c:	89 e5                	mov    %esp,%ebp
   1295e:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_proection();   //--enter protection
   12961:	e8 29 e6 ff ff       	call   10f8f <irq_enter_proection>
   12966:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * to = task_next_run();
   12969:	e8 aa ff ff ff       	call   12918 <task_next_run>
   1296e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != g_task_manager.curr_task) {
   12971:	a1 00 70 01 00       	mov    0x17000,%eax
   12976:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12979:	74 2b                	je     129a6 <task_dispatch+0x4b>
        task_t * from = task_current();
   1297b:	e8 cd fe ff ff       	call   1284d <task_current>
   12980:	89 45 ec             	mov    %eax,-0x14(%ebp)

        g_task_manager.curr_task = to;   // 设置将要切换的任务为“当前任务”
   12983:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12986:	a3 00 70 01 00       	mov    %eax,0x17000
        to->state = TASK_RUNNING;      // 设置 task running
   1298b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1298e:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

        task_switch_from_to(from, to);
   12995:	83 ec 08             	sub    $0x8,%esp
   12998:	ff 75 f0             	pushl  -0x10(%ebp)
   1299b:	ff 75 ec             	pushl  -0x14(%ebp)
   1299e:	e8 3c fb ff ff       	call   124df <task_switch_from_to>
   129a3:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_proection(state);  //--leave protection
   129a6:	83 ec 0c             	sub    $0xc,%esp
   129a9:	ff 75 f4             	pushl  -0xc(%ebp)
   129ac:	e8 f6 e5 ff ff       	call   10fa7 <irq_leave_proection>
   129b1:	83 c4 10             	add    $0x10,%esp
   
}
   129b4:	90                   	nop
   129b5:	c9                   	leave  
   129b6:	c3                   	ret    

000129b7 <task_time_tick>:

// 检查当前任务的时间片是否用完，若用完强制切换到下一任务
void task_time_tick() {
   129b7:	55                   	push   %ebp
   129b8:	89 e5                	mov    %esp,%ebp
   129ba:	83 ec 28             	sub    $0x28,%esp
    task_t* curr = task_current();
   129bd:	e8 8b fe ff ff       	call   1284d <task_current>
   129c2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int slice = --curr->slice_ticks;
   129c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   129c8:	8b 40 28             	mov    0x28(%eax),%eax
   129cb:	8d 50 ff             	lea    -0x1(%eax),%edx
   129ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   129d1:	89 50 28             	mov    %edx,0x28(%eax)
   129d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   129d7:	8b 40 28             	mov    0x28(%eax),%eax
   129da:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if( slice == 0 && &g_task_manager.ready_list.count > 0) {
   129dd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   129e1:	75 2d                	jne    12a10 <task_time_tick+0x59>
        curr->slice_ticks = curr->time_ticks;
   129e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   129e6:	8b 50 2c             	mov    0x2c(%eax),%edx
   129e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   129ec:	89 50 28             	mov    %edx,0x28(%eax)

        task_set_block(curr);
   129ef:	83 ec 0c             	sub    $0xc,%esp
   129f2:	ff 75 f0             	pushl  -0x10(%ebp)
   129f5:	e8 92 fe ff ff       	call   1288c <task_set_block>
   129fa:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr);
   129fd:	83 ec 0c             	sub    $0xc,%esp
   12a00:	ff 75 f0             	pushl  -0x10(%ebp)
   12a03:	e8 4f fe ff ff       	call   12857 <task_set_ready>
   12a08:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12a0b:	e8 4b ff ff ff       	call   1295b <task_dispatch>
    }

    list_node_t* sleep_lists_curr = list_first(&g_task_manager.sleep_list);
   12a10:	83 ec 0c             	sub    $0xc,%esp
   12a13:	68 10 70 01 00       	push   $0x17010
   12a18:	e8 9d fa ff ff       	call   124ba <list_first>
   12a1d:	83 c4 10             	add    $0x10,%esp
   12a20:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   12a23:	eb 62                	jmp    12a87 <task_time_tick+0xd0>
        list_node_t * next = list_node_next(sleep_lists_curr);
   12a25:	83 ec 0c             	sub    $0xc,%esp
   12a28:	ff 75 f4             	pushl  -0xc(%ebp)
   12a2b:	e8 74 fa ff ff       	call   124a4 <list_node_next>
   12a30:	83 c4 10             	add    $0x10,%esp
   12a33:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_t* task = list_node_parent(sleep_lists_curr, task_t, run_node);
   12a36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12a3a:	74 08                	je     12a44 <task_time_tick+0x8d>
   12a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12a3f:	83 e8 34             	sub    $0x34,%eax
   12a42:	eb 05                	jmp    12a49 <task_time_tick+0x92>
   12a44:	b8 00 00 00 00       	mov    $0x0,%eax
   12a49:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        
        if(--task->sleep_ticks == 0) {
   12a4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12a4f:	8b 40 30             	mov    0x30(%eax),%eax
   12a52:	8d 50 ff             	lea    -0x1(%eax),%edx
   12a55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12a58:	89 50 30             	mov    %edx,0x30(%eax)
   12a5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12a5e:	8b 40 30             	mov    0x30(%eax),%eax
   12a61:	85 c0                	test   %eax,%eax
   12a63:	75 1c                	jne    12a81 <task_time_tick+0xca>
            task_set_wakeup(task);
   12a65:	83 ec 0c             	sub    $0xc,%esp
   12a68:	ff 75 e4             	pushl  -0x1c(%ebp)
   12a6b:	e8 b8 00 00 00       	call   12b28 <task_set_wakeup>
   12a70:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   12a73:	83 ec 0c             	sub    $0xc,%esp
   12a76:	ff 75 e4             	pushl  -0x1c(%ebp)
   12a79:	e8 d9 fd ff ff       	call   12857 <task_set_ready>
   12a7e:	83 c4 10             	add    $0x10,%esp
        }
        sleep_lists_curr = next;
   12a81:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12a84:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (sleep_lists_curr) {
   12a87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12a8b:	75 98                	jne    12a25 <task_time_tick+0x6e>
    }

    task_dispatch();
   12a8d:	e8 c9 fe ff ff       	call   1295b <task_dispatch>
}
   12a92:	90                   	nop
   12a93:	c9                   	leave  
   12a94:	c3                   	ret    

00012a95 <sys_sleep>:



void sys_sleep(uint32_t ms) {
   12a95:	55                   	push   %ebp
   12a96:	89 e5                	mov    %esp,%ebp
   12a98:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_proection();
   12a9b:	e8 ef e4 ff ff       	call   10f8f <irq_enter_proection>
   12aa0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t* curr = task_current();
   12aa3:	e8 a5 fd ff ff       	call   1284d <task_current>
   12aa8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task_set_block(curr);
   12aab:	83 ec 0c             	sub    $0xc,%esp
   12aae:	ff 75 f0             	pushl  -0x10(%ebp)
   12ab1:	e8 d6 fd ff ff       	call   1288c <task_set_block>
   12ab6:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(curr, ms / OS_TICK_MS);
   12ab9:	8b 45 08             	mov    0x8(%ebp),%eax
   12abc:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   12ac1:	f7 e2                	mul    %edx
   12ac3:	89 d0                	mov    %edx,%eax
   12ac5:	c1 e8 03             	shr    $0x3,%eax
   12ac8:	83 ec 08             	sub    $0x8,%esp
   12acb:	50                   	push   %eax
   12acc:	ff 75 f0             	pushl  -0x10(%ebp)
   12acf:	e8 19 00 00 00       	call   12aed <task_set_sleep>
   12ad4:	83 c4 10             	add    $0x10,%esp

    task_dispatch();
   12ad7:	e8 7f fe ff ff       	call   1295b <task_dispatch>

    irq_leave_proection(state);
   12adc:	83 ec 0c             	sub    $0xc,%esp
   12adf:	ff 75 f4             	pushl  -0xc(%ebp)
   12ae2:	e8 c0 e4 ff ff       	call   10fa7 <irq_leave_proection>
   12ae7:	83 c4 10             	add    $0x10,%esp
}
   12aea:	90                   	nop
   12aeb:	c9                   	leave  
   12aec:	c3                   	ret    

00012aed <task_set_sleep>:

void task_set_sleep(task_t* task, uint32_t ticks) {
   12aed:	55                   	push   %ebp
   12aee:	89 e5                	mov    %esp,%ebp
   12af0:	83 ec 08             	sub    $0x8,%esp
    if(ticks <= 0) return;
   12af3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12af7:	74 2c                	je     12b25 <task_set_sleep+0x38>
    task->sleep_ticks = ticks;
   12af9:	8b 55 0c             	mov    0xc(%ebp),%edx
   12afc:	8b 45 08             	mov    0x8(%ebp),%eax
   12aff:	89 50 30             	mov    %edx,0x30(%eax)
    task->state = TASK_SLEEP;
   12b02:	8b 45 08             	mov    0x8(%ebp),%eax
   12b05:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
    list_insert_last(&g_task_manager.sleep_list, 
   12b0c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b0f:	83 c0 34             	add    $0x34,%eax
   12b12:	83 ec 08             	sub    $0x8,%esp
   12b15:	50                   	push   %eax
   12b16:	68 10 70 01 00       	push   $0x17010
   12b1b:	e8 f8 eb ff ff       	call   11718 <list_insert_last>
   12b20:	83 c4 10             	add    $0x10,%esp
   12b23:	eb 01                	jmp    12b26 <task_set_sleep+0x39>
    if(ticks <= 0) return;
   12b25:	90                   	nop
        &task->run_node);
}
   12b26:	c9                   	leave  
   12b27:	c3                   	ret    

00012b28 <task_set_wakeup>:

void task_set_wakeup(task_t* task) {
   12b28:	55                   	push   %ebp
   12b29:	89 e5                	mov    %esp,%ebp
   12b2b:	83 ec 08             	sub    $0x8,%esp
    list_delete(&g_task_manager.sleep_list, 
   12b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b31:	83 c0 34             	add    $0x34,%eax
   12b34:	83 ec 08             	sub    $0x8,%esp
   12b37:	50                   	push   %eax
   12b38:	68 10 70 01 00       	push   $0x17010
   12b3d:	e8 b3 ec ff ff       	call   117f5 <list_delete>
   12b42:	83 c4 10             	add    $0x10,%esp
        &task->run_node);
   12b45:	90                   	nop
   12b46:	c9                   	leave  
   12b47:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
    .global first_task_entry
    .extern first_task_main

first_task_entry:

	mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs

8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
#include <task.h>
#include <log.h>

int first_task_main() {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 08             	sub    $0x8,%esp
    for(;;) {
        klog("first task");
80000016:	83 ec 0c             	sub    $0xc,%esp
80000019:	68 38 00 00 80       	push   $0x80000038
8000001e:	e8 30 19 01 80       	call   11953 <klog>
80000023:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
80000026:	83 ec 0c             	sub    $0xc,%esp
80000029:	68 e8 03 00 00       	push   $0x3e8
8000002e:	e8 62 2a 01 80       	call   12a95 <sys_sleep>
80000033:	83 c4 10             	add    $0x10,%esp
        klog("first task");
80000036:	eb de                	jmp    80000016 <first_task_main+0x6>
80000038:	66 69 72 73 74 20    	imul   $0x2074,0x73(%edx),%si
8000003e:	74 61                	je     800000a1 <first_task_main+0x91>
80000040:	73 6b                	jae    800000ad <first_task_main+0x9d>
	...
