
D:/linux_kernel/dmos/build/src/kernel/kernel.elf:     file format elf32-i386
D:/linux_kernel/dmos/build/src/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001ae0 memsz 0x00001ae0 flags r-x
    LOAD off    0x00003000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000004 memsz 0x00004d40 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001809  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000002d4  0001180c  0001180c  0000280c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00200000  00200000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004d20  00200020  00200020  00003004  2**5
                  ALLOC
  4 .debug_line   00000aa6  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b98  00000000  00000000  00003aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000944  00000000  00000000  00005642  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000120  00000000  00000000  00005f88  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000820  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  000068c8  2**0
                  CONTENTS, READONLY
 10 .debug_frame  000009f8  00000000  00000000  000068dc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
0001180c l    d  .rodata	00000000 .rodata
00200000 l    d  .data	00000000 .data
00200020 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 src/kernel/CMakeFiles/kernel.dir/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
000102ba l     F .text	00000028 lgdt
00200020 l     O .bss	00000800 gdt_table2
00000000 l    df *ABS*	00000000 mtime.c
0001041a l     F .text	0000001f outb
00200820 l     O .bss	00000004 sys_tick
00010491 l     F .text	00000061 pit_init
00000000 l    df *ABS*	00000000 init.c
0001050a l     F .text	0000000b list_count
00010515 l     F .text	0000000a list_first
0001051f l     F .text	0000000b list_last
00200840 l     O .bss	00000070 task1
002008c0 l     O .bss	00000070 task2
00200940 l     O .bss	00001000 task1_stack
00201940 l     O .bss	00001000 task2_stack
00000000 l    df *ABS*	00000000 irq.c
0001082f l     F .text	00000007 hlt
00010836 l     F .text	00000007 cli
0001083d l     F .text	00000007 sti
00010844 l     F .text	00000028 lidt
0001086c l     F .text	0000001d inb
00010889 l     F .text	0000001f outb
00202940 l     O .bss	00000400 idt_table
000108a8 l     F .text	00000030 default_handler
00010b7f l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 klib.c
00200000 l     O .data	00000004 num2ch.1829
00000000 l    df *ABS*	00000000 list.c
0001136e l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011567 l     F .text	0000001d inb
00011584 l     F .text	0000001f outb
00000000 l    df *ABS*	00000000 task.c
000114e2 g     F .text	00000085 list_delete
00010eb4 g     F .text	0000000b irq_enable_global
00011405 g     F .text	00000064 list_insert_last
00010964 g     F .text	0000001c handle_overflow
00010267 g       .text	00000000 exception_handler_virtual_exception
00010aec g     F .text	0000001c handle_virtual_exception
000115a3 g     F .text	00000075 log_init
00010770 g     F .text	000000bf init_main
0001020c g       .text	00000000 exception_handler_alignment_check
0001058a g     F .text	0000003e task2_func
00010fa1 g     F .text	0000007a k_strncmp
00010a0c g     F .text	0000001c handle_segment_not_present
00010d97 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
00010910 g     F .text	0000001c handle_Debug
000100a4 g       .text	00000000 exception_handler_breakpoint
00011755 g     F .text	000000b4 tss_init
000101b3 g       .text	00000000 exception_handler_general_protection
00010a60 g     F .text	0000001c handle_page_fault
0001013f g       .text	00000000 exception_handler_double_fault
00010ebf g     F .text	0000002b pic_send_eoi
0001054c g     F .text	0000003e task1_func
00010eea g     F .text	00000047 k_strcpy
00010f31 g     F .text	00000070 k_strncpy
00010196 g       .text	00000000 exception_handler_stack_segment_fault
00010368 g     F .text	0000006d gdt_init
000100c3 g       .text	00000000 exception_handler_overflow
000102a5 g       .text	00000000 simple_switch
00010286 g       .text	00000000 exception_handler_time
00202d40 g     O .bss	00002000 stack
0001060d g     F .text	00000163 list_test
0001099c g     F .text	0000001c handle_invalid_opcode
0001101b g     F .text	0000003b k_strlen
000110e6 g     F .text	00000064 k_memcmp
000100e2 g       .text	00000000 exception_handler_bound_range
0001015c g       .text	00000000 exception_handler_invalid_tss
00011221 g     F .text	0000014d k_vsprint
000113a6 g     F .text	0000005f list_insert_first
00010047 g       .text	00000000 exception_handler_divider
00010a7c g     F .text	0000001c handle_fpu_error
00010ea9 g     F .text	0000000b irq_disable_global
000108d8 g     F .text	0000001c handle_unknown
0001052a g     F .text	00000022 kernel_init
000110a5 g     F .text	00000041 k_memset
00010000 g       .text	00000000 _start
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
000105c8 g     F .text	00000045 show_list
00010229 g       .text	00000000 exception_handler_machine_check
00010b4f g     F .text	00000030 irq_install
00010ad0 g     F .text	0000001c handle_smd_exception
00010e22 g     F .text	00000087 irq_disable
00010a44 g     F .text	0000001c handle_general_protection
00010248 g       .text	00000000 exception_handler_smd_exception
00010a98 g     F .text	0000001c handle_alignment_check
00010ab4 g     F .text	0000001c handle_machine_check
00011381 g     F .text	00000025 list_init
00010a28 g     F .text	0000001c handle_stack_segment_fault
000101d0 g       .text	00000000 exception_handler_page_fault
00010980 g     F .text	0000001c handle_bound_range
000101ed g       .text	00000000 exception_handler_fpu_error
000116d6 g     F .text	0000001e task_switch_from_to
00010c12 g     F .text	00000185 irq_init
0001114a g     F .text	000000d7 k_itoa
000109d4 g     F .text	0000001c handle_double_fault
00010439 g     F .text	00000058 handle_time
000102e2 g     F .text	00000086 segment_desc_set
00010948 g     F .text	0000001c handle_breakpoint
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00010066 g       .text	00000000 exception_handler_Debug
000109b8 g     F .text	0000001c handle_device_unavailable
000108f4 g     F .text	0000001c handle_divider
00011056 g     F .text	0000004f k_memcpy
000116f4 g     F .text	00000061 task_init
000103d5 g     F .text	00000045 gdt_alloc_desc
00011469 g     F .text	00000079 list_delete_first
00010b08 g     F .text	00000047 gate_desc_set
00011618 g     F .text	000000be klog
0001092c g     F .text	0000001c handle_NMI
000109f0 g     F .text	0000001c handle_invalid_tss
000104f2 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 21 05 00 00       	call   1052a <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc 40 4d 20 00       	mov    $0x204d40,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 48 07 00 00       	jmp    10770 <init_main>

00010028 <exception_handler_unknown>:
    add $(2*4), %esp    # 跳过 with_error_code num
    iret                # 中断返回

.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 9f 08 00 00       	call   108d8 <handle_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 9c 08 00 00       	call   108f4 <handle_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 99 08 00 00       	call   10910 <handle_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 96 08 00 00       	call   1092c <handle_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 93 08 00 00       	call   10948 <handle_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 90 08 00 00       	call   10964 <handle_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 8d 08 00 00       	call   10980 <handle_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 8a 08 00 00       	call   1099c <handle_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 87 08 00 00       	call   109b8 <handle_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 86 08 00 00       	call   109d4 <handle_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 85 08 00 00       	call   109f0 <handle_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 84 08 00 00       	call   10a0c <handle_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 83 08 00 00       	call   10a28 <handle_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 82 08 00 00       	call   10a44 <handle_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 81 08 00 00       	call   10a60 <handle_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 7e 08 00 00       	call   10a7c <handle_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 7d 08 00 00       	call   10a98 <handle_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 7a 08 00 00       	call   10ab4 <handle_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 77 08 00 00       	call   10ad0 <handle_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 74 08 00 00       	call   10aec <handle_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_time>:

exception_handler time, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 a2 01 00 00       	call   10439 <handle_time>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <simple_switch>:
    // simple_switch(&from, &to)
.text
.global simple_switch
    
simple_switch:
    mov 4(%esp), %eax
   102a5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp), %edx
   102a9:	8b 54 24 08          	mov    0x8(%esp),%edx

    push %ebp
   102ad:	55                   	push   %ebp
    push %ebx
   102ae:	53                   	push   %ebx
    push %esi
   102af:	56                   	push   %esi
    push %edi
   102b0:	57                   	push   %edi
    mov %esp, (%eax)
   102b1:	89 20                	mov    %esp,(%eax)


    mov %edx, %esp
   102b3:	89 d4                	mov    %edx,%esp
    pop %edi
   102b5:	5f                   	pop    %edi
    pop %esi
   102b6:	5e                   	pop    %esi
    pop %ebx
   102b7:	5b                   	pop    %ebx
    pop %ebp
   102b8:	5d                   	pop    %ebp

   102b9:	c3                   	ret    

000102ba <lgdt>:

static inline void sti() {
	__asm__ __volatile__("sti");
}

static inline void lgdt(uint32_t start, uint32_t size) {
   102ba:	55                   	push   %ebp
   102bb:	89 e5                	mov    %esp,%ebp
   102bd:	83 ec 10             	sub    $0x10,%esp
		uint16_t limit;
		uint16_t start15_0;
		uint16_t start31_16;
	} gdt;

	gdt.start31_16 = start >> 16;
   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	c1 e8 10             	shr    $0x10,%eax
   102c6:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   102ca:	8b 45 08             	mov    0x8(%ebp),%eax
   102cd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   102d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   102d4:	83 e8 01             	sub    $0x1,%eax
   102d7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   102db:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   102df:	90                   	nop
   102e0:	c9                   	leave  
   102e1:	c3                   	ret    

000102e2 <segment_desc_set>:
#include <cpu.h>

static segment_desc_t gdt_table2[GDT_TABLE_SIZE];

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   102e2:	55                   	push   %ebp
   102e3:	89 e5                	mov    %esp,%ebp
   102e5:	83 ec 14             	sub    $0x14,%esp
   102e8:	8b 45 14             	mov    0x14(%ebp),%eax
   102eb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table2 + (selector >> 3);
   102ef:	8b 45 08             	mov    0x8(%ebp),%eax
   102f2:	c1 f8 03             	sar    $0x3,%eax
   102f5:	c1 e0 03             	shl    $0x3,%eax
   102f8:	05 20 00 20 00       	add    $0x200020,%eax
   102fd:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   10300:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10307:	76 0f                	jbe    10318 <segment_desc_set+0x36>
		attr |= 0x8000;
   10309:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1030f:	8b 45 10             	mov    0x10(%ebp),%eax
   10312:	c1 e8 0c             	shr    $0xc,%eax
   10315:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   10318:	8b 45 10             	mov    0x10(%ebp),%eax
   1031b:	89 c2                	mov    %eax,%edx
   1031d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10320:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   10323:	8b 45 0c             	mov    0xc(%ebp),%eax
   10326:	89 c2                	mov    %eax,%edx
   10328:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1032b:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   1032f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10332:	c1 e8 10             	shr    $0x10,%eax
   10335:	89 c2                	mov    %eax,%edx
   10337:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1033a:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1033d:	8b 45 10             	mov    0x10(%ebp),%eax
   10340:	c1 e8 10             	shr    $0x10,%eax
   10343:	c1 e0 08             	shl    $0x8,%eax
   10346:	66 25 00 0f          	and    $0xf00,%ax
   1034a:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1034e:	89 c2                	mov    %eax,%edx
   10350:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10353:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   10357:	8b 45 0c             	mov    0xc(%ebp),%eax
   1035a:	c1 e8 18             	shr    $0x18,%eax
   1035d:	89 c2                	mov    %eax,%edx
   1035f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10362:	88 50 07             	mov    %dl,0x7(%eax)
}
   10365:	90                   	nop
   10366:	c9                   	leave  
   10367:	c3                   	ret    

00010368 <gdt_init>:

void gdt_init() {
   10368:	55                   	push   %ebp
   10369:	89 e5                	mov    %esp,%ebp
   1036b:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1036e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10375:	eb 19                	jmp    10390 <gdt_init+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   10377:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1037a:	c1 e0 03             	shl    $0x3,%eax
   1037d:	6a 00                	push   $0x0
   1037f:	6a 00                	push   $0x0
   10381:	6a 00                	push   $0x0
   10383:	50                   	push   %eax
   10384:	e8 59 ff ff ff       	call   102e2 <segment_desc_set>
   10389:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   1038c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10390:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10397:	7e de                	jle    10377 <gdt_init+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10399:	68 92 c0 00 00       	push   $0xc092
   1039e:	6a ff                	push   $0xffffffff
   103a0:	6a 00                	push   $0x0
   103a2:	6a 10                	push   $0x10
   103a4:	e8 39 ff ff ff       	call   102e2 <segment_desc_set>
   103a9:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
        | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   103ac:	68 9a c0 00 00       	push   $0xc09a
   103b1:	6a ff                	push   $0xffffffff
   103b3:	6a 00                	push   $0x0
   103b5:	6a 08                	push   $0x8
   103b7:	e8 26 ff ff ff       	call   102e2 <segment_desc_set>
   103bc:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
        | SEG_TYPE_RW | SEG_D | SEG_G);

    lgdt((uint32_t)gdt_table2, sizeof(gdt_table2));
   103bf:	b8 20 00 20 00       	mov    $0x200020,%eax
   103c4:	68 00 08 00 00       	push   $0x800
   103c9:	50                   	push   %eax
   103ca:	e8 eb fe ff ff       	call   102ba <lgdt>
   103cf:	83 c4 08             	add    $0x8,%esp

}
   103d2:	90                   	nop
   103d3:	c9                   	leave  
   103d4:	c3                   	ret    

000103d5 <gdt_alloc_desc>:

int  gdt_alloc_desc() {
   103d5:	55                   	push   %ebp
   103d6:	89 e5                	mov    %esp,%ebp
   103d8:	83 ec 10             	sub    $0x10,%esp
    int i=1;
   103db:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    for(; i < GDT_TABLE_SIZE; i++) {
   103e2:	eb 26                	jmp    1040a <gdt_alloc_desc+0x35>
        segment_desc_t* desc = gdt_table2 + i;
   103e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103e7:	c1 e0 03             	shl    $0x3,%eax
   103ea:	05 20 00 20 00       	add    $0x200020,%eax
   103ef:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->attr == 0) {
   103f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   103f5:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   103f9:	66 85 c0             	test   %ax,%ax
   103fc:	75 08                	jne    10406 <gdt_alloc_desc+0x31>
            return ( i * sizeof(segment_desc_t) );
   103fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10401:	c1 e0 03             	shl    $0x3,%eax
   10404:	eb 12                	jmp    10418 <gdt_alloc_desc+0x43>
    for(; i < GDT_TABLE_SIZE; i++) {
   10406:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1040a:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10411:	7e d1                	jle    103e4 <gdt_alloc_desc+0xf>
        }
    }

    return -1;
   10413:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10418:	c9                   	leave  
   10419:	c3                   	ret    

0001041a <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
   1041a:	55                   	push   %ebp
   1041b:	89 e5                	mov    %esp,%ebp
   1041d:	83 ec 08             	sub    $0x8,%esp
   10420:	8b 55 08             	mov    0x8(%ebp),%edx
   10423:	8b 45 0c             	mov    0xc(%ebp),%eax
   10426:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1042a:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1042d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10431:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10435:	ee                   	out    %al,(%dx)
}
   10436:	90                   	nop
   10437:	c9                   	leave  
   10438:	c3                   	ret    

00010439 <handle_time>:


static uint32_t sys_tick;

void exception_handler_time();
void handle_time(exception_frame_t * frame) {
   10439:	55                   	push   %ebp
   1043a:	89 e5                	mov    %esp,%ebp
   1043c:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1043f:	a1 20 08 20 00       	mov    0x200820,%eax
   10444:	83 c0 01             	add    $0x1,%eax
   10447:	a3 20 08 20 00       	mov    %eax,0x200820
    if(sys_tick % 100 == 0) klog("%d----------------------------", sys_tick);
   1044c:	8b 0d 20 08 20 00    	mov    0x200820,%ecx
   10452:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10457:	89 c8                	mov    %ecx,%eax
   10459:	f7 e2                	mul    %edx
   1045b:	89 d0                	mov    %edx,%eax
   1045d:	c1 e8 05             	shr    $0x5,%eax
   10460:	6b c0 64             	imul   $0x64,%eax,%eax
   10463:	29 c1                	sub    %eax,%ecx
   10465:	89 c8                	mov    %ecx,%eax
   10467:	85 c0                	test   %eax,%eax
   10469:	75 16                	jne    10481 <handle_time+0x48>
   1046b:	a1 20 08 20 00       	mov    0x200820,%eax
   10470:	83 ec 08             	sub    $0x8,%esp
   10473:	50                   	push   %eax
   10474:	68 0c 18 01 00       	push   $0x1180c
   10479:	e8 9a 11 00 00       	call   11618 <klog>
   1047e:	83 c4 10             	add    $0x10,%esp
    pic_send_eoi(IRQ0_TIMER);
   10481:	83 ec 0c             	sub    $0xc,%esp
   10484:	6a 20                	push   $0x20
   10486:	e8 34 0a 00 00       	call   10ebf <pic_send_eoi>
   1048b:	83 c4 10             	add    $0x10,%esp
} 
   1048e:	90                   	nop
   1048f:	c9                   	leave  
   10490:	c3                   	ret    

00010491 <pit_init>:

static void pit_init (void) {
   10491:	55                   	push   %ebp
   10492:	89 e5                	mov    %esp,%ebp
   10494:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10497:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1049e:	6a 36                	push   $0x36
   104a0:	6a 43                	push   $0x43
   104a2:	e8 73 ff ff ff       	call   1041a <outb>
   104a7:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);          // 加载低8位
   104aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ad:	0f b6 c0             	movzbl %al,%eax
   104b0:	50                   	push   %eax
   104b1:	6a 40                	push   $0x40
   104b3:	e8 62 ff ff ff       	call   1041a <outb>
   104b8:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);   // 再加载高8位
   104bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104be:	c1 e8 08             	shr    $0x8,%eax
   104c1:	0f b6 c0             	movzbl %al,%eax
   104c4:	50                   	push   %eax
   104c5:	6a 40                	push   $0x40
   104c7:	e8 4e ff ff ff       	call   1041a <outb>
   104cc:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (uint32_t)exception_handler_time);    
   104cf:	b8 86 02 01 00       	mov    $0x10286,%eax
   104d4:	83 ec 08             	sub    $0x8,%esp
   104d7:	50                   	push   %eax
   104d8:	6a 20                	push   $0x20
   104da:	e8 70 06 00 00       	call   10b4f <irq_install>
   104df:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   104e2:	83 ec 0c             	sub    $0xc,%esp
   104e5:	6a 20                	push   $0x20
   104e7:	e8 ab 08 00 00       	call   10d97 <irq_enable>
   104ec:	83 c4 10             	add    $0x10,%esp
}
   104ef:	90                   	nop
   104f0:	c9                   	leave  
   104f1:	c3                   	ret    

000104f2 <time_init>:

void time_init() {
   104f2:	55                   	push   %ebp
   104f3:	89 e5                	mov    %esp,%ebp
   104f5:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   104f8:	c7 05 20 08 20 00 00 	movl   $0x0,0x200820
   104ff:	00 00 00 

    pit_init();
   10502:	e8 8a ff ff ff       	call   10491 <pit_init>
   10507:	90                   	nop
   10508:	c9                   	leave  
   10509:	c3                   	ret    

0001050a <list_count>:

static inline int list_is_empty (list_t* list) {
    return list->count == 0;
}

static inline int list_count (list_t* list) {
   1050a:	55                   	push   %ebp
   1050b:	89 e5                	mov    %esp,%ebp
    return list->count;
   1050d:	8b 45 08             	mov    0x8(%ebp),%eax
   10510:	8b 40 08             	mov    0x8(%eax),%eax
}
   10513:	5d                   	pop    %ebp
   10514:	c3                   	ret    

00010515 <list_first>:

static inline list_node_t* list_first (list_t* list) {
   10515:	55                   	push   %ebp
   10516:	89 e5                	mov    %esp,%ebp
    return list->first;
   10518:	8b 45 08             	mov    0x8(%ebp),%eax
   1051b:	8b 00                	mov    (%eax),%eax
}
   1051d:	5d                   	pop    %ebp
   1051e:	c3                   	ret    

0001051f <list_last>:

static inline list_node_t* list_last (list_t* list) {
   1051f:	55                   	push   %ebp
   10520:	89 e5                	mov    %esp,%ebp
    return list->last;
   10522:	8b 45 08             	mov    0x8(%ebp),%eax
   10525:	8b 40 04             	mov    0x4(%eax),%eax
}
   10528:	5d                   	pop    %ebp
   10529:	c3                   	ret    

0001052a <kernel_init>:
#include <log.h>
#include <task.h>
#include <comm/cpu_ins.h>
#include <list.h>

void kernel_init (boot_info_t * boot_info) {
   1052a:	55                   	push   %ebp
   1052b:	89 e5                	mov    %esp,%ebp
   1052d:	83 ec 08             	sub    $0x8,%esp
    log_init();
   10530:	e8 6e 10 00 00       	call   115a3 <log_init>
    gdt_init();
   10535:	e8 2e fe ff ff       	call   10368 <gdt_init>
    irq_init();
   1053a:	e8 d3 06 00 00       	call   10c12 <irq_init>
    time_init();
   1053f:	e8 ae ff ff ff       	call   104f2 <time_init>
    irq_enable_global();
   10544:	e8 6b 09 00 00       	call   10eb4 <irq_enable_global>
}
   10549:	90                   	nop
   1054a:	c9                   	leave  
   1054b:	c3                   	ret    

0001054c <task1_func>:
static task_t task2;
static uint32_t task1_stack[1024];
static uint32_t task2_stack[1024];


void task1_func() {
   1054c:	55                   	push   %ebp
   1054d:	89 e5                	mov    %esp,%ebp
   1054f:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10552:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("task1 say++++: %d", count++);
   10559:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1055c:	8d 50 01             	lea    0x1(%eax),%edx
   1055f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10562:	83 ec 08             	sub    $0x8,%esp
   10565:	50                   	push   %eax
   10566:	68 2c 18 01 00       	push   $0x1182c
   1056b:	e8 a8 10 00 00       	call   11618 <klog>
   10570:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&task1, &task2);
   10573:	83 ec 08             	sub    $0x8,%esp
   10576:	68 c0 08 20 00       	push   $0x2008c0
   1057b:	68 40 08 20 00       	push   $0x200840
   10580:	e8 51 11 00 00       	call   116d6 <task_switch_from_to>
   10585:	83 c4 10             	add    $0x10,%esp
        klog("task1 say++++: %d", count++);
   10588:	eb cf                	jmp    10559 <task1_func+0xd>

0001058a <task2_func>:
    }
}

void task2_func() {
   1058a:	55                   	push   %ebp
   1058b:	89 e5                	mov    %esp,%ebp
   1058d:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10590:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for(;;) {
        klog("task2 say----: %d", count++);
   10597:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1059a:	8d 50 01             	lea    0x1(%eax),%edx
   1059d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   105a0:	83 ec 08             	sub    $0x8,%esp
   105a3:	50                   	push   %eax
   105a4:	68 3e 18 01 00       	push   $0x1183e
   105a9:	e8 6a 10 00 00       	call   11618 <klog>
   105ae:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&task2, &task1);
   105b1:	83 ec 08             	sub    $0x8,%esp
   105b4:	68 40 08 20 00       	push   $0x200840
   105b9:	68 c0 08 20 00       	push   $0x2008c0
   105be:	e8 13 11 00 00       	call   116d6 <task_switch_from_to>
   105c3:	83 c4 10             	add    $0x10,%esp
        klog("task2 say----: %d", count++);
   105c6:	eb cf                	jmp    10597 <task2_func+0xd>

000105c8 <show_list>:
    }
}


void show_list(list_t list) {
   105c8:	55                   	push   %ebp
   105c9:	89 e5                	mov    %esp,%ebp
   105cb:	56                   	push   %esi
   105cc:	53                   	push   %ebx
    klog("list: first=0x%x, last=0x%x, count=%d",
   105cd:	8d 45 08             	lea    0x8(%ebp),%eax
   105d0:	50                   	push   %eax
   105d1:	e8 34 ff ff ff       	call   1050a <list_count>
   105d6:	83 c4 04             	add    $0x4,%esp
   105d9:	89 c6                	mov    %eax,%esi
   105db:	8d 45 08             	lea    0x8(%ebp),%eax
   105de:	50                   	push   %eax
   105df:	e8 3b ff ff ff       	call   1051f <list_last>
   105e4:	83 c4 04             	add    $0x4,%esp
   105e7:	89 c3                	mov    %eax,%ebx
   105e9:	8d 45 08             	lea    0x8(%ebp),%eax
   105ec:	50                   	push   %eax
   105ed:	e8 23 ff ff ff       	call   10515 <list_first>
   105f2:	83 c4 04             	add    $0x4,%esp
   105f5:	56                   	push   %esi
   105f6:	53                   	push   %ebx
   105f7:	50                   	push   %eax
   105f8:	68 50 18 01 00       	push   $0x11850
   105fd:	e8 16 10 00 00       	call   11618 <klog>
   10602:	83 c4 10             	add    $0x10,%esp
         list_first(&list), list_last(&list), list_count(&list) );
}
   10605:	90                   	nop
   10606:	8d 65 f8             	lea    -0x8(%ebp),%esp
   10609:	5b                   	pop    %ebx
   1060a:	5e                   	pop    %esi
   1060b:	5d                   	pop    %ebp
   1060c:	c3                   	ret    

0001060d <list_test>:

void list_test() {
   1060d:	55                   	push   %ebp
   1060e:	89 e5                	mov    %esp,%ebp
   10610:	83 ec 58             	sub    $0x58,%esp
    list_t list;
    list_node_t nodes[5];

    list_init(&list);
   10613:	83 ec 0c             	sub    $0xc,%esp
   10616:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10619:	50                   	push   %eax
   1061a:	e8 62 0d 00 00       	call   11381 <list_init>
   1061f:	83 c4 10             	add    $0x10,%esp

    show_list(list);
   10622:	83 ec 04             	sub    $0x4,%esp
   10625:	ff 75 dc             	pushl  -0x24(%ebp)
   10628:	ff 75 d8             	pushl  -0x28(%ebp)
   1062b:	ff 75 d4             	pushl  -0x2c(%ebp)
   1062e:	e8 95 ff ff ff       	call   105c8 <show_list>
   10633:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   10636:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1063d:	eb 3f                	jmp    1067e <list_test+0x71>
        list_node_t * node = nodes + i;
   1063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10642:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   10649:	8d 45 ac             	lea    -0x54(%ebp),%eax
   1064c:	01 d0                	add    %edx,%eax
   1064e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   10651:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10654:	83 ec 04             	sub    $0x4,%esp
   10657:	50                   	push   %eax
   10658:	ff 75 f4             	pushl  -0xc(%ebp)
   1065b:	68 78 18 01 00       	push   $0x11878
   10660:	e8 b3 0f 00 00       	call   11618 <klog>
   10665:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   10668:	83 ec 08             	sub    $0x8,%esp
   1066b:	ff 75 e0             	pushl  -0x20(%ebp)
   1066e:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   10671:	50                   	push   %eax
   10672:	e8 2f 0d 00 00       	call   113a6 <list_insert_first>
   10677:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   1067a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1067e:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   10682:	7e bb                	jle    1063f <list_test+0x32>
    }
    show_list(list);
   10684:	83 ec 04             	sub    $0x4,%esp
   10687:	ff 75 dc             	pushl  -0x24(%ebp)
   1068a:	ff 75 d8             	pushl  -0x28(%ebp)
   1068d:	ff 75 d4             	pushl  -0x2c(%ebp)
   10690:	e8 33 ff ff ff       	call   105c8 <show_list>
   10695:	83 c4 10             	add    $0x10,%esp

    list_init(&list);
   10698:	83 ec 0c             	sub    $0xc,%esp
   1069b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   1069e:	50                   	push   %eax
   1069f:	e8 dd 0c 00 00       	call   11381 <list_init>
   106a4:	83 c4 10             	add    $0x10,%esp
    show_list(list);
   106a7:	83 ec 04             	sub    $0x4,%esp
   106aa:	ff 75 dc             	pushl  -0x24(%ebp)
   106ad:	ff 75 d8             	pushl  -0x28(%ebp)
   106b0:	ff 75 d4             	pushl  -0x2c(%ebp)
   106b3:	e8 10 ff ff ff       	call   105c8 <show_list>
   106b8:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   106bb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   106c2:	eb 3f                	jmp    10703 <list_test+0xf6>
        list_node_t * node = nodes + i;
   106c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106c7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   106ce:	8d 45 ac             	lea    -0x54(%ebp),%eax
   106d1:	01 d0                	add    %edx,%eax
   106d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        klog("insert first to list: %d, 0x%x", i, (uint32_t)node);
   106d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   106d9:	83 ec 04             	sub    $0x4,%esp
   106dc:	50                   	push   %eax
   106dd:	ff 75 f0             	pushl  -0x10(%ebp)
   106e0:	68 78 18 01 00       	push   $0x11878
   106e5:	e8 2e 0f 00 00       	call   11618 <klog>
   106ea:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   106ed:	83 ec 08             	sub    $0x8,%esp
   106f0:	ff 75 e4             	pushl  -0x1c(%ebp)
   106f3:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   106f6:	50                   	push   %eax
   106f7:	e8 09 0d 00 00       	call   11405 <list_insert_last>
   106fc:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   106ff:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10703:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   10707:	7e bb                	jle    106c4 <list_test+0xb7>
    }
    show_list(list);
   10709:	83 ec 04             	sub    $0x4,%esp
   1070c:	ff 75 dc             	pushl  -0x24(%ebp)
   1070f:	ff 75 d8             	pushl  -0x28(%ebp)
   10712:	ff 75 d4             	pushl  -0x2c(%ebp)
   10715:	e8 ae fe ff ff       	call   105c8 <show_list>
   1071a:	83 c4 10             	add    $0x10,%esp
// ------------------
    
    for(int i=0; i<5; i++) {
   1071d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10724:	eb 2d                	jmp    10753 <list_test+0x146>
        list_node_t* node = list_delete_first(&list);
   10726:	83 ec 0c             	sub    $0xc,%esp
   10729:	8d 45 d4             	lea    -0x2c(%ebp),%eax
   1072c:	50                   	push   %eax
   1072d:	e8 37 0d 00 00       	call   11469 <list_delete_first>
   10732:	83 c4 10             	add    $0x10,%esp
   10735:	89 45 e8             	mov    %eax,-0x18(%ebp)
        klog("delete first from list: %d, 0x%x", i, (uint32_t)node);
   10738:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1073b:	83 ec 04             	sub    $0x4,%esp
   1073e:	50                   	push   %eax
   1073f:	ff 75 ec             	pushl  -0x14(%ebp)
   10742:	68 98 18 01 00       	push   $0x11898
   10747:	e8 cc 0e 00 00       	call   11618 <klog>
   1074c:	83 c4 10             	add    $0x10,%esp
    for(int i=0; i<5; i++) {
   1074f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   10753:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   10757:	7e cd                	jle    10726 <list_test+0x119>
    }

    show_list(list);
   10759:	83 ec 04             	sub    $0x4,%esp
   1075c:	ff 75 dc             	pushl  -0x24(%ebp)
   1075f:	ff 75 d8             	pushl  -0x28(%ebp)
   10762:	ff 75 d4             	pushl  -0x2c(%ebp)
   10765:	e8 5e fe ff ff       	call   105c8 <show_list>
   1076a:	83 c4 10             	add    $0x10,%esp

}
   1076d:	90                   	nop
   1076e:	c9                   	leave  
   1076f:	c3                   	ret    

00010770 <init_main>:

void init_main() {
   10770:	55                   	push   %ebp
   10771:	89 e5                	mov    %esp,%ebp
   10773:	83 ec 28             	sub    $0x28,%esp
    // for(;;) {}
    klog("Kernal %s is running ... ", "1.0.0");
   10776:	83 ec 08             	sub    $0x8,%esp
   10779:	68 b9 18 01 00       	push   $0x118b9
   1077e:	68 bf 18 01 00       	push   $0x118bf
   10783:	e8 90 0e 00 00       	call   11618 <klog>
   10788:	83 c4 10             	add    $0x10,%esp

    // list_test();
    struct type_t {
        int i;
        list_node_t node;
    }v = {0x123456};
   1078b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   10792:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10799:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   107a0:	c7 45 e4 56 34 12 00 	movl   $0x123456,-0x1c(%ebp)

    list_node_t * v_node = &v.node;
   107a7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   107aa:	83 c0 04             	add    $0x4,%eax
   107ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct type_t* p = list_node_parent(v_node, struct type_t, node);
   107b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107b4:	74 08                	je     107be <init_main+0x4e>
   107b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107b9:	83 e8 04             	sub    $0x4,%eax
   107bc:	eb 05                	jmp    107c3 <init_main+0x53>
   107be:	b8 00 00 00 00       	mov    $0x0,%eax
   107c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    if(p->i != 0x123456) {
   107c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107c9:	8b 00                	mov    (%eax),%eax
   107cb:	3d 56 34 12 00       	cmp    $0x123456,%eax
   107d0:	74 10                	je     107e2 <init_main+0x72>
        klog("error");
   107d2:	83 ec 0c             	sub    $0xc,%esp
   107d5:	68 d9 18 01 00       	push   $0x118d9
   107da:	e8 39 0e 00 00       	call   11618 <klog>
   107df:	83 c4 10             	add    $0x10,%esp
    }

    task_init(&task1, (uint32_t)task1_func, (uint32_t)&task1_stack[1024]);
   107e2:	ba 40 19 20 00       	mov    $0x201940,%edx
   107e7:	b8 4c 05 01 00       	mov    $0x1054c,%eax
   107ec:	83 ec 04             	sub    $0x4,%esp
   107ef:	52                   	push   %edx
   107f0:	50                   	push   %eax
   107f1:	68 40 08 20 00       	push   $0x200840
   107f6:	e8 f9 0e 00 00       	call   116f4 <task_init>
   107fb:	83 c4 10             	add    $0x10,%esp
    task_init(&task2, (uint32_t)task2_func, (uint32_t)&task2_stack[1024]);
   107fe:	ba 40 29 20 00       	mov    $0x202940,%edx
   10803:	b8 8a 05 01 00       	mov    $0x1058a,%eax
   10808:	83 ec 04             	sub    $0x4,%esp
   1080b:	52                   	push   %edx
   1080c:	50                   	push   %eax
   1080d:	68 c0 08 20 00       	push   $0x2008c0
   10812:	e8 dd 0e 00 00       	call   116f4 <task_init>
   10817:	83 c4 10             	add    $0x10,%esp
    
    task_switch_from_to(0, &task1);
   1081a:	83 ec 08             	sub    $0x8,%esp
   1081d:	68 40 08 20 00       	push   $0x200840
   10822:	6a 00                	push   $0x0
   10824:	e8 ad 0e 00 00       	call   116d6 <task_switch_from_to>
   10829:	83 c4 10             	add    $0x10,%esp
    
   1082c:	90                   	nop
   1082d:	c9                   	leave  
   1082e:	c3                   	ret    

0001082f <hlt>:
static inline void hlt() {
   1082f:	55                   	push   %ebp
   10830:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("hlt");
   10832:	f4                   	hlt    
}
   10833:	90                   	nop
   10834:	5d                   	pop    %ebp
   10835:	c3                   	ret    

00010836 <cli>:
static inline void cli() {
   10836:	55                   	push   %ebp
   10837:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   10839:	fa                   	cli    
}
   1083a:	90                   	nop
   1083b:	5d                   	pop    %ebp
   1083c:	c3                   	ret    

0001083d <sti>:
static inline void sti() {
   1083d:	55                   	push   %ebp
   1083e:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   10840:	fb                   	sti    
}
   10841:	90                   	nop
   10842:	5d                   	pop    %ebp
   10843:	c3                   	ret    

00010844 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   10844:	55                   	push   %ebp
   10845:	89 e5                	mov    %esp,%ebp
   10847:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   1084a:	8b 45 08             	mov    0x8(%ebp),%eax
   1084d:	c1 e8 10             	shr    $0x10,%eax
   10850:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   10854:	8b 45 08             	mov    0x8(%ebp),%eax
   10857:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   1085b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1085e:	83 e8 01             	sub    $0x1,%eax
   10861:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   10865:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10869:	90                   	nop
   1086a:	c9                   	leave  
   1086b:	c3                   	ret    

0001086c <inb>:
static inline uint8_t inb(uint16_t  port) {
   1086c:	55                   	push   %ebp
   1086d:	89 e5                	mov    %esp,%ebp
   1086f:	83 ec 14             	sub    $0x14,%esp
   10872:	8b 45 08             	mov    0x8(%ebp),%eax
   10875:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   10879:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1087d:	89 c2                	mov    %eax,%edx
   1087f:	ec                   	in     (%dx),%al
   10880:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   10883:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10887:	c9                   	leave  
   10888:	c3                   	ret    

00010889 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   10889:	55                   	push   %ebp
   1088a:	89 e5                	mov    %esp,%ebp
   1088c:	83 ec 08             	sub    $0x8,%esp
   1088f:	8b 55 08             	mov    0x8(%ebp),%edx
   10892:	8b 45 0c             	mov    0xc(%ebp),%eax
   10895:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10899:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1089c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   108a0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   108a4:	ee                   	out    %al,(%dx)
}
   108a5:	90                   	nop
   108a6:	c9                   	leave  
   108a7:	c3                   	ret    

000108a8 <default_handler>:

//  -----------------------------------------   中断相关    -------------------------------------------
#define IDT_TABLE_NR 128
static gate_desc_t idt_table[IDT_TABLE_NR];

static void default_handler (exception_frame_t * frame, const char * message) {
   108a8:	55                   	push   %ebp
   108a9:	89 e5                	mov    %esp,%ebp
   108ab:	83 ec 08             	sub    $0x8,%esp
    klog("--------------------------------");
   108ae:	83 ec 0c             	sub    $0xc,%esp
   108b1:	68 e0 18 01 00       	push   $0x118e0
   108b6:	e8 5d 0d 00 00       	call   11618 <klog>
   108bb:	83 c4 10             	add    $0x10,%esp
    klog("IRQ/Exception happend: %s.", message);
   108be:	83 ec 08             	sub    $0x8,%esp
   108c1:	ff 75 0c             	pushl  0xc(%ebp)
   108c4:	68 01 19 01 00       	push   $0x11901
   108c9:	e8 4a 0d 00 00       	call   11618 <klog>
   108ce:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        hlt();
   108d1:	e8 59 ff ff ff       	call   1082f <hlt>
   108d6:	eb f9                	jmp    108d1 <default_handler+0x29>

000108d8 <handle_unknown>:
    }
}
void handle_unknown (exception_frame_t * frame) {
   108d8:	55                   	push   %ebp
   108d9:	89 e5                	mov    %esp,%ebp
   108db:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Unknown exception.");
   108de:	83 ec 08             	sub    $0x8,%esp
   108e1:	68 1c 19 01 00       	push   $0x1191c
   108e6:	ff 75 08             	pushl  0x8(%ebp)
   108e9:	e8 ba ff ff ff       	call   108a8 <default_handler>
   108ee:	83 c4 10             	add    $0x10,%esp
}
   108f1:	90                   	nop
   108f2:	c9                   	leave  
   108f3:	c3                   	ret    

000108f4 <handle_divider>:
void handle_divider(exception_frame_t * frame) {
   108f4:	55                   	push   %ebp
   108f5:	89 e5                	mov    %esp,%ebp
   108f7:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Divider Error.");
   108fa:	83 ec 08             	sub    $0x8,%esp
   108fd:	68 2f 19 01 00       	push   $0x1192f
   10902:	ff 75 08             	pushl  0x8(%ebp)
   10905:	e8 9e ff ff ff       	call   108a8 <default_handler>
   1090a:	83 c4 10             	add    $0x10,%esp
}
   1090d:	90                   	nop
   1090e:	c9                   	leave  
   1090f:	c3                   	ret    

00010910 <handle_Debug>:
void handle_Debug(exception_frame_t * frame) {
   10910:	55                   	push   %ebp
   10911:	89 e5                	mov    %esp,%ebp
   10913:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Debug Exception");
   10916:	83 ec 08             	sub    $0x8,%esp
   10919:	68 3e 19 01 00       	push   $0x1193e
   1091e:	ff 75 08             	pushl  0x8(%ebp)
   10921:	e8 82 ff ff ff       	call   108a8 <default_handler>
   10926:	83 c4 10             	add    $0x10,%esp
}
   10929:	90                   	nop
   1092a:	c9                   	leave  
   1092b:	c3                   	ret    

0001092c <handle_NMI>:
void handle_NMI(exception_frame_t * frame) {
   1092c:	55                   	push   %ebp
   1092d:	89 e5                	mov    %esp,%ebp
   1092f:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "NMI Interrupt.");
   10932:	83 ec 08             	sub    $0x8,%esp
   10935:	68 4e 19 01 00       	push   $0x1194e
   1093a:	ff 75 08             	pushl  0x8(%ebp)
   1093d:	e8 66 ff ff ff       	call   108a8 <default_handler>
   10942:	83 c4 10             	add    $0x10,%esp
}
   10945:	90                   	nop
   10946:	c9                   	leave  
   10947:	c3                   	ret    

00010948 <handle_breakpoint>:
void handle_breakpoint(exception_frame_t * frame) {
   10948:	55                   	push   %ebp
   10949:	89 e5                	mov    %esp,%ebp
   1094b:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Breakpoint.");
   1094e:	83 ec 08             	sub    $0x8,%esp
   10951:	68 5d 19 01 00       	push   $0x1195d
   10956:	ff 75 08             	pushl  0x8(%ebp)
   10959:	e8 4a ff ff ff       	call   108a8 <default_handler>
   1095e:	83 c4 10             	add    $0x10,%esp
}
   10961:	90                   	nop
   10962:	c9                   	leave  
   10963:	c3                   	ret    

00010964 <handle_overflow>:
void handle_overflow(exception_frame_t * frame) {
   10964:	55                   	push   %ebp
   10965:	89 e5                	mov    %esp,%ebp
   10967:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Overflow.");
   1096a:	83 ec 08             	sub    $0x8,%esp
   1096d:	68 69 19 01 00       	push   $0x11969
   10972:	ff 75 08             	pushl  0x8(%ebp)
   10975:	e8 2e ff ff ff       	call   108a8 <default_handler>
   1097a:	83 c4 10             	add    $0x10,%esp
}
   1097d:	90                   	nop
   1097e:	c9                   	leave  
   1097f:	c3                   	ret    

00010980 <handle_bound_range>:
void handle_bound_range(exception_frame_t * frame) {
   10980:	55                   	push   %ebp
   10981:	89 e5                	mov    %esp,%ebp
   10983:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "BOUND Range Exceeded.");
   10986:	83 ec 08             	sub    $0x8,%esp
   10989:	68 73 19 01 00       	push   $0x11973
   1098e:	ff 75 08             	pushl  0x8(%ebp)
   10991:	e8 12 ff ff ff       	call   108a8 <default_handler>
   10996:	83 c4 10             	add    $0x10,%esp
}
   10999:	90                   	nop
   1099a:	c9                   	leave  
   1099b:	c3                   	ret    

0001099c <handle_invalid_opcode>:
void handle_invalid_opcode(exception_frame_t * frame) {
   1099c:	55                   	push   %ebp
   1099d:	89 e5                	mov    %esp,%ebp
   1099f:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid Opcode.");
   109a2:	83 ec 08             	sub    $0x8,%esp
   109a5:	68 89 19 01 00       	push   $0x11989
   109aa:	ff 75 08             	pushl  0x8(%ebp)
   109ad:	e8 f6 fe ff ff       	call   108a8 <default_handler>
   109b2:	83 c4 10             	add    $0x10,%esp
}
   109b5:	90                   	nop
   109b6:	c9                   	leave  
   109b7:	c3                   	ret    

000109b8 <handle_device_unavailable>:
void handle_device_unavailable(exception_frame_t * frame) {
   109b8:	55                   	push   %ebp
   109b9:	89 e5                	mov    %esp,%ebp
   109bb:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Device Not Available.");
   109be:	83 ec 08             	sub    $0x8,%esp
   109c1:	68 99 19 01 00       	push   $0x11999
   109c6:	ff 75 08             	pushl  0x8(%ebp)
   109c9:	e8 da fe ff ff       	call   108a8 <default_handler>
   109ce:	83 c4 10             	add    $0x10,%esp
}
   109d1:	90                   	nop
   109d2:	c9                   	leave  
   109d3:	c3                   	ret    

000109d4 <handle_double_fault>:
void handle_double_fault(exception_frame_t * frame) {
   109d4:	55                   	push   %ebp
   109d5:	89 e5                	mov    %esp,%ebp
   109d7:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Double Fault.");
   109da:	83 ec 08             	sub    $0x8,%esp
   109dd:	68 af 19 01 00       	push   $0x119af
   109e2:	ff 75 08             	pushl  0x8(%ebp)
   109e5:	e8 be fe ff ff       	call   108a8 <default_handler>
   109ea:	83 c4 10             	add    $0x10,%esp
}
   109ed:	90                   	nop
   109ee:	c9                   	leave  
   109ef:	c3                   	ret    

000109f0 <handle_invalid_tss>:
void handle_invalid_tss(exception_frame_t * frame) {
   109f0:	55                   	push   %ebp
   109f1:	89 e5                	mov    %esp,%ebp
   109f3:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Invalid TSS");
   109f6:	83 ec 08             	sub    $0x8,%esp
   109f9:	68 bd 19 01 00       	push   $0x119bd
   109fe:	ff 75 08             	pushl  0x8(%ebp)
   10a01:	e8 a2 fe ff ff       	call   108a8 <default_handler>
   10a06:	83 c4 10             	add    $0x10,%esp
}
   10a09:	90                   	nop
   10a0a:	c9                   	leave  
   10a0b:	c3                   	ret    

00010a0c <handle_segment_not_present>:
void handle_segment_not_present(exception_frame_t * frame) {
   10a0c:	55                   	push   %ebp
   10a0d:	89 e5                	mov    %esp,%ebp
   10a0f:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Segment Not Present.");
   10a12:	83 ec 08             	sub    $0x8,%esp
   10a15:	68 c9 19 01 00       	push   $0x119c9
   10a1a:	ff 75 08             	pushl  0x8(%ebp)
   10a1d:	e8 86 fe ff ff       	call   108a8 <default_handler>
   10a22:	83 c4 10             	add    $0x10,%esp
}
   10a25:	90                   	nop
   10a26:	c9                   	leave  
   10a27:	c3                   	ret    

00010a28 <handle_stack_segment_fault>:
void handle_stack_segment_fault(exception_frame_t * frame) {
   10a28:	55                   	push   %ebp
   10a29:	89 e5                	mov    %esp,%ebp
   10a2b:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Stack-Segment Fault.");
   10a2e:	83 ec 08             	sub    $0x8,%esp
   10a31:	68 de 19 01 00       	push   $0x119de
   10a36:	ff 75 08             	pushl  0x8(%ebp)
   10a39:	e8 6a fe ff ff       	call   108a8 <default_handler>
   10a3e:	83 c4 10             	add    $0x10,%esp
}
   10a41:	90                   	nop
   10a42:	c9                   	leave  
   10a43:	c3                   	ret    

00010a44 <handle_general_protection>:
void handle_general_protection(exception_frame_t * frame) {
   10a44:	55                   	push   %ebp
   10a45:	89 e5                	mov    %esp,%ebp
   10a47:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: General Protection.");
   10a4a:	83 ec 08             	sub    $0x8,%esp
   10a4d:	68 f4 19 01 00       	push   $0x119f4
   10a52:	ff 75 08             	pushl  0x8(%ebp)
   10a55:	e8 4e fe ff ff       	call   108a8 <default_handler>
   10a5a:	83 c4 10             	add    $0x10,%esp
}
   10a5d:	90                   	nop
   10a5e:	c9                   	leave  
   10a5f:	c3                   	ret    

00010a60 <handle_page_fault>:
void handle_page_fault(exception_frame_t * frame) {
   10a60:	55                   	push   %ebp
   10a61:	89 e5                	mov    %esp,%ebp
   10a63:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "IRQ/Exception happend: Page fault.");
   10a66:	83 ec 08             	sub    $0x8,%esp
   10a69:	68 20 1a 01 00       	push   $0x11a20
   10a6e:	ff 75 08             	pushl  0x8(%ebp)
   10a71:	e8 32 fe ff ff       	call   108a8 <default_handler>
   10a76:	83 c4 10             	add    $0x10,%esp
}
   10a79:	90                   	nop
   10a7a:	c9                   	leave  
   10a7b:	c3                   	ret    

00010a7c <handle_fpu_error>:
void handle_fpu_error(exception_frame_t * frame) {
   10a7c:	55                   	push   %ebp
   10a7d:	89 e5                	mov    %esp,%ebp
   10a7f:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "X87 FPU Floating Point Error.");
   10a82:	83 ec 08             	sub    $0x8,%esp
   10a85:	68 43 1a 01 00       	push   $0x11a43
   10a8a:	ff 75 08             	pushl  0x8(%ebp)
   10a8d:	e8 16 fe ff ff       	call   108a8 <default_handler>
   10a92:	83 c4 10             	add    $0x10,%esp
}
   10a95:	90                   	nop
   10a96:	c9                   	leave  
   10a97:	c3                   	ret    

00010a98 <handle_alignment_check>:
void handle_alignment_check(exception_frame_t * frame) {
   10a98:	55                   	push   %ebp
   10a99:	89 e5                	mov    %esp,%ebp
   10a9b:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Alignment Check.");
   10a9e:	83 ec 08             	sub    $0x8,%esp
   10aa1:	68 61 1a 01 00       	push   $0x11a61
   10aa6:	ff 75 08             	pushl  0x8(%ebp)
   10aa9:	e8 fa fd ff ff       	call   108a8 <default_handler>
   10aae:	83 c4 10             	add    $0x10,%esp
}
   10ab1:	90                   	nop
   10ab2:	c9                   	leave  
   10ab3:	c3                   	ret    

00010ab4 <handle_machine_check>:
void handle_machine_check(exception_frame_t * frame) {
   10ab4:	55                   	push   %ebp
   10ab5:	89 e5                	mov    %esp,%ebp
   10ab7:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Machine Check.");
   10aba:	83 ec 08             	sub    $0x8,%esp
   10abd:	68 72 1a 01 00       	push   $0x11a72
   10ac2:	ff 75 08             	pushl  0x8(%ebp)
   10ac5:	e8 de fd ff ff       	call   108a8 <default_handler>
   10aca:	83 c4 10             	add    $0x10,%esp
}
   10acd:	90                   	nop
   10ace:	c9                   	leave  
   10acf:	c3                   	ret    

00010ad0 <handle_smd_exception>:
void handle_smd_exception(exception_frame_t * frame) {
   10ad0:	55                   	push   %ebp
   10ad1:	89 e5                	mov    %esp,%ebp
   10ad3:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "SIMD Floating Point Exception.");
   10ad6:	83 ec 08             	sub    $0x8,%esp
   10ad9:	68 84 1a 01 00       	push   $0x11a84
   10ade:	ff 75 08             	pushl  0x8(%ebp)
   10ae1:	e8 c2 fd ff ff       	call   108a8 <default_handler>
   10ae6:	83 c4 10             	add    $0x10,%esp
}
   10ae9:	90                   	nop
   10aea:	c9                   	leave  
   10aeb:	c3                   	ret    

00010aec <handle_virtual_exception>:
void handle_virtual_exception(exception_frame_t * frame) {
   10aec:	55                   	push   %ebp
   10aed:	89 e5                	mov    %esp,%ebp
   10aef:	83 ec 08             	sub    $0x8,%esp
	default_handler(frame, "Virtualization Exception.");
   10af2:	83 ec 08             	sub    $0x8,%esp
   10af5:	68 a3 1a 01 00       	push   $0x11aa3
   10afa:	ff 75 08             	pushl  0x8(%ebp)
   10afd:	e8 a6 fd ff ff       	call   108a8 <default_handler>
   10b02:	83 c4 10             	add    $0x10,%esp
}
   10b05:	90                   	nop
   10b06:	c9                   	leave  
   10b07:	c3                   	ret    

00010b08 <gate_desc_set>:

void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   10b08:	55                   	push   %ebp
   10b09:	89 e5                	mov    %esp,%ebp
   10b0b:	83 ec 08             	sub    $0x8,%esp
   10b0e:	8b 55 0c             	mov    0xc(%ebp),%edx
   10b11:	8b 45 14             	mov    0x14(%ebp),%eax
   10b14:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10b18:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   10b1c:	8b 45 10             	mov    0x10(%ebp),%eax
   10b1f:	89 c2                	mov    %eax,%edx
   10b21:	8b 45 08             	mov    0x8(%ebp),%eax
   10b24:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   10b27:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10b2e:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10b32:	8b 45 08             	mov    0x8(%ebp),%eax
   10b35:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10b39:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10b3d:	8b 45 10             	mov    0x10(%ebp),%eax
   10b40:	c1 e8 10             	shr    $0x10,%eax
   10b43:	89 c2                	mov    %eax,%edx
   10b45:	8b 45 08             	mov    0x8(%ebp),%eax
   10b48:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10b4c:	90                   	nop
   10b4d:	c9                   	leave  
   10b4e:	c3                   	ret    

00010b4f <irq_install>:

int irq_install(int irq_num, uint32_t handler) {
   10b4f:	55                   	push   %ebp
   10b50:	89 e5                	mov    %esp,%ebp
    if(irq_num >= IDT_TABLE_NR) {
   10b52:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10b56:	7e 07                	jle    10b5f <irq_install+0x10>
        return -1;
   10b58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b5d:	eb 1e                	jmp    10b7d <irq_install+0x2e>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, 
   10b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b62:	c1 e0 03             	shl    $0x3,%eax
   10b65:	05 40 29 20 00       	add    $0x202940,%eax
   10b6a:	68 00 8e 00 00       	push   $0x8e00
   10b6f:	ff 75 0c             	pushl  0xc(%ebp)
   10b72:	6a 08                	push   $0x8
   10b74:	50                   	push   %eax
   10b75:	e8 8e ff ff ff       	call   10b08 <gate_desc_set>
   10b7a:	83 c4 10             	add    $0x10,%esp
        GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
}
   10b7d:	c9                   	leave  
   10b7e:	c3                   	ret    

00010b7f <init_pic>:

static void init_pic() {
   10b7f:	55                   	push   %ebp
   10b80:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10b82:	6a 11                	push   $0x11
   10b84:	6a 20                	push   $0x20
   10b86:	e8 fe fc ff ff       	call   10889 <outb>
   10b8b:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10b8e:	6a 20                	push   $0x20
   10b90:	6a 21                	push   $0x21
   10b92:	e8 f2 fc ff ff       	call   10889 <outb>
   10b97:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10b9a:	6a 04                	push   $0x4
   10b9c:	6a 21                	push   $0x21
   10b9e:	e8 e6 fc ff ff       	call   10889 <outb>
   10ba3:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10ba6:	6a 01                	push   $0x1
   10ba8:	6a 21                	push   $0x21
   10baa:	e8 da fc ff ff       	call   10889 <outb>
   10baf:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10bb2:	6a 11                	push   $0x11
   10bb4:	68 a0 00 00 00       	push   $0xa0
   10bb9:	e8 cb fc ff ff       	call   10889 <outb>
   10bbe:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10bc1:	6a 28                	push   $0x28
   10bc3:	68 a1 00 00 00       	push   $0xa1
   10bc8:	e8 bc fc ff ff       	call   10889 <outb>
   10bcd:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10bd0:	6a 02                	push   $0x2
   10bd2:	68 a1 00 00 00       	push   $0xa1
   10bd7:	e8 ad fc ff ff       	call   10889 <outb>
   10bdc:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10bdf:	6a 01                	push   $0x1
   10be1:	68 a1 00 00 00       	push   $0xa1
   10be6:	e8 9e fc ff ff       	call   10889 <outb>
   10beb:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10bee:	68 fb 00 00 00       	push   $0xfb
   10bf3:	6a 21                	push   $0x21
   10bf5:	e8 8f fc ff ff       	call   10889 <outb>
   10bfa:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10bfd:	68 ff 00 00 00       	push   $0xff
   10c02:	68 a1 00 00 00       	push   $0xa1
   10c07:	e8 7d fc ff ff       	call   10889 <outb>
   10c0c:	83 c4 08             	add    $0x8,%esp
}
   10c0f:	90                   	nop
   10c10:	c9                   	leave  
   10c11:	c3                   	ret    

00010c12 <irq_init>:

void irq_init () {
   10c12:	55                   	push   %ebp
   10c13:	89 e5                	mov    %esp,%ebp
   10c15:	83 ec 10             	sub    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10c18:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10c1f:	eb 25                	jmp    10c46 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10c21:	ba 28 00 01 00       	mov    $0x10028,%edx
   10c26:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10c29:	c1 e0 03             	shl    $0x3,%eax
   10c2c:	05 40 29 20 00       	add    $0x202940,%eax
   10c31:	68 00 8e 00 00       	push   $0x8e00
   10c36:	52                   	push   %edx
   10c37:	6a 08                	push   $0x8
   10c39:	50                   	push   %eax
   10c3a:	e8 c9 fe ff ff       	call   10b08 <gate_desc_set>
   10c3f:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++) 
   10c42:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10c46:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   10c4a:	76 d5                	jbe    10c21 <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10c4c:	b8 40 29 20 00       	mov    $0x202940,%eax
   10c51:	68 00 04 00 00       	push   $0x400
   10c56:	50                   	push   %eax
   10c57:	e8 e8 fb ff ff       	call   10844 <lidt>
   10c5c:	83 c4 08             	add    $0x8,%esp

    // 设置异常处理接口
    irq_install(IRQ0_DE, (uint32_t)exception_handler_divider);
   10c5f:	b8 47 00 01 00       	mov    $0x10047,%eax
   10c64:	50                   	push   %eax
   10c65:	6a 00                	push   $0x0
   10c67:	e8 e3 fe ff ff       	call   10b4f <irq_install>
   10c6c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ1_DB, (uint32_t)exception_handler_Debug);
   10c6f:	b8 66 00 01 00       	mov    $0x10066,%eax
   10c74:	50                   	push   %eax
   10c75:	6a 01                	push   $0x1
   10c77:	e8 d3 fe ff ff       	call   10b4f <irq_install>
   10c7c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ2_NMI, (uint32_t)exception_handler_NMI);
   10c7f:	b8 85 00 01 00       	mov    $0x10085,%eax
   10c84:	50                   	push   %eax
   10c85:	6a 02                	push   $0x2
   10c87:	e8 c3 fe ff ff       	call   10b4f <irq_install>
   10c8c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ3_BP, (uint32_t)exception_handler_breakpoint);
   10c8f:	b8 a4 00 01 00       	mov    $0x100a4,%eax
   10c94:	50                   	push   %eax
   10c95:	6a 03                	push   $0x3
   10c97:	e8 b3 fe ff ff       	call   10b4f <irq_install>
   10c9c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ4_OF, (uint32_t)exception_handler_overflow);
   10c9f:	b8 c3 00 01 00       	mov    $0x100c3,%eax
   10ca4:	50                   	push   %eax
   10ca5:	6a 04                	push   $0x4
   10ca7:	e8 a3 fe ff ff       	call   10b4f <irq_install>
   10cac:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ5_BR, (uint32_t)exception_handler_bound_range);
   10caf:	b8 e2 00 01 00       	mov    $0x100e2,%eax
   10cb4:	50                   	push   %eax
   10cb5:	6a 05                	push   $0x5
   10cb7:	e8 93 fe ff ff       	call   10b4f <irq_install>
   10cbc:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ6_UD, (uint32_t)exception_handler_invalid_opcode);
   10cbf:	b8 01 01 01 00       	mov    $0x10101,%eax
   10cc4:	50                   	push   %eax
   10cc5:	6a 06                	push   $0x6
   10cc7:	e8 83 fe ff ff       	call   10b4f <irq_install>
   10ccc:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ7_NM, (uint32_t)exception_handler_device_unavailable);
   10ccf:	b8 20 01 01 00       	mov    $0x10120,%eax
   10cd4:	50                   	push   %eax
   10cd5:	6a 07                	push   $0x7
   10cd7:	e8 73 fe ff ff       	call   10b4f <irq_install>
   10cdc:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ8_DF, (uint32_t)exception_handler_double_fault);
   10cdf:	b8 3f 01 01 00       	mov    $0x1013f,%eax
   10ce4:	50                   	push   %eax
   10ce5:	6a 08                	push   $0x8
   10ce7:	e8 63 fe ff ff       	call   10b4f <irq_install>
   10cec:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ10_TS, (uint32_t)exception_handler_invalid_tss);
   10cef:	b8 5c 01 01 00       	mov    $0x1015c,%eax
   10cf4:	50                   	push   %eax
   10cf5:	6a 0a                	push   $0xa
   10cf7:	e8 53 fe ff ff       	call   10b4f <irq_install>
   10cfc:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ11_NP, (uint32_t)exception_handler_segment_not_present);
   10cff:	b8 79 01 01 00       	mov    $0x10179,%eax
   10d04:	50                   	push   %eax
   10d05:	6a 0b                	push   $0xb
   10d07:	e8 43 fe ff ff       	call   10b4f <irq_install>
   10d0c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ12_SS, (uint32_t)exception_handler_stack_segment_fault);
   10d0f:	b8 96 01 01 00       	mov    $0x10196,%eax
   10d14:	50                   	push   %eax
   10d15:	6a 0c                	push   $0xc
   10d17:	e8 33 fe ff ff       	call   10b4f <irq_install>
   10d1c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ13_GP, (uint32_t)exception_handler_general_protection);
   10d1f:	b8 b3 01 01 00       	mov    $0x101b3,%eax
   10d24:	50                   	push   %eax
   10d25:	6a 0d                	push   $0xd
   10d27:	e8 23 fe ff ff       	call   10b4f <irq_install>
   10d2c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ14_PF, (uint32_t)exception_handler_page_fault);
   10d2f:	b8 d0 01 01 00       	mov    $0x101d0,%eax
   10d34:	50                   	push   %eax
   10d35:	6a 0e                	push   $0xe
   10d37:	e8 13 fe ff ff       	call   10b4f <irq_install>
   10d3c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ16_MF, (uint32_t)exception_handler_fpu_error);
   10d3f:	b8 ed 01 01 00       	mov    $0x101ed,%eax
   10d44:	50                   	push   %eax
   10d45:	6a 10                	push   $0x10
   10d47:	e8 03 fe ff ff       	call   10b4f <irq_install>
   10d4c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ17_AC, (uint32_t)exception_handler_alignment_check);
   10d4f:	b8 0c 02 01 00       	mov    $0x1020c,%eax
   10d54:	50                   	push   %eax
   10d55:	6a 11                	push   $0x11
   10d57:	e8 f3 fd ff ff       	call   10b4f <irq_install>
   10d5c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ18_MC, (uint32_t)exception_handler_machine_check);
   10d5f:	b8 29 02 01 00       	mov    $0x10229,%eax
   10d64:	50                   	push   %eax
   10d65:	6a 12                	push   $0x12
   10d67:	e8 e3 fd ff ff       	call   10b4f <irq_install>
   10d6c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ19_XM, (uint32_t)exception_handler_smd_exception);
   10d6f:	b8 48 02 01 00       	mov    $0x10248,%eax
   10d74:	50                   	push   %eax
   10d75:	6a 13                	push   $0x13
   10d77:	e8 d3 fd ff ff       	call   10b4f <irq_install>
   10d7c:	83 c4 08             	add    $0x8,%esp
	irq_install(IRQ20_VE, (uint32_t)exception_handler_virtual_exception);
   10d7f:	b8 67 02 01 00       	mov    $0x10267,%eax
   10d84:	50                   	push   %eax
   10d85:	6a 14                	push   $0x14
   10d87:	e8 c3 fd ff ff       	call   10b4f <irq_install>
   10d8c:	83 c4 08             	add    $0x8,%esp

    init_pic();
   10d8f:	e8 eb fd ff ff       	call   10b7f <init_pic>
}
   10d94:	90                   	nop
   10d95:	c9                   	leave  
   10d96:	c3                   	ret    

00010d97 <irq_enable>:


// 中断的打开与关闭
void irq_enable(int irq_num) {
   10d97:	55                   	push   %ebp
   10d98:	89 e5                	mov    %esp,%ebp
   10d9a:	53                   	push   %ebx
   10d9b:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10d9e:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10da2:	7e 78                	jle    10e1c <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10da4:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10da8:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10dac:	7f 32                	jg     10de0 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10dae:	6a 21                	push   $0x21
   10db0:	e8 b7 fa ff ff       	call   1086c <inb>
   10db5:	83 c4 04             	add    $0x4,%esp
   10db8:	89 c2                	mov    %eax,%edx
   10dba:	8b 45 08             	mov    0x8(%ebp),%eax
   10dbd:	bb 01 00 00 00       	mov    $0x1,%ebx
   10dc2:	89 c1                	mov    %eax,%ecx
   10dc4:	d3 e3                	shl    %cl,%ebx
   10dc6:	89 d8                	mov    %ebx,%eax
   10dc8:	f7 d0                	not    %eax
   10dca:	21 d0                	and    %edx,%eax
   10dcc:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10dcf:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10dd3:	50                   	push   %eax
   10dd4:	6a 21                	push   $0x21
   10dd6:	e8 ae fa ff ff       	call   10889 <outb>
   10ddb:	83 c4 08             	add    $0x8,%esp
   10dde:	eb 3d                	jmp    10e1d <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10de0:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10de4:	68 a1 00 00 00       	push   $0xa1
   10de9:	e8 7e fa ff ff       	call   1086c <inb>
   10dee:	83 c4 04             	add    $0x4,%esp
   10df1:	89 c2                	mov    %eax,%edx
   10df3:	8b 45 08             	mov    0x8(%ebp),%eax
   10df6:	bb 01 00 00 00       	mov    $0x1,%ebx
   10dfb:	89 c1                	mov    %eax,%ecx
   10dfd:	d3 e3                	shl    %cl,%ebx
   10dff:	89 d8                	mov    %ebx,%eax
   10e01:	f7 d0                	not    %eax
   10e03:	21 d0                	and    %edx,%eax
   10e05:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10e08:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10e0c:	50                   	push   %eax
   10e0d:	68 a1 00 00 00       	push   $0xa1
   10e12:	e8 72 fa ff ff       	call   10889 <outb>
   10e17:	83 c4 08             	add    $0x8,%esp
   10e1a:	eb 01                	jmp    10e1d <irq_enable+0x86>
        return;
   10e1c:	90                   	nop
    }
}
   10e1d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e20:	c9                   	leave  
   10e21:	c3                   	ret    

00010e22 <irq_disable>:

void irq_disable(int irq_num) {
   10e22:	55                   	push   %ebp
   10e23:	89 e5                	mov    %esp,%ebp
   10e25:	53                   	push   %ebx
   10e26:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10e29:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10e2d:	7e 74                	jle    10ea3 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10e2f:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10e33:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e37:	7f 30                	jg     10e69 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10e39:	6a 21                	push   $0x21
   10e3b:	e8 2c fa ff ff       	call   1086c <inb>
   10e40:	83 c4 04             	add    $0x4,%esp
   10e43:	89 c3                	mov    %eax,%ebx
   10e45:	8b 45 08             	mov    0x8(%ebp),%eax
   10e48:	ba 01 00 00 00       	mov    $0x1,%edx
   10e4d:	89 c1                	mov    %eax,%ecx
   10e4f:	d3 e2                	shl    %cl,%edx
   10e51:	89 d0                	mov    %edx,%eax
   10e53:	09 d8                	or     %ebx,%eax
   10e55:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10e58:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10e5c:	50                   	push   %eax
   10e5d:	6a 21                	push   $0x21
   10e5f:	e8 25 fa ff ff       	call   10889 <outb>
   10e64:	83 c4 08             	add    $0x8,%esp
   10e67:	eb 3b                	jmp    10ea4 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10e69:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10e6d:	68 a1 00 00 00       	push   $0xa1
   10e72:	e8 f5 f9 ff ff       	call   1086c <inb>
   10e77:	83 c4 04             	add    $0x4,%esp
   10e7a:	89 c3                	mov    %eax,%ebx
   10e7c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7f:	ba 01 00 00 00       	mov    $0x1,%edx
   10e84:	89 c1                	mov    %eax,%ecx
   10e86:	d3 e2                	shl    %cl,%edx
   10e88:	89 d0                	mov    %edx,%eax
   10e8a:	09 d8                	or     %ebx,%eax
   10e8c:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10e8f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10e93:	50                   	push   %eax
   10e94:	68 a1 00 00 00       	push   $0xa1
   10e99:	e8 eb f9 ff ff       	call   10889 <outb>
   10e9e:	83 c4 08             	add    $0x8,%esp
   10ea1:	eb 01                	jmp    10ea4 <irq_disable+0x82>
        return;
   10ea3:	90                   	nop
    }
}
   10ea4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ea7:	c9                   	leave  
   10ea8:	c3                   	ret    

00010ea9 <irq_disable_global>:

void irq_disable_global(void) {
   10ea9:	55                   	push   %ebp
   10eaa:	89 e5                	mov    %esp,%ebp
    cli();
   10eac:	e8 85 f9 ff ff       	call   10836 <cli>
}
   10eb1:	90                   	nop
   10eb2:	5d                   	pop    %ebp
   10eb3:	c3                   	ret    

00010eb4 <irq_enable_global>:

void irq_enable_global(void) {
   10eb4:	55                   	push   %ebp
   10eb5:	89 e5                	mov    %esp,%ebp
    sti();
   10eb7:	e8 81 f9 ff ff       	call   1083d <sti>
}
   10ebc:	90                   	nop
   10ebd:	5d                   	pop    %ebp
   10ebe:	c3                   	ret    

00010ebf <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   10ebf:	55                   	push   %ebp
   10ec0:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10ec2:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8) 
   10ec6:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10eca:	7e 0f                	jle    10edb <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10ecc:	6a 20                	push   $0x20
   10ece:	68 a0 00 00 00       	push   $0xa0
   10ed3:	e8 b1 f9 ff ff       	call   10889 <outb>
   10ed8:	83 c4 08             	add    $0x8,%esp
    
    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10edb:	6a 20                	push   $0x20
   10edd:	6a 20                	push   $0x20
   10edf:	e8 a5 f9 ff ff       	call   10889 <outb>
   10ee4:	83 c4 08             	add    $0x8,%esp
}
   10ee7:	90                   	nop
   10ee8:	c9                   	leave  
   10ee9:	c3                   	ret    

00010eea <k_strcpy>:
#include <klib.h>


void k_strcpy(char * dest, const char * src) {
   10eea:	55                   	push   %ebp
   10eeb:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   10eed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ef1:	74 3b                	je     10f2e <k_strcpy+0x44>
   10ef3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ef7:	74 35                	je     10f2e <k_strcpy+0x44>
        return;
    }
    while (*dest && *src) {
   10ef9:	eb 17                	jmp    10f12 <k_strcpy+0x28>
        *dest++ = *src++;
   10efb:	8b 55 0c             	mov    0xc(%ebp),%edx
   10efe:	8d 42 01             	lea    0x1(%edx),%eax
   10f01:	89 45 0c             	mov    %eax,0xc(%ebp)
   10f04:	8b 45 08             	mov    0x8(%ebp),%eax
   10f07:	8d 48 01             	lea    0x1(%eax),%ecx
   10f0a:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10f0d:	0f b6 12             	movzbl (%edx),%edx
   10f10:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   10f12:	8b 45 08             	mov    0x8(%ebp),%eax
   10f15:	0f b6 00             	movzbl (%eax),%eax
   10f18:	84 c0                	test   %al,%al
   10f1a:	74 0a                	je     10f26 <k_strcpy+0x3c>
   10f1c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f1f:	0f b6 00             	movzbl (%eax),%eax
   10f22:	84 c0                	test   %al,%al
   10f24:	75 d5                	jne    10efb <k_strcpy+0x11>
    }
    *dest = '\0'; 
   10f26:	8b 45 08             	mov    0x8(%ebp),%eax
   10f29:	c6 00 00             	movb   $0x0,(%eax)
   10f2c:	eb 01                	jmp    10f2f <k_strcpy+0x45>
        return;
   10f2e:	90                   	nop
}
   10f2f:	5d                   	pop    %ebp
   10f30:	c3                   	ret    

00010f31 <k_strncpy>:
void k_strncpy(char * dest, const char * src, int size) {
   10f31:	55                   	push   %ebp
   10f32:	89 e5                	mov    %esp,%ebp
   10f34:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   10f37:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f3b:	74 61                	je     10f9e <k_strncpy+0x6d>
   10f3d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f41:	74 5b                	je     10f9e <k_strncpy+0x6d>
   10f43:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f47:	74 55                	je     10f9e <k_strncpy+0x6d>
        return;
    }
    char* d = dest;
   10f49:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char* s = src;
   10f4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f52:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size-- > 0 && (*s)) {
   10f55:	eb 17                	jmp    10f6e <k_strncpy+0x3d>
        *d++ = *s++;
   10f57:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10f5a:	8d 42 01             	lea    0x1(%edx),%eax
   10f5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10f60:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f63:	8d 48 01             	lea    0x1(%eax),%ecx
   10f66:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10f69:	0f b6 12             	movzbl (%edx),%edx
   10f6c:	88 10                	mov    %dl,(%eax)
    while(size-- > 0 && (*s)) {
   10f6e:	8b 45 10             	mov    0x10(%ebp),%eax
   10f71:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f74:	89 55 10             	mov    %edx,0x10(%ebp)
   10f77:	85 c0                	test   %eax,%eax
   10f79:	7e 0a                	jle    10f85 <k_strncpy+0x54>
   10f7b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10f7e:	0f b6 00             	movzbl (%eax),%eax
   10f81:	84 c0                	test   %al,%al
   10f83:	75 d2                	jne    10f57 <k_strncpy+0x26>
    } 
    if (size == 0) {
   10f85:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f89:	75 0b                	jne    10f96 <k_strncpy+0x65>
        *(d - 1) = '\0';
   10f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f8e:	83 e8 01             	sub    $0x1,%eax
   10f91:	c6 00 00             	movb   $0x0,(%eax)
   10f94:	eb 09                	jmp    10f9f <k_strncpy+0x6e>
    } else {
        *d = '\0';
   10f96:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f99:	c6 00 00             	movb   $0x0,(%eax)
   10f9c:	eb 01                	jmp    10f9f <k_strncpy+0x6e>
        return;
   10f9e:	90                   	nop
    }
}
   10f9f:	c9                   	leave  
   10fa0:	c3                   	ret    

00010fa1 <k_strncmp>:
int k_strncmp(const char * s1, const char * s2, int size) {
   10fa1:	55                   	push   %ebp
   10fa2:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) return -1;
   10fa4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fa8:	74 06                	je     10fb0 <k_strncmp+0xf>
   10faa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fae:	75 0f                	jne    10fbf <k_strncmp+0x1e>
   10fb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10fb5:	eb 62                	jmp    11019 <k_strncmp+0x78>

    while(*s1 && *s2 && (*s1 == *s2) && size) {
        s1 ++;
   10fb7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++;
   10fbb:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while(*s1 && *s2 && (*s1 == *s2) && size) {
   10fbf:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc2:	0f b6 00             	movzbl (%eax),%eax
   10fc5:	84 c0                	test   %al,%al
   10fc7:	74 20                	je     10fe9 <k_strncmp+0x48>
   10fc9:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fcc:	0f b6 00             	movzbl (%eax),%eax
   10fcf:	84 c0                	test   %al,%al
   10fd1:	74 16                	je     10fe9 <k_strncmp+0x48>
   10fd3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd6:	0f b6 10             	movzbl (%eax),%edx
   10fd9:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fdc:	0f b6 00             	movzbl (%eax),%eax
   10fdf:	38 c2                	cmp    %al,%dl
   10fe1:	75 06                	jne    10fe9 <k_strncmp+0x48>
   10fe3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10fe7:	75 ce                	jne    10fb7 <k_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   10fe9:	8b 45 08             	mov    0x8(%ebp),%eax
   10fec:	0f b6 00             	movzbl (%eax),%eax
   10fef:	84 c0                	test   %al,%al
   10ff1:	74 21                	je     11014 <k_strncmp+0x73>
   10ff3:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ff6:	0f b6 00             	movzbl (%eax),%eax
   10ff9:	84 c0                	test   %al,%al
   10ffb:	74 17                	je     11014 <k_strncmp+0x73>
   10ffd:	8b 45 08             	mov    0x8(%ebp),%eax
   11000:	0f b6 10             	movzbl (%eax),%edx
   11003:	8b 45 0c             	mov    0xc(%ebp),%eax
   11006:	0f b6 00             	movzbl (%eax),%eax
   11009:	38 c2                	cmp    %al,%dl
   1100b:	74 07                	je     11014 <k_strncmp+0x73>
   1100d:	b8 01 00 00 00       	mov    $0x1,%eax
   11012:	eb 05                	jmp    11019 <k_strncmp+0x78>
   11014:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11019:	5d                   	pop    %ebp
   1101a:	c3                   	ret    

0001101b <k_strlen>:
int k_strlen(const char *str) {
   1101b:	55                   	push   %ebp
   1101c:	89 e5                	mov    %esp,%ebp
   1101e:	83 ec 10             	sub    $0x10,%esp
    if (!str) {
   11021:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11025:	75 07                	jne    1102e <k_strlen+0x13>
        return 0;
   11027:	b8 00 00 00 00       	mov    $0x0,%eax
   1102c:	eb 26                	jmp    11054 <k_strlen+0x39>
    }

    int len = 0;
   1102e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    const char * c = str;
   11035:	8b 45 08             	mov    0x8(%ebp),%eax
   11038:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(*c ++ ) {
   1103b:	eb 04                	jmp    11041 <k_strlen+0x26>
        len++;
   1103d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while(*c ++ ) {
   11041:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11044:	8d 50 01             	lea    0x1(%eax),%edx
   11047:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1104a:	0f b6 00             	movzbl (%eax),%eax
   1104d:	84 c0                	test   %al,%al
   1104f:	75 ec                	jne    1103d <k_strlen+0x22>
    }

    return len;
   11051:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11054:	c9                   	leave  
   11055:	c3                   	ret    

00011056 <k_memcpy>:

void k_memcpy(void* dest, void* src, int size) {
   11056:	55                   	push   %ebp
   11057:	89 e5                	mov    %esp,%ebp
   11059:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || size) {
   1105c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11060:	74 40                	je     110a2 <k_memcpy+0x4c>
   11062:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11066:	74 3a                	je     110a2 <k_memcpy+0x4c>
   11068:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1106c:	75 34                	jne    110a2 <k_memcpy+0x4c>
        return;
    }
    uint8_t *s = (uint8_t*)src;
   1106e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11071:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t*)dest;
   11074:	8b 45 08             	mov    0x8(%ebp),%eax
   11077:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   1107a:	eb 17                	jmp    11093 <k_memcpy+0x3d>
        *d++ = *s++;
   1107c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1107f:	8d 42 01             	lea    0x1(%edx),%eax
   11082:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11085:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11088:	8d 48 01             	lea    0x1(%eax),%ecx
   1108b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1108e:	0f b6 12             	movzbl (%edx),%edx
   11091:	88 10                	mov    %dl,(%eax)
    while(size--) {
   11093:	8b 45 10             	mov    0x10(%ebp),%eax
   11096:	8d 50 ff             	lea    -0x1(%eax),%edx
   11099:	89 55 10             	mov    %edx,0x10(%ebp)
   1109c:	85 c0                	test   %eax,%eax
   1109e:	75 dc                	jne    1107c <k_memcpy+0x26>
   110a0:	eb 01                	jmp    110a3 <k_memcpy+0x4d>
        return;
   110a2:	90                   	nop
    }
}
   110a3:	c9                   	leave  
   110a4:	c3                   	ret    

000110a5 <k_memset>:
void k_memset(void* dest, uint8_t v, int size) {
   110a5:	55                   	push   %ebp
   110a6:	89 e5                	mov    %esp,%ebp
   110a8:	83 ec 14             	sub    $0x14,%esp
   110ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   110ae:	88 45 ec             	mov    %al,-0x14(%ebp)
    if(!dest || !size) return;
   110b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110b5:	74 2c                	je     110e3 <k_memset+0x3e>
   110b7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110bb:	74 26                	je     110e3 <k_memset+0x3e>

    uint8_t* d = (uint8_t*) dest;
   110bd:	8b 45 08             	mov    0x8(%ebp),%eax
   110c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(size--) {
   110c3:	eb 0f                	jmp    110d4 <k_memset+0x2f>
        *d++ = v;
   110c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110c8:	8d 50 01             	lea    0x1(%eax),%edx
   110cb:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110ce:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   110d2:	88 10                	mov    %dl,(%eax)
    while(size--) {
   110d4:	8b 45 10             	mov    0x10(%ebp),%eax
   110d7:	8d 50 ff             	lea    -0x1(%eax),%edx
   110da:	89 55 10             	mov    %edx,0x10(%ebp)
   110dd:	85 c0                	test   %eax,%eax
   110df:	75 e4                	jne    110c5 <k_memset+0x20>
   110e1:	eb 01                	jmp    110e4 <k_memset+0x3f>
    if(!dest || !size) return;
   110e3:	90                   	nop
    }
}
   110e4:	c9                   	leave  
   110e5:	c3                   	ret    

000110e6 <k_memcmp>:

int k_memcmp(void* d1, void* d2, int size) {
   110e6:	55                   	push   %ebp
   110e7:	89 e5                	mov    %esp,%ebp
   110e9:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || size) {
   110ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110f0:	74 0c                	je     110fe <k_memcmp+0x18>
   110f2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110f6:	74 06                	je     110fe <k_memcmp+0x18>
   110f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110fc:	74 07                	je     11105 <k_memcmp+0x1f>
        return 1;
   110fe:	b8 01 00 00 00       	mov    $0x1,%eax
   11103:	eb 43                	jmp    11148 <k_memcmp+0x62>
    }
    uint8_t *p_d1 = (uint8_t*)d1;
   11105:	8b 45 08             	mov    0x8(%ebp),%eax
   11108:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2= (uint8_t*)d2;
   1110b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1110e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(size--) {
   11111:	eb 23                	jmp    11136 <k_memcmp+0x50>
        if (*p_d1 ++ != *p_d2++)
   11113:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11116:	8d 50 01             	lea    0x1(%eax),%edx
   11119:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1111c:	0f b6 08             	movzbl (%eax),%ecx
   1111f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11122:	8d 50 01             	lea    0x1(%eax),%edx
   11125:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11128:	0f b6 00             	movzbl (%eax),%eax
   1112b:	38 c1                	cmp    %al,%cl
   1112d:	74 07                	je     11136 <k_memcmp+0x50>
        return 1;
   1112f:	b8 01 00 00 00       	mov    $0x1,%eax
   11134:	eb 12                	jmp    11148 <k_memcmp+0x62>
    while(size--) {
   11136:	8b 45 10             	mov    0x10(%ebp),%eax
   11139:	8d 50 ff             	lea    -0x1(%eax),%edx
   1113c:	89 55 10             	mov    %edx,0x10(%ebp)
   1113f:	85 c0                	test   %eax,%eax
   11141:	75 d0                	jne    11113 <k_memcmp+0x2d>
    }

    return 0;
   11143:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11148:	c9                   	leave  
   11149:	c3                   	ret    

0001114a <k_itoa>:

void k_itoa(char * buf, int num, int base) {
   1114a:	55                   	push   %ebp
   1114b:	89 e5                	mov    %esp,%ebp
   1114d:	83 ec 10             	sub    $0x10,%esp
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11150:	8b 45 08             	mov    0x8(%ebp),%eax
   11153:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   11156:	8b 45 0c             	mov    0xc(%ebp),%eax
   11159:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ( (base != 2) && (base != 8) && (base != 10) && (base != 16) ){
   1115c:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11160:	74 1d                	je     1117f <k_itoa+0x35>
   11162:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11166:	74 17                	je     1117f <k_itoa+0x35>
   11168:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1116c:	74 11                	je     1117f <k_itoa+0x35>
   1116e:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11172:	74 0b                	je     1117f <k_itoa+0x35>
        *p = '\0';
   11174:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11177:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1117a:	e9 a0 00 00 00       	jmp    1121f <k_itoa+0xd5>
    }
    if ( (num < 0) && (base == 10)) {
   1117f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11183:	79 12                	jns    11197 <k_itoa+0x4d>
   11185:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11189:	75 0c                	jne    11197 <k_itoa+0x4d>
        *p++ = '-';
   1118b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1118e:	8d 50 01             	lea    0x1(%eax),%edx
   11191:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11194:	c6 00 2d             	movb   $0x2d,(%eax)
    }

    do {
        char ch = num2ch[ num % base +15 ];
   11197:	8b 0d 00 00 20 00    	mov    0x200000,%ecx
   1119d:	8b 45 0c             	mov    0xc(%ebp),%eax
   111a0:	99                   	cltd   
   111a1:	f7 7d 10             	idivl  0x10(%ebp)
   111a4:	89 d0                	mov    %edx,%eax
   111a6:	83 c0 0f             	add    $0xf,%eax
   111a9:	01 c8                	add    %ecx,%eax
   111ab:	0f b6 00             	movzbl (%eax),%eax
   111ae:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   111b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111b4:	8d 50 01             	lea    0x1(%eax),%edx
   111b7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111ba:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   111be:	88 10                	mov    %dl,(%eax)
        num /= base;
   111c0:	8b 45 0c             	mov    0xc(%ebp),%eax
   111c3:	99                   	cltd   
   111c4:	f7 7d 10             	idivl  0x10(%ebp)
   111c7:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while(num);
   111ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111ce:	75 c7                	jne    11197 <k_itoa+0x4d>

    *p-- = '\0';
   111d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111d3:	8d 50 ff             	lea    -0x1(%eax),%edx
   111d6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111d9:	c6 00 00             	movb   $0x0,(%eax)

    char *start = (old_num > 0) ? buf : buf + 1;
   111dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111e0:	7f 08                	jg     111ea <k_itoa+0xa0>
   111e2:	8b 45 08             	mov    0x8(%ebp),%eax
   111e5:	83 c0 01             	add    $0x1,%eax
   111e8:	eb 03                	jmp    111ed <k_itoa+0xa3>
   111ea:	8b 45 08             	mov    0x8(%ebp),%eax
   111ed:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while(start < p) {
   111f0:	eb 25                	jmp    11217 <k_itoa+0xcd>
        char ch = *start;
   111f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111f5:	0f b6 00             	movzbl (%eax),%eax
   111f8:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   111fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111fe:	0f b6 10             	movzbl (%eax),%edx
   11201:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11204:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11206:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11209:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1120d:	88 10                	mov    %dl,(%eax)

        p--;
   1120f:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11213:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while(start < p) {
   11217:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1121a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1121d:	72 d3                	jb     111f2 <k_itoa+0xa8>
    }
}
   1121f:	c9                   	leave  
   11220:	c3                   	ret    

00011221 <k_vsprint>:

void k_vsprint(char *buf, const char *fmt, va_list args) {
   11221:	55                   	push   %ebp
   11222:	89 e5                	mov    %esp,%ebp
   11224:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   11227:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    char* curr = buf;
   1122e:	8b 45 08             	mov    0x8(%ebp),%eax
   11231:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while((ch = *fmt++)) {
   11234:	e9 19 01 00 00       	jmp    11352 <k_vsprint+0x131>
        switch (state) {
   11239:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1123c:	85 c0                	test   %eax,%eax
   1123e:	74 0a                	je     1124a <k_vsprint+0x29>
   11240:	83 f8 01             	cmp    $0x1,%eax
   11243:	74 2b                	je     11270 <k_vsprint+0x4f>
   11245:	e9 07 01 00 00       	jmp    11351 <k_vsprint+0x130>
        case NORMAL:
            if(ch == '%') {
   1124a:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1124e:	75 0c                	jne    1125c <k_vsprint+0x3b>
                state = READ_FMT;
   11250:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11257:	e9 f6 00 00 00       	jmp    11352 <k_vsprint+0x131>
            } else {
                *curr++ = ch;
   1125c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1125f:	8d 50 01             	lea    0x1(%eax),%edx
   11262:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11265:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11269:	88 10                	mov    %dl,(%eax)
            }
            break;
   1126b:	e9 e2 00 00 00       	jmp    11352 <k_vsprint+0x131>
        case READ_FMT:
            if (ch == 'd') {
   11270:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11274:	75 31                	jne    112a7 <k_vsprint+0x86>
                int num  = va_arg(args, int);
   11276:	8b 45 10             	mov    0x10(%ebp),%eax
   11279:	8d 50 04             	lea    0x4(%eax),%edx
   1127c:	89 55 10             	mov    %edx,0x10(%ebp)
   1127f:	8b 00                	mov    (%eax),%eax
   11281:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                k_itoa(curr, num, 10);
   11284:	6a 0a                	push   $0xa
   11286:	ff 75 e4             	pushl  -0x1c(%ebp)
   11289:	ff 75 f8             	pushl  -0x8(%ebp)
   1128c:	e8 b9 fe ff ff       	call   1114a <k_itoa>
   11291:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   11294:	ff 75 f8             	pushl  -0x8(%ebp)
   11297:	e8 7f fd ff ff       	call   1101b <k_strlen>
   1129c:	83 c4 04             	add    $0x4,%esp
   1129f:	01 45 f8             	add    %eax,-0x8(%ebp)
   112a2:	e9 a1 00 00 00       	jmp    11348 <k_vsprint+0x127>
                
            }else if (ch == 'x') {
   112a7:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   112ab:	75 2e                	jne    112db <k_vsprint+0xba>
                int num  = va_arg(args, int);
   112ad:	8b 45 10             	mov    0x10(%ebp),%eax
   112b0:	8d 50 04             	lea    0x4(%eax),%edx
   112b3:	89 55 10             	mov    %edx,0x10(%ebp)
   112b6:	8b 00                	mov    (%eax),%eax
   112b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
                k_itoa(curr, num, 16);
   112bb:	6a 10                	push   $0x10
   112bd:	ff 75 e8             	pushl  -0x18(%ebp)
   112c0:	ff 75 f8             	pushl  -0x8(%ebp)
   112c3:	e8 82 fe ff ff       	call   1114a <k_itoa>
   112c8:	83 c4 0c             	add    $0xc,%esp
                curr += k_strlen(curr);
   112cb:	ff 75 f8             	pushl  -0x8(%ebp)
   112ce:	e8 48 fd ff ff       	call   1101b <k_strlen>
   112d3:	83 c4 04             	add    $0x4,%esp
   112d6:	01 45 f8             	add    %eax,-0x8(%ebp)
   112d9:	eb 6d                	jmp    11348 <k_vsprint+0x127>

            }else if (ch == 'c') {
   112db:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   112df:	75 1f                	jne    11300 <k_vsprint+0xdf>
                char c  = va_arg(args, int);
   112e1:	8b 45 10             	mov    0x10(%ebp),%eax
   112e4:	8d 50 04             	lea    0x4(%eax),%edx
   112e7:	89 55 10             	mov    %edx,0x10(%ebp)
   112ea:	8b 00                	mov    (%eax),%eax
   112ec:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   112ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112f2:	8d 50 01             	lea    0x1(%eax),%edx
   112f5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112f8:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   112fc:	88 10                	mov    %dl,(%eax)
   112fe:	eb 48                	jmp    11348 <k_vsprint+0x127>

            }else if (ch == 's') {
   11300:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11304:	75 42                	jne    11348 <k_vsprint+0x127>
                const char* str = va_arg(args, char*);
   11306:	8b 45 10             	mov    0x10(%ebp),%eax
   11309:	8d 50 04             	lea    0x4(%eax),%edx
   1130c:	89 55 10             	mov    %edx,0x10(%ebp)
   1130f:	8b 00                	mov    (%eax),%eax
   11311:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = k_strlen(str);
   11314:	ff 75 f4             	pushl  -0xc(%ebp)
   11317:	e8 ff fc ff ff       	call   1101b <k_strlen>
   1131c:	83 c4 04             	add    $0x4,%esp
   1131f:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while(len--) {
   11322:	eb 17                	jmp    1133b <k_vsprint+0x11a>
                    *curr++ = *str++;
   11324:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11327:	8d 42 01             	lea    0x1(%edx),%eax
   1132a:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1132d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11330:	8d 48 01             	lea    0x1(%eax),%ecx
   11333:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11336:	0f b6 12             	movzbl (%edx),%edx
   11339:	88 10                	mov    %dl,(%eax)
                while(len--) {
   1133b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1133e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11341:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11344:	85 c0                	test   %eax,%eax
   11346:	75 dc                	jne    11324 <k_vsprint+0x103>
                }
            }
            state = NORMAL;
   11348:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   1134f:	eb 01                	jmp    11352 <k_vsprint+0x131>
        
        default:
            break;
   11351:	90                   	nop
    while((ch = *fmt++)) {
   11352:	8b 45 0c             	mov    0xc(%ebp),%eax
   11355:	8d 50 01             	lea    0x1(%eax),%edx
   11358:	89 55 0c             	mov    %edx,0xc(%ebp)
   1135b:	0f b6 00             	movzbl (%eax),%eax
   1135e:	88 45 ef             	mov    %al,-0x11(%ebp)
   11361:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11365:	0f 85 ce fe ff ff    	jne    11239 <k_vsprint+0x18>
        }
    }
   1136b:	90                   	nop
   1136c:	c9                   	leave  
   1136d:	c3                   	ret    

0001136e <list_is_empty>:
static inline int list_is_empty (list_t* list) {
   1136e:	55                   	push   %ebp
   1136f:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   11371:	8b 45 08             	mov    0x8(%ebp),%eax
   11374:	8b 40 08             	mov    0x8(%eax),%eax
   11377:	85 c0                	test   %eax,%eax
   11379:	0f 94 c0             	sete   %al
   1137c:	0f b6 c0             	movzbl %al,%eax
}
   1137f:	5d                   	pop    %ebp
   11380:	c3                   	ret    

00011381 <list_init>:
#include <list.h>

void list_init(list_t* list) {
   11381:	55                   	push   %ebp
   11382:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t*)0;
   11384:	8b 45 08             	mov    0x8(%ebp),%eax
   11387:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1138e:	8b 45 08             	mov    0x8(%ebp),%eax
   11391:	8b 50 04             	mov    0x4(%eax),%edx
   11394:	8b 45 08             	mov    0x8(%ebp),%eax
   11397:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11399:	8b 45 08             	mov    0x8(%ebp),%eax
   1139c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   113a3:	90                   	nop
   113a4:	5d                   	pop    %ebp
   113a5:	c3                   	ret    

000113a6 <list_insert_first>:

void list_insert_first (list_t* list, list_node_t* node) {
   113a6:	55                   	push   %ebp
   113a7:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   113a9:	8b 45 08             	mov    0x8(%ebp),%eax
   113ac:	8b 10                	mov    (%eax),%edx
   113ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   113b1:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t*)0;
   113b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   113b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    if(list_is_empty(list)) {
   113bd:	ff 75 08             	pushl  0x8(%ebp)
   113c0:	e8 a9 ff ff ff       	call   1136e <list_is_empty>
   113c5:	83 c4 04             	add    $0x4,%esp
   113c8:	85 c0                	test   %eax,%eax
   113ca:	74 15                	je     113e1 <list_insert_first+0x3b>
        list->last = list->first = node;
   113cc:	8b 45 08             	mov    0x8(%ebp),%eax
   113cf:	8b 55 0c             	mov    0xc(%ebp),%edx
   113d2:	89 10                	mov    %edx,(%eax)
   113d4:	8b 45 08             	mov    0x8(%ebp),%eax
   113d7:	8b 10                	mov    (%eax),%edx
   113d9:	8b 45 08             	mov    0x8(%ebp),%eax
   113dc:	89 50 04             	mov    %edx,0x4(%eax)
   113df:	eb 12                	jmp    113f3 <list_insert_first+0x4d>
    } else {
        list->first->pre = node;
   113e1:	8b 45 08             	mov    0x8(%ebp),%eax
   113e4:	8b 00                	mov    (%eax),%eax
   113e6:	8b 55 0c             	mov    0xc(%ebp),%edx
   113e9:	89 10                	mov    %edx,(%eax)
        list->first = node;
   113eb:	8b 45 08             	mov    0x8(%ebp),%eax
   113ee:	8b 55 0c             	mov    0xc(%ebp),%edx
   113f1:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   113f3:	8b 45 08             	mov    0x8(%ebp),%eax
   113f6:	8b 40 08             	mov    0x8(%eax),%eax
   113f9:	8d 50 01             	lea    0x1(%eax),%edx
   113fc:	8b 45 08             	mov    0x8(%ebp),%eax
   113ff:	89 50 08             	mov    %edx,0x8(%eax)
}
   11402:	90                   	nop
   11403:	c9                   	leave  
   11404:	c3                   	ret    

00011405 <list_insert_last>:

void list_insert_last (list_t* list, list_node_t* node) {
   11405:	55                   	push   %ebp
   11406:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11408:	8b 45 08             	mov    0x8(%ebp),%eax
   1140b:	8b 50 04             	mov    0x4(%eax),%edx
   1140e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11411:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11413:	8b 45 0c             	mov    0xc(%ebp),%eax
   11416:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(list_is_empty(list)) {
   1141d:	ff 75 08             	pushl  0x8(%ebp)
   11420:	e8 49 ff ff ff       	call   1136e <list_is_empty>
   11425:	83 c4 04             	add    $0x4,%esp
   11428:	85 c0                	test   %eax,%eax
   1142a:	74 16                	je     11442 <list_insert_last+0x3d>
        list->first = list->last = node;
   1142c:	8b 45 08             	mov    0x8(%ebp),%eax
   1142f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11432:	89 50 04             	mov    %edx,0x4(%eax)
   11435:	8b 45 08             	mov    0x8(%ebp),%eax
   11438:	8b 50 04             	mov    0x4(%eax),%edx
   1143b:	8b 45 08             	mov    0x8(%ebp),%eax
   1143e:	89 10                	mov    %edx,(%eax)
   11440:	eb 15                	jmp    11457 <list_insert_last+0x52>
    } else {
        list->last->next = node;
   11442:	8b 45 08             	mov    0x8(%ebp),%eax
   11445:	8b 40 04             	mov    0x4(%eax),%eax
   11448:	8b 55 0c             	mov    0xc(%ebp),%edx
   1144b:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   1144e:	8b 45 08             	mov    0x8(%ebp),%eax
   11451:	8b 55 0c             	mov    0xc(%ebp),%edx
   11454:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   11457:	8b 45 08             	mov    0x8(%ebp),%eax
   1145a:	8b 40 08             	mov    0x8(%eax),%eax
   1145d:	8d 50 01             	lea    0x1(%eax),%edx
   11460:	8b 45 08             	mov    0x8(%ebp),%eax
   11463:	89 50 08             	mov    %edx,0x8(%eax)
}
   11466:	90                   	nop
   11467:	c9                   	leave  
   11468:	c3                   	ret    

00011469 <list_delete_first>:


list_node_t* list_delete_first (list_t* list) {
   11469:	55                   	push   %ebp
   1146a:	89 e5                	mov    %esp,%ebp
   1146c:	83 ec 10             	sub    $0x10,%esp
    if(list_is_empty(list)) {
   1146f:	ff 75 08             	pushl  0x8(%ebp)
   11472:	e8 f7 fe ff ff       	call   1136e <list_is_empty>
   11477:	83 c4 04             	add    $0x4,%esp
   1147a:	85 c0                	test   %eax,%eax
   1147c:	74 07                	je     11485 <list_delete_first+0x1c>
        return (list_node_t*)0;
   1147e:	b8 00 00 00 00       	mov    $0x0,%eax
   11483:	eb 5b                	jmp    114e0 <list_delete_first+0x77>
    }

    list_node_t* remove_node = list->first;
   11485:	8b 45 08             	mov    0x8(%ebp),%eax
   11488:	8b 00                	mov    (%eax),%eax
   1148a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list->first = remove_node->next;
   1148d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11490:	8b 50 04             	mov    0x4(%eax),%edx
   11493:	8b 45 08             	mov    0x8(%ebp),%eax
   11496:	89 10                	mov    %edx,(%eax)

    if( list->first == (list_node_t*)0 ) {
   11498:	8b 45 08             	mov    0x8(%ebp),%eax
   1149b:	8b 00                	mov    (%eax),%eax
   1149d:	85 c0                	test   %eax,%eax
   1149f:	75 0c                	jne    114ad <list_delete_first+0x44>
        list->last = (list_node_t*)0;
   114a1:	8b 45 08             	mov    0x8(%ebp),%eax
   114a4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   114ab:	eb 0c                	jmp    114b9 <list_delete_first+0x50>
    } else {
        remove_node->next->pre = (list_node_t*)0;
   114ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114b0:	8b 40 04             	mov    0x4(%eax),%eax
   114b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        //list->first->pre = (list_node_t*)0;
    }

    remove_node->pre = remove_node->next = (list_node_t*)0;
   114b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114bc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   114c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114c6:	8b 50 04             	mov    0x4(%eax),%edx
   114c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114cc:	89 10                	mov    %edx,(%eax)
    list->count--;
   114ce:	8b 45 08             	mov    0x8(%ebp),%eax
   114d1:	8b 40 08             	mov    0x8(%eax),%eax
   114d4:	8d 50 ff             	lea    -0x1(%eax),%edx
   114d7:	8b 45 08             	mov    0x8(%ebp),%eax
   114da:	89 50 08             	mov    %edx,0x8(%eax)

    return remove_node;
   114dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   114e0:	c9                   	leave  
   114e1:	c3                   	ret    

000114e2 <list_delete>:

list_node_t* list_delete (list_t* list, list_node_t* node) {
   114e2:	55                   	push   %ebp
   114e3:	89 e5                	mov    %esp,%ebp
    if(node == list->first) {
   114e5:	8b 45 08             	mov    0x8(%ebp),%eax
   114e8:	8b 00                	mov    (%eax),%eax
   114ea:	39 45 0c             	cmp    %eax,0xc(%ebp)
   114ed:	75 0b                	jne    114fa <list_delete+0x18>
        list->first = node->next;
   114ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   114f2:	8b 50 04             	mov    0x4(%eax),%edx
   114f5:	8b 45 08             	mov    0x8(%ebp),%eax
   114f8:	89 10                	mov    %edx,(%eax)
    }
    if(node == list->last) {
   114fa:	8b 45 08             	mov    0x8(%ebp),%eax
   114fd:	8b 40 04             	mov    0x4(%eax),%eax
   11500:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11503:	75 0b                	jne    11510 <list_delete+0x2e>
        list->last = node->pre;
   11505:	8b 45 0c             	mov    0xc(%ebp),%eax
   11508:	8b 10                	mov    (%eax),%edx
   1150a:	8b 45 08             	mov    0x8(%ebp),%eax
   1150d:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if(node->pre) {
   11510:	8b 45 0c             	mov    0xc(%ebp),%eax
   11513:	8b 00                	mov    (%eax),%eax
   11515:	85 c0                	test   %eax,%eax
   11517:	74 0e                	je     11527 <list_delete+0x45>
        node->pre->next = node->next;
   11519:	8b 45 0c             	mov    0xc(%ebp),%eax
   1151c:	8b 00                	mov    (%eax),%eax
   1151e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11521:	8b 52 04             	mov    0x4(%edx),%edx
   11524:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if(node->next) {
   11527:	8b 45 0c             	mov    0xc(%ebp),%eax
   1152a:	8b 40 04             	mov    0x4(%eax),%eax
   1152d:	85 c0                	test   %eax,%eax
   1152f:	74 0d                	je     1153e <list_delete+0x5c>
        node->next->pre = node->pre;
   11531:	8b 45 0c             	mov    0xc(%ebp),%eax
   11534:	8b 40 04             	mov    0x4(%eax),%eax
   11537:	8b 55 0c             	mov    0xc(%ebp),%edx
   1153a:	8b 12                	mov    (%edx),%edx
   1153c:	89 10                	mov    %edx,(%eax)
    }

    node->pre = node->next = (list_node_t*)0;
   1153e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11541:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11548:	8b 45 0c             	mov    0xc(%ebp),%eax
   1154b:	8b 50 04             	mov    0x4(%eax),%edx
   1154e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11551:	89 10                	mov    %edx,(%eax)

    list->count--;
   11553:	8b 45 08             	mov    0x8(%ebp),%eax
   11556:	8b 40 08             	mov    0x8(%eax),%eax
   11559:	8d 50 ff             	lea    -0x1(%eax),%edx
   1155c:	8b 45 08             	mov    0x8(%ebp),%eax
   1155f:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11562:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11565:	5d                   	pop    %ebp
   11566:	c3                   	ret    

00011567 <inb>:
static inline uint8_t inb(uint16_t  port) {
   11567:	55                   	push   %ebp
   11568:	89 e5                	mov    %esp,%ebp
   1156a:	83 ec 14             	sub    $0x14,%esp
   1156d:	8b 45 08             	mov    0x8(%ebp),%eax
   11570:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   11574:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11578:	89 c2                	mov    %eax,%edx
   1157a:	ec                   	in     (%dx),%al
   1157b:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   1157e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11582:	c9                   	leave  
   11583:	c3                   	ret    

00011584 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   11584:	55                   	push   %ebp
   11585:	89 e5                	mov    %esp,%ebp
   11587:	83 ec 08             	sub    $0x8,%esp
   1158a:	8b 55 08             	mov    0x8(%ebp),%edx
   1158d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11590:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11594:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   11597:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1159b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1159f:	ee                   	out    %al,(%dx)
}
   115a0:	90                   	nop
   115a1:	c9                   	leave  
   115a2:	c3                   	ret    

000115a3 <log_init>:
#include <log.h>

#define COM1_PORT       0x3f8

void log_init() {
   115a3:	55                   	push   %ebp
   115a4:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   115a6:	6a 00                	push   $0x0
   115a8:	68 f9 03 00 00       	push   $0x3f9
   115ad:	e8 d2 ff ff ff       	call   11584 <outb>
   115b2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   115b5:	68 80 00 00 00       	push   $0x80
   115ba:	68 fb 03 00 00       	push   $0x3fb
   115bf:	e8 c0 ff ff ff       	call   11584 <outb>
   115c4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   115c7:	6a 03                	push   $0x3
   115c9:	68 f8 03 00 00       	push   $0x3f8
   115ce:	e8 b1 ff ff ff       	call   11584 <outb>
   115d3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   115d6:	6a 00                	push   $0x0
   115d8:	68 f9 03 00 00       	push   $0x3f9
   115dd:	e8 a2 ff ff ff       	call   11584 <outb>
   115e2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   115e5:	6a 03                	push   $0x3
   115e7:	68 fb 03 00 00       	push   $0x3fb
   115ec:	e8 93 ff ff ff       	call   11584 <outb>
   115f1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xc7);
   115f4:	68 c7 00 00 00       	push   $0xc7
   115f9:	68 fa 03 00 00       	push   $0x3fa
   115fe:	e8 81 ff ff ff       	call   11584 <outb>
   11603:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0f);
   11606:	6a 0f                	push   $0xf
   11608:	68 fc 03 00 00       	push   $0x3fc
   1160d:	e8 72 ff ff ff       	call   11584 <outb>
   11612:	83 c4 08             	add    $0x8,%esp
}
   11615:	90                   	nop
   11616:	c9                   	leave  
   11617:	c3                   	ret    

00011618 <klog>:


void klog(const char* fmt, ...) {
   11618:	55                   	push   %ebp
   11619:	89 e5                	mov    %esp,%ebp
   1161b:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char buf[128];
    k_memset(buf, 0, 128);
   11621:	83 ec 04             	sub    $0x4,%esp
   11624:	68 80 00 00 00       	push   $0x80
   11629:	6a 00                	push   $0x0
   1162b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11631:	50                   	push   %eax
   11632:	e8 6e fa ff ff       	call   110a5 <k_memset>
   11637:	83 c4 10             	add    $0x10,%esp
    va_list args;
    va_start(args, fmt);
   1163a:	8d 45 0c             	lea    0xc(%ebp),%eax
   1163d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    k_vsprint(buf, fmt, args);
   11643:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11649:	83 ec 04             	sub    $0x4,%esp
   1164c:	50                   	push   %eax
   1164d:	ff 75 08             	pushl  0x8(%ebp)
   11650:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11656:	50                   	push   %eax
   11657:	e8 c5 fb ff ff       	call   11221 <k_vsprint>
   1165c:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = buf;
   1165f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11665:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(*p != '\0') {
   11668:	eb 3b                	jmp    116a5 <klog+0x8d>
        while( (inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1166a:	90                   	nop
   1166b:	83 ec 0c             	sub    $0xc,%esp
   1166e:	68 fd 03 00 00       	push   $0x3fd
   11673:	e8 ef fe ff ff       	call   11567 <inb>
   11678:	83 c4 10             	add    $0x10,%esp
   1167b:	0f b6 c0             	movzbl %al,%eax
   1167e:	83 e0 40             	and    $0x40,%eax
   11681:	85 c0                	test   %eax,%eax
   11683:	74 e6                	je     1166b <klog+0x53>
        outb(COM1_PORT, *p++);
   11685:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11688:	8d 50 01             	lea    0x1(%eax),%edx
   1168b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1168e:	0f b6 00             	movzbl (%eax),%eax
   11691:	0f b6 c0             	movzbl %al,%eax
   11694:	83 ec 08             	sub    $0x8,%esp
   11697:	50                   	push   %eax
   11698:	68 f8 03 00 00       	push   $0x3f8
   1169d:	e8 e2 fe ff ff       	call   11584 <outb>
   116a2:	83 c4 10             	add    $0x10,%esp
    while(*p != '\0') {
   116a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116a8:	0f b6 00             	movzbl (%eax),%eax
   116ab:	84 c0                	test   %al,%al
   116ad:	75 bb                	jne    1166a <klog+0x52>
    }
    outb(COM1_PORT, '\r');  // 回到0列
   116af:	83 ec 08             	sub    $0x8,%esp
   116b2:	6a 0d                	push   $0xd
   116b4:	68 f8 03 00 00       	push   $0x3f8
   116b9:	e8 c6 fe ff ff       	call   11584 <outb>
   116be:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');  // 向下一行
   116c1:	83 ec 08             	sub    $0x8,%esp
   116c4:	6a 0a                	push   $0xa
   116c6:	68 f8 03 00 00       	push   $0x3f8
   116cb:	e8 b4 fe ff ff       	call   11584 <outb>
   116d0:	83 c4 10             	add    $0x10,%esp
}
   116d3:	90                   	nop
   116d4:	c9                   	leave  
   116d5:	c3                   	ret    

000116d6 <task_switch_from_to>:
#include <task.h>

void simple_switch(uint32_t **from, uint32_t* to);


void task_switch_from_to(task_t* from, task_t* to) {
   116d6:	55                   	push   %ebp
   116d7:	89 e5                	mov    %esp,%ebp
   116d9:	83 ec 08             	sub    $0x8,%esp

    // 使用 tss 机制
    // far_jump(to->tss_sel, 0);

    // 使用直接跳转机制
    simple_switch(&from->stack, to->stack);
   116dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   116df:	8b 10                	mov    (%eax),%edx
   116e1:	8b 45 08             	mov    0x8(%ebp),%eax
   116e4:	83 ec 08             	sub    $0x8,%esp
   116e7:	52                   	push   %edx
   116e8:	50                   	push   %eax
   116e9:	e8 b7 eb ff ff       	call   102a5 <simple_switch>
   116ee:	83 c4 10             	add    $0x10,%esp
}
   116f1:	90                   	nop
   116f2:	c9                   	leave  
   116f3:	c3                   	ret    

000116f4 <task_init>:


int task_init(task_t* task, uint32_t entry, uint32_t esp) {
   116f4:	55                   	push   %ebp
   116f5:	89 e5                	mov    %esp,%ebp
   116f7:	83 ec 10             	sub    $0x10,%esp
    // 使用 tss 机制
    // tss_init(task, entry, esp);

    // 使用直接跳转机制

    uint32_t* pesp = (uint32_t*)esp;
   116fa:	8b 45 10             	mov    0x10(%ebp),%eax
   116fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if(pesp) {
   11700:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11704:	74 48                	je     1174e <task_init+0x5a>
        *(--pesp) = entry;
   11706:	83 6d fc 04          	subl   $0x4,-0x4(%ebp)
   1170a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1170d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11710:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;
   11712:	83 6d fc 04          	subl   $0x4,-0x4(%ebp)
   11716:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11719:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   1171f:	83 6d fc 04          	subl   $0x4,-0x4(%ebp)
   11723:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11726:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   1172c:	83 6d fc 04          	subl   $0x4,-0x4(%ebp)
   11730:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11733:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   11739:	83 6d fc 04          	subl   $0x4,-0x4(%ebp)
   1173d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11740:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        task->stack = pesp;
   11746:	8b 45 08             	mov    0x8(%ebp),%eax
   11749:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1174c:	89 10                	mov    %edx,(%eax)
    }

    return 0;
   1174e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11753:	c9                   	leave  
   11754:	c3                   	ret    

00011755 <tss_init>:


int tss_init(task_t* task, uint32_t entry, uint32_t esp) {
   11755:	55                   	push   %ebp
   11756:	89 e5                	mov    %esp,%ebp
   11758:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc();
   1175b:	e8 75 ec ff ff       	call   103d5 <gdt_alloc_desc>
   11760:	89 45 f4             	mov    %eax,-0xc(%ebp)


    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), 
   11763:	8b 45 08             	mov    0x8(%ebp),%eax
   11766:	83 c0 04             	add    $0x4,%eax
   11769:	68 89 00 00 00       	push   $0x89
   1176e:	6a 68                	push   $0x68
   11770:	50                   	push   %eax
   11771:	ff 75 f4             	pushl  -0xc(%ebp)
   11774:	e8 69 eb ff ff       	call   102e2 <segment_desc_set>
   11779:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS
    );

    k_memset(&task->tss, 0, sizeof(tss_t));
   1177c:	8b 45 08             	mov    0x8(%ebp),%eax
   1177f:	83 c0 04             	add    $0x4,%eax
   11782:	83 ec 04             	sub    $0x4,%esp
   11785:	6a 68                	push   $0x68
   11787:	6a 00                	push   $0x0
   11789:	50                   	push   %eax
   1178a:	e8 16 f9 ff ff       	call   110a5 <k_memset>
   1178f:	83 c4 10             	add    $0x10,%esp

    task->tss.eip  = entry;
   11792:	8b 45 08             	mov    0x8(%ebp),%eax
   11795:	8b 55 0c             	mov    0xc(%ebp),%edx
   11798:	89 50 24             	mov    %edx,0x24(%eax)
    task->tss.esp  = esp;
   1179b:	8b 45 08             	mov    0x8(%ebp),%eax
   1179e:	8b 55 10             	mov    0x10(%ebp),%edx
   117a1:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->tss.esp0 = esp;
   117a4:	8b 45 08             	mov    0x8(%ebp),%eax
   117a7:	8b 55 10             	mov    0x10(%ebp),%edx
   117aa:	89 50 08             	mov    %edx,0x8(%eax)

    task->tss.ss  = KERNEL_SELECTOR_DS;
   117ad:	8b 45 08             	mov    0x8(%ebp),%eax
   117b0:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   117b7:	8b 45 08             	mov    0x8(%ebp),%eax
   117ba:	c7 40 0c 10 00 00 00 	movl   $0x10,0xc(%eax)
    task->tss.es  = KERNEL_SELECTOR_DS;
   117c1:	8b 45 08             	mov    0x8(%ebp),%eax
   117c4:	c7 40 4c 10 00 00 00 	movl   $0x10,0x4c(%eax)
    task->tss.ds  = KERNEL_SELECTOR_DS;
   117cb:	8b 45 08             	mov    0x8(%ebp),%eax
   117ce:	c7 40 58 10 00 00 00 	movl   $0x10,0x58(%eax)
    task->tss.fs  = KERNEL_SELECTOR_DS;
   117d5:	8b 45 08             	mov    0x8(%ebp),%eax
   117d8:	c7 40 5c 10 00 00 00 	movl   $0x10,0x5c(%eax)
    task->tss.gs  = KERNEL_SELECTOR_DS;
   117df:	8b 45 08             	mov    0x8(%ebp),%eax
   117e2:	c7 40 60 10 00 00 00 	movl   $0x10,0x60(%eax)

    task->tss.cs  = KERNEL_SELECTOR_CS;
   117e9:	8b 45 08             	mov    0x8(%ebp),%eax
   117ec:	c7 40 50 08 00 00 00 	movl   $0x8,0x50(%eax)

    task->tss.eflags = EFLAGES_DEFAULT | EFLAGS_IF;
   117f3:	8b 45 08             	mov    0x8(%ebp),%eax
   117f6:	c7 40 28 02 02 00 00 	movl   $0x202,0x28(%eax)

    task->tss_sel = tss_sel;
   117fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11800:	8b 45 08             	mov    0x8(%ebp),%eax
   11803:	89 50 6c             	mov    %edx,0x6c(%eax)
}
   11806:	90                   	nop
   11807:	c9                   	leave  
   11808:	c3                   	ret    
